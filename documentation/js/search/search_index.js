var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.216,1,2.094]],["body/controllers/AppController.html",[0,1.978,1,3.404,2,1.738,3,0.503,4,0.447,5,0.447,6,3.557,7,0.563,8,2.333,9,4.978,10,1.161,11,0.031,12,0.829,13,4.253,14,1.889,15,1.322,16,0.622,17,1.259,18,3.021,19,3.557,20,0.503,21,0.061,22,2.483,23,3.099,24,1.889,25,4.253,26,0.025,27,0.025]],["title/modules/AppModule.html",[28,1.32,29,2.094]],["body/modules/AppModule.html",[0,1.083,1,3.042,2,1.656,3,0.34,4,0.302,5,0.426,11,0.031,16,0.692,17,0.851,18,2.956,19,2.405,20,0.34,21,0.042,26,0.019,27,0.019,28,2.196,29,3.988,30,1.393,31,1.393,32,1.678,33,1.678,34,1.393,35,2.74,36,1.678,37,2.405,38,2.405,39,2.405,40,2.956,41,3.255,42,2.701,43,2.366,44,1.678,45,1.678,46,2.875,47,2.74,48,3.303,49,2.875,50,2.875,51,2.875,52,2.875,53,2.875,54,2.095,55,1.678,56,2.875,57,2.875,58,2.095,59,2.405,60,2.875,61,1.393,62,2.875,63,2.875,64,2.875,65,2.953,66,2.875,67,0.512,68,4.053,69,2.875,70,2.875,71,2.875,72,2.875,73,2.095,74,1.678,75,2.875,76,2.095,77,1.863,78,2.405,79,1.524,80,2.875,81,2.875,82,1.963,83,2.875,84,1.277,85,2.405,86,2.875,87,2.953,88,2.875,89,1.863,90,0.999,91,1.863,92,2.875,93,2.875,94,2.875,95,2.095]],["title/injectables/AppService.html",[18,1.713,96,1.32]],["body/injectables/AppService.html",[3,0.525,4,0.466,5,0.466,7,0.587,8,2.394,9,5.05,11,0.031,12,0.865,14,1.97,15,1.357,16,0.525,17,1.313,18,2.857,20,0.525,21,0.064,24,1.97,26,0.026,27,0.026,96,2.202,97,2.589,98,3.71,99,4.436,100,3.232,101,3.232]],["title/controllers/AuthController.html",[0,1.216,102,2.094]],["body/controllers/AuthController.html",[0,1.469,2,1.594,3,0.462,4,0.41,5,0.41,7,0.516,8,2.211,10,1.066,11,0.031,12,0.761,14,1.734,15,1.253,16,0.589,17,1.155,20,0.462,21,0.056,22,2.278,24,1.734,26,0.024,27,0.024,67,0.887,73,2.843,74,2.278,102,3.225,103,2.843,104,2.843,105,3.264,106,4.162,107,3.903,108,4.44,109,4.977,110,3.903,111,2.069,112,1.734,113,1.251,114,2.843,115,1.155,116,2.654,117,3.264,118,1.251,119,1.155,120,3.903,121,3.903,122,3.903]],["title/modules/AuthModule.html",[28,1.32,40,1.713]],["body/modules/AuthModule.html",[2,2.003,3,0.451,4,0.4,5,0.4,11,0.031,16,0.677,17,1.128,20,0.451,21,0.055,26,0.023,27,0.023,28,2.214,30,1.846,31,1.846,32,2.224,33,2.224,34,1.846,35,3.162,36,3.162,40,3.266,42,2.374,43,2.861,44,2.224,45,2.224,48,2.469,102,3.511,116,3.117,117,3.187,123,3.187,124,3.187,125,3.187,126,3.811,127,3.176,128,3.811,129,3.187]],["title/injectables/AuthService.html",[96,1.32,116,1.565]],["body/injectables/AuthService.html",[3,0.384,4,0.341,5,0.341,7,0.429,8,1.958,11,0.031,12,0.976,14,1.958,15,1.109,16,0.522,17,0.96,20,0.384,21,0.047,24,1.958,26,0.021,27,0.021,65,2.364,67,0.956,73,3.211,74,2.921,76,2.364,82,1.572,96,1.801,97,1.894,106,4.49,111,2.336,112,1.958,113,1.413,116,2.134,118,1.605,119,0.96,127,2.103,130,2.714,131,3.751,132,5.368,133,3.211,134,3.245,135,2.63,136,3.245,137,3.245,138,3.245,139,3.245,140,2.856,141,3.245,142,2.714,143,2.364,144,2.103,145,2.364,146,2.714,147,2.714,148,2.714,149,2.021,150,2.364,151,3.245,152,3.245,153,2.103,154,3.245,155,3.245,156,2.714,157,3.245,158,3.245,159,3.245,160,3.245]],["title/classes/CreatePostDto.html",[21,0.047,161,1.713]],["body/classes/CreatePostDto.html",[3,0.166,4,0.147,5,0.147,7,0.185,10,1.349,11,0.031,12,0.963,15,1.495,16,0.411,20,0.275,21,0.05,26,0.011,27,0.011,58,1.695,67,1.106,77,2.499,82,1.868,84,1.326,91,0.908,100,2.174,101,2.174,113,1.583,115,1.737,161,1.233,162,0.622,163,3.284,164,0.908,165,0.957,166,2.795,167,1.742,168,2.174,169,2.174,170,2.174,171,1.742,172,2.251,173,2.251,174,2.809,175,2.499,176,2.809,177,2.552,178,2.532,179,1.401,180,1.401,181,1.695,182,1.695,183,2.532,184,1.695,185,3.031,186,1.401,187,1.401,188,2.029,189,1.946,190,1.695,191,2.809,192,2.809,193,1.946,194,1.401,195,1.401,196,1.401,197,2.499,198,2.327,199,1.865,200,2.907,201,2.907,202,1.742,203,2.174,204,2.174,205,1.401,206,1.401,207,2.428,208,2.174,209,2.532,210,1.946,211,1.946,212,1.946,213,1.946,214,1.401,215,1.401,216,1.946,217,1.946,218,2.252,219,1.946,220,1.946,221,1.401,222,1.401,223,1.401,224,1.401,225,1.695,226,1.401,227,2.532,228,2.532,229,1.358,230,1.695,231,1.695,232,1.695,233,1.508,234,1.695,235,1.695,236,1.401,237,2.499,238,1.695,239,1.695,240,1.695,241,1.401,242,1.401,243,1.934,244,1.401,245,1.401,246,1.401,247,1.401,248,2.496,249,1.171,250,1.171,251,1.946,252,2.174,253,2.795,254,2.428,255,2.99,256,1.695,257,0.908,258,0.908,259,0.908,260,1.946,261,0.678,262,1.02,263,0.908,264,2.99,265,2.696,266,0.622,267,1.508,268,1.171,269,2.857,270,0.908,271,1.946,272,1.02,273,1.695,274,1.171,275,1.171,276,1.02,277,1.02,278,1.171,279,1.946,280,1.171,281,1.171,282,1.02,283,2.496,284,1.171,285,1.171,286,3.687,287,1.171,288,1.171,289,1.02,290,1.02,291,1.171,292,1.171,293,1.171,294,1.171,295,1.02]],["title/classes/CreatePostDtoWithMeta.html",[21,0.047,188,1.886]],["body/classes/CreatePostDtoWithMeta.html",[3,0.231,4,0.205,5,0.205,7,0.258,10,0.532,11,0.031,12,0.38,15,1.534,16,0.498,20,0.359,21,0.061,26,0.014,27,0.014,58,1.419,67,1.065,77,2.416,82,2.039,84,1.348,91,1.262,100,2.211,101,2.211,115,1.679,161,1.033,162,0.865,163,1.967,164,1.262,165,1.196,166,2.457,167,1.137,168,1.419,169,1.419,170,1.419,171,1.137,172,1.772,173,1.772,174,2.211,175,1.967,177,2.481,178,2.211,181,1.419,182,1.419,183,2.211,184,1.419,185,2.716,188,2.457,189,1.629,191,2.716,192,2.716,193,1.629,197,2.416,199,1.97,200,2.538,201,2.538,202,1.772,203,2.211,204,2.211,207,2.176,209,2.211,210,1.629,211,1.629,212,1.629,213,1.629,216,1.629,217,1.629,218,1.967,219,1.629,220,1.629,225,1.419,227,2.211,228,2.211,229,1.137,230,1.419,231,1.419,232,1.419,233,1.262,234,1.419,235,1.419,237,2.416,238,1.419,239,1.419,240,1.419,243,1.967,248,3.118,249,1.629,250,1.629,251,2.538,252,2.716,253,3.13,254,2.821,255,3.382,256,2.211,257,1.262,258,1.262,259,1.262,260,2.538,261,0.944,262,1.419,263,1.262,264,3.382,265,3.132,266,0.865,267,1.967,268,1.629,269,3.27,270,1.262,271,2.538,272,1.419,273,2.211,274,1.629,275,1.629,276,1.419,277,1.419,278,1.629,279,2.538,280,1.629,281,1.629,282,1.419,283,3.118,284,1.629,285,1.629,286,4.22,287,1.629,288,1.629,289,1.419,290,1.419,291,1.629,292,1.629,293,1.629,294,1.629,295,2.716,296,1.948,297,1.948]],["title/classes/CreateTagDto.html",[21,0.047,298,2.354]],["body/classes/CreateTagDto.html",[3,0.294,4,0.261,5,0.261,7,0.329,10,1.386,11,0.031,12,0.99,15,1.535,16,0.432,20,0.294,21,0.053,26,0.017,27,0.017,67,1.077,77,2.365,112,2.255,113,1.702,115,1.411,162,1.104,163,3.439,165,1.17,166,2.13,167,2.524,171,2.524,172,2.963,176,2.659,177,2.593,178,2.659,181,2.659,182,2.659,183,3.866,184,2.659,185,3.472,199,1.994,208,2.659,225,2.659,227,3.472,228,3.472,229,2.782,230,2.659,231,2.659,232,2.659,233,2.365,234,2.659,235,2.659,252,2.659,253,2.524,254,2.782,255,3.088,256,2.659,257,1.61,258,1.61,259,1.61,261,1.204,264,2.802,265,3.088,266,1.104,272,1.811,276,1.811,277,1.811,282,1.811,298,2.659,299,2.079,300,3.088,301,3.65,302,3.65,303,3.65,304,2.485,305,2.485,306,2.485,307,3.65,308,2.485,309,3.052,310,2.485,311,2.485,312,2.485,313,2.485,314,2.485,315,2.485,316,2.079,317,2.485]],["title/classes/CreateUserDto.html",[21,0.047,318,1.713]],["body/classes/CreateUserDto.html",[3,0.384,4,0.341,5,0.341,7,0.429,10,1.466,11,0.03,12,1.047,15,1.517,16,0.384,20,0.384,21,0.064,26,0.021,27,0.021,67,0.956,74,2.921,113,1.413,119,1.304,162,1.441,165,1.413,229,2.572,233,2.856,253,3.133,254,2.572,255,3.479,257,2.103,258,2.103,259,2.103,261,1.572,316,3.686,318,2.336,319,4.694,320,2.364,321,3.646,322,3.646,323,4.185,324,3.245,325,3.245,326,3.245,327,3.245,328,3.245,329,3.245,330,3.245,331,5.368,332,4.407,333,4.407,334,4.407,335,4.407,336,4.842,337,4.407,338,4.407,339,4.407,340,3.245,341,4.407,342,5.368,343,3.245,344,3.245]],["title/classes/GetUsersParamDto.html",[21,0.047,345,1.886]],["body/classes/GetUsersParamDto.html",[3,0.451,4,0.4,5,0.4,7,0.504,10,1.041,11,0.031,12,0.743,15,0.959,16,0.641,20,0.451,21,0.078,26,0.023,27,0.023,67,1.054,113,1.571,118,1.897,119,1.751,149,1.845,162,1.693,165,1.571,176,2.776,177,2.177,199,1.324,254,2.861,261,1.846,263,2.469,265,3.176,266,1.693,345,2.861,346,4.099,347,3.176,348,3.187,349,3.571,350,4.099,351,3.811,352,3.811,353,4.901,354,3.811,355,3.187]],["title/entities/MetaOption.html",[90,1.122,356,2.354]],["body/entities/MetaOption.html",[3,0.434,4,0.385,5,0.385,7,0.485,10,1.539,11,0.031,12,1.099,15,1.203,16,0.434,20,0.434,21,0.053,26,0.023,27,0.023,61,1.774,67,1.041,79,1.942,84,2.122,90,1.659,118,1.705,119,1.414,165,1.532,207,3.289,218,3.096,295,3.873,356,3.481,357,4.888,358,3.064,359,4.446,360,4.446,361,4.446,362,3.663,363,3.445,364,3.663,365,2.374,366,3.096,367,3.663,368,4.446,369,3.663,370,3.096]],["title/classes/PatchPostDto.html",[21,0.047,371,2.094]],["body/classes/PatchPostDto.html",[3,0.428,4,0.38,5,0.38,7,0.478,10,0.988,11,0.031,12,0.705,16,0.707,20,0.428,21,0.068,26,0.022,27,0.022,67,0.941,87,2.635,89,2.344,115,1.402,118,1.866,119,1.564,161,1.917,162,1.607,164,2.344,165,1.519,177,2.105,199,1.256,208,2.635,253,2.765,261,1.752,264,3.07,266,1.607,270,2.344,349,3.452,350,3.962,371,3.07,372,3.962,373,3.962,374,4.738,375,3.962,376,3.617,377,3.617,378,3.962,379,2.635,380,4.738,381,3.452,382,3.452,383,3.617,384,3.617,385,3.617,386,3.617,387,3.617,388,3.617,389,3.617]],["title/classes/PatchUserDto.html",[21,0.047,390,2.094]],["body/classes/PatchUserDto.html",[3,0.542,4,0.481,5,0.481,11,0.03,16,0.65,20,0.542,21,0.066,26,0.026,27,0.026,89,2.967,162,2.034,318,2.428,320,3.336,373,4.595,378,3.83,381,3.336,382,3.336,390,3.56,391,3.83,392,5.494,393,3.336]],["title/entities/Post.html",[90,1.122,115,0.956]],["body/entities/Post.html",[3,0.271,4,0.24,5,0.24,7,0.303,10,1.534,11,0.031,12,1.133,15,1.481,16,0.488,20,0.271,21,0.033,26,0.016,27,0.016,61,1.109,67,1.107,79,1.214,82,2.661,84,2.542,90,1.193,113,1.835,115,1.016,118,1.321,119,1.016,165,1.101,166,2.405,167,2.405,168,3.002,169,3.002,170,3.002,171,2.405,172,2.405,173,2.405,174,3.002,175,2.67,188,2.405,190,2.502,197,3.179,207,2.005,237,3.179,262,1.668,267,2.967,273,4.002,363,2.67,365,3.56,366,3.955,370,3.641,379,1.668,394,1.915,395,3.829,396,2.29,397,3.752,398,3.752,399,2.872,400,2.29,401,2.29,402,2.29,403,2.29,404,3.434,405,2.29,406,2.29,407,2.502,408,2.502,409,2.29,410,2.29,411,2.29,412,2.872,413,2.29,414,1.484,415,2.29,416,2.29]],["title/controllers/PostsController.html",[0,1.216,47,1.886]],["body/controllers/PostsController.html",[0,0.61,2,0.662,3,0.192,4,0.17,5,0.17,7,0.214,8,1.165,10,0.902,11,0.031,12,0.644,14,2.171,15,0.955,16,0.493,17,0.48,20,0.192,21,0.023,22,0.946,23,1.18,24,1.467,26,0.012,27,0.012,47,1.53,67,0.9,87,1.91,95,3.249,104,1.18,111,1.751,112,1.467,113,1.059,114,1.18,115,1.799,118,1.43,119,1.123,144,1.699,149,2.036,161,3.027,173,1.928,177,0.72,190,2.406,191,1.91,199,1.754,229,2.603,266,0.72,289,3.249,349,1.91,355,3.174,371,3.042,375,3.73,379,1.91,414,1.05,417,1.355,418,4.906,419,2.622,420,2.193,421,2.622,422,1.62,423,2.622,424,3.795,425,2.603,426,2.622,427,3.795,428,1.62,429,1.62,430,4.46,431,2.622,432,2.622,433,4.46,434,4.888,435,5.407,436,4.46,437,4.46,438,3.795,439,2.622,440,3.795,441,3.73,442,1.62,443,1.62,444,1.62,445,1.62,446,2.622,447,3.795,448,3.795,449,2.622,450,2.622,451,2.622,452,3.795,453,2.622,454,3.302,455,3.302,456,3.485,457,2.622,458,2.762,459,2.622,460,2.622,461,1.62,462,3.795,463,3.174,464,1.62,465,1.62,466,3.795,467,3.926,468,2.622,469,2.622,470,2.622,471,3.795,472,2.622,473,1.18,474,3.174,475,1.39,476,1.355,477,2.762,478,3.174,479,1.355,480,1.62,481,1.62,482,2.622,483,1.62,484,1.62,485,1.355,486,1.62,487,2.193,488,1.62,489,1.62,490,2.193,491,2.193,492,2.193,493,1.62]],["title/modules/PostsModule.html",[28,1.32,41,1.886]],["body/modules/PostsModule.html",[2,1.928,3,0.425,4,0.377,5,0.377,11,0.031,16,0.706,17,1.064,20,0.425,21,0.052,26,0.022,27,0.022,28,2.152,30,1.741,31,1.741,32,2.098,33,2.098,34,1.741,35,3.074,36,3.074,41,3.639,42,2.887,43,2.754,44,2.098,45,2.098,47,3.074,48,3.057,54,2.618,55,2.098,115,1.064,129,3.006,475,3.383,476,3.006,494,3.006,495,3.006,496,3.006,497,3.594,498,3.594,499,3.594,500,3.594,501,3.594,502,3.594]],["title/injectables/PostsService.html",[96,1.32,475,1.713]],["body/injectables/PostsService.html",[3,0.375,4,0.333,5,0.333,7,0.42,8,1.928,11,0.031,12,0.846,14,1.928,15,1.092,16,0.514,17,0.939,20,0.375,21,0.046,22,1.852,24,1.409,26,0.021,27,0.021,67,0.947,76,3.161,96,1.773,97,1.852,111,2.301,112,1.928,113,1.391,115,1.284,118,1.017,119,0.939,131,3.205,133,2.311,135,2.362,140,2.812,142,2.653,143,2.311,144,2.056,149,2.289,150,2.311,153,2.812,156,2.653,166,2.887,175,3.205,199,1.102,418,3.629,420,4.137,425,1.852,456,4.137,473,2.311,475,2.301,485,2.653,503,2.653,504,3.172,505,3.172,506,4.34,507,3.172,508,3.172,509,2.653,510,3.172,511,2.653,512,3.172,513,3.172,514,3.172,515,2.653,516,2.653,517,3.629,518,3.172,519,3.172,520,3.172,521,3.172,522,4.34]],["title/entities/Tag.html",[90,1.122,300,2.094]],["body/entities/Tag.html",[3,0.313,4,0.278,5,0.278,7,0.35,10,1.593,11,0.031,12,1.138,15,1.491,16,0.313,20,0.313,21,0.038,26,0.018,27,0.018,61,1.282,67,1.098,79,1.404,82,2.868,84,2.181,90,1.327,112,1.992,113,1.739,118,1.438,119,1.131,165,1.225,167,2.617,171,2.617,172,2.617,199,1.558,207,3.167,218,2.476,300,2.476,359,3.75,360,3.75,361,3.75,363,2.906,365,3.374,366,3.838,368,3.75,370,3.515,395,3.196,397,3.952,398,3.952,399,3.196,407,2.784,408,3.577,412,3.196,523,2.214,524,4.484,525,2.647,526,4.484,527,2.647,528,2.647,529,2.647,530,2.647,531,2.647,532,2.647,533,2.647,534,2.647]],["title/entities/User.html",[90,1.122,149,1.216]],["body/entities/User.html",[3,0.373,4,0.331,5,0.331,7,0.417,10,1.518,11,0.031,12,1.084,15,1.507,16,0.373,20,0.373,21,0.046,26,0.021,27,0.021,61,1.528,67,1.082,74,2.879,79,1.673,82,2.57,84,2.55,90,1.502,118,1.581,119,1.279,149,1.628,165,1.386,321,3.593,322,3.593,323,4.125,363,3.196,365,3.438,366,3.879,370,3.602,397,4.361,398,4.361,407,3.149,408,3.149,535,2.638,536,3.155,537,5.306,538,3.155,539,3.155,540,3.155,541,4.323,542,3.155]],["title/controllers/UserController.html",[0,1.216,543,2.094]],["body/controllers/UserController.html",[0,0.74,2,0.803,3,0.233,4,0.206,5,0.206,7,0.26,8,1.357,10,1.024,11,0.031,12,0.731,14,1.879,16,0.574,17,0.582,20,0.233,21,0.028,22,1.147,23,1.432,24,2.325,26,0.02,27,0.015,67,0.958,84,1.879,91,1.98,104,1.432,111,1.988,112,2.035,113,1.555,114,1.432,115,1.11,118,0.98,119,1.725,131,3.484,135,1.665,149,1.15,153,1.98,173,1.147,177,1.879,192,3.081,199,1.818,202,3.208,266,1.357,267,2.74,269,1.98,318,2.775,336,1.643,345,2.468,347,3.627,390,3.392,393,2.226,414,1.273,425,1.784,441,1.643,463,1.643,467,3.537,474,2.556,477,2.556,478,2.556,479,1.643,487,1.643,491,1.643,492,2.556,543,1.98,544,1.643,545,3.056,546,3.749,547,3.056,548,1.965,549,1.965,550,1.965,551,4.681,552,1.965,553,1.965,554,3.056,555,1.965,556,3.056,557,1.965,558,3.056,559,3.056,560,3.136,561,1.965,562,3.749,563,1.965,564,1.965,565,1.965,566,1.965,567,3.749,568,1.965,569,1.965,570,3.749,571,1.965,572,1.965,573,1.643,574,1.643,575,1.643,576,3.749,577,3.056,578,1.965,579,1.965,580,1.643,581,1.965,582,3.056,583,1.965,584,1.965,585,1.965,586,1.965,587,3.749,588,3.749,589,1.965,590,3.749,591,1.965,592,1.965,593,1.965,594,1.965,595,1.643,596,1.965,597,1.965,598,1.965,599,1.965,600,1.965,601,1.965,602,1.965,603,2.556,604,1.965,605,1.643,606,1.965,607,2.556,608,1.965,609,1.965]],["title/modules/UserModule.html",[28,1.32,42,1.565]],["body/modules/UserModule.html",[2,1.92,3,0.423,4,0.375,5,0.375,11,0.031,16,0.704,17,1.057,20,0.423,21,0.052,26,0.022,27,0.022,28,2.145,30,1.73,31,1.73,32,2.085,33,2.085,34,1.73,35,3.065,36,3.065,40,2.491,42,2.938,43,2.743,44,2.085,45,2.085,48,2.314,54,2.602,55,2.085,90,1.24,127,3.045,135,2.832,145,2.602,149,1.345,543,3.403,575,2.987,610,2.987,611,2.987,612,2.987,613,3.571,614,3.571,615,3.571,616,2.987,617,4.699,618,3.571,619,2.602]],["title/injectables/UserService.html",[96,1.32,135,1.435]],["body/injectables/UserService.html",[3,0.25,4,0.222,5,0.222,7,0.28,8,1.437,11,0.032,12,0.857,14,1.744,16,0.615,17,0.626,20,0.25,21,0.031,24,1.744,26,0.015,27,0.015,55,1.235,61,1.024,65,1.541,67,0.999,89,1.371,96,1.321,97,1.235,105,1.769,111,2.331,112,1.953,113,1.41,116,2.517,118,1.854,119,1.162,127,1.371,131,3.56,133,2.356,135,1.437,140,3.237,143,2.356,144,2.096,145,2.356,146,1.769,147,2.705,148,1.769,149,1.957,150,1.541,153,3.07,202,2.566,318,1.715,321,3.451,322,3.203,345,1.888,347,2.096,393,1.541,414,1.371,425,2.292,458,2.705,473,1.541,490,1.769,509,1.769,511,1.769,515,2.705,516,1.769,517,1.769,551,3.677,560,2.705,573,1.769,574,1.769,595,2.705,603,3.284,605,3.284,607,3.284,616,1.769,619,3.451,620,1.769,621,3.926,622,3.926,623,2.115,624,3.926,625,2.115,626,2.115,627,2.115,628,2.115,629,2.115,630,2.115,631,2.115,632,2.115,633,2.115,634,2.115,635,3.234,636,3.926,637,2.115,638,2.115,639,2.115,640,2.115,641,2.115,642,2.115,643,2.115,644,3.234,645,2.115,646,2.115,647,3.926,648,2.115,649,2.115,650,2.115,651,2.115,652,3.234,653,4.397,654,3.234,655,3.234,656,3.234,657,2.115,658,2.115,659,2.115,660,2.115]],["title/coverage.html",[661,3.201]],["body/coverage.html",[0,1.984,1,2.011,5,0.326,6,2.595,11,0.031,18,1.645,21,0.085,26,0.02,27,0.02,34,1.503,47,1.811,67,0.761,90,1.83,95,2.261,96,2.153,98,2.595,102,2.011,103,3.114,108,2.261,115,0.918,116,1.503,130,2.595,135,1.378,149,1.168,161,1.645,163,3.168,164,3.168,188,1.811,270,2.011,290,2.261,298,2.261,299,2.595,300,2.011,318,1.645,319,2.595,320,3.114,345,1.811,346,2.595,347,2.011,348,2.595,356,2.261,357,2.595,358,2.595,371,2.011,372,2.595,390,2.011,391,2.595,394,2.595,417,2.595,425,1.811,475,1.645,503,2.595,523,2.595,535,2.595,543,2.011,544,2.595,620,2.595,661,2.261,662,3.103,663,6.473,664,5.712,665,3.103,666,5.852,667,4.274,668,2.595,669,3.103,670,3.103,671,3.103,672,3.103,673,3.103,674,4.274,675,3.103,676,3.103]],["title/dependencies.html",[31,1.88,677,2.263]],["body/dependencies.html",[11,0.031,17,1.264,21,0.076,26,0.025,27,0.025,31,2.068,55,2.492,61,2.068,261,2.068,263,2.766,266,1.896,381,3.11,382,3.11,678,4.269,679,4.269,680,5.709,681,4.269,682,4.269,683,4.269,684,4.269,685,4.269,686,4.269,687,4.269,688,4.269,689,4.269,690,4.269,691,4.269,692,4.269,693,4.269,694,4.269,695,4.269,696,4.269]],["title/miscellaneous/enumerations.html",[697,1.434,698,3.246]],["body/miscellaneous/enumerations.html",[7,0.571,11,0.031,26,0.025,27,0.025,115,1.569,197,3.435,202,3.094,203,3.862,204,3.862,209,3.862,237,3.435,238,3.862,239,3.862,240,3.862,269,4.143,697,2.289,698,3.611,699,5.302,700,4.318]],["title/miscellaneous/functions.html",[697,1.434,701,3.246]],["body/miscellaneous/functions.html",[7,0.656,11,0.027,26,0.027,27,0.027,34,2.947,668,4.147,697,2.629,701,4.147,702,4.959]],["title/index.html",[7,0.358,703,2.706,704,2.706]],["body/index.html",[4,0.377,11,0.031,26,0.022,27,0.022,59,3.006,78,3.006,85,3.006,177,2.34,199,1.248,243,2.329,309,3.006,619,2.618,661,2.618,705,3.594,706,3.594,707,4.718,708,3.594,709,3.594,710,3.594,711,3.594,712,3.594,713,3.594,714,5.267,715,3.594,716,3.594,717,6.076,718,3.594,719,3.594,720,5.961,721,3.594,722,3.594,723,4.718,724,3.594,725,3.594,726,3.594,727,4.718,728,4.718,729,3.594,730,3.594,731,3.594,732,4.718,733,4.718,734,3.594,735,3.594,736,3.594,737,3.594,738,3.594,739,3.006,740,3.594,741,3.594,742,3.594,743,3.594,744,3.594,745,3.594,746,3.594,747,3.594,748,3.594,749,3.594,750,3.594,751,3.594,752,3.594,753,3.594,754,3.594,755,3.006]],["title/modules.html",[30,2.128]],["body/modules.html",[11,0.026,26,0.026,27,0.026,29,3.041,30,2.273,40,2.488,41,2.739,42,2.273,739,5.146,756,6.153,757,6.153,758,6.153]],["title/overview.html",[759,3.675]],["body/overview.html",[2,1.445,11,0.03,18,2.771,26,0.022,27,0.022,28,1.445,29,4.067,30,1.713,31,1.713,32,2.065,33,2.065,34,1.713,35,2.065,36,2.065,37,2.959,38,2.959,39,2.959,40,3.147,41,3.586,42,2.931,43,2.726,44,2.065,45,2.065,79,1.876,97,2.065,116,2.931,123,2.959,124,2.959,125,2.959,135,2.689,162,1.572,475,3.209,494,2.959,495,2.959,496,2.959,610,2.959,611,2.959,612,2.959,759,2.959,760,5.559,761,3.538]],["title/properties.html",[165,1.245,677,2.263]],["body/properties.html",[11,0.031,26,0.027,27,0.027,165,1.569,199,1.7,243,3.172,580,4.094,755,4.094,762,4.895,763,4.895]],["title/miscellaneous/typealiases.html",[697,1.434,764,3.882]],["body/miscellaneous/typealiases.html",[7,0.65,11,0.027,26,0.027,27,0.027,67,1.021,103,3.581,108,4.174,140,3.185,697,2.606,765,4.916,766,4.916]],["title/routes.html",[767,3.675]],["body/routes.html",[11,0.028,26,0.028,27,0.028,767,4.278]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"routes.html":{}}}],["0",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":762,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":666,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":669,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":664,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":673,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":667,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":674,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":670,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["01t12:00:00z",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["1",{"_index":560,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["1.1.26",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":588,"title":{},"body":{"controllers/UserController.html":{}}}],["10.0.0",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":399,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":557,"title":{},"body":{"controllers/UserController.html":{}}}],["123",{"_index":350,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["1234",{"_index":593,"title":{},"body":{"controllers/UserController.html":{}}}],["2",{"_index":595,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["2.0.6",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":554,"title":{},"body":{"controllers/UserController.html":{}}}],["2022",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["255",{"_index":407,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["3/4",{"_index":672,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":760,"title":{},"body":{"overview.html":{}}}],["512",{"_index":412,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["5432",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["60",{"_index":541,"title":{},"body":{"entities/User.html":{}}}],["7",{"_index":761,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":671,"title":{},"body":{"coverage.html":{}}}],["8.1.0",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":537,"title":{},"body":{"entities/User.html":{}}}],["actual",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["additional",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["adds",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["alias",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":765,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["already",{"_index":642,"title":{},"body":{"injectables/UserService.html":{}}}],["amazing",{"_index":740,"title":{},"body":{"index.html":{}}}],["api",{"_index":559,"title":{},"body":{"controllers/UserController.html":{}}}],["apioperation",{"_index":477,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":423,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({})@isjson()@isoptional",{"_index":312,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiquery",{"_index":576,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":478,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["apiresponse({status",{"_index":443,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags",{"_index":577,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":579,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app.controller",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":713,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"controllers/PostsController.html":{}}}],["associated",{"_index":449,"title":{},"body":{"controllers/PostsController.html":{}}}],["async",{"_index":621,"title":{},"body":{"injectables/UserService.html":{}}}],["auth",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["auth.controller",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":102,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":511,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["authentication",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"index.html":{},"properties.html":{}}}],["authservice",{"_index":116,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":636,"title":{},"body":{"injectables/UserService.html":{}}}],["backers",{"_index":741,"title":{},"body":{"index.html":{}}}],["being",{"_index":451,"title":{},"body":{"controllers/PostsController.html":{}}}],["blog",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["body",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":758,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":756,"title":{},"body":{"modules.html":{}}}],["building",{"_index":708,"title":{},"body":{"index.html":{}}}],["calls",{"_index":453,"title":{},"body":{"controllers/PostsController.html":{}}}],["cases",{"_index":589,"title":{},"body":{"controllers/UserController.html":{}}}],["cause",{"_index":519,"title":{},"body":{"injectables/PostsService.html":{}}}],["character",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["check",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["checks",{"_index":510,"title":{},"body":{"injectables/PostsService.html":{}}}],["class",{"_index":21,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":494,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":496,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":497,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":495,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":610,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":611,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":612,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":370,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":365,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["compodoc/compodoc",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["composed",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["confirmation",{"_index":436,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log",{"_index":490,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["console.log(`find",{"_index":657,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`getting",{"_index":485,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["console.log(`limit",{"_index":602,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(`logging",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`user",{"_index":649,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(getuserparamdto",{"_index":601,"title":{},"body":{"controllers/UserController.html":{}}}],["const",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":623,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["constructor(userservice",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(userservices",{"_index":504,"title":{},"body":{"injectables/PostsService.html":{}}}],["containing",{"_index":438,"title":{},"body":{"controllers/PostsController.html":{}}}],["content",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["context",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":480,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":578,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convert",{"_index":586,"title":{},"body":{"controllers/UserController.html":{}}}],["correct",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["coverage",{"_index":661,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/UserService.html":{}}}],["created",{"_index":427,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdatecolumn",{"_index":361,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createddate",{"_index":359,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createpost",{"_index":419,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":489,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":422,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":161,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostdtowithmeta",{"_index":188,"title":{"classes/CreatePostDtoWithMeta.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/Post.html":{},"coverage.html":{}}}],["createpostdto})@patch",{"_index":464,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto})@post",{"_index":428,"title":{},"body":{"controllers/PostsController.html":{}}}],["creates",{"_index":424,"title":{},"body":{"controllers/PostsController.html":{}}}],["createtagdto",{"_index":298,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["createuser",{"_index":607,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(undefined",{"_index":626,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":318,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto})@apiquery({name",{"_index":555,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers",{"_index":545,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(@body",{"_index":606,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(createuserdto",{"_index":548,"title":{},"body":{"controllers/UserController.html":{}}}],["creation",{"_index":431,"title":{},"body":{"controllers/PostsController.html":{}}}],["custom",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["data",{"_index":435,"title":{},"body":{"controllers/PostsController.html":{}}}],["database",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["date",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/Post.html":{},"controllers/UserController.html":{}}}],["defaultvaluepipe",{"_index":571,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":600,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(10",{"_index":598,"title":{},"body":{"controllers/UserController.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":565,"title":{},"body":{"controllers/UserController.html":{}}}],["deletedatecolumn",{"_index":526,"title":{},"body":{"entities/Tag.html":{}}}],["deleteddate",{"_index":524,"title":{},"body":{"entities/Tag.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["description",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":439,"title":{},"body":{"controllers/PostsController.html":{}}}],["development",{"_index":719,"title":{},"body":{"index.html":{}}}],["dist/**/*.entity.js",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["doe",{"_index":653,"title":{},"body":{"injectables/UserService.html":{}}}],["draft",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":414,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/get",{"_index":573,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/patch",{"_index":479,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["dummypost",{"_index":522,"title":{},"body":{"injectables/PostsService.html":{}}}],["dummyuserdata",{"_index":658,"title":{},"body":{"injectables/UserService.html":{}}}],["dummyuserdata.find((user",{"_index":659,"title":{},"body":{"injectables/UserService.html":{}}}],["e.g",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["e2e",{"_index":729,"title":{},"body":{"index.html":{}}}],["each",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["efficient",{"_index":709,"title":{},"body":{"index.html":{}}}],["eight",{"_index":335,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":321,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["endpoint",{"_index":492,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["entities",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":90,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["entity/post.entity",{"_index":501,"title":{},"body":{"modules/PostsModule.html":{}}}],["entity/user.entity",{"_index":616,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["enum",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":698,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posts.enums",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/Post.html":{}}}],["error",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["example",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["exception",{"_index":640,"title":{},"body":{"injectables/UserService.html":{}}}],["excerpt",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["existing",{"_index":466,"title":{},"body":{"controllers/PostsController.html":{}}}],["existinguser",{"_index":635,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["expected",{"_index":389,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exporting",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":373,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["false})@isoptional()@isarray()@isstring({each",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featured",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["featuredimageurl",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["fetch",{"_index":448,"title":{},"body":{"controllers/PostsController.html":{}}}],["fields",{"_index":472,"title":{},"body":{"controllers/PostsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["final",{"_index":583,"title":{},"body":{"controllers/UserController.html":{}}}],["find",{"_index":651,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":603,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(undefined",{"_index":628,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":622,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(undefined",{"_index":630,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["firstname",{"_index":322,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["format",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["forwardref",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["found",{"_index":517,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":707,"title":{},"body":{"index.html":{}}}],["function",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["functions",{"_index":701,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":596,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":552,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':userid",{"_index":483,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts",{"_index":420,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallposts(@param('userid",{"_index":484,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts(undefined",{"_index":507,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(userid",{"_index":442,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gets",{"_index":512,"title":{},"body":{"injectables/PostsService.html":{}}}],["getting",{"_index":703,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":562,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers",{"_index":546,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":550,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersparamdto",{"_index":345,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["given",{"_index":450,"title":{},"body":{"controllers/PostsController.html":{}}}],["grow",{"_index":736,"title":{},"body":{"index.html":{}}}],["handle",{"_index":639,"title":{},"body":{"injectables/UserService.html":{}}}],["handles",{"_index":430,"title":{},"body":{"controllers/PostsController.html":{}}}],["headers",{"_index":568,"title":{},"body":{"controllers/UserController.html":{}}}],["hello",{"_index":100,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["here",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["host",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["httpexception",{"_index":509,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["httpexception('email",{"_index":641,"title":{},"body":{"injectables/UserService.html":{}}}],["httpexception('user",{"_index":516,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["https://example.com/image.jpg",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["https://nestjs.com",{"_index":752,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["httpstatus",{"_index":473,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.conflict",{"_index":643,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.created",{"_index":488,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.forbidden",{"_index":650,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":518,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpstatus.ok",{"_index":482,"title":{},"body":{"controllers/PostsController.html":{}}}],["hyphens",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["id",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"coverage.html":{}}}],["image",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indicating",{"_index":440,"title":{},"body":{"controllers/PostsController.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":96,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":97,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["injection",{"_index":617,"title":{},"body":{"modules/UserModule.html":{}}}],["injectrepository",{"_index":633,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(user",{"_index":634,"title":{},"body":{"injectables/UserService.html":{}}}],["installation",{"_index":716,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":718,"title":{},"body":{"index.html":{}}}],["integer",{"_index":587,"title":{},"body":{"controllers/UserController.html":{}}}],["invalid",{"_index":307,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["ip",{"_index":569,"title":{},"body":{"controllers/UserController.html":{}}}],["isarray",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["isauth",{"_index":647,"title":{},"body":{"injectables/UserService.html":{}}}],["isauthenticated",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["isemail",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":324,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["isenum(['post",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["isenum(poststatus",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["isenum(posttypes",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["isint",{"_index":353,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["isiso8601",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["isjson",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":296,"title":{},"body":{"classes/CreatePostDtoWithMeta.html":{}}}],["isnumber",{"_index":380,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":330,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":328,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["item",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["items",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["jane",{"_index":655,"title":{},"body":{"injectables/UserService.html":{}}}],["jane@doe.com",{"_index":656,"title":{},"body":{"injectables/UserService.html":{}}}],["john",{"_index":652,"title":{},"body":{"injectables/UserService.html":{}}}],["john@doe.com",{"_index":654,"title":{},"body":{"injectables/UserService.html":{}}}],["join",{"_index":743,"title":{},"body":{"index.html":{}}}],["json",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["kamil",{"_index":749,"title":{},"body":{"index.html":{}}}],["key",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["language",{"_index":303,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["lastname",{"_index":323,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["layout",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":398,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":337,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":755,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":733,"title":{},"body":{"index.html":{}}}],["likes",{"_index":388,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["limit",{"_index":551,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["literal",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["localhost",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginbody",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginbody",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["logs",{"_index":433,"title":{},"body":{"controllers/PostsController.html":{}}}],["lowercase",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["main",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["make",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["matches",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["matches(/^https?:\\/\\/[^\\s",{"_index":317,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"routes.html":{}}}],["maxlength",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(255",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{}}}],["meta",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["metadata",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":356,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["metaoptions",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/Post.html":{}}}],["metavalue",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/MetaOption.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["migrations",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":334,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":316,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["minlength(8",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":697,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":732,"title":{},"body":{"index.html":{}}}],["mode",{"_index":723,"title":{},"body":{"index.html":{}}}],["modern",{"_index":301,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":746,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":750,"title":{},"body":{"index.html":{}}}],["name",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["need",{"_index":581,"title":{},"body":{"controllers/UserController.html":{}}}],["nest",{"_index":714,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":754,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":381,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":425,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newuser",{"_index":644,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":706,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":366,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number'})@isnumber()@isnotempty",{"_index":376,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["number})@isoptional()@isint()@type(undefined",{"_index":351,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["object",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"controllers/PostsController.html":{}}}],["objects",{"_index":460,"title":{},"body":{"controllers/PostsController.html":{}}}],["one",{"_index":336,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UserController.html":{}}}],["oojoseph",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["open",{"_index":734,"title":{},"body":{"index.html":{}}}],["option",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["option.entity.ts",{"_index":358,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:12",{"_index":364,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:18",{"_index":367,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":362,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":369,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["options",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":759,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":677,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":590,"title":{},"body":{"controllers/UserController.html":{}}}],["pagination'})@apiresponse({status",{"_index":553,"title":{},"body":{"controllers/UserController.html":{}}}],["param",{"_index":474,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["param.dto",{"_index":574,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param.dto.ts",{"_index":348,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:16",{"_index":352,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parama",{"_index":585,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parseintpipe",{"_index":570,"title":{},"body":{"controllers/UserController.html":{}}}],["partial",{"_index":469,"title":{},"body":{"controllers/PostsController.html":{}}}],["partialtype",{"_index":378,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":374,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":392,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":467,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["patchpostdto",{"_index":371,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":547,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(@body",{"_index":609,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(patchuserdto",{"_index":563,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuserdto",{"_index":390,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["person",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["pg",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":744,"title":{},"body":{"index.html":{}}}],["port",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":558,"title":{},"body":{"controllers/UserController.html":{}}}],["possible",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["post",{"_index":115,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":426,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('login",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.dto",{"_index":379,"title":{},"body":{"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:101",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:111",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:122",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:15",{"_index":377,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:160",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:176",{"_index":297,"title":{},"body":{"classes/CreatePostDtoWithMeta.html":{}}}],["post.dto.ts:32",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:44",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:58",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:69",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:78",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:90",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["postentity",{"_index":500,"title":{},"body":{"modules/PostsModule.html":{}}}],["postgres",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":418,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.controller",{"_index":499,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":476,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.controller",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":47,"title":{"controllers/PostsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":481,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":41,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":475,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":416,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/Post.html":{}}}],["posttypes",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttypes.post",{"_index":415,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":363,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["processes",{"_index":468,"title":{},"body":{"controllers/PostsController.html":{}}}],["processing",{"_index":432,"title":{},"body":{"controllers/PostsController.html":{}}}],["production",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["programming",{"_index":302,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["progressive",{"_index":705,"title":{},"body":{"index.html":{}}}],["project",{"_index":735,"title":{},"body":{"index.html":{}}}],["promise",{"_index":458,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":165,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provided",{"_index":355,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["published",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/Post.html":{}}}],["put",{"_index":566,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":567,"title":{},"body":{"controllers/UserController.html":{}}}],["query('limit",{"_index":597,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":599,"title":{},"body":{"controllers/UserController.html":{}}}],["r\\n",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["range",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["read",{"_index":745,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["received",{"_index":434,"title":{},"body":{"controllers/PostsController.html":{}}}],["reflect",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":520,"title":{},"body":{"injectables/PostsService.html":{}}}],["replace",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["repositories",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["repository",{"_index":619,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["representing",{"_index":454,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":441,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["requests",{"_index":447,"title":{},"body":{"controllers/PostsController.html":{}}}],["require",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["required",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":459,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"routes.html":{}}}],["retrieved",{"_index":452,"title":{},"body":{"controllers/PostsController.html":{}}}],["retrieves",{"_index":446,"title":{},"body":{"controllers/PostsController.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returned",{"_index":556,"title":{},"body":{"controllers/UserController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["review",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"miscellaneous/enumerations.html":{}}}],["routes",{"_index":767,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":720,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":710,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["sent",{"_index":491,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["serialize",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["series",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":711,"title":{},"body":{"index.html":{}}}],["service",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["set",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["shows",{"_index":384,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["side",{"_index":712,"title":{},"body":{"index.html":{}}}],["sidebar",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["sidebarenabled",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["slug",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["special",{"_index":338,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":349,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["specified",{"_index":455,"title":{},"body":{"controllers/PostsController.html":{}}}],["specify",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["sponsors",{"_index":738,"title":{},"body":{"index.html":{}}}],["src/.../auth.controller.ts",{"_index":766,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":702,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posts.enums.ts",{"_index":699,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":99,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":615,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":632,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:31",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:5",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":668,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":372,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/entity/meta",{"_index":357,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity.ts",{"_index":394,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity.ts:15",{"_index":413,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:23",{"_index":403,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:31",{"_index":409,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:39",{"_index":410,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:45",{"_index":396,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:51",{"_index":406,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:58",{"_index":400,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:64",{"_index":405,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:66",{"_index":411,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:67",{"_index":402,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:8",{"_index":401,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/tags.entity.ts",{"_index":523,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/posts/entity/tags.entity.ts:13",{"_index":530,"title":{},"body":{"entities/Tag.html":{}}}],["src/posts/entity/tags.entity.ts:21",{"_index":531,"title":{},"body":{"entities/Tag.html":{}}}],["src/posts/entity/tags.entity.ts:29",{"_index":533,"title":{},"body":{"entities/Tag.html":{}}}],["src/posts/entity/tags.entity.ts:35",{"_index":528,"title":{},"body":{"entities/Tag.html":{}}}],["src/posts/entity/tags.entity.ts:41",{"_index":532,"title":{},"body":{"entities/Tag.html":{}}}],["src/posts/entity/tags.entity.ts:48",{"_index":529,"title":{},"body":{"entities/Tag.html":{}}}],["src/posts/entity/tags.entity.ts:51",{"_index":525,"title":{},"body":{"entities/Tag.html":{}}}],["src/posts/entity/tags.entity.ts:54",{"_index":534,"title":{},"body":{"entities/Tag.html":{}}}],["src/posts/entity/tags.entity.ts:57",{"_index":527,"title":{},"body":{"entities/Tag.html":{}}}],["src/posts/enums/posts.enums.ts",{"_index":700,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":417,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:36",{"_index":445,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:60",{"_index":429,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:85",{"_index":465,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":498,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":503,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:5",{"_index":505,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:9",{"_index":508,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/user/dtos/create",{"_index":319,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/get",{"_index":346,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/user/dtos/patch",{"_index":391,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/user/entity/user.entity.ts",{"_index":535,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entity/user.entity.ts:13",{"_index":538,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:20",{"_index":540,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:28",{"_index":536,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:35",{"_index":542,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:6",{"_index":539,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":544,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:63",{"_index":561,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:81",{"_index":549,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:87",{"_index":564,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/user/user.module.ts",{"_index":613,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/user/user.service.ts",{"_index":620,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:16",{"_index":625,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:27",{"_index":627,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:49",{"_index":629,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:77",{"_index":631,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":721,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":724,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":725,"title":{},"body":{"index.html":{}}}],["started",{"_index":704,"title":{"index.html":{}},"body":{}}],["starter",{"_index":715,"title":{},"body":{"index.html":{}}}],["statements",{"_index":662,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["stay",{"_index":747,"title":{},"body":{"index.html":{}}}],["still",{"_index":386,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["story",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["string'})@isiso8601()@isnotempty",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isnotempty()@isstring()@minlength(3)@maxlength(255",{"_index":310,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isjson",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isstring",{"_index":304,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024)@matches(/^https?:\\/\\/[^\\s",{"_index":306,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isenum(posttypes)@isnotempty",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@isenum(poststatus",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(255)@matches(/^[a",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(512)@matches(/^[a",{"_index":314,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isoptional",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["summary",{"_index":487,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":739,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":757,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":383,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["synchronize",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":521,"title":{},"body":{"injectables/PostsService.html":{}}}],["table",{"_index":676,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":675,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":300,"title":{"entities/Tag.html":{}},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{},"coverage.html":{}}}],["tag.dto.ts",{"_index":299,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:23",{"_index":311,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:37",{"_index":315,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:46",{"_index":305,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:51",{"_index":313,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:65",{"_index":308,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tags",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/Post.html":{}}}],["test",{"_index":728,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":731,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":730,"title":{},"body":{"index.html":{}}}],["tests",{"_index":727,"title":{},"body":{"index.html":{}}}],["text",{"_index":395,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":737,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauthenticated",{"_index":648,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.login(loginbody",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.postservice.getallposts",{"_index":486,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.userrepository.create(user",{"_index":645,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":637,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":646,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser",{"_index":608,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":604,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyid",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservices.findonebyid",{"_index":514,"title":{},"body":{"injectables/PostsService.html":{}}}],["through",{"_index":470,"title":{},"body":{"controllers/PostsController.html":{}}}],["throw",{"_index":515,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["time",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["timestamp",{"_index":404,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["token",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":748,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":437,"title":{},"body":{"controllers/PostsController.html":{}}}],["transform",{"_index":354,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["transformer",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@type(undefined",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":753,"title":{},"body":{"index.html":{}}}],["type",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":764,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm.forfeature",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([postentity",{"_index":502,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":618,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":382,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":309,"title":{},"body":{"classes/CreateTagDto.html":{},"index.html":{}}}],["undefined",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["undefined})@get(':userid",{"_index":444,"title":{},"body":{"controllers/PostsController.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":408,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":726,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":763,"title":{},"body":{"properties.html":{}}}],["up",{"_index":385,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["update",{"_index":375,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated",{"_index":463,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["updatedatecolumn",{"_index":368,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updateddate",{"_index":360,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":421,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":493,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(updatepostdto",{"_index":461,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepostdto",{"_index":471,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":462,"title":{},"body":{"controllers/PostsController.html":{}}}],["url",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["use",{"_index":582,"title":{},"body":{"controllers/UserController.html":{}}}],["usefactory",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":149,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user's",{"_index":513,"title":{},"body":{"injectables/PostsService.html":{}}}],["user.controller",{"_index":614,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":393,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":320,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":327,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":329,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":325,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":638,"title":{},"body":{"injectables/UserService.html":{}}}],["user.firstname",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["user.id",{"_index":660,"title":{},"body":{"injectables/UserService.html":{}}}],["user.service",{"_index":575,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":543,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":456,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["usermodule",{"_index":42,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userparamsdto",{"_index":605,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":624,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":347,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["users/1223",{"_index":591,"title":{},"body":{"controllers/UserController.html":{}}}],["users/id?limit=10&page=1",{"_index":584,"title":{},"body":{"controllers/UserController.html":{}}}],["users?limit=10&page=2",{"_index":594,"title":{},"body":{"controllers/UserController.html":{}}}],["userservice",{"_index":135,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservices",{"_index":506,"title":{},"body":{"injectables/PostsService.html":{}}}],["using",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["validate",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["validatenested",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["validationpipe",{"_index":572,"title":{},"body":{"controllers/UserController.html":{}}}],["validator",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{}}}],["varchar",{"_index":397,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["version",{"_index":580,"title":{},"body":{"controllers/UserController.html":{},"properties.html":{}}}],["want",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"controllers/UserController.html":{}}}],["watch",{"_index":722,"title":{},"body":{"index.html":{}}}],["website",{"_index":751,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["whos",{"_index":592,"title":{},"body":{"controllers/UserController.html":{}}}],["whose",{"_index":457,"title":{},"body":{"controllers/PostsController.html":{}}}],["works",{"_index":387,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["world",{"_index":101,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["yarn",{"_index":717,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":742,"title":{},"body":{"index.html":{}}}],["z0",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":333,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { PostsController } from './posts/posts.controller';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    UserModule,\n    PostsModule,\n    AuthModule,\n    TypeOrmModule.forRootAsync({\n      imports: [], // specify any additional imports here, e.g., TypeORM migrations or custom repositories\n      inject: [], // inject\n      useFactory: () => ({\n        type: 'postgres',\n        host: 'localhost',\n        port: 5432,\n        username: 'postgres',\n        password: 'oojoseph',\n        database: 'blog-app',\n        entities: ['dist/**/*.entity.js'],\n        synchronize: true, // set to false in production\n        // autoLoadEntities: true, // using this would require us to create a module (controller and module file) for every entity we want to add, exporting it and using the TypeORM.forFeature([]) function\n      }),\n    }),\n  ],\n  controllers: [AppController, PostsController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginBody: LoginBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginBody\n                                            \n                                                            LoginBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\ntype LoginBody = {\n  id: number;\n  username: string;\n  password: string;\n};\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  login(@Body() loginBody: LoginBody) {\n    return this.authService.login(loginBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from 'src/user/user.module';\n\n@Module({\n  imports: [forwardRef(() => UserModule)],\n  exports: [AuthService],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // injecting a service dependency\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n  ) {}\n\n  public login({\n    id,\n    username,\n    password,\n  }: {\n    id: number;\n    username: string;\n    password: string;\n  }) {\n    // check user exists in the database and if the password is correct\n    // login\n    // token\n\n    const user = this.userService.findOneById({ id });\n    console.log(`Logging in user ${user.firstName}`);\n\n    return user;\n  }\n\n  public isAuthenticated() {\n    return true; // replace with actual authentication logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostDtoWithMeta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the additional options for the post', example: undefined, type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:160\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostTypes, description: 'Possible tags for a post, range: ['post', 'page', 'story', 'series']', type: 'string'})@IsString()@IsEnum(PostTypes)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the date when the post was published', example: '2022-01-01T12:00:00Z', format: 'date-time', type: 'string'})@IsISO8601()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the excerpt of the post. Serialize your json content or else there will be an error', example: '{\n \"@context\": \"https://schema.org\", \n \"@type\": \"Person\"\n}', format: 'json', type: 'string'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(255)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']', type: 'string'})@IsString()@IsNotEmpty()@IsEnum(PostStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the author of the post', example: undefined, type: 'array', required: false})@IsOptional()@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is a title of the post', example: 'Hello World', type: 'string'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is a title of the post',\n    example: 'Hello World',\n    type: 'string',\n\n    // default: \"Hello World\"\n  }) // this adds the value to the post documentation\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostTypes,\n    description:\n      \"Possible tags for a post, range: ['post', 'page', 'story', 'series']\",\n    type: 'string',\n  })\n  @IsString()\n  //   @IsEnum(['post', 'page', 'story', 'series'])\n  @IsEnum(PostTypes)\n  @IsNotEmpty()\n  postType: PostTypes;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description:\n      \"Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']\",\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'This is the excerpt of the post. Serialize your json content or else there will be an error',\n    example:\n      '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\", \\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}',\n    format: 'json',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'This is the date when the post was published',\n    example: '2022-01-01T12:00:00Z',\n    format: 'date-time',\n    type: 'string',\n  })\n  @IsISO8601()\n  @IsNotEmpty()\n  publishedOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'This is the author of the post',\n    example: ['author', 'blog'],\n    type: 'array',\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true }) // validate each item in the array as a string\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    description: 'This is the additional options for the post',\n    example: [\n      {\n        key: 'sidebar',\n        value: true,\n      },\n      {\n        key: 'layout',\n        value: 'default',\n      },\n    ],\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'the key can be any string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'any value that you want to make for the key',\n          example: true,\n        },\n      },\n      required: ['key', 'value'],\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostDtoWithMeta)\n  metaOptions?: CreatePostDtoWithMeta[];\n}\n\nexport class CreatePostDtoWithMeta {\n  // @ApiProperty()\n  // @IsString()\n  // @MinLength(4)\n  // @IsNotEmpty()\n  // key: string;\n\n  // @ApiProperty()\n  // @IsNotEmpty()\n  // value: any;\n\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDtoWithMeta.html":{"url":"classes/CreatePostDtoWithMeta.html","title":"class - CreatePostDtoWithMeta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDtoWithMeta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:176\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is a title of the post',\n    example: 'Hello World',\n    type: 'string',\n\n    // default: \"Hello World\"\n  }) // this adds the value to the post documentation\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostTypes,\n    description:\n      \"Possible tags for a post, range: ['post', 'page', 'story', 'series']\",\n    type: 'string',\n  })\n  @IsString()\n  //   @IsEnum(['post', 'page', 'story', 'series'])\n  @IsEnum(PostTypes)\n  @IsNotEmpty()\n  postType: PostTypes;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description:\n      \"Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']\",\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'This is the excerpt of the post. Serialize your json content or else there will be an error',\n    example:\n      '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\", \\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}',\n    format: 'json',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'This is the date when the post was published',\n    example: '2022-01-01T12:00:00Z',\n    format: 'date-time',\n    type: 'string',\n  })\n  @IsISO8601()\n  @IsNotEmpty()\n  publishedOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'This is the author of the post',\n    example: ['author', 'blog'],\n    type: 'array',\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true }) // validate each item in the array as a string\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    description: 'This is the additional options for the post',\n    example: [\n      {\n        key: 'sidebar',\n        value: true,\n      },\n      {\n        key: 'layout',\n        value: 'default',\n      },\n    ],\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'the key can be any string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'any value that you want to make for the key',\n          example: true,\n        },\n      },\n      required: ['key', 'value'],\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostDtoWithMeta)\n  metaOptions?: CreatePostDtoWithMeta[];\n}\n\nexport class CreatePostDtoWithMeta {\n  // @ApiProperty()\n  // @IsString()\n  // @MinLength(4)\n  // @IsNotEmpty()\n  // key: string;\n\n  // @ApiProperty()\n  // @IsNotEmpty()\n  // value: any;\n\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Tag Description', example: 'A modern programming language', type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-tag.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)@Matches(/^https?:\\/\\/[^\\s]+$/, {message: 'Invalid URL format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-tag.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the tag', example: 'TypeScript', type: 'string'})@IsNotEmpty()@IsString()@MinLength(3)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-tag.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-tag.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(512)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-tag.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty({\n    description: 'Name of the tag',\n    example: 'TypeScript',\n    type: 'string',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(255)\n  name: string;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(512)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiPropertyOptional({\n    description: 'Tag Description',\n    example: 'A modern programming language',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional({})\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  @Matches(/^https?:\\/\\/[^\\s]+$/, {\n    message: 'Invalid URL format',\n  })\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 123, type: Number})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/get-users-param.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 123,\n    type: Number,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number) // transform string to number if provided\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entity/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/meta-option.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/meta-option.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Update post with a specific id', example: 123, type: 'number'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n// import { PartialType } from '@nestjs/mapped-types'; \n// we are using the import from swagger so it shows up in our documentation, it still works likes expected as the import from @nestjs/mapped-types\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'Update post with a specific id',\n    example: 123,\n    type: 'number',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entity/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostDtoWithMeta[]\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostTypes, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { CreatePostDtoWithMeta } from '../dtos/create-post.dto';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostTypes,\n    default: PostTypes.POST,\n  })\n  postType: PostTypes;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: false,\n  })\n  publishedOn: Date;\n\n  tags?: string[];\n  metaOptions?: CreatePostDtoWithMeta[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                getAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post'})@ApiResponse({status: undefined, description: 'Created post', type: CreatePostDto})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:60\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\nThis function handles the creation of a new post by processing the provided CreatePostDto.\nIt logs the received data and returns a confirmation message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the details of the post to be created.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A confirmation message indicating that the post request was received.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: undefined, description: 'All posts', type: undefined})@Get(':userId')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\nThis function handles GET requests to fetch all posts associated with a given user ID.\nIt logs the user ID for which posts are being retrieved and then calls the post service\nto fetch the posts.\nExample :                                representing all posts for the specified user.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user whose posts are to be retrieved.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CreatePostDto objects,\nrepresenting all posts for the specified user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(updatePostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates a post'})@ApiResponse({status: undefined, description: 'Updated post', type: CreatePostDto})@Patch('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:85\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\nThis function handles PATCH requests to update an existing post using the provided data.\nIt logs the update data received and processes the partial post update through the\nPatchPostDto data transfer object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the fields to be updated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A confirmation message indicating that the patch request was received.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   *\n   * This function handles GET requests to fetch all posts associated with a given user ID.\n   * It logs the user ID for which posts are being retrieved and then calls the post service\n   * to fetch the posts.\n   *\n   * @param {number} userId - The ID of the user whose posts are to be retrieved.\n   * @returns {Promise} A promise that resolves to an array of CreatePostDto objects,\n   *                                     representing all posts for the specified user.\n   */\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'All posts',\n    type: [CreatePostDto],\n  })\n  @Get(':userId')\n  getAllPosts(@Param('userId') userId: number) {\n    console.log(`Getting posts for user ${userId}`);\n\n    return this.postService.getAllPosts({ userId });\n  }\n\n  /**\n   * Creates a new post.\n   *\n   * This function handles the creation of a new post by processing the provided CreatePostDto.\n   * It logs the received data and returns a confirmation message.\n   *\n   * @param {CreatePostDto} createPostDto - The data transfer object containing the details of the post to be created.\n   * @returns {string} A confirmation message indicating that the post request was received.\n   */\n  @ApiOperation({\n    summary: 'Creates a new post',\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Created post',\n    type: CreatePostDto,\n  })\n  @Post('')\n  createPost(@Body() createPostDto: CreatePostDto) {\n    console.log({ createPostDto });\n\n    return 'You sent a post request to posts endpoint';\n  }\n\n  /**\n   * Updates an existing post.\n   *\n   * This function handles PATCH requests to update an existing post using the provided data.\n   * It logs the update data received and processes the partial post update through the\n   * PatchPostDto data transfer object.\n   *\n   * @param {PatchPostDto} updatePostDto - The data transfer object containing the fields to be updated.\n   * @returns {string} A confirmation message indicating that the patch request was received.\n   */\n  @ApiOperation({\n    summary: 'Updates a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Updated post',\n    type: CreatePostDto,\n  })\n  @Patch('')\n  updatePost(@Body() updatePostDto: PatchPostDto) {\n    console.log({ updatePostDto });\n\n    return 'You sent a patch request to posts endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { UserModule } from 'src/user/user.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post as PostEntity } from './entity/post.entity';\n\n@Module({\n  imports: [UserModule, TypeOrmModule.forFeature([PostEntity])],\n  controllers: [PostsController],\n  providers: [PostsService],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getAllPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userServices: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userServices\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { user: any; title: string; content: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\n\n@Injectable()\nexport class PostsService {\n  // injecting user service\n  constructor(private userServices: UserService) {}\n\n  public getAllPosts({ userId }: { userId: number }) {\n    // checks if a user exists and is authenticated\n    // gets the user's posts from a database\n    // and returns them\n\n    const user = this.userServices.findOneById({ id: userId });\n    console.log(`Getting posts for user ${user.firstName}`);\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND, {\n        cause: 'User not registered',\n        description: 'User was not found in the system database',\n      });\n    }\n\n    const dummyPost = {\n      user,\n      title: 'Post Title',\n      content: 'Post Content',\n    };\n\n    return dummyPost;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entity/tags.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                deletedDate\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/tags.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/tags.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/tags.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/tags.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/tags.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/tags.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/tags.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/tags.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/tags.entity.ts:54\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'json',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n    length: 1024,\n  })\n  featuredImageUrl?: string;\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @DeleteDateColumn({})\n  deletedDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 60, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    unique: true,\n    nullable: false,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 60,\n    nullable: false,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Get all users', description: 'Get all users with optional pagination'})@ApiResponse({status: 200, description: 'All users', type: CreateUserDto})@ApiQuery({name: 'limit', type: Number, required: false, description: 'Limit the number of returned results', example: 10})@ApiQuery({name: 'page', type: Number, required: false, description: 'The position of the number that you want the api to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users') // with the updated version of @nestjs/swagger there is no need to use @ApiTags\nexport class UserController {\n  /**\n   * Final Endpoint - /users/id?limit=10&page=1\n   * Parama id - optional, convert to integer, cannot have a default value\n   * Query limit - integer, default 10\n   * Query page - integer, default value 1\n   * ==> USE CASES\n   * /users/ -> return all users with default pagination\n   * /users/1223 -> returns one user whos id is 1234\n   * /users?limit=10&page=2 -> return page 2 with limit of pagination 10\n   */\n\n  constructor(private readonly userService: UserService) {}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Get all users',\n    description: 'Get all users with optional pagination',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'All users',\n    type: CreateUserDto,\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: Number,\n    required: false,\n    description: 'Limit the number of returned results',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    required: false,\n    description: 'The position of the number that you want the api to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    // console.log(getUserParamDto);\n    // console.log(`Limit: ${limit}, Page: ${page}`);\n\n    const findAll = this.userService.findAll({\n      page,\n      limit,\n      userParamsDTO: getUserParamDto,\n    });\n\n    return findAll;\n  }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    const createUser = this.userService.createUser({ user: createUserDto });\n    return createUser;\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n    // return 'You sent a patch request to users endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entity/user.entity';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule), // for dependency injection\n    TypeOrmModule.forFeature([User]), // for repository (entity) injection\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/auth.service';\nimport { Repository } from 'typeorm';\nimport { User } from './entity/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from './dtos/create-user.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    // injecting auth service dependency\n    @Inject(forwardRef(() => AuthService))\n    private authService: AuthService,\n\n    // injecting user service repository dependency\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) {}\n\n  public async createUser({\n    user,\n  }: {\n    user: CreateUserDto;\n  }): Promise {\n    // check user\n    const existingUser = await this.userRepository.findOne({\n      where: { email: user.email },\n    });\n\n    // handle exception\n    if (existingUser) {\n      throw new HttpException('Email already exists', HttpStatus.CONFLICT);\n    }\n\n    // create a new user\n    const newUser = await this.userRepository.create(user);\n    await this.userRepository.save(newUser);\n\n    return newUser;\n  }\n\n  public findAll({\n    userParamsDTO,\n    limit,\n    page,\n  }: {\n    userParamsDTO: GetUsersParamDto;\n    limit: number;\n    page: number;\n  }) {\n    const { id } = userParamsDTO;\n\n    const isAuth = this.authService.isAuthenticated();\n    console.log(`User authenticated: ${isAuth}`);\n\n    if (!isAuth) {\n      throw new HttpException('User not found', HttpStatus.FORBIDDEN);\n    }\n\n    console.log(\n      `Find all users with id: ${id}, limit: ${limit}, page: ${page}`,\n    );\n\n    return [\n      { id: 1, firstName: 'John Doe', email: 'john@doe.com' },\n      { id: 2, firstName: 'Jane Doe', email: 'jane@doe.com' },\n    ];\n  }\n\n  public findOneById({ id }: { id: number }) {\n    console.log(`Find user with id: ${id}`);\n\n    const dummyUserData = [\n      { id: 1, firstName: 'John Doe', email: 'john@doe.com' },\n      { id: 2, firstName: 'Jane Doe', email: 'jane@doe.com' },\n    ];\n\n    return dummyUserData.find((user) => user.id === id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/auth.controller.ts\n            \n            type alias\n            LoginBody\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDtoWithMeta\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/entity/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/entity/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/entity/tags.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../posts.enums.ts)\n                        \n                        \n                            PostTypes   (src/.../posts.enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/posts.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PostTypes\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LoginBody   (src/.../auth.controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.controller.ts\n    \n    \n        \n            \n                \n                    \n                    LoginBody\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
