var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.225,1,2.078]],["body/guards/AccessTokenGuard.html",[1,2.504,2,2.394,3,0.175,4,0.156,5,0.156,6,3.208,7,2.4,8,2.178,9,0.252,10,1.148,11,1.708,12,5.24,13,2.543,14,5.26,15,1.873,16,2.394,17,4.431,18,2.933,19,3.01,20,0.645,21,3.121,22,1.551,23,0.019,24,1.41,25,0.64,26,1.002,27,3.86,28,4.413,29,3.121,30,3.445,31,1.204,32,2.212,33,3.121,34,1.608,35,3.121,36,0.393,37,1.451,38,1.373,39,1.451,40,0.813,41,0.565,42,1.537,43,1.633,44,3.732,45,2.394,46,2.683,47,2.394,48,1.74,49,1.863,50,0.294,51,1.798,52,2.394,53,0.965,54,2.349,55,2.394,56,1.627,57,1.537,58,1.479,59,3.121,60,3.121,61,3.121,62,3.121,63,0.048,64,2.394,65,1.976,66,2.683,67,2.683,68,2.178,69,2.006,70,1.537,71,2.178,72,3.121,73,4.303,74,3.121,75,1.204,76,1.74,77,3.121,78,3.121,79,3.121,80,3.121,81,3.121,82,3.121,83,2.683,84,2.088,85,1.69,86,2.683,87,2.683,88,2.887,89,1.74,90,3.86,91,1.175,92,3.121,93,1.863,94,2.394,95,1.863,96,2.394,97,1.863,98,2.394,99,3.121,100,2.212,101,2.683,102,1.74,103,2.212,104,2.683,105,1.633,106,2.006,107,0.837,108,0.011,109,0.011]],["title/controllers/AppController.html",[110,1.403,111,2.602]],["body/controllers/AppController.html",[3,0.289,4,0.258,5,0.258,9,0.416,10,1.603,20,0.632,23,0.019,31,1.382,36,0.389,41,0.934,50,0.289,58,1.763,63,0.08,75,1.382,108,0.015,109,0.015,110,2.36,111,4.378,112,2.042,113,4.433,114,6.045,115,1.382,116,5.157,117,4.035,118,4.433,119,3.078,120,3.599,121,5.157]],["title/modules/AppModule.html",[122,1.27,123,2.602]],["body/modules/AppModule.html",[0,1.478,1,2.864,3,0.139,4,0.124,5,0.257,7,1.033,11,0.804,18,1.38,19,1.978,23,0.019,25,0.25,36,0.452,39,2.134,41,0.448,42,1.219,43,1.295,48,1.38,50,0.212,51,0.73,63,0.038,68,1.728,69,2.431,93,1.478,95,1.478,97,1.478,100,2.26,108,0.009,109,0.009,110,0.932,111,3.203,112,1.497,117,3.481,118,2.128,122,1.885,123,5.025,124,1.151,125,1.089,126,1.295,127,1.295,128,1.151,129,2.4,130,1.295,131,2.128,132,2.128,133,2.128,134,3.481,135,3.749,136,3.481,137,3.749,138,3.481,139,3.252,140,3.252,141,1.978,142,1.295,143,1.295,144,1.899,145,2.949,146,2.949,147,2.949,148,3.302,149,2.476,150,2.476,151,2.476,152,2.476,153,2.476,154,1.591,155,1.089,156,1.759,157,2.431,158,2.128,159,2.476,160,2.476,161,2.476,162,2.901,163,4.415,164,2.476,165,2.476,166,3.782,167,2.476,168,3.782,169,2.476,170,3.782,171,2.476,172,3.251,173,1.591,174,2.476,175,1.295,176,2.476,177,1.899,178,2.639,179,2.476,180,4.244,181,1.899,182,5.136,183,2.476,184,2.476,185,2.476,186,2.476,187,3.782,188,3.782,189,2.431,190,2.639,191,2.476,192,3.782,193,2.476,194,3.782,195,2.476,196,2.476,197,2.476,198,2.476,199,2.128,200,3.944,201,2.476,202,2.128,203,2.476,204,0.98,205,2.476,206,2.476,207,2.128,208,2.901,209,2.476,210,2.476,211,2.476,212,3.782,213,2.476,214,2.476,215,2.476,216,2.476,217,1.219,218,2.476,219,2.476,220,1.478,221,2.476,222,2.476,223,2.476,224,1.38,225,2.128,226,2.476,227,2.639,228,2.476,229,0.932,230,0.98,231,1.899,232,2.476,233,2.476,234,2.476,235,1.899,236,3.251,237,2.901,238,1.899,239,1.899,240,1.899,241,1.899,242,1.899,243,1.728,244,1.899,245,1.899,246,2.128,247,1.151,248,1.478,249,1.728,250,2.901]],["title/injectables/AppService.html",[40,0.675,117,2.225]],["body/injectables/AppService.html",[3,0.299,4,0.268,5,0.268,9,0.431,10,1.637,20,0.654,23,0.018,31,1.431,36,0.331,40,1.16,41,0.967,50,0.299,58,1.801,63,0.083,75,1.431,108,0.016,109,0.016,114,6.116,117,3.824,251,2.01,252,4.59,253,5.34,254,4.59,255,4.59]],["title/controllers/AuthController.html",[110,1.403,256,2.602]],["body/controllers/AuthController.html",[3,0.232,4,0.207,5,0.207,9,0.334,10,1.394,20,0.668,22,1.608,23,0.019,24,1.462,25,0.55,26,1.039,31,1.462,36,0.418,38,1.82,41,0.749,50,0.232,63,0.064,73,4.17,75,1.462,108,0.013,109,0.013,110,1.557,112,1.638,115,1.462,119,2.469,256,3.807,257,3.556,258,2.659,259,3.256,260,4.688,261,3.506,262,4.137,263,4.17,264,4.137,265,4.137,266,6.102,267,4.137,268,3.872,269,4.137,270,4.137,271,4.137,272,3.256,273,4.137,274,2.659,275,1.343,276,3.402,277,3.556,278,3.556,279,2.469,280,4.137,281,3.173,282,3.173,283,4.137,284,4.137,285,4.137,286,5.454,287,4.137,288,4.137,289,2.469,290,3.173,291,4.137,292,2.307,293,4.137,294,3.556,295,4.137,296,4.137,297,3.556,298,4.137,299,4.137,300,4.137]],["title/modules/AuthModule.html",[122,1.27,134,2.225]],["body/modules/AuthModule.html",[3,0.204,4,0.183,5,0.183,11,1.186,18,2.036,19,2.624,23,0.019,36,0.447,39,1.698,41,0.661,42,1.799,43,1.911,48,2.036,49,2.18,50,0.204,63,0.056,93,2.18,95,2.18,97,2.18,108,0.012,109,0.012,112,1.986,122,1.952,124,1.698,125,1.607,126,1.911,127,1.911,128,1.698,129,2.997,130,2.997,134,4.345,139,2.796,141,2.624,142,1.911,143,1.911,148,2.994,162,2.802,177,2.802,208,2.802,237,3.847,238,2.802,239,2.802,240,2.802,241,2.802,242,2.802,243,2.549,244,2.802,245,2.802,247,2.332,248,2.994,249,2.549,250,2.802,256,3.998,276,4.059,277,3.139,301,3.139,302,3.139,303,3.139,304,3.644,305,3.723,306,3.986,307,3.652,308,2.994,309,3.652,310,3.139,311,3.139,312,3.501,313,3.652,314,3.139,315,3.847,316,3.139,317,2.348]],["title/injectables/AuthService.html",[40,0.675,276,2.078]],["body/injectables/AuthService.html",[3,0.148,4,0.133,5,0.133,7,1.104,9,0.214,10,1.016,11,1.943,13,2.216,15,1.659,17,4.333,18,2.664,19,2.78,20,0.733,22,1.409,23,0.019,24,1.281,25,0.659,26,0.911,31,1.281,34,1.902,36,0.419,37,1.231,38,1.164,39,1.231,40,0.72,41,0.479,42,1.303,43,1.384,44,1.475,48,2.218,49,1.579,50,0.148,51,1.567,53,0.819,54,1.384,57,1.959,63,0.041,65,2.338,69,1.701,70,1.959,71,1.847,73,3.072,75,1.281,84,1.85,85,1.497,88,1.701,89,1.475,91,2,100,1.303,102,1.475,103,1.959,105,1.384,107,0.709,108,0.01,109,0.01,175,1.384,189,1.701,217,1.959,246,2.275,247,2.471,248,1.579,251,0.996,260,4.107,261,3.416,263,2.557,268,2.374,272,2.852,276,2.218,278,2.275,281,2.03,282,2.03,304,3.341,305,3.176,306,3.973,308,1.579,311,2.275,314,2.275,315,3.051,316,2.275,317,2.557,318,2.275,319,1.118,320,2.941,321,5.696,322,5.314,323,4.778,324,2.646,325,3.058,326,2.646,327,2.646,328,2.776,329,2.646,330,2.646,331,1.959,332,2.646,333,2.646,334,2.646,335,2.646,336,2.03,337,2.03,338,2.03,339,2.776,340,2.03,341,2.275,342,2.275,343,2.03,344,3.419,345,2.646,346,4.778,347,2.646,348,1.847,349,2.646,350,2.646,351,2.275,352,2.03,353,2.275,354,2.646,355,2.646,356,4.076,357,2.646,358,2.646,359,2.275,360,2.275,361,2.646]],["title/guards/AuthenticationGuard.html",[0,2.225,178,2.602]],["body/guards/AuthenticationGuard.html",[0,1.87,1,3.651,2,4.876,3,0.175,4,0.157,5,0.157,7,1.307,9,0.253,10,1.151,11,1.711,12,6.09,13,2.651,15,1.878,20,0.552,22,1.328,23,0.019,24,1.207,25,0.581,26,0.858,27,3.871,28,4.421,30,2.403,31,1.207,32,2.218,36,0.378,37,1.457,38,1.379,40,0.815,41,0.567,46,2.693,47,2.403,50,0.175,51,1.699,63,0.048,64,2.403,65,1.981,66,2.693,67,2.693,68,2.187,75,1.207,84,2.68,85,1.984,87,2.693,88,3.389,91,1.179,100,2.218,103,1.543,104,2.693,105,1.639,106,2.014,107,0.84,108,0.011,109,0.011,173,2.014,175,1.639,178,3.143,259,3.44,279,2.688,319,0.881,328,2.187,362,2.693,363,4.503,364,4.503,365,4.503,366,3.133,367,6.701,368,3.133,369,3.133,370,2.693,371,3.454,372,2.403,373,4.503,374,3.133,375,3.133,376,3.133,377,2.187,378,2.693,379,3.871,380,5.271,381,3.871,382,3.133,383,3.133,384,3.133,385,3.133,386,3.133,387,3.133,388,3.133,389,3.454,390,4.503,391,3.133,392,3.133,393,3.133,394,3.133,395,2.693,396,2.403,397,2.187,398,4.503,399,2.693,400,3.133,401,3.871,402,3.133,403,3.133,404,3.133,405,3.133,406,4.503,407,2.693]],["title/injectables/BcryptProvider.html",[40,0.675,312,2.602]],["body/injectables/BcryptProvider.html",[3,0.189,4,0.17,5,0.17,9,0.273,10,1.215,11,1.785,20,0.583,22,1.402,23,0.019,24,1.275,25,0.657,26,0.906,31,1.599,32,3.367,34,2.136,36,0.341,40,0.861,41,0.613,50,0.189,51,1.622,58,1.922,63,0.052,64,2.595,75,1.275,76,2.652,91,1.273,107,0.907,108,0.012,109,0.012,217,3.69,227,3.319,251,1.273,274,3.835,304,2.488,312,3.319,320,2.294,328,3.319,340,2.595,348,4.164,352,4.576,408,2.908,409,4.727,410,4.727,411,2.908,412,3.383,413,4.088,414,5.128,415,6.119,416,4.218,417,4.576,418,3.648,419,4.088,420,3.319,421,2.908,422,3.383,423,4.756,424,5.128,425,5.403,426,3.383,427,3.057,428,2.908,429,4.756,430,3.383,431,3.383,432,2.908,433,3.383]],["title/classes/CreateManyUsersDto.html",[63,0.058,434,2.225]],["body/classes/CreateManyUsersDto.html",[3,0.233,4,0.208,5,0.208,9,0.336,20,0.509,23,0.019,25,0.699,36,0.418,50,0.233,53,1.693,57,2.695,63,0.095,100,3.327,107,1.114,108,0.013,109,0.013,115,1.114,217,2.695,229,1.565,319,1.538,397,3.82,434,3.266,435,1.565,436,4.198,437,3.266,438,2.902,439,4.031,440,3.533,441,2.902,442,4.198,443,3.266,444,4.198,445,5.587,446,4.198,447,2.695,448,4.158,449,3.574,450,4.158,451,2.863,452,4.704,453,1.646,454,2.482,455,2.673,456,3.518,457,1.734,458,2.673,459,4.198,460,4.158,461,4.198,462,5.472,463,4.158,464,5.472,465,4.158,466,4.158,467,3.574]],["title/classes/CreateMetaOptionsDto.html",[63,0.058,468,2.225]],["body/classes/CreateMetaOptionsDto.html",[3,0.278,4,0.249,5,0.249,9,0.401,20,0.609,23,0.019,25,0.501,36,0.308,50,0.278,58,1.87,63,0.095,108,0.015,109,0.015,115,1.332,156,2.852,319,1.724,435,1.871,451,3.633,453,1.968,456,3.942,468,3.66,469,3.021,470,4.704,471,4.273,472,5.101,473,4.971,474,4.971,475,4.704,476,2.967,477,4.273,478,4.273,479,2.771]],["title/classes/CreatePostDto.html",[63,0.058,480,2.225]],["body/classes/CreatePostDto.html",[3,0.107,4,0.096,5,0.096,9,0.155,20,0.744,23,0.019,25,0.743,26,1.158,30,2.374,36,0.303,50,0.107,56,1.203,58,1.955,63,0.06,76,1.725,83,1.649,100,2.993,103,1.524,107,1.749,108,0.007,109,0.007,115,1.628,156,1.439,202,2.66,224,2.169,254,3.344,255,3.344,275,2.27,289,1.145,292,2.73,319,1.094,395,2.66,397,3.418,420,1.339,427,1.989,435,0.722,441,2.715,443,1.145,444,4.016,445,2.66,446,2.374,447,3.402,449,1.649,451,2.881,452,2.66,453,0.76,455,1.233,456,3.54,457,0.8,467,3.344,468,2.664,469,0.945,470,1.471,472,1.471,475,2.374,476,3.125,477,1.649,478,1.649,479,2.169,480,1.847,481,5.339,482,1.471,483,4.539,484,2.715,485,2.715,486,3.344,487,3.344,488,2.715,489,3.147,490,3.54,491,4.209,492,3.418,493,3.836,494,3.836,495,1.918,496,1.918,497,2.66,498,2.66,499,3.424,500,2.66,501,4.5,502,1.918,503,1.918,504,3.89,505,3.89,506,1.918,507,1.918,508,3.756,509,3.095,510,4.463,511,4.463,512,2.169,513,3.344,514,3.344,515,1.918,516,1.918,517,3.125,518,3.836,519,3.095,520,3.095,521,3.095,522,3.095,523,1.918,524,1.918,525,3.095,526,3.095,527,4.016,528,1.918,529,1.918,530,1.918,531,1.918,532,2.66,533,1.918,534,3.836,535,3.836,536,1.847,537,2.66,538,2.66,539,2.66,540,2.374,541,2.66,542,1.989,543,1.918,544,3.756,545,2.66,546,2.66,547,2.66,548,1.918,549,1.918,550,3.095,551,1.918,552,1.918,553,1.918,554,1.918,555,2.374,556,1.918,557,3.344,558,1.918,559,2.919,560,2.66,561,1.471,562,1.471,563,1.649,564,3.654,565,1.471,566,1.918,567,1.233,568,1.649,569,2.66,570,1.918,571,1.918,572,1.649,573,1.649,574,1.918,575,3.095,576,1.918,577,1.918,578,1.649,579,1.233,580,1.649,581,1.918,582,0.722,583,1.233,584,1.471,585,1.649,586,1.471]],["title/classes/CreateTagDto.html",[63,0.058,587,2.396]],["body/classes/CreateTagDto.html",[3,0.181,4,0.162,5,0.162,9,0.261,20,0.758,23,0.018,24,1.657,25,0.725,26,1.224,36,0.286,50,0.181,58,2.036,63,0.071,107,1.843,108,0.011,109,0.011,115,1.657,275,1.899,319,1.296,420,2.26,435,1.218,441,3.218,447,3.436,451,2.808,453,1.282,456,3.451,457,1.35,475,3.536,476,3.492,483,3.536,484,3.747,488,3.747,489,3.974,492,3.218,493,3.962,494,3.962,497,3.962,498,3.962,499,4.929,500,3.962,501,5.028,532,3.962,534,5.028,535,5.028,536,3.492,537,3.962,538,3.962,539,3.962,540,3.536,541,3.962,542,2.963,559,3.262,560,3.962,561,2.483,562,2.483,564,4.083,568,2.783,572,2.783,573,2.783,578,2.783,587,2.963,588,5.524,589,2.783,590,3.06,591,4.61,592,4.61,593,4.61,594,3.237,595,3.237,596,3.237,597,3.962,598,3.237,599,3.962,600,3.237,601,3.237,602,3.237,603,3.237,604,3.237,605,3.237,606,2.783,607,3.237]],["title/classes/CreateUserDto.html",[63,0.058,440,1.95]],["body/classes/CreateUserDto.html",[3,0.229,4,0.205,5,0.205,9,0.331,20,0.792,23,0.018,25,0.651,26,1.032,36,0.254,50,0.229,56,1.676,57,2.991,58,2.01,63,0.084,108,0.013,109,0.013,115,1.732,217,2.991,319,1.523,420,2.859,435,1.541,436,5.155,438,2.859,440,2.835,451,3.38,453,1.622,459,4.658,461,4.658,476,3.857,536,3.234,540,4.156,559,3.021,561,3.142,562,3.142,606,4.658,608,4.096,609,4.096,610,4.096,611,4.096,612,4.096,613,4.096,614,4.096,615,6.462,616,5.418,617,5.418,618,4.658,619,5.418,620,5.297,621,5.418,622,5.418,623,5.418,624,4.096,625,4.658,626,6.462,627,4.096,628,4.096]],["title/injectables/CreateUserProvider.html",[40,0.675,629,2.225]],["body/injectables/CreateUserProvider.html",[3,0.195,4,0.175,5,0.175,9,0.282,10,1.242,11,1.815,13,2.027,15,2.027,20,0.596,22,1.433,23,0.019,24,1.303,25,0.61,26,0.926,31,0.935,32,2.394,34,1.74,36,0.408,37,1.623,38,1.536,39,1.623,40,0.88,41,0.632,44,1.946,50,0.195,51,1.433,53,2.037,57,1.719,63,0.054,65,2.139,70,1.719,75,0.935,84,2.26,85,2.105,89,1.946,91,2.276,102,1.946,103,2.394,105,1.826,107,0.935,108,0.012,109,0.012,155,1.536,204,1.382,217,1.719,229,1.313,247,2.26,251,1.313,304,3.604,308,2.083,317,2.244,320,2.333,336,2.677,339,2.436,340,2.677,341,3,342,3,344,4.807,348,3.393,351,4.178,407,3,440,2.543,443,2.083,454,2.083,458,2.244,629,2.901,630,4.807,631,3,632,4.29,633,3.49,634,3.326,635,3.49,636,4.178,637,3,638,3.49,639,1.623,640,2.244,641,3.49,642,3,643,3.49,644,3.49,645,3,646,3.49,647,3.49,648,3.49,649,2.677,650,2.677,651,2.677,652,3.49,653,4.861,654,4.178,655,3.49,656,3.49]],["title/injectables/GenerateTokenProvider.html",[40,0.675,305,2.078]],["body/injectables/GenerateTokenProvider.html",[3,0.184,4,0.165,5,0.165,7,1.372,9,0.265,10,1.191,11,2.097,13,2.594,15,1.945,16,2.523,17,4.509,18,3.019,19,3.082,20,0.664,22,1.737,23,0.019,24,1.451,25,0.684,26,1.032,31,1.25,34,2.109,36,0.4,39,1.529,40,0.844,41,0.595,42,1.62,43,1.72,48,2.599,49,1.963,50,0.184,51,1.375,53,1.998,54,1.72,55,2.523,56,1.442,57,1.62,63,0.051,65,2.051,69,2.114,70,1.62,71,2.295,73,2.114,75,1.25,90,5.064,91,2.217,93,1.963,94,2.523,95,1.963,96,2.523,97,1.963,98,2.523,108,0.011,109,0.011,175,1.72,189,2.114,243,4.509,247,1.529,251,1.238,261,2.997,305,2.599,320,2.259,331,2.296,338,2.523,343,2.523,356,3.576,645,2.827,657,5.064,658,2.523,659,5.415,660,6.22,661,3.289,662,3.289,663,3.289,664,3.576,665,3.289,666,3.289,667,2.827,668,4.771,669,2.827,670,3.289,671,3.289,672,4.662,673,3.289,674,3.289,675,3.289,676,4.662,677,3.289,678,4.662,679,3.289]],["title/classes/GetPostsBaseDto.html",[63,0.058,680,2.602]],["body/classes/GetPostsBaseDto.html",[3,0.261,4,0.234,5,0.234,9,0.376,20,0.722,23,0.019,25,0.594,26,1.293,36,0.4,50,0.261,63,0.1,108,0.014,109,0.014,115,1.579,319,1.656,435,1.754,453,1.846,457,1.945,517,4.051,555,4.955,559,3.602,567,2.997,680,4.509,681,4.955,682,3.576,683,4.955,684,4.955,685,5.892,686,4.662,687,4.662,688,5.064,689,4.007,690,3.576,691,4.007,692,3.517,693,3.254,694,3.576,695,2.783,696,3.254]],["title/classes/GetPostsQueryDto.html",[63,0.058,695,2.225]],["body/classes/GetPostsQueryDto.html",[3,0.28,4,0.251,5,0.251,23,0.019,36,0.413,50,0.28,63,0.103,108,0.015,109,0.015,435,1.882,453,1.98,457,2.086,517,3.674,555,5.115,559,3.718,567,3.215,680,4.654,681,3.836,682,3.836,683,3.836,684,3.836,688,5.732,689,4.299,690,3.836,691,4.299,692,3.98,693,3.49,694,3.836,695,3.674,696,4.296]],["title/classes/GetUsersParamDto.html",[63,0.058,697,2.396]],["body/classes/GetUsersParamDto.html",[3,0.263,4,0.236,5,0.236,9,0.379,20,0.576,23,0.019,25,0.708,26,1.129,36,0.402,50,0.263,53,1.832,56,2.171,58,1.322,63,0.1,107,1.26,108,0.014,109,0.014,115,1.26,319,1.665,435,1.769,439,3.536,447,2.918,453,1.862,455,3.022,457,1.961,492,3.282,557,5.092,559,3.303,564,4.135,582,2.641,584,4.544,697,3.808,698,5.092,699,4.042,700,4.135,701,4.702,702,4.702,703,4.702,704,4.042]],["title/injectables/HashingProvider.html",[40,0.675,304,1.95]],["body/injectables/HashingProvider.html",[3,0.219,4,0.197,5,0.197,9,0.316,10,1.345,20,0.645,22,1.552,23,0.019,24,1.411,25,0.688,26,1.003,31,1.592,32,3.359,34,2.273,36,0.243,40,0.953,41,0.71,50,0.219,58,1.862,63,0.061,76,2.934,107,1.051,108,0.013,109,0.013,217,3.627,251,1.476,274,3.819,304,2.753,328,3.674,348,3.674,352,4.557,353,4.524,409,5.107,410,5.107,411,3.37,413,4.524,415,5.107,417,4.037,418,4.037,419,4.524,421,3.37,425,5.458,427,3.383,428,3.37,432,3.37,705,3.37,706,6.967,707,3.921,708,6.35,709,4.871,710,5.263,711,3.921,712,3.921,713,3.921]],["title/entities/MetaOption.html",[230,1.476,714,1.95]],["body/entities/MetaOption.html",[3,0.225,4,0.202,5,0.202,9,0.325,20,0.819,23,0.019,25,0.693,36,0.332,50,0.225,56,1.657,58,1.506,63,0.062,108,0.013,109,0.013,115,1.791,204,1.594,220,2.403,224,2.987,230,2.121,275,2.341,319,1.506,469,3.385,472,4.618,517,3.831,527,4.109,582,2.266,714,2.802,715,4.417,716,3.461,717,5.175,718,5.175,719,5.175,720,4.026,721,4.202,722,4.026,723,2.81,724,3.739,725,4.026,726,3.461,727,5.357,728,4.605,729,4.026,730,4.026,731,5.175,732,4.026,733,3.088,734,3.739,735,4.605,736,4.605,737,3.088,738,3.088,739,4.026,740,4.026,741,3.088]],["title/controllers/MetaOptionsController.html",[110,1.403,146,2.396]],["body/controllers/MetaOptionsController.html",[3,0.261,4,0.234,5,0.234,9,0.376,10,1.506,20,0.571,22,1.375,23,0.019,24,1.25,25,0.47,26,0.888,31,1.25,36,0.4,41,0.844,50,0.261,51,1.375,63,0.072,75,1.25,108,0.014,109,0.014,110,1.754,112,1.846,115,1.25,119,2.783,146,3.787,156,3.004,157,3.787,258,2.997,272,2.783,275,2.097,427,3.787,468,4.333,469,2.902,485,4.509,565,3.576,639,2.168,742,4.007,743,5.892,744,4.662,745,4.662,746,3.856,747,4.007,748,4.662,749,4.662,750,4.662]],["title/modules/MetaOptionsModule.html",[122,1.27,135,2.396]],["body/modules/MetaOptionsModule.html",[3,0.258,4,0.231,5,0.231,23,0.019,36,0.432,41,0.835,50,0.258,63,0.071,108,0.014,109,0.014,112,2.316,122,2.19,124,2.144,125,2.029,126,2.412,127,2.412,128,2.144,129,3.362,130,3.362,135,4.655,141,3.06,142,2.412,143,2.412,146,4.131,148,2.752,154,2.963,155,2.029,156,2.721,157,2.963,158,3.963,469,2.271,714,2.412,746,4.501,747,3.963,751,3.963,752,3.963,753,3.963,754,4.61,755,3.963,756,2.963,757,4.61]],["title/injectables/MetaOptionsService.html",[40,0.675,746,2.225]],["body/injectables/MetaOptionsService.html",[3,0.236,4,0.212,5,0.212,9,0.341,10,1.412,11,2.001,13,1.761,15,2.306,20,0.677,22,1.63,23,0.019,24,1.481,25,0.659,26,1.053,31,1.131,34,1.979,36,0.42,40,1.001,41,0.764,50,0.236,51,1.245,63,0.065,65,1.858,70,2.079,75,1.131,91,2.08,108,0.013,109,0.013,155,1.858,156,2.57,157,3.961,204,1.672,229,2.319,247,1.963,251,1.589,320,2.571,331,2.079,427,2.714,468,3.299,469,3.036,485,3.858,565,3.238,634,3.551,639,1.963,640,2.714,714,2.208,746,3.299,755,3.629,756,2.714,758,3.629,759,4.221,760,4.221,761,5.297,762,3.629,763,4.221,764,4.221,765,5.527,766,4.221,767,4.221]],["title/interfaces/Paginated.html",[768,2.602,769,2.396]],["body/interfaces/Paginated.html",[3,0.268,4,0.24,5,0.24,9,0.386,23,0.018,25,0.744,34,2.452,50,0.268,56,2.119,58,1.983,108,0.015,109,0.015,156,3.186,230,1.894,319,1.683,359,4.112,360,4.112,542,3.075,664,5.014,768,3.339,769,3.849,770,4.784,771,4.112,772,4.781,773,5.888,774,4.784,775,4.112,776,4.112,777,4.112,778,4.112,779,4.112,780,4.112,781,4.112,782,4.112]],["title/modules/PaginationModule.html",[122,1.27,136,2.225]],["body/modules/PaginationModule.html",[3,0.278,4,0.249,5,0.249,23,0.018,36,0.38,41,0.9,50,0.278,63,0.077,108,0.015,109,0.015,122,2.266,124,2.312,125,2.187,126,2.6,127,2.6,128,2.312,129,3.479,130,3.479,136,4.394,140,4.246,141,3.208,142,2.6,143,2.6,783,4.273,784,4.971,785,4.273,786,4.971,787,4.971]],["title/classes/PaginationQueryDto.html",[63,0.058,692,2.225]],["body/classes/PaginationQueryDto.html",[3,0.229,4,0.205,5,0.205,9,0.331,20,0.664,23,0.019,25,0.71,26,1.231,36,0.376,50,0.229,56,2.293,63,0.094,107,1.452,108,0.013,109,0.013,115,1.452,289,4.122,319,1.523,435,1.541,446,4.156,447,3.183,453,1.622,455,2.633,457,1.708,479,3.021,492,3.782,512,3.747,559,3.386,564,4.238,579,4.154,618,5.554,692,3.234,693,4.238,788,3.521,789,3.903,790,6.28,791,4.957,792,5.418,793,4.096,794,4.096,795,6.072]],["title/injectables/PaginationService.html",[40,0.675,140,2.078]],["body/injectables/PaginationService.html",[3,0.186,4,0.166,5,0.166,9,0.268,10,1.2,11,1.768,13,1.386,15,1.958,20,0.575,22,1.606,23,0.019,24,1.258,25,0.629,26,0.895,31,0.89,32,2.313,34,1.681,36,0.401,39,1.545,40,0.85,41,0.601,44,3.794,45,2.548,50,0.186,51,2.04,63,0.051,65,1.462,75,0.89,76,1.852,85,1.25,91,1.767,108,0.011,109,0.011,120,2.319,140,2.618,156,1.545,173,2.135,204,1.315,251,1.25,320,2.271,389,2.548,499,2.548,512,3.858,542,2.135,579,3.804,634,3.096,664,2.548,692,2.802,694,2.548,738,2.548,769,3.018,772,2.319,773,2.855,775,2.855,776,4.036,777,2.855,778,4.68,779,2.855,780,2.855,781,2.855,782,2.855,789,4.013,796,2.855,797,5.445,798,3.322,799,3.322,800,3.322,801,3.322,802,3.322,803,3.322,804,3.322,805,3.322,806,4.68,807,3.018,808,3.322,809,3.322,810,3.322,811,5.445,812,3.322,813,3.322,814,4.695,815,3.322,816,3.322,817,3.322,818,3.322,819,3.322,820,4.695,821,3.322,822,3.322,823,3.322,824,3.322,825,3.322,826,3.322,827,3.322]],["title/classes/PatchPostDto.html",[63,0.058,828,2.396]],["body/classes/PatchPostDto.html",[3,0.252,4,0.225,5,0.225,9,0.363,20,0.551,23,0.019,25,0.64,36,0.439,50,0.252,56,1.965,63,0.089,107,1.205,108,0.014,109,0.014,115,1.205,227,3.139,229,1.692,275,1.869,319,1.619,377,4.019,435,1.692,441,3.139,447,2.836,451,3.012,453,1.781,456,3.702,457,1.876,480,2.684,482,3.45,567,2.891,582,2.605,584,4.417,690,3.45,696,4.019,700,4.019,828,3.702,829,4.95,830,5.758,831,4.417,832,4.497,833,4.497,834,4.95,835,3.45,836,5.758,837,4.417,838,4.497,839,4.497,840,4.497,841,4.497,842,4.497,843,4.497]],["title/classes/PatchUserDto.html",[63,0.058,844,2.602]],["body/classes/PatchUserDto.html",[3,0.307,4,0.275,5,0.275,23,0.018,36,0.403,50,0.307,63,0.085,108,0.016,109,0.016,229,2.063,377,3.826,435,2.063,438,3.826,440,2.868,454,3.272,696,4.542,834,4.712,837,4.205,844,4.542,845,4.712,846,6.507]],["title/entities/Post.html",[230,1.476,275,1.21]],["body/entities/Post.html",[3,0.137,4,0.123,5,0.123,9,0.197,10,0.625,20,0.825,23,0.019,25,0.725,26,1.243,36,0.341,50,0.137,53,1.796,56,1.159,58,1.833,63,0.038,85,0.921,100,3.423,108,0.009,109,0.009,115,1.804,156,1.138,204,0.969,220,1.46,224,3.636,229,0.921,230,1.484,275,1.216,289,3.047,292,2.539,319,1.053,443,2.237,479,1.364,483,3.494,484,3.179,485,4.217,486,3.915,487,3.915,488,3.179,489,2.928,490,3.537,491,3.915,508,4.221,517,2.237,544,4.221,563,2.103,569,5.358,582,1.714,583,2.928,590,2.67,667,2.103,709,3.915,714,2.879,715,1.573,721,3.179,723,4.351,724,4.891,726,2.103,734,4.46,735,3.221,736,3.221,737,3.915,741,2.874,756,1.573,772,1.708,847,2.103,848,2.446,849,3.747,850,5.805,851,2.446,852,2.446,853,4.453,854,4.453,855,3.221,856,2.446,857,2.446,858,3.747,859,2.446,860,2.446,861,3.747,862,2.446,863,2.446,864,2.874,865,2.874,866,2.446,867,2.446,868,2.103,869,3.747,870,2.446,871,2.446,872,3.221,873,2.446,874,3.221,875,3.221,876,3.747,877,2.446,878,2.446,879,2.446,880,2.446,881,2.103,882,2.103,883,3.915,884,2.446,885,2.446,886,2.446,887,2.103,888,2.446,889,2.103,890,2.446,891,2.446,892,2.446,893,2.446,894,3.747,895,2.446,896,2.446,897,2.446,898,2.446]],["title/controllers/PostsController.html",[110,1.403,145,2.396]],["body/controllers/PostsController.html",[3,0.103,4,0.092,5,0.092,6,1.027,7,0.768,9,0.149,10,0.765,20,0.534,22,1.285,23,0.019,24,1.168,25,0.605,26,0.83,31,1.564,32,1.863,36,0.361,37,0.856,38,0.81,41,0.333,44,2.429,50,0.103,51,1.115,53,2.068,54,2.279,56,1.745,58,0.842,63,0.028,70,1.475,75,1.168,76,2.864,84,1.392,85,2.256,86,1.583,88,1.184,107,1.706,108,0.007,109,0.007,110,0.693,112,0.729,115,1.168,119,1.099,120,1.285,145,1.924,175,0.963,227,2.09,235,3.941,258,1.184,259,1.099,272,1.787,274,2.801,275,2.329,279,1.099,292,2.429,372,1.412,389,1.412,397,2.09,399,2.573,414,2.573,417,2.296,418,3.342,442,3.342,443,2.601,447,0.907,457,0.768,480,3.95,536,3.066,582,2.309,586,1.412,639,0.856,668,3.342,695,2.601,700,3.041,704,4.121,772,4.368,791,3.342,807,1.924,828,3.48,831,3.941,835,2.296,887,4.416,899,1.583,900,4.71,901,3.342,902,2.994,903,3.252,904,3.252,905,1.841,906,3.342,907,2.994,908,1.841,909,1.841,910,1.841,911,5.137,912,2.994,913,2.994,914,5.137,915,5.642,916,5.137,917,5.137,918,4.357,919,2.994,920,1.841,921,2.994,922,2.994,923,2.296,924,1.841,925,1.841,926,1.841,927,4.794,928,4.357,929,1.841,930,1.841,931,1.841,932,4.357,933,2.994,934,2.994,935,4.357,936,2.994,937,3.783,938,3.783,939,2.994,940,2.994,941,1.841,942,4.357,943,3.745,944,1.841,945,1.841,946,4.357,947,4.416,948,2.994,949,2.994,950,4.357,951,2.994,952,1.924,953,2.296,954,1.841,955,1.787,956,1.583,957,3.677,958,4.121,959,1.412,960,1.285,961,1.583,962,2.296,963,1.412,964,1.841,965,1.841,966,1.841,967,3.342,968,3.783,969,1.841,970,1.841,971,1.841,972,1.583,973,1.841,974,1.583,975,1.285,976,2.994,977,1.841,978,1.841,979,1.841,980,1.841,981,2.573,982,1.841,983,1.841,984,1.412,985,2.994,986,1.841]],["title/modules/PostsModule.html",[122,1.27,137,2.396]],["body/modules/PostsModule.html",[3,0.228,4,0.204,5,0.204,23,0.019,36,0.448,41,0.738,50,0.228,63,0.063,108,0.013,109,0.013,112,2.139,122,2.064,124,1.895,125,1.793,126,2.132,127,2.132,128,1.895,129,3.169,130,3.169,136,4.116,137,4.789,138,4.116,139,3.845,141,2.825,142,2.132,143,2.132,145,3.894,148,3.224,154,2.62,155,1.793,275,1.323,310,3.503,469,2.008,714,2.825,715,2.62,756,2.62,955,4.422,956,3.503,987,3.503,988,3.503,989,3.503,990,4.076,991,4.076,992,4.076,993,4.076,994,3.503,995,4.076,996,4.076,997,4.076]],["title/injectables/PostsService.html",[40,0.675,955,2.225]],["body/injectables/PostsService.html",[3,0.11,4,0.099,5,0.099,9,0.159,10,0.808,11,2.07,13,2.071,15,1.319,20,0.608,22,1.464,23,0.019,24,1.331,25,0.653,26,0.946,31,1.215,32,1.558,34,2.072,36,0.395,37,1.471,38,0.867,40,0.573,41,0.357,50,0.11,51,1.846,53,0.978,56,1.225,63,0.03,65,1.392,70,1.951,75,1.215,84,2.589,85,2.095,89,1.099,91,2.4,102,1.099,103,1.558,105,2.072,106,1.267,107,1.062,108,0.008,109,0.008,140,3.104,155,0.867,204,0.78,207,2.719,229,1.706,247,0.917,248,1.176,249,2.207,251,0.742,275,1.989,290,1.512,292,1.099,320,2.66,325,2.233,331,1.951,337,1.512,469,0.971,480,1.888,489,2.033,490,4.099,512,1.763,536,1.176,582,2.178,583,2.914,586,3.039,634,3.028,639,0.917,640,1.267,649,1.512,650,1.512,651,1.512,668,2.426,683,1.512,684,1.512,695,1.888,714,1.031,715,1.267,738,1.512,756,1.267,761,3.405,762,1.694,769,1.267,789,2.033,806,1.694,828,2.033,831,3.478,835,2.426,900,2.207,901,3.039,903,3.405,904,2.719,923,1.512,952,2.546,955,1.888,959,1.512,960,1.376,961,1.694,972,3.405,975,3.886,981,2.719,984,1.512,994,1.694,998,1.694,999,1.971,1000,3.104,1001,4.534,1002,1.971,1003,3.163,1004,1.971,1005,1.694,1006,1.971,1007,1.971,1008,1.971,1009,1.971,1010,1.971,1011,1.971,1012,1.971,1013,1.971,1014,1.971,1015,3.163,1016,1.971,1017,1.971,1018,1.971,1019,1.971,1020,1.971,1021,1.694,1022,1.971,1023,1.971,1024,3.808,1025,3.163,1026,1.971,1027,3.961,1028,2.719,1029,3.163,1030,3.163,1031,3.961,1032,1.971,1033,3.163,1034,1.971,1035,1.971,1036,1.971,1037,3.163,1038,1.694,1039,1.971,1040,3.163,1041,3.163,1042,1.971,1043,3.163,1044,3.163,1045,1.971,1046,3.163,1047,1.971,1048,3.163,1049,1.971,1050,3.163,1051,1.971,1052,3.163,1053,1.971,1054,3.163,1055,1.971,1056,3.163,1057,1.971,1058,3.163,1059,1.971,1060,2.719,1061,1.971,1062,1.971,1063,1.971,1064,1.971,1065,1.971,1066,1.694]],["title/classes/RefreshTokenDto.html",[63,0.058,268,2.225]],["body/classes/RefreshTokenDto.html",[3,0.297,4,0.266,5,0.266,9,0.428,20,0.65,23,0.018,25,0.535,36,0.329,50,0.297,58,1.794,63,0.099,108,0.015,109,0.015,115,1.422,261,4.399,268,3.809,319,1.794,435,1.997,451,3.338,453,2.101,476,3.809,1067,5.485,1068,4.561,1069,5.306,1070,5.306]],["title/injectables/RefreshTokenProvider.html",[40,0.675,306,2.225]],["body/injectables/RefreshTokenProvider.html",[3,0.186,4,0.166,5,0.166,7,1.383,9,0.268,10,1.198,11,1.766,13,2.466,15,1.956,16,2.543,17,4.52,18,3.033,19,3.093,20,0.574,22,1.382,23,0.019,24,1.257,25,0.596,26,0.893,31,0.889,34,1.678,36,0.421,37,2.18,38,1.459,39,1.542,40,0.849,41,0.6,42,1.633,43,1.734,48,2.614,49,1.979,50,0.186,51,1.604,53,1.683,54,1.734,55,3.596,63,0.051,65,2.063,69,2.131,70,1.633,71,2.314,73,3.801,75,0.889,84,1.542,85,1.764,88,2.131,89,1.848,91,2.047,93,1.979,94,2.543,95,1.979,96,2.543,97,1.979,98,2.543,102,1.848,103,2.309,105,1.734,106,3.014,107,0.889,108,0.011,109,0.011,175,1.734,189,2.131,247,1.542,251,1.248,261,3.014,268,2.798,281,2.543,282,2.543,305,3.712,306,2.798,308,1.979,315,2.543,320,2.269,325,3.35,331,1.633,337,2.543,338,2.543,339,2.314,343,2.543,356,3.596,370,2.85,582,1.248,597,2.85,658,2.543,669,4.03,791,2.543,1071,4.675,1072,5.439,1073,3.315,1074,3.315,1075,3.315,1076,3.315,1077,5.439,1078,2.85,1079,3.315,1080,3.315,1081,3.315,1082,3.315,1083,3.315]],["title/classes/SignInDto.html",[63,0.058,263,2.396]],["body/classes/SignInDto.html",[3,0.285,4,0.255,5,0.255,9,0.411,20,0.763,23,0.018,25,0.628,36,0.316,50,0.285,57,3.311,58,1.969,63,0.096,108,0.015,109,0.015,115,1.668,217,3.311,263,4.001,319,1.75,435,1.917,451,3.517,453,2.017,476,3.716,625,5.351,1084,4.378,1085,5.093,1086,5.093,1087,5.093,1088,5.093]],["title/entities/Tag.html",[230,1.476,590,1.95]],["body/entities/Tag.html",[3,0.179,4,0.16,5,0.16,9,0.258,20,0.853,23,0.019,24,1.43,25,0.733,26,1.22,36,0.283,50,0.179,56,1.414,58,1.956,63,0.049,100,3.427,107,1.43,108,0.011,109,0.011,115,1.865,204,1.267,220,1.91,224,3.244,230,1.81,275,2.078,319,1.285,484,3.723,488,3.723,489,3.429,517,3.821,527,3.507,582,2.007,590,2.392,709,3.507,717,4.585,718,4.585,719,4.585,721,3.723,723,4.296,724,4.857,728,3.929,731,4.585,733,2.454,734,4.468,737,3.507,853,4.91,854,4.91,855,3.929,864,3.507,865,4.464,868,2.75,872,3.929,874,2.75,875,3.929,900,3.723,1060,3.929,1089,2.75,1090,5.334,1091,3.2,1092,5.334,1093,3.2,1094,3.2,1095,3.2,1096,3.2,1097,3.2,1098,3.2,1099,3.2,1100,3.2,1101,3.2]],["title/controllers/TagsController.html",[110,1.403,147,2.396]],["body/controllers/TagsController.html",[3,0.205,4,0.183,5,0.183,9,0.295,10,1.284,11,2.169,20,0.703,22,1.691,23,0.019,24,1.537,25,0.578,26,1.093,31,1.537,36,0.382,41,0.663,50,0.205,51,1.079,56,2.067,63,0.057,75,1.537,91,1.89,108,0.012,109,0.012,110,1.377,112,1.449,115,1.537,119,2.185,147,3.229,229,1.89,258,2.353,272,2.185,275,1.631,331,2.474,457,1.527,490,2.353,582,2.623,587,3.968,590,3.495,639,1.702,807,2.353,901,3.853,906,4.399,952,4.48,953,4.399,957,4.734,967,4.399,1000,3.197,1102,3.146,1103,5.023,1104,5.023,1105,3.66,1106,3.66,1107,3.66,1108,4.93,1109,3.66,1110,3.66,1111,3.66,1112,3.66,1113,4.318,1114,3.66,1115,3.66,1116,3.146,1117,3.146,1118,3.66,1119,3.66,1120,4.318,1121,3.66,1122,3.66,1123,3.66,1124,3.66,1125,3.66,1126,3.66]],["title/modules/TagsModule.html",[122,1.27,138,2.225]],["body/modules/TagsModule.html",[3,0.262,4,0.234,5,0.234,23,0.019,36,0.434,41,0.847,50,0.262,63,0.072,108,0.014,109,0.014,112,2.337,122,2.204,124,2.174,125,2.057,126,2.446,127,2.446,128,2.174,129,3.384,130,3.384,138,4.336,141,3.088,142,2.446,143,2.446,147,4.158,148,2.791,154,3.005,155,2.057,590,2.446,1000,4.212,1117,4.019,1127,4.019,1128,4.019,1129,4.019,1130,4.675,1131,4.675,1132,4.019,1133,4.675]],["title/injectables/TagsService.html",[40,0.675,1000,2.078]],["body/injectables/TagsService.html",[3,0.152,4,0.136,5,0.136,9,0.22,10,1.038,11,2.345,13,1.135,15,1.694,20,0.768,22,1.783,23,0.019,24,1.679,25,0.72,26,1.152,31,1.621,34,2.399,36,0.357,37,1.265,38,1.197,40,0.735,41,0.493,50,0.152,51,1.7,56,1.667,63,0.042,75,1.621,84,1.888,85,1.528,91,2.423,108,0.013,109,0.01,155,1.197,204,1.077,251,1.024,290,3.115,292,2.264,320,3.013,331,2.978,490,3.463,536,2.424,582,2.592,587,2.61,590,3.369,634,2.818,639,1.265,640,1.749,649,2.087,650,2.087,651,2.087,923,3.115,952,3.123,975,1.899,1000,2.264,1005,2.338,1024,2.087,1066,3.49,1108,4.176,1113,2.338,1116,2.338,1120,3.49,1132,2.338,1134,2.338,1135,4.858,1136,5.387,1137,4.858,1138,4.858,1139,2.72,1140,2.72,1141,4.06,1142,2.72,1143,2.72,1144,2.72,1145,2.72,1146,2.72,1147,2.72,1148,2.72,1149,2.72,1150,2.72,1151,2.72,1152,2.72,1153,2.72,1154,4.06,1155,2.72,1156,2.72,1157,4.06,1158,2.72,1159,2.72,1160,4.06,1161,2.72,1162,2.72,1163,2.72,1164,2.72]],["title/entities/User.html",[53,1.153,230,1.476]],["body/entities/User.html",[3,0.204,4,0.183,5,0.183,9,0.294,20,0.818,23,0.019,25,0.721,26,0.954,36,0.31,50,0.204,53,1.549,56,1.549,57,2.818,58,1.957,63,0.056,100,3.035,108,0.012,109,0.012,115,1.788,204,1.443,217,2.818,220,2.175,224,3.72,230,1.983,231,2.795,275,2,319,1.408,459,4.389,461,4.389,542,2.343,582,2.153,620,2.795,721,3.994,723,4.3,724,4.859,733,2.795,734,4.508,741,3.841,853,5.34,854,5.34,864,3.841,865,3.841,900,4.508,1165,3.132,1166,3.644,1167,6.161,1168,3.644,1169,3.644,1170,3.644,1171,4.305,1172,3.644,1173,3.644,1174,5.008,1175,3.644,1176,5.008,1177,5.008,1178,3.644,1179,3.644,1180,3.644]],["title/controllers/UserController.html",[110,1.403,1181,2.602]],["body/controllers/UserController.html",[1,1.258,3,0.126,4,0.113,5,0.113,6,1.258,7,0.941,9,0.182,10,0.899,20,0.599,22,1.442,23,0.019,24,1.506,25,0.643,26,1.118,31,1.421,36,0.386,41,0.408,44,1.258,50,0.126,51,1.276,53,1.738,56,2.095,63,0.035,75,1.672,85,2.114,107,1.769,108,0.012,109,0.009,110,0.849,112,0.893,115,1.31,119,1.347,120,1.575,175,1.18,199,3.025,224,2.726,229,2.284,231,2.7,258,1.45,259,1.347,272,1.347,274,2.263,275,1.143,279,1.347,289,2.918,292,1.258,294,3.025,297,1.939,320,2.754,325,2.132,372,1.73,396,1.73,416,1.73,434,2.918,437,2.583,439,4.083,440,3.175,444,3.75,447,2.408,454,2.583,457,1.468,479,1.962,512,3.556,579,2.263,582,1.325,585,3.72,620,1.73,632,3.75,639,1.637,697,3.143,789,4.177,790,3.72,807,2.782,844,4.237,906,3.32,943,1.939,947,4.203,952,1.45,953,3.32,957,3.75,958,3.025,959,1.73,960,1.575,967,3.32,1021,3.72,1078,1.939,1181,2.457,1182,1.939,1183,3.52,1184,4.328,1185,3.52,1186,2.256,1187,3.52,1188,2.256,1189,2.256,1190,4.328,1191,1.939,1192,2.256,1193,2.256,1194,2.256,1195,2.256,1196,2.256,1197,2.256,1198,3.52,1199,2.256,1200,3.52,1201,3.025,1202,2.256,1203,2.256,1204,4.328,1205,2.256,1206,2.256,1207,2.256,1208,2.256,1209,2.256,1210,2.256,1211,2.256,1212,2.256,1213,2.256,1214,1.939,1215,1.939,1216,4.328,1217,3.52,1218,2.256,1219,2.256,1220,2.256,1221,2.256,1222,3.025,1223,2.256,1224,2.256,1225,2.256,1226,2.256,1227,2.256,1228,2.256,1229,2.256,1230,2.256,1231,2.256,1232,2.256,1233,2.256,1234,2.256,1235,2.256,1236,2.256,1237,2.256,1238,3.025,1239,2.256,1240,1.939,1241,1.939,1242,2.256,1243,2.256,1244,2.256,1245,2.256,1246,2.256,1247,2.256,1248,3.52,1249,2.256,1250,2.256]],["title/injectables/UserCreateMany.html",[40,0.675,1251,2.225]],["body/injectables/UserCreateMany.html",[3,0.174,4,0.156,5,0.156,9,0.251,10,1.144,11,1.704,13,1.297,15,1.868,20,0.549,22,1.321,23,0.019,24,1.2,25,0.579,26,0.853,31,0.833,34,1.603,36,0.356,37,2.671,38,1.368,40,0.811,41,0.563,50,0.174,51,1.548,53,1.777,63,0.048,65,1.368,75,0.833,76,1.734,84,2.671,85,2.161,89,3.202,91,2.386,102,3.202,103,2.829,105,3.004,106,3.692,107,1.539,108,0.011,109,0.011,200,3.85,204,1.773,229,2.161,230,1.773,251,1.17,320,2.189,331,1.532,401,2.673,434,2.673,437,1.856,439,3.133,442,2.385,454,1.856,458,1.999,639,1.446,654,3.85,807,2.879,984,2.385,1038,4.937,1251,2.673,1252,4.512,1253,2.673,1254,4.512,1255,3.109,1256,5.748,1257,3.109,1258,2.673,1259,3.109,1260,3.109,1261,4.479,1262,5.249,1263,3.109,1264,3.109,1265,3.109,1266,5.249,1267,6.087,1268,3.109,1269,3.85,1270,5.743,1271,3.109,1272,4.479,1273,3.109,1274,3.109,1275,3.109,1276,3.109,1277,3.109,1278,3.109,1279,3.109,1280,3.109,1281,3.109,1282,3.109,1283,3.109,1284,3.109,1285,3.109,1286,3.109,1287,3.109,1288,3.109,1289,4.479,1290,3.109]],["title/modules/UserModule.html",[122,1.27,139,2.078]],["body/modules/UserModule.html",[0,1.999,1,2.633,3,0.187,4,0.168,5,0.168,6,1.867,7,1.397,11,1.087,18,1.867,19,2.47,23,0.019,36,0.451,39,1.557,41,0.606,42,1.649,43,1.752,48,1.867,49,1.999,50,0.187,53,1.461,63,0.052,93,1.999,95,1.999,97,1.999,108,0.011,109,0.011,112,1.87,122,1.864,124,1.557,125,1.474,126,1.752,127,1.752,128,1.557,129,2.861,130,2.861,134,2.818,139,3.999,141,2.47,142,1.752,143,1.752,148,2.818,154,2.153,155,1.474,162,2.569,172,4.059,173,2.153,175,1.752,177,2.569,208,2.569,229,1.26,230,1.326,237,3.622,238,2.569,239,2.569,240,2.569,241,2.569,242,2.569,243,2.337,244,2.569,245,2.569,247,2.196,248,3.264,249,2.337,250,2.569,308,2.818,317,2.153,325,3.533,437,1.999,458,2.153,629,3.878,634,1.752,889,2.878,1181,3.817,1215,2.878,1241,2.878,1251,3.878,1291,2.878,1292,2.878,1293,2.878,1294,3.349,1295,3.349,1296,3.349,1297,2.878,1298,2.878,1299,2.878,1300,2.878,1301,3.349,1302,3.349,1303,3.349,1304,3.349,1305,3.349,1306,3.349,1307,3.349]],["title/injectables/UserService.html",[40,0.675,325,1.836]],["body/injectables/UserService.html",[3,0.133,4,0.119,5,0.119,9,0.192,10,0.936,11,2.17,13,2.393,15,1.528,19,2.63,20,0.703,22,1.692,23,0.019,24,1.538,25,0.703,26,1.093,31,1.456,32,1.805,34,2.316,36,0.414,37,1.704,38,1.046,39,1.105,40,0.663,41,0.43,42,1.17,50,0.133,51,1.319,53,2.068,56,1.384,57,2.203,58,0.668,63,0.037,65,2.212,70,1.805,75,1.347,84,2.338,85,1.892,89,1.325,91,1.892,102,1.325,103,1.17,105,1.243,107,0.637,108,0.009,109,0.009,122,0.81,125,1.046,155,1.046,163,5.14,181,1.823,189,3.231,190,2.558,204,0.941,229,0.894,236,2.042,247,2.08,248,1.418,251,0.894,276,3.334,308,1.418,317,1.527,320,2.883,325,1.805,331,2.203,336,1.823,339,1.658,434,2.187,437,2.187,439,3,440,1.917,454,2.187,458,1.527,512,2.043,582,1.683,629,3.569,632,3.431,634,2.841,636,3.844,637,2.042,639,1.704,640,1.527,642,2.042,697,2.355,700,1.658,789,2.355,960,1.658,974,3.15,975,2.558,1024,2.811,1191,2.042,1201,3.844,1214,2.042,1222,3.844,1238,3.844,1240,3.15,1251,3,1254,3.844,1256,2.042,1258,2.042,1297,2.042,1298,2.042,1299,2.042,1300,2.042,1308,2.042,1309,4.472,1310,4.472,1311,2.376,1312,4.472,1313,4.472,1314,2.376,1315,2.376,1316,2.376,1317,2.376,1318,2.376,1319,2.376,1320,2.376,1321,2.376,1322,2.376,1323,2.376,1324,2.376,1325,2.376,1326,2.376,1327,2.376,1328,2.376,1329,2.376,1330,2.376,1331,3.664,1332,2.376,1333,3.664,1334,2.376,1335,3.664,1336,2.376,1337,2.376]],["title/coverage.html",[1338,3.901]],["body/coverage.html",[0,2.463,1,1.55,5,0.139,6,2.744,7,2.053,8,3.435,23,0.019,25,0.416,40,1.266,52,2.132,53,0.86,54,1.454,63,0.108,85,1.046,108,0.01,109,0.01,110,2.293,111,1.94,113,2.389,117,1.659,128,1.293,140,1.55,144,2.132,145,1.787,146,1.787,147,1.787,156,1.293,157,2.652,178,1.94,180,2.132,229,1.046,230,2.156,235,2.132,252,2.389,256,1.94,257,2.389,259,1.659,263,1.787,268,1.659,275,0.902,276,1.55,304,1.454,305,1.55,306,1.659,312,1.94,318,2.389,325,1.369,362,2.389,371,2.132,408,2.389,434,1.659,436,3.165,437,1.659,438,3.435,439,1.659,440,1.454,468,1.659,469,2.682,470,2.132,471,2.389,480,1.659,481,2.389,482,3.165,567,1.787,587,1.787,588,2.389,589,2.389,590,1.454,629,1.659,630,2.389,631,2.389,657,2.389,658,3.165,680,1.94,681,3.165,682,3.165,692,1.659,693,1.94,695,1.659,697,1.787,698,2.389,699,2.389,705,2.389,714,1.454,715,1.787,716,2.389,742,2.389,746,1.659,758,2.389,768,1.94,769,1.787,771,2.389,788,2.389,796,2.389,828,1.787,829,2.389,844,1.94,845,2.389,847,2.389,883,2.389,899,2.389,955,1.659,962,2.132,963,2.132,998,2.389,1000,1.55,1028,6.584,1067,2.389,1068,2.389,1071,2.389,1084,2.389,1089,2.389,1102,2.389,1134,2.389,1165,2.389,1171,2.389,1181,1.94,1182,2.389,1251,1.659,1252,2.389,1253,2.389,1308,2.389,1338,2.132,1339,2.78,1340,2.78,1341,6.481,1342,5.817,1343,6.992,1344,6.621,1345,4.126,1346,2.389,1347,3.165,1348,4.921,1349,2.78,1350,4.921,1351,2.78,1352,2.78,1353,2.78,1354,2.78,1355,2.78,1356,2.78,1357,2.389,1358,2.78,1359,2.78,1360,4.126,1361,2.78,1362,2.78]],["title/dependencies.html",[125,1.973,1363,2.676]],["body/dependencies.html",[23,0.019,41,0.903,42,2.456,43,2.608,45,3.824,47,3.824,63,0.095,108,0.015,109,0.015,125,2.194,155,2.194,173,3.205,204,1.974,377,3.48,378,4.286,424,4.286,453,1.974,455,3.205,457,2.08,837,3.824,1364,4.986,1365,4.986,1366,6.659,1367,4.986,1368,4.986,1369,4.986,1370,4.986,1371,4.986,1372,4.986,1373,4.986,1374,4.986,1375,4.986,1376,4.986,1377,4.986,1378,4.986,1379,4.986,1380,4.986,1381,4.986,1382,4.986,1383,4.986]],["title/miscellaneous/enumerations.html",[1384,1.629,1385,3.853]],["body/miscellaneous/enumerations.html",[9,0.406,23,0.018,108,0.015,109,0.015,275,2.006,279,3.688,479,4.213,508,4.739,512,3.445,513,5.311,514,5.311,518,5.311,544,4.739,545,5.311,546,5.311,547,5.311,1347,3.859,1384,2.632,1385,4.325,1386,4.325,1387,6.178,1388,6.178,1389,6.178,1390,5.031]],["title/miscellaneous/functions.html",[1384,1.629,1391,3.853]],["body/miscellaneous/functions.html",[9,0.472,23,0.016,108,0.016,109,0.016,128,3.315,1357,5.029,1384,3.061,1391,5.029,1392,5.851]],["title/index.html",[9,0.251,379,2.676,1393,3.113]],["body/index.html",[4,0.224,23,0.018,68,3.122,107,1.199,108,0.014,109,0.014,225,3.845,447,3.121,583,2.875,599,3.845,634,2.34,881,3.845,882,3.845,1269,3.845,1338,3.431,1394,4.473,1395,4.473,1396,5.738,1397,4.473,1398,4.473,1399,4.473,1400,4.473,1401,4.473,1402,6.336,1403,4.473,1404,4.473,1405,7.192,1406,4.473,1407,4.473,1408,4.473,1409,7.072,1410,4.473,1411,5.738,1412,4.473,1413,4.473,1414,4.473,1415,5.738,1416,5.738,1417,4.473,1418,4.473,1419,4.473,1420,5.738,1421,5.738,1422,4.473,1423,4.473,1424,4.473,1425,4.473,1426,4.473,1427,3.845,1428,4.473,1429,4.473,1430,4.473,1431,4.473,1432,4.473,1433,4.473,1434,4.473,1435,4.473,1436,4.473,1437,4.473,1438,4.473,1439,4.473,1440,4.473,1441,4.473,1442,3.845]],["title/modules.html",[124,2.365]],["body/modules.html",[23,0.015,108,0.015,109,0.015,123,3.715,124,2.475,134,3.177,135,3.422,136,3.177,137,3.422,138,3.177,139,2.968,1427,6.417,1443,7.466,1444,7.466,1445,7.466]],["title/overview.html",[1446,4.372]],["body/overview.html",[2,2.627,23,0.019,108,0.012,109,0.012,112,1.356,117,3.305,122,1.167,123,5.2,124,1.593,125,1.507,126,1.792,127,1.792,128,1.593,129,1.792,130,1.792,131,2.944,132,2.944,133,2.944,134,4.259,135,4.207,136,4.011,137,4.629,138,4.011,139,3.979,140,3.823,141,2.51,142,1.792,143,1.792,220,2.044,251,1.289,276,3.747,301,2.944,302,2.944,303,2.944,304,3.138,305,3.087,306,3.305,325,3.31,396,2.627,435,1.289,579,2.202,580,2.944,629,3.305,746,4.011,751,2.944,752,2.944,753,2.944,768,2.391,783,2.944,785,2.944,955,4.011,987,2.944,988,2.944,989,2.944,1000,3.747,1127,2.944,1128,2.944,1129,2.944,1251,3.305,1291,2.944,1292,2.944,1293,2.944,1446,2.944,1447,3.425,1448,3.425,1449,4.797]],["title/properties.html",[319,1.26,1363,2.676]],["body/properties.html",[23,0.018,107,1.552,108,0.016,109,0.016,319,1.628,416,4.441,583,3.721,1442,4.976,1450,5.789,1451,5.789]],["title/miscellaneous/typealiases.html",[1384,1.629,1452,4.483]],["body/miscellaneous/typealiases.html",[6,3.205,7,2.398,8,4.67,9,0.464,23,0.016,25,0.675,34,2.058,54,3.5,108,0.016,109,0.016,1384,3.008,1453,5.749,1454,4.942]],["title/miscellaneous/variables.html",[190,3.129,1384,1.629]],["body/miscellaneous/variables.html",[6,2.556,7,1.912,8,4.069,9,0.37,23,0.019,25,0.588,28,3.517,44,2.556,51,1.719,52,4.472,53,1.983,54,3.05,58,1.639,75,1.563,101,3.941,108,0.014,109,0.014,144,3.517,180,4.472,181,3.517,190,3.2,259,3.48,279,3.48,289,4.157,371,4.472,381,5.011,443,2.736,479,3.883,962,4.472,963,3.517,1346,5.011,1347,3.517,1384,2.398,1386,5.011,1454,3.941,1455,4.585,1456,4.585,1457,4.585,1458,5.829,1459,4.585,1460,4.585,1461,4.585,1462,4.585,1463,4.585]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1028,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1450,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1375,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1381,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1383,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1374,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1343,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1358,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1341,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1344,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1348,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1350,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1360,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1345,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1361,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":520,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":579,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["1.1.26",{"_index":1365,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1356,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1354,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":790,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{}}}],["10.0.0",{"_index":1366,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1372,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1368,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":855,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":1199,"title":{},"body":{"controllers/UserController.html":{}}}],["123",{"_index":584,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["1234",{"_index":1229,"title":{},"body":{"controllers/UserController.html":{}}}],["13",{"_index":1449,"title":{},"body":{"overview.html":{}}}],["16t12:00:00+0000",{"_index":521,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.13.3",{"_index":1377,"title":{},"body":{"dependencies.html":{}}}],["1})@get('/:id",{"_index":1202,"title":{},"body":{"controllers/UserController.html":{}}}],["1})@isoptional()@ispositive",{"_index":792,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["2",{"_index":396,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["2.0.6",{"_index":1369,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":1352,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["2024",{"_index":519,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["25",{"_index":1353,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":864,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["3.3.0",{"_index":1367,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":1359,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1355,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":580,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["5.1.1",{"_index":1373,"title":{},"body":{"dependencies.html":{}}}],["512",{"_index":872,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6",{"_index":1448,"title":{},"body":{"overview.html":{}}}],["60",{"_index":1171,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["66",{"_index":1351,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1447,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":1382,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":1371,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":1379,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":535,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":1167,"title":{},"body":{"entities/User.html":{}}}],["_",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["abstract",{"_index":706,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["access",{"_index":370,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/RefreshTokenProvider.html":{}}}],["accesstoken",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["accesstokenprovider",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["activeuser",{"_index":962,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["actual",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Paginated.html":{}}}],["add",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["additional",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{}}}],["adds",{"_index":566,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["against",{"_index":432,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["alias",{"_index":1349,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1453,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":539,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["already",{"_index":649,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["amazing",{"_index":1428,"title":{},"body":{"index.html":{}}}],["another",{"_index":1017,"title":{},"body":{"injectables/PostsService.html":{}}}],["api",{"_index":1201,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["apioperation",{"_index":957,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":906,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":456,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":441,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":509,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":564,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({description",{"_index":492,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({})@isjson()@isoptional",{"_index":602,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiquery",{"_index":1216,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":958,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":1217,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":1219,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":1407,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["appconfig",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":111,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1241,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["application'})@post",{"_index":1193,"title":{},"body":{"controllers/UserController.html":{}}}],["applications",{"_index":1401,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":123,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":117,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":1177,"title":{},"body":{"entities/User.html":{}}}],["array",{"_index":397,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["assign",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["associated",{"_index":933,"title":{},"body":{"controllers/PostsController.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["aud",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["audience",{"_index":95,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["auth",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.bearer",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["auth(authtype.bearer)@post('refresh",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth(authtype.none",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth(authtype.none)@post('login')@httpcode(httpstatus.ok",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":309,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/access",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":371,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":256,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":671,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["authentication",{"_index":246,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["authenticationguard",{"_index":178,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":388,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":134,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":583,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":586,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["authservice",{"_index":276,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":373,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":376,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":363,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":381,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":391,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":691,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["await",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":1429,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":811,"title":{},"body":{"injectables/PaginationService.html":{}}}],["bcrypt",{"_index":424,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":433,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":430,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(password",{"_index":431,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":312,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1388,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["being",{"_index":934,"title":{},"body":{"controllers/PostsController.html":{}}}],["bi",{"_index":739,"title":{},"body":{"entities/MetaOption.html":{}}}],["blog",{"_index":494,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["body",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["bootstrap",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1445,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1443,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":425,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1397,"title":{},"body":{"index.html":{}}}],["calls",{"_index":936,"title":{},"body":{"controllers/PostsController.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["cascade",{"_index":737,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":729,"title":{},"body":{"entities/MetaOption.html":{}}}],["cases",{"_index":1226,"title":{},"body":{"controllers/UserController.html":{}}}],["catch",{"_index":102,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["catch((error",{"_index":405,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["cause",{"_index":105,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["character",{"_index":623,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":540,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["check",{"_index":643,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["checking",{"_index":384,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["circular",{"_index":317,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["class",{"_index":63,"title":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":435,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":301,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":302,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":303,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":751,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_exports",{"_index":752,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":753,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":783,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":785,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":784,"title":{},"body":{"modules/PaginationModule.html":{}}}],["cluster_postsmodule",{"_index":987,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":988,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":990,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":989,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1127,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1128,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1129,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1291,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1293,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1292,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["column",{"_index":734,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":723,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["commit",{"_index":1274,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["compare",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords",{"_index":409,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords(undefined",{"_index":411,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["compares",{"_index":413,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparison",{"_index":712,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["compodoc/compodoc",{"_index":1364,"title":{},"body":{"dependencies.html":{}}}],["composed",{"_index":537,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["config/database.config",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["config/index.config",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":1300,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["configmodule",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1302,"title":{},"body":{"modules/UserModule.html":{}}}],["configmodule.forroot",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["configservice.get('database.port",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_host",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_name",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_password",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_port",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_username",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["configuration",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["confirmation",{"_index":916,"title":{},"body":{"controllers/PostsController.html":{}}}],["connect",{"_index":1264,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["connection",{"_index":1266,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["console.log",{"_index":389,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{}}}],["console.log('canactivate",{"_index":404,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["console.log('guards",{"_index":393,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["console.log('hitting",{"_index":1247,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log('inside",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["console.log('node_env",{"_index":1328,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('profile",{"_index":1329,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`environment",{"_index":1327,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`limit",{"_index":1237,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(getuserparamdto",{"_index":1236,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log({updatepostdto",{"_index":980,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":1311,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(datasource",{"_index":1255,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["constructor(metaoptionsrepository",{"_index":759,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":119,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":366,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(request",{"_index":798,"title":{},"body":{"injectables/PaginationService.html":{}}}],["constructor(tagsrepository",{"_index":1139,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userrepository",{"_index":633,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["constructor(userservice",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(userservices",{"_index":999,"title":{},"body":{"injectables/PostsService.html":{}}}],["containing",{"_index":918,"title":{},"body":{"controllers/PostsController.html":{}}}],["content",{"_index":483,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{}}}],["context.getclass",{"_index":386,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":385,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":110,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":748,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":965,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":1118,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":1218,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convert",{"_index":1225,"title":{},"body":{"controllers/UserController.html":{}}}],["coverage",{"_index":1338,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["create(undefined",{"_index":762,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["created",{"_index":442,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/PostsController.html":{},"injectables/UserCreateMany.html":{}}}],["createdatecolumn",{"_index":719,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createddate",{"_index":717,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdmetaoption",{"_index":765,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createdpost",{"_index":976,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdtags",{"_index":1120,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createmany",{"_index":1254,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["createmany(undefined",{"_index":1258,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["createmanyusers",{"_index":1183,"title":{},"body":{"controllers/UserController.html":{}}}],["createmanyusers(@body",{"_index":1246,"title":{},"body":{"controllers/UserController.html":{}}}],["createmanyusers(createusersdto",{"_index":1186,"title":{},"body":{"controllers/UserController.html":{}}}],["createmanyusersdto",{"_index":434,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createmetaoptions",{"_index":743,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(@body",{"_index":749,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(createmetaoptionsdto",{"_index":744,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptionsdto",{"_index":468,"title":{"classes/CreateMetaOptionsDto.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":901,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["createpost(@body",{"_index":1119,"title":{},"body":{"controllers/TagsController.html":{}}}],["createpost(createpostdto",{"_index":905,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createtag",{"_index":1105,"title":{},"body":{"controllers/TagsController.html":{}}}],["createpost.slug.tolowercase",{"_index":1032,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost.tags",{"_index":1026,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":480,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdtowithmeta",{"_index":898,"title":{},"body":{"entities/Post.html":{}}}],["createpostdto})@patch",{"_index":944,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto})@post",{"_index":909,"title":{},"body":{"controllers/PostsController.html":{}}}],["creates",{"_index":887,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{}}}],["createtag",{"_index":1108,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtag(undefined",{"_index":1142,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtagdto",{"_index":587,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createtoken",{"_index":659,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["createtoken(undefined",{"_index":662,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["createuser",{"_index":632,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(@body",{"_index":1242,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(createuserdto",{"_index":1192,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(undefined",{"_index":637,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":440,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto})@apiquery({name",{"_index":1197,"title":{},"body":{"controllers/UserController.html":{}}}],["createuserprovider",{"_index":629,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":1248,"title":{},"body":{"controllers/UserController.html":{}}}],["createusersdto",{"_index":1190,"title":{},"body":{"controllers/UserController.html":{}}}],["creating",{"_index":738,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{}}}],["creation",{"_index":912,"title":{},"body":{"controllers/PostsController.html":{}}}],["credentials",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":780,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["currentpage",{"_index":777,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["custom",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["data",{"_index":772,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["database",{"_index":200,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserCreateMany.html":{}}}],["databaseconfig",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":1256,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["date",{"_index":517,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":380,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["decorators",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["decorators/auth.decorator",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["default",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":365,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaultvaluepipe",{"_index":1210,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":1235,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(10",{"_index":1233,"title":{},"body":{"controllers/UserController.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":952,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["delete('/soft",{"_index":1124,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(undefined",{"_index":1005,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":923,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedatecolumn",{"_index":1092,"title":{},"body":{"entities/Tag.html":{}}}],["deleteddate",{"_index":1090,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":902,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":983,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":920,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleterequest",{"_index":985,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletes",{"_index":921,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletetag",{"_index":1103,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(@query('id",{"_index":1122,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(id",{"_index":1109,"title":{},"body":{"controllers/TagsController.html":{}}}],["dependencies",{"_index":125,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":247,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["deprecated",{"_index":1334,"title":{},"body":{"injectables/UserService.html":{}}}],["description",{"_index":107,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"entities/Tag.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":919,"title":{},"body":{"controllers/PostsController.html":{}}}],["development",{"_index":1408,"title":{},"body":{"index.html":{}}}],["directional",{"_index":740,"title":{},"body":{"entities/MetaOption.html":{}}}],["dist/**/*.entity.js",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":567,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["doe",{"_index":462,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["doing",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["draft",{"_index":545,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto/pagination",{"_index":802,"title":{},"body":{"injectables/PaginationService.html":{}}}],["dtos/create",{"_index":639,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["dtos/get",{"_index":960,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/patch",{"_index":959,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["dtos/refresh",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["dtos/signin.dto",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["e.g",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["e2e",{"_index":1417,"title":{},"body":{"index.html":{}}}],["each",{"_index":467,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":850,"title":{},"body":{"entities/Post.html":{}}}],["eagerly",{"_index":895,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1398,"title":{},"body":{"index.html":{}}}],["eight",{"_index":619,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["enables",{"_index":892,"title":{},"body":{"entities/Post.html":{}}}],["enddate",{"_index":683,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PostsService.html":{}}}],["endpoint",{"_index":1222,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entire",{"_index":1305,"title":{},"body":{"modules/UserModule.html":{}}}],["entities",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":230,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["entity/meta",{"_index":755,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["entity/post.entity",{"_index":994,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entity/tags.entity",{"_index":1132,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["entity/user.entity",{"_index":458,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["enum",{"_index":569,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":1385,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posts.enums",{"_index":563,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env}.local",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development.local",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserService.html":{}}}],["environmentvalidation",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":103,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["error.message",{"_index":106,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserCreateMany.html":{}}}],["everywhere",{"_index":1306,"title":{},"body":{"modules/UserModule.html":{}}}],["example",{"_index":447,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["exception",{"_index":407,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{}}}],["excerpt",{"_index":525,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["execution",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1331,"title":{},"body":{"injectables/UserService.html":{}}}],["existing",{"_index":946,"title":{},"body":{"controllers/PostsController.html":{}}}],["existingslug",{"_index":1033,"title":{},"body":{"injectables/PostsService.html":{}}}],["existingtags",{"_index":1154,"title":{},"body":{"injectables/TagsService.html":{}}}],["existinguser",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["existinguser.password",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":650,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["exp",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["expected",{"_index":843,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["expiresin",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{},"modules/UserModule.html":{}}}],["export",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exporting",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["exports",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationService.html":{},"dependencies.html":{}}}],["extends",{"_index":696,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["extract",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(undefined",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["failed",{"_index":1267,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["false",{"_index":224,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["false})@isoptional()@isarray()@isint({each",{"_index":551,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featured",{"_index":497,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["featuredimageurl",{"_index":484,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["fetch",{"_index":791,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{}}}],["few",{"_index":891,"title":{},"body":{"entities/Post.html":{}}}],["field",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fields",{"_index":951,"title":{},"body":{"controllers/PostsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["final",{"_index":1221,"title":{},"body":{"controllers/UserController.html":{}}}],["finally",{"_index":1288,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["finalresponse",{"_index":820,"title":{},"body":{"injectables/PaginationService.html":{}}}],["find",{"_index":1039,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":1238,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(undefined",{"_index":1317,"title":{},"body":{"injectables/UserService.html":{}}}],["findmultipletags",{"_index":1135,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(undefined",{"_index":1145,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":1309,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(undefined",{"_index":1319,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyemail",{"_index":1310,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyemail(undefined",{"_index":1321,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":400,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["first",{"_index":542,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"entities/User.html":{}}}],["firstname",{"_index":459,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["footerenabled",{"_index":505,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["force",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["format",{"_index":501,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["forwardref",{"_index":308,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["found",{"_index":975,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":1396,"title":{},"body":{"index.html":{}}}],["from.env",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["function",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["functions",{"_index":1391,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":669,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["generatetokenprovider",{"_index":305,"title":{"injectables/GenerateTokenProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{},"overview.html":{}}}],["generatetokens",{"_index":660,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["generatetokens(undefined",{"_index":665,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["generic",{"_index":774,"title":{},"body":{"interfaces/Paginated.html":{}}}],["get('/:id",{"_index":1231,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':userid",{"_index":969,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts",{"_index":903,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallposts(undefined",{"_index":1007,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(userid",{"_index":926,"title":{},"body":{"controllers/PostsController.html":{}}}],["getalltags",{"_index":1136,"title":{},"body":{"injectables/TagsService.html":{}}}],["gethello",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpostsbasedto",{"_index":680,"title":{"classes/GetPostsBaseDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["getpostsquerydto",{"_index":695,"title":{"classes/GetPostsQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["getrefreshtoken",{"_index":1072,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["getrefreshtoken(undefined",{"_index":1074,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["gettagbyid",{"_index":1137,"title":{},"body":{"injectables/TagsService.html":{}}}],["gettagbyid(undefined",{"_index":1148,"title":{},"body":{"injectables/TagsService.html":{}}}],["getting",{"_index":379,"title":{"index.html":{}},"body":{"guards/AuthenticationGuard.html":{}}}],["getuserparamdto",{"_index":1204,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers",{"_index":1184,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":1195,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersparamdto",{"_index":697,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["given",{"_index":414,"title":{},"body":{"injectables/BcryptProvider.html":{},"controllers/PostsController.html":{}}}],["global/pagination/pagination.module",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["global/pagination/pagination.service",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["globally",{"_index":1303,"title":{},"body":{"modules/UserModule.html":{}}}],["grow",{"_index":1424,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["guards/access",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["handle",{"_index":647,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["handles",{"_index":911,"title":{},"body":{"controllers/PostsController.html":{}}}],["hashed",{"_index":415,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashedpassword",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashes",{"_index":423,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashing",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{}}}],["hashing.provider",{"_index":426,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashingprovider",{"_index":304,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":410,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(undefined",{"_index":421,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["headers",{"_index":1208,"title":{},"body":{"controllers/UserController.html":{}}}],["hello",{"_index":254,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["here",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"index.html":{}}}],["host",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["httpcode",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["httpexception('author",{"_index":1023,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('email",{"_index":648,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["httpexception('invalid",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('no",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/PostsController.html":{}}}],["httpexception('post",{"_index":1043,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('slug",{"_index":1035,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('tag",{"_index":1157,"title":{},"body":{"injectables/TagsService.html":{}}}],["httpexception('tags",{"_index":1029,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('transaction",{"_index":1287,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["httpexception('unauthorized",{"_index":406,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["httpexception('user",{"_index":974,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["httpexception(`${error.message",{"_index":104,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["https://example.com/image.jpg",{"_index":500,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["https://nestjs.com",{"_index":1439,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":528,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org",{"_index":576,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":984,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserCreateMany.html":{}}}],["httpstatus.conflict",{"_index":651,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["httpstatus.created",{"_index":973,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.internal_server_error",{"_index":1272,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["httpstatus.moved_permanently",{"_index":1332,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":1024,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.ok",{"_index":968,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.request_timeout",{"_index":1268,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["httpstatus.unauthorized",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{}}}],["hyphens",{"_index":541,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["iat",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["id",{"_index":582,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id'})@delete",{"_index":1110,"title":{},"body":{"controllers/TagsController.html":{}}}],["id'})@delete('/soft",{"_index":1114,"title":{},"body":{"controllers/TagsController.html":{}}}],["identifier",{"_index":1339,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":550,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ignoreexpiration",{"_index":99,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["image",{"_index":498,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["implements",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{}}}],["import",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imported",{"_index":1307,"title":{},"body":{"modules/UserModule.html":{}}}],["importing",{"_index":689,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["imports",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["in(tags",{"_index":1162,"title":{},"body":{"injectables/TagsService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":418,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/PostsController.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/PaginationService.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserService.html":{}}}],["inject(jwtconfig.key",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["inject(profileconfig.key",{"_index":1324,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(request",{"_index":805,"title":{},"body":{"injectables/PaginationService.html":{}}}],["injectable",{"_index":40,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":251,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["injection",{"_index":248,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injections",{"_index":1015,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository",{"_index":640,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoptionrepository",{"_index":1020,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(metaoptionsrepository",{"_index":764,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["injectrepository(postrepository",{"_index":1019,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tagrepository",{"_index":1153,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":642,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["installation",{"_index":1404,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1406,"title":{},"body":{"index.html":{}}}],["instance",{"_index":401,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/UserCreateMany.html":{}}}],["instead",{"_index":896,"title":{},"body":{"entities/Post.html":{}}}],["integer",{"_index":585,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["interface",{"_index":768,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"coverage.html":{},"overview.html":{}}}],["interface/paginated.interface",{"_index":804,"title":{},"body":{"injectables/PaginationService.html":{}}}],["interfaces",{"_index":770,"title":{},"body":{"interfaces/Paginated.html":{}}}],["intersectiontype",{"_index":688,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["invalid",{"_index":597,"title":{},"body":{"classes/CreateTagDto.html":{},"injectables/RefreshTokenProvider.html":{}}}],["ip",{"_index":1209,"title":{},"body":{"controllers/UserController.html":{}}}],["isarray",{"_index":445,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isauthenticated",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":555,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["isdate()@isoptional",{"_index":685,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["isemail",{"_index":625,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":608,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":556,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(['post",{"_index":570,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":574,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypes",{"_index":571,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":557,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isiso8601",{"_index":558,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":475,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":451,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isemail",{"_index":1085,"title":{},"body":{"classes/SignInDto.html":{}}}],["isnotempty()@isjson",{"_index":473,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["isnotempty()@isstring",{"_index":1087,"title":{},"body":{"classes/SignInDto.html":{}}}],["isnumber",{"_index":836,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":559,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["ispasswordcorrect",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispositive",{"_index":795,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["iss",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["isstring",{"_index":476,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":1069,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":610,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":614,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":612,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issuer",{"_index":97,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["isurl",{"_index":560,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["item",{"_index":581,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":446,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{}}}],["itemsperpage",{"_index":775,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["jane",{"_index":465,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["jane@doe.com",{"_index":466,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["john",{"_index":460,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["john@doe.com",{"_index":463,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["joi",{"_index":1376,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":882,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["joincolumn",{"_index":735,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":874,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["json",{"_index":527,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["json.stringify(guards",{"_index":394,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["jwt",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["jwt(refresh",{"_index":670,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["jwtconfig",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["jwtconfig.key",{"_index":245,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwtsecret",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwttokenaudience",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwttokenexpiration",{"_index":244,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwttokenissuer",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtmodule",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtmodule.registerasync",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["kamil",{"_index":1436,"title":{},"body":{"index.html":{}}}],["keeping",{"_index":1282,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["key",{"_index":478,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["keyof",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keys",{"_index":387,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["language",{"_index":593,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["last",{"_index":779,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["lastname",{"_index":461,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lazy",{"_index":897,"title":{},"body":{"entities/Post.html":{}}}],["legend",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":854,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":621,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1442,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1421,"title":{},"body":{"index.html":{}}}],["likes",{"_index":842,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["limit",{"_index":789,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["links",{"_index":773,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["literal",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["loading",{"_index":894,"title":{},"body":{"entities/Post.html":{}}}],["logic",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginbody",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginbody",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["logs",{"_index":914,"title":{},"body":{"controllers/PostsController.html":{}}}],["loop",{"_index":398,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["lowercase",{"_index":538,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["m2m",{"_index":885,"title":{},"body":{"entities/Post.html":{}}}],["main",{"_index":532,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["make",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["making",{"_index":1016,"title":{},"body":{"injectables/PostsService.html":{}}}],["many",{"_index":437,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["many.ts",{"_index":1253,"title":{},"body":{"injectables/UserCreateMany.html":{},"coverage.html":{}}}],["many.ts:13",{"_index":1259,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["many.ts:7",{"_index":1257,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["manytomany",{"_index":875,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":868,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":876,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":848,"title":{},"body":{"entities/Post.html":{}}}],["match",{"_index":710,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["matches",{"_index":420,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":628,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":573,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matches(/^https?:\\/\\/[^\\s",{"_index":607,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["matching",{"_index":109,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":817,"title":{},"body":{"injectables/PaginationService.html":{}}}],["maxlength",{"_index":561,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":578,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(255",{"_index":572,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":568,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":626,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":536,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["meta",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":378,"title":{},"body":{"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["metaoption",{"_index":714,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":1011,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptions",{"_index":485,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["metaoptions.post",{"_index":858,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":146,"title":{"controllers/MetaOptionsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":135,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":761,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":746,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":472,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["migrations",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":618,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginationQueryDto.html":{}}}],["minlength",{"_index":562,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":606,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":477,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":627,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1384,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1420,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1411,"title":{},"body":{"index.html":{}}}],["modern",{"_index":591,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["module",{"_index":122,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["modules",{"_index":124,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1433,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":1187,"title":{},"body":{"controllers/UserController.html":{}}}],["myśliwiec",{"_index":1437,"title":{},"body":{"index.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["necessary",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["need",{"_index":1220,"title":{},"body":{"controllers/UserController.html":{}}}],["needs",{"_index":383,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["nest",{"_index":1402,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1441,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":837,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1370,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":457,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjsis6@awesome",{"_index":464,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["new",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newurl",{"_index":814,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.origin}${newurl.pathname}?page=1&limit=${limit",{"_index":821,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${nextpage}&limit=${limit",{"_index":824,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${page}&limit=${limit",{"_index":823,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${prevpage}&limit=${limit",{"_index":825,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${totalpages}&limit=${limit",{"_index":822,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newuser",{"_index":654,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserCreateMany.html":{}}}],["newuser.push(savednewuserinstance",{"_index":1281,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["newuserinstance",{"_index":1276,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["next",{"_index":781,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["nextpage",{"_index":818,"title":{},"body":{"injectables/PaginationService.html":{}}}],["node.js",{"_index":1395,"title":{},"body":{"index.html":{}}}],["none",{"_index":1389,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["normalizedslug",{"_index":1031,"title":{},"body":{"injectables/PostsService.html":{}}}],["null",{"_index":395,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{}}}],["nullable",{"_index":724,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number'})@isnumber()@isnotempty",{"_index":832,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["number})@isoptional()@isint()@type(undefined",{"_index":701,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["object",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/UserCreateMany.html":{}}}],["objectliteral",{"_index":803,"title":{},"body":{"injectables/PaginationService.html":{}}}],["objects",{"_index":940,"title":{},"body":{"controllers/PostsController.html":{}}}],["observable",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["occurred",{"_index":1333,"title":{},"body":{"injectables/UserService.html":{}}}],["omit",{"_index":674,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["ondelete",{"_index":728,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":620,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["onetomany",{"_index":1176,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1173,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":736,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":726,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1422,"title":{},"body":{"index.html":{}}}],["option.entity",{"_index":756,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":716,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":722,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":725,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":720,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":732,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:33",{"_index":730,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["options",{"_index":427,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.controller",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":742,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:10",{"_index":745,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":565,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":471,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:16",{"_index":474,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["options.hashedpassword",{"_index":713,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["options.module",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":754,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.password",{"_index":428,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["options.service",{"_index":747,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":758,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:15",{"_index":763,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":760,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":470,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["options/entity/meta",{"_index":715,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/meta",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1446,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owning",{"_index":880,"title":{},"body":{"entities/Post.html":{}}}],["package",{"_index":1363,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":512,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":769,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":797,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginatequery(undefined",{"_index":800,"title":{},"body":{"injectables/PaginationService.html":{}}}],["pagination",{"_index":1021,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["pagination'})@apiresponse({status",{"_index":1196,"title":{},"body":{"controllers/UserController.html":{}}}],["pagination.service",{"_index":787,"title":{},"body":{"modules/PaginationModule.html":{}}}],["paginationmodule",{"_index":136,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationquery",{"_index":806,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/PostsService.html":{}}}],["paginationquerydto",{"_index":692,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginationservice",{"_index":140,"title":{"injectables/PaginationService.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["param",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["param('userid",{"_index":970,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":1214,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param.dto.ts",{"_index":699,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:16",{"_index":702,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parama",{"_index":1224,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["parseintpipe",{"_index":953,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["partial",{"_index":949,"title":{},"body":{"controllers/PostsController.html":{}}}],["partialtype",{"_index":834,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":830,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":846,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["passing",{"_index":893,"title":{},"body":{"entities/Post.html":{}}}],["password",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"classes/SignInDto.html":{},"entities/User.html":{}}}],["passwords",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashingProvider.html":{}}}],["patch",{"_index":947,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["patchpostdto",{"_index":828,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchuser",{"_index":1185,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(@body",{"_index":1250,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(patchuserdto",{"_index":1205,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuserdto",{"_index":844,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["path",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{}}}],["person",{"_index":529,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":577,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1378,"title":{},"body":{"dependencies.html":{}}}],["plain",{"_index":708,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["please",{"_index":1431,"title":{},"body":{"index.html":{}}}],["port",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":1200,"title":{},"body":{"controllers/UserController.html":{}}}],["possible",{"_index":510,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":275,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":922,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@delete",{"_index":924,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('/create",{"_index":1245,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.content",{"_index":1052,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":835,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":482,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:103",{"_index":503,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:113",{"_index":524,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:124",{"_index":552,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:146",{"_index":507,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:15",{"_index":833,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:34",{"_index":554,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:46",{"_index":516,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:60",{"_index":543,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:71",{"_index":549,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:80",{"_index":496,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:92",{"_index":531,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.featuredimageurl",{"_index":1056,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":727,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.metaoptions.id",{"_index":1065,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.posttype",{"_index":1046,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishedon",{"_index":1058,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.schema",{"_index":1054,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":1048,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":1050,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":1060,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":1044,"title":{},"body":{"injectables/PostsService.html":{}}}],["postentity",{"_index":993,"title":{},"body":{"modules/PostsModule.html":{}}}],["postgres",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["postquery",{"_index":927,"title":{},"body":{"controllers/PostsController.html":{}}}],["postrepository",{"_index":1001,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":900,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.author",{"_index":1174,"title":{},"body":{"entities/User.html":{}}}],["posts.controller",{"_index":992,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.dto",{"_index":961,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.dto.ts",{"_index":682,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["posts.dto.ts:12",{"_index":686,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.dto.ts:8",{"_index":687,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.service",{"_index":956,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.controller",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":145,"title":{"controllers/PostsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":966,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":137,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":955,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":544,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":879,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":486,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["posttypes",{"_index":508,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttypes.post",{"_index":878,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["prev",{"_index":782,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["prevpage",{"_index":819,"title":{},"body":{"injectables/PaginationService.html":{}}}],["primarygeneratedcolumn",{"_index":721,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["processes",{"_index":948,"title":{},"body":{"controllers/PostsController.html":{}}}],["processing",{"_index":913,"title":{},"body":{"controllers/PostsController.html":{}}}],["production",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["profileconfig",{"_index":1299,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["profileconfiguration",{"_index":1312,"title":{},"body":{"injectables/UserService.html":{}}}],["programming",{"_index":592,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["progressive",{"_index":1394,"title":{},"body":{"index.html":{}}}],["project",{"_index":1423,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["promise.all",{"_index":675,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["promise.resolve(instance.canactivate(context",{"_index":402,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["properties",{"_index":319,"title":{"properties.html":{}},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["protect",{"_index":1304,"title":{},"body":{"modules/UserModule.html":{}}}],["provide",{"_index":249,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{}}}],["provided",{"_index":704,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{}}}],["provider",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["provider/create",{"_index":1297,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["providers",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/bcrypt.provider",{"_index":313,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/generate",{"_index":314,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/hashing.provider",{"_index":311,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/refresh",{"_index":316,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["public",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["published",{"_index":518,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":487,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["put",{"_index":1207,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":807,"title":{},"body":{"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{}}}],["query('limit",{"_index":1232,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":1234,"title":{},"body":{"controllers/UserController.html":{}}}],["query.dto",{"_index":694,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PaginationService.html":{}}}],["query.dto.ts",{"_index":788,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:15",{"_index":793,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:26",{"_index":794,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryparams",{"_index":972,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["queryrunner",{"_index":1262,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.committransaction",{"_index":1284,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.connect",{"_index":1265,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.manager.create(user",{"_index":1277,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.manager.save(newuserinstance",{"_index":1279,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.release",{"_index":1290,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1286,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.starttransaction",{"_index":1271,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["r\\n",{"_index":575,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["range",{"_index":511,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1432,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":120,"title":{},"body":{"controllers/AppController.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["received",{"_index":915,"title":{},"body":{"controllers/PostsController.html":{}}}],["record",{"_index":374,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["references",{"_index":1180,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":1380,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":367,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refresh",{"_index":1077,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["refreshtoken",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{}}}],["refreshtoken(@body",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(token",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokendto",{"_index":268,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["refreshtokenprovider",{"_index":306,"title":{"injectables/RefreshTokenProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtokens",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens(undefined",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["relationship",{"_index":741,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["relationships",{"_index":886,"title":{},"body":{"entities/Post.html":{}}}],["release",{"_index":1289,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["remove",{"_index":888,"title":{},"body":{"entities/Post.html":{}}}],["replace",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Paginated.html":{}}}],["repositories",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{}}}],["repository",{"_index":634,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":816,"title":{},"body":{"injectables/PaginationService.html":{}}}],["repository.find",{"_index":808,"title":{},"body":{"injectables/PaginationService.html":{}}}],["representing",{"_index":937,"title":{},"body":{"controllers/PostsController.html":{}}}],["req",{"_index":954,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":101,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requests",{"_index":932,"title":{},"body":{"controllers/PostsController.html":{}}}],["requesttimeoutexception",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception('request",{"_index":646,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["requesttimeoutexception('timeout",{"_index":1336,"title":{},"body":{"injectables/UserService.html":{}}}],["requesttimeoutexception(error.message",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["requesturl",{"_index":826,"title":{},"body":{"injectables/PaginationService.html":{}}}],["require",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["required",{"_index":444,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":417,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/PostsController.html":{}}}],["response",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["results",{"_index":108,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":935,"title":{},"body":{"controllers/PostsController.html":{}}}],["retrieves",{"_index":928,"title":{},"body":{"controllers/PostsController.html":{}}}],["return",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1198,"title":{},"body":{"controllers/UserController.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["review",{"_index":547,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["right",{"_index":390,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["rollback",{"_index":1285,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["run",{"_index":1409,"title":{},"body":{"index.html":{}}}],["runner",{"_index":1261,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["rxjs",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":429,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["save",{"_index":1280,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["savednewuserinstance",{"_index":1278,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["scalable",{"_index":1399,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":546,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":488,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["second",{"_index":1179,"title":{},"body":{"entities/User.html":{}}}],["secret",{"_index":93,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["sent",{"_index":1078,"title":{},"body":{"injectables/RefreshTokenProvider.html":{},"controllers/UserController.html":{}}}],["serialize",{"_index":526,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":514,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":1400,"title":{},"body":{"index.html":{}}}],["service",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserService.html":{}}}],["services",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["set",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["setmetadata",{"_index":1213,"title":{},"body":{"controllers/UserController.html":{}}}],["setmetadata(auth_type_key",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":889,"title":{},"body":{"entities/Post.html":{},"modules/UserModule.html":{}}}],["setup",{"_index":1178,"title":{},"body":{"entities/User.html":{}}}],["shows",{"_index":838,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["side",{"_index":881,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["sidebarenabled",{"_index":504,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["signed",{"_index":907,"title":{},"body":{"controllers/PostsController.html":{}}}],["signindto",{"_index":263,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signoptions",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["signtoken",{"_index":672,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["single",{"_index":1018,"title":{},"body":{"injectables/PostsService.html":{}}}],["skip",{"_index":809,"title":{},"body":{"injectables/PaginationService.html":{}}}],["slug",{"_index":489,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["soft",{"_index":1113,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":1138,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdelete(undefined",{"_index":1150,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdeletetag",{"_index":1104,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(@query('id",{"_index":1125,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(id",{"_index":1112,"title":{},"body":{"controllers/TagsController.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["special",{"_index":622,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":700,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["specified",{"_index":938,"title":{},"body":{"controllers/PostsController.html":{}}}],["specify",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["sponsors",{"_index":1426,"title":{},"body":{"index.html":{}}}],["src/.../access",{"_index":1454,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../active",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1386,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1392,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posts.enums.ts",{"_index":1387,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":113,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":116,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":252,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":253,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:28",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1296,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":307,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":1323,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:21",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:38",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:43",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:77",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:87",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/active",{"_index":963,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":372,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1347,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refresh",{"_index":1067,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts",{"_index":1084,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts:10",{"_index":1088,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/signin.dto.ts:6",{"_index":1086,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":362,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:14",{"_index":368,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:33",{"_index":369,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":408,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:15",{"_index":422,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:34",{"_index":412,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":657,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":641,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":705,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:19",{"_index":707,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:5",{"_index":711,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1071,"title":{},"body":{"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["src/config/jwt.config",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["src/global/pagination/dto/pagination",{"_index":693,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/global/pagination/interface/paginated.interface",{"_index":1014,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/global/pagination/interface/paginated.interface.ts",{"_index":771,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/global/pagination/pagination.module",{"_index":996,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/global/pagination/pagination.module.ts",{"_index":786,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/global/pagination/pagination.service",{"_index":1013,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/global/pagination/pagination.service.ts",{"_index":796,"title":{},"body":{"injectables/PaginationService.html":{},"coverage.html":{}}}],["src/global/pagination/pagination.service.ts:16",{"_index":801,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/global/pagination/pagination.service.ts:9",{"_index":799,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/main.ts",{"_index":1357,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":469,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":481,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/get",{"_index":681,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":829,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity",{"_index":733,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/entity/post.entity.ts",{"_index":847,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity.ts:19",{"_index":857,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:26",{"_index":873,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:34",{"_index":860,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:42",{"_index":866,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:50",{"_index":867,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:56",{"_index":852,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:62",{"_index":863,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:69",{"_index":856,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:75",{"_index":862,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:81",{"_index":871,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:89",{"_index":859,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:96",{"_index":851,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/enums/posts.enums.ts",{"_index":1390,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":899,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:111",{"_index":945,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:125",{"_index":925,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:49",{"_index":931,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:77",{"_index":910,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":991,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":998,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:135",{"_index":1008,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:15",{"_index":1002,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:155",{"_index":1006,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:39",{"_index":1004,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:99",{"_index":1010,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":588,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity",{"_index":877,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/entity/tags.entity.ts",{"_index":1089,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity.ts:16",{"_index":1096,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:24",{"_index":1097,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:32",{"_index":1100,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:38",{"_index":1094,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:44",{"_index":1099,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:51",{"_index":1095,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:56",{"_index":1098,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:59",{"_index":1091,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:62",{"_index":1101,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:65",{"_index":1093,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":1102,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:19",{"_index":1107,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:26",{"_index":1111,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:32",{"_index":1115,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":995,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":1130,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/tags/tags.service",{"_index":1012,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/tags.service.ts",{"_index":1134,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/tags.service.ts:14",{"_index":1143,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:30",{"_index":1147,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:36",{"_index":1149,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:46",{"_index":1146,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:56",{"_index":1144,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:62",{"_index":1151,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:8",{"_index":1140,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/user/dtos/create",{"_index":436,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/get",{"_index":698,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/user/dtos/patch",{"_index":845,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/user/entity/user.entity",{"_index":667,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"entities/Post.html":{}}}],["src/user/entity/user.entity.ts",{"_index":1165,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entity/user.entity.ts:14",{"_index":1168,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:21",{"_index":1170,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:29",{"_index":1166,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:36",{"_index":1172,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:39",{"_index":1175,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:7",{"_index":1169,"title":{},"body":{"entities/User.html":{}}}],["src/user/provider/create",{"_index":630,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/user/user",{"_index":1252,"title":{},"body":{"injectables/UserCreateMany.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":1182,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:102",{"_index":1189,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:109",{"_index":1206,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:68",{"_index":1203,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:90",{"_index":1194,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":310,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/user/user.module.ts",{"_index":1294,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["src/user/user.service.ts",{"_index":1308,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:102",{"_index":1315,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:22",{"_index":1314,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:44",{"_index":1316,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:52",{"_index":1318,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:78",{"_index":1320,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:88",{"_index":1322,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":1269,"title":{},"body":{"injectables/UserCreateMany.html":{},"index.html":{}}}],["start:dev",{"_index":1412,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1413,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":684,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PostsService.html":{}}}],["started",{"_index":1393,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1403,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1340,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":364,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["stay",{"_index":1434,"title":{},"body":{"index.html":{}}}],["still",{"_index":840,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["story",{"_index":513,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string'})@isdate()@isnotempty",{"_index":523,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isnotempty()@isstring()@minlength(3)@maxlength(255",{"_index":600,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isjson",{"_index":530,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isstring",{"_index":594,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024",{"_index":502,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024)@matches(/^https?:\\/\\/[^\\s",{"_index":596,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isenum(posttypes)@isnotempty",{"_index":515,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@isenum(poststatus",{"_index":548,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(255)@matches(/^[a",{"_index":533,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(512)@matches(/^[a",{"_index":604,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isoptional",{"_index":495,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":553,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string(error",{"_index":1038,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserCreateMany.html":{}}}],["sub",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["success",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["successful",{"_index":1273,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["successfully",{"_index":1066,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["summary",{"_index":967,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":1427,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["svg",{"_index":1444,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":690,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{}}}],["synchronize",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":664,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["table",{"_index":883,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1362,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":590,"title":{"entities/Tag.html":{}},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag'})@post",{"_index":1106,"title":{},"body":{"controllers/TagsController.html":{}}}],["tag.dto",{"_index":1116,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":589,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:23",{"_index":601,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:37",{"_index":605,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:46",{"_index":595,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:51",{"_index":603,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:65",{"_index":598,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.name",{"_index":1156,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagrepository",{"_index":1152,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags",{"_index":490,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":1131,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":1027,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags.posts",{"_index":869,"title":{},"body":{"entities/Post.html":{}}}],["tags.service",{"_index":1117,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["tags/tags.controller",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":147,"title":{"controllers/TagsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":138,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":1141,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":1000,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":810,"title":{},"body":{"injectables/PaginationService.html":{}}}],["test",{"_index":1416,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1419,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1418,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1415,"title":{},"body":{"index.html":{}}}],["text",{"_index":709,"title":{},"body":{"injectables/HashingProvider.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1425,"title":{},"body":{"index.html":{}}}],["then((canactivate",{"_index":403,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.accesstokenguard",{"_index":375,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.accesstokenprovider.generatetokens",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appservice.gethello",{"_index":121,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":392,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.configservice.get('s3_bucket",{"_index":1326,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createtoken",{"_index":676,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.createuserprovider.createuser",{"_index":1325,"title":{},"body":{"injectables/UserService.html":{}}}],["this.datasource.createqueryrunner",{"_index":1263,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["this.extractrequestfromheader",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.generatetokenprovider.generatetokens",{"_index":1083,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.hashingprovider.comparepasswords",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashingprovider.hashpassword",{"_index":652,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration.jwtrefreshtokenexpiration",{"_index":679,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.jwtconfiguration.jwtsecret",{"_index":94,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtconfiguration.jwttokenaudience",{"_index":96,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtconfiguration.jwttokenexpiration",{"_index":677,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.jwtconfiguration.jwttokenissuer",{"_index":98,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtservice.signasync",{"_index":673,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":1079,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.metaoptionsrepository.create(metaoptions",{"_index":766,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.delete",{"_index":1064,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.save(createdmetaoption",{"_index":767,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create",{"_index":750,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.paginationservice.paginatequery",{"_index":1061,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository",{"_index":1062,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.create",{"_index":1036,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.delete",{"_index":1063,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findone",{"_index":1034,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findoneby",{"_index":1041,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(post",{"_index":1037,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postservice.create",{"_index":977,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.delete",{"_index":986,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.getallposts",{"_index":971,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.update",{"_index":982,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.profileconfiguration",{"_index":1330,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflector.getallandoverride",{"_index":382,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.refreshtokenprovider.getrefreshtoken",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":813,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.request.protocol",{"_index":812,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.request.url",{"_index":827,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.tagsrepository.create(tag",{"_index":1158,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete",{"_index":1163,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":1160,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":1155,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findoneby",{"_index":1161,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(createdtags",{"_index":1159,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete",{"_index":1164,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtag",{"_index":1121,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete",{"_index":1123,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags",{"_index":1025,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softdelete",{"_index":1126,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userrepository.create(user",{"_index":655,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findone",{"_index":644,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":1335,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":656,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userscreatemany.createmany",{"_index":1337,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createmany",{"_index":1249,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.createuser",{"_index":1243,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":1239,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyid",{"_index":1081,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.userservice.finduserbyemail",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservices.findonebyid",{"_index":1022,"title":{},"body":{"injectables/PostsService.html":{}}}],["through",{"_index":399,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/PostsController.html":{}}}],["throw",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["time",{"_index":522,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["timeout",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["timestamp",{"_index":861,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":491,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["token')@httpcode(httpstatus.ok",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.dto",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["token.dto.ts",{"_index":1068,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:6",{"_index":1070,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["token.guard.ts:27",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:38",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:43",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.provider",{"_index":315,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts",{"_index":658,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["token.provider.ts:17",{"_index":1073,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts:19",{"_index":663,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["token.provider.ts:32",{"_index":1075,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts:48",{"_index":666,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["token.provider.ts:9",{"_index":661,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["token.refreshtoken",{"_index":1080,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":1082,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["totalitems",{"_index":776,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["totalpages",{"_index":778,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["touch",{"_index":1435,"title":{},"body":{"index.html":{}}}],["track",{"_index":1283,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["transaction",{"_index":1270,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["transactions",{"_index":1260,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["transfer",{"_index":917,"title":{},"body":{"controllers/PostsController.html":{}}}],["transform",{"_index":703,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["transformer",{"_index":455,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"dependencies.html":{}}}],["true",{"_index":100,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@jointable",{"_index":870,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":449,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":1440,"title":{},"body":{"index.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1452,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm.forfeature",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":757,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([postentity",{"_index":997,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":1133,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1301,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":377,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":599,"title":{},"body":{"classes/CreateTagDto.html":{},"index.html":{}}}],["undefined",{"_index":443,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"miscellaneous/variables.html":{}}}],["undefined})@get(':userid",{"_index":930,"title":{},"body":{"controllers/PostsController.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":448,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":506,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":865,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1414,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1451,"title":{},"body":{"properties.html":{}}}],["up",{"_index":839,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["update",{"_index":831,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["update(undefined",{"_index":1009,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":943,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["updatedatecolumn",{"_index":731,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updateddate",{"_index":718,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedpost",{"_index":981,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost",{"_index":904,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":979,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(updatepostdto",{"_index":941,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost.content",{"_index":1053,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.featuredimageurl",{"_index":1057,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.id",{"_index":1042,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.posttype",{"_index":1047,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.publishedon",{"_index":1059,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.schema",{"_index":1055,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.slug",{"_index":1049,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.status",{"_index":1051,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.tags",{"_index":1040,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.title",{"_index":1045,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":950,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":942,"title":{},"body":{"controllers/PostsController.html":{}}}],["url",{"_index":499,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PaginationService.html":{}}}],["url(this.request.url",{"_index":815,"title":{},"body":{"injectables/PaginationService.html":{}}}],["use",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{}}}],["useclass",{"_index":250,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["used",{"_index":884,"title":{},"body":{"entities/Post.html":{}}}],["usefactory",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["useguards",{"_index":1212,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(accesstokenguard",{"_index":1244,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":53,"title":{"entities/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetUsersParamDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiresponse({status",{"_index":929,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.'})@apiresponse({status",{"_index":908,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.controller",{"_index":1295,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator",{"_index":964,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.decorator.ts",{"_index":1346,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":454,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":438,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":611,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":613,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":609,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":450,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["user.dto.ts:37",{"_index":624,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":645,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{}}}],["user.id",{"_index":678,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["user.password",{"_index":653,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.posts",{"_index":849,"title":{},"body":{"entities/Post.html":{}}}],["user.provider",{"_index":1298,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.provider.ts",{"_index":631,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:16",{"_index":635,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:27",{"_index":638,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.service",{"_index":1215,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.sub",{"_index":978,"title":{},"body":{"controllers/PostsController.html":{}}}],["user/user.module",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["user[field",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usercontroller",{"_index":1181,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercreatemany",{"_index":1251,"title":{"injectables/UserCreateMany.html":{}},"body":{"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":668,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["usermodule",{"_index":139,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["userparamsdto",{"_index":1240,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userpayload",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":636,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["users",{"_index":439,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["users'})@auth(authtype.bearer)@post('/create",{"_index":1188,"title":{},"body":{"controllers/UserController.html":{}}}],["users.users",{"_index":1275,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["users/1223",{"_index":1227,"title":{},"body":{"controllers/UserController.html":{}}}],["users/id?limit=10&page=1",{"_index":1223,"title":{},"body":{"controllers/UserController.html":{}}}],["users?limit=10&page=2",{"_index":1230,"title":{},"body":{"controllers/UserController.html":{}}}],["userscreatemany",{"_index":1313,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":325,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservices",{"_index":1003,"title":{},"body":{"injectables/PostsService.html":{}}}],["using",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"injectables/BcryptProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["valid",{"_index":1030,"title":{},"body":{"injectables/PostsService.html":{}}}],["validate",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":452,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":1211,"title":{},"body":{"controllers/UserController.html":{}}}],["validationschema",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":453,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{}}}],["value",{"_index":479,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["varchar",{"_index":853,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":1342,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":190,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["verify",{"_index":1076,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["version",{"_index":416,"title":{},"body":{"injectables/BcryptProvider.html":{},"controllers/UserController.html":{},"properties.html":{}}}],["void",{"_index":1191,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["want",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["watch",{"_index":1410,"title":{},"body":{"index.html":{}}}],["website",{"_index":1438,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":493,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["whether",{"_index":419,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["whos",{"_index":1228,"title":{},"body":{"controllers/UserController.html":{}}}],["whose",{"_index":939,"title":{},"body":{"controllers/PostsController.html":{}}}],["work",{"_index":890,"title":{},"body":{"entities/Post.html":{}}}],["works",{"_index":841,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["world",{"_index":255,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["yarn",{"_index":1405,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1430,"title":{},"body":{"index.html":{}}}],["your.env",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["z0",{"_index":534,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":617,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":616,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":615,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport { Observable } from 'rxjs';\nimport jwtConfig from 'src/config/jwt.config';\n\nexport const REQUEST_USER_KEY = 'user';\n\nexport type UserPayload = {\n  sub: number;\n  email: string;\n  iat: number;\n  exp: number;\n  aud: string;\n  iss: string;\n};\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    // injecting necessary services here\n\n    // injecting jwt service\n    private jwtService: JwtService,\n\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n  ) {}\n\n  private extractRequestFromHeader({ request }: { request: Request }) {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n\n  async canActivate(context: ExecutionContext): Promise {\n    // get the request object from the execution context\n    const request = context.switchToHttp().getRequest();\n\n    // extract the token from the request (header)\n    const token = this.extractRequestFromHeader({ request });\n    // console.log('inside canActivate', token);\n\n    // validate the token\n    if (!token) {\n      throw new HttpException('No token passed', HttpStatus.UNAUTHORIZED);\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: this.jwtConfiguration.jwtSecret,\n        // audience: this.jwtConfiguration.jwtTokenAudience,\n        // issuer: this.jwtConfiguration.jwtTokenIssuer,\n        // ignoreExpiration: true\n      });\n      request[REQUEST_USER_KEY] = payload as UserPayload;\n    } catch (error: any) {\n      throw new HttpException(`${error.message}`, HttpStatus.UNAUTHORIZED, {\n        cause: error.message,\n        description: error,\n      });\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nAppModule -->\n\nPaginationService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PaginationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            PostsController\n                        \n                        \n                            MetaOptionsController\n                        \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { PostsController } from './posts/posts.controller';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOptionsController } from './meta-options/meta-options.controller';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsController } from './tags/tags.controller';\nimport { TagsModule } from './tags/tags.module';\nimport { ConfigModule, ConfigService, ConfigType } from '@nestjs/config';\nimport { PaginationService } from './global/pagination/pagination.service';\nimport { PaginationModule } from './global/pagination/pagination.module';\nimport appConfig from './config/index.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\n\nexport const ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    // env configs\n    ConfigModule.forRoot({\n      isGlobal: true, // make sure this is set to true to load environment variables from.env file\n      // envFilePath: ['.env.development.local'], // specify the path to your.env file\n      envFilePath: !ENV ? '.env' : `.env.${ENV}.local`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }), // to use environment variables\n    // env configs\n\n    UserModule,\n    PostsModule,\n    AuthModule,\n    MetaOptionsModule,\n\n    // database configs\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // specify any additional imports here, e.g., TypeORM migrations or custom repositories\n      inject: [ConfigService], // inject\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DATABASE_HOST'),\n        port: +configService.get('database.port'),\n        // port: +configService.get('DATABASE_PORT'),\n        username: configService.get('DATABASE_USERNAME'),\n        password: configService.get('DATABASE_PASSWORD'),\n        database: configService.get('DATABASE_NAME'),\n        entities: ['dist/**/*.entity.js'],\n        synchronize: configService.get('database.synchronize'), // set to false in production\n        // autoLoadEntities: true, // using this would require us to create a module (controller and module file) for every entity we want to add, exporting it and using the TypeORM.forFeature([]) function\n      }),\n    }),\n    // database configs\n\n    // jwt configuration\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync({\n      imports: [ConfigModule.forFeature(jwtConfig)],\n      useFactory: async (jwtConfiguration: ConfigType) => ({\n        secret: jwtConfiguration.jwtSecret,\n        signOptions: {\n          audience: jwtConfiguration.jwtTokenAudience,\n          issuer: jwtConfiguration.jwtTokenIssuer,\n          expiresIn: jwtConfiguration.jwtTokenExpiration,\n        },\n      }),\n      inject: [jwtConfig.KEY],\n    }),\n    // jwt configuration\n\n    TagsModule,\n    PaginationModule,\n  ],\n  controllers: [\n    AppController,\n    PostsController,\n    MetaOptionsController,\n    TagsController,\n  ],\n  providers: [\n    AppService,\n    PaginationService,\n    AccessTokenGuard, // because authentication guard has a dependency injection of AccessTokenGuard\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n      // useClass: AccessTokenGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginBody: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.NONE)@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginBody\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(token: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.BEARER)@Post('refresh-token')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Post,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { Auth, AuthType } from './decorators/auth.decorator';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Auth(AuthType.NONE)\n  @Post('login')\n  @HttpCode(HttpStatus.OK) // this force and assign the default success response with status code 200\n  login(@Body() loginBody: SignInDto) {\n    return this.authService.login({ body: loginBody });\n  }\n\n  @Auth(AuthType.BEARER)\n  @Post('refresh-token')\n  @HttpCode(HttpStatus.OK)\n  refreshToken(@Body() token: RefreshTokenDto) {\n    return this.authService.refreshTokens({ token });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokenProvider\n\nGenerateTokenProvider\n\nAuthModule -->\n\nGenerateTokenProvider->AuthModule\n\n\n\n\n\nRefreshTokenProvider\n\nRefreshTokenProvider\n\nAuthModule -->\n\nRefreshTokenProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokenProvider\n                        \n                        \n                            RefreshTokenProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from 'src/user/user.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { ConfigModule, ConfigType } from '@nestjs/config';\nimport jwtConfig from 'src/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { GenerateTokenProvider } from './providers/generate-token.provider';\nimport { RefreshTokenProvider } from './providers/refresh-token.provider';\n\n@Module({\n  imports: [\n    forwardRef(() => UserModule), // for dependency injection (circular dependency injection)\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync({\n      imports: [ConfigModule.forFeature(jwtConfig)],\n      useFactory: async (jwtConfiguration: ConfigType) => ({\n        secret: jwtConfiguration.jwtSecret,\n        signOptions: {\n          audience: jwtConfiguration.jwtTokenAudience,\n          issuer: jwtConfiguration.jwtTokenIssuer,\n          expiresIn: jwtConfiguration.jwtTokenExpiration,\n        },\n      }),\n      inject: [jwtConfig.KEY],\n    }),\n  ],\n  exports: [AuthService, HashingProvider],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider,\n      useClass: BcryptProvider,\n    },\n    GenerateTokenProvider,\n    RefreshTokenProvider,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accessTokenProvider\n                            \n                            \n                                    Public\n                                refreshTokenProvider\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, hashingProvider: HashingProvider, jwtService: JwtService, jwtConfiguration: ConfigType<>, accessTokenProvider: GenerateTokenProvider, refreshTokenProvider: RefreshTokenProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenProvider\n                                                  \n                                                        \n                                                                        RefreshTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        accessTokenProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GenerateTokenProvider\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        refreshTokenProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RefreshTokenProvider\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:40\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Inject,\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from 'src/config/jwt.config';\nimport { UserPayload } from './guards/access-token/access-token.guard';\nimport { GenerateTokenProvider } from './providers/generate-token.provider';\nimport { RefreshTokenProvider } from './providers/refresh-token.provider';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n\n    // injecting hashing provider\n    @Inject(forwardRef(() => HashingProvider)) // doing this because this is a circular dependency\n    private hashingProvider: HashingProvider,\n\n    // injecting jwt service dependency\n    private jwtService: JwtService,\n\n    // injecting jwtConfig (environment values)\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n\n    public accessTokenProvider: GenerateTokenProvider,\n\n    public refreshTokenProvider: RefreshTokenProvider,\n  ) {}\n\n  public async login({ body }: { body: SignInDto }) {\n    const { email, password } = body;\n\n    const existingUser = await this.userService.findUserByEmail({ email });\n\n    let isPasswordCorrect: boolean;\n\n    try {\n      isPasswordCorrect = await this.hashingProvider.comparePasswords({\n        hashedPassword: existingUser.password,\n        password,\n      });\n    } catch (error: any) {\n      throw new RequestTimeoutException(error.message, {\n        cause: error,\n        description: 'Request timeout. Could not compare passwords',\n      });\n    }\n\n    if (!isPasswordCorrect) {\n      throw new HttpException('Invalid credentials', HttpStatus.UNAUTHORIZED);\n    }\n\n    const { accessToken, refreshToken } =\n      await this.accessTokenProvider.generateTokens({\n        user: existingUser,\n      });\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  public async refreshTokens({ token }: { token: RefreshTokenDto }) {\n    const { accessToken, refreshToken } =\n      await this.refreshTokenProvider.getRefreshToken({ token });\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  public isAuthenticated() {\n    return true; // replace with actual authentication logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AUTH_TYPE_KEY, AuthType } from 'src/auth/decorators/auth.decorator';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  constructor(\n    // injecting necessary services here\n\n    // injecting reflector\n    private reflector: Reflector,\n\n    private accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  private static defaultAuthType: AuthType = AuthType.BEARER;\n\n  private authTypeGuardMap: Record = {\n    [AuthType.BEARER]: this.accessTokenGuard,\n    [AuthType.NONE]: {\n      canActivate: () => true,\n    },\n  };\n\n  async canActivate(context: ExecutionContext): Promise {\n    // get all auth types from the reflector (metadata)\n    // getting the auth decorator passed\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY, // decorator that needs checking\n      [context.getHandler(), context.getClass()], // get keys for all type auth\n    ) ?? [AuthenticationGuard.defaultAuthType];\n\n    // console.log({ authTypes });\n\n    // getting the right guard for the right auth type decorator\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n\n    // console.log('Guards:', JSON.stringify(guards, null, 2));\n\n    // array of guards\n    // loop guards canActivate\n    // loop through all the guards and fire the canActivate (returns a boolean)\n    for (const instance of guards) {\n      // console.log({ instance });\n      const canActivate = await Promise.resolve(instance.canActivate(context))\n        .then((canActivate) => {\n          // console.log('canActivate', canActivate);\n          return canActivate;\n        })\n        .catch((error: any) => {\n          throw new HttpException(`${error.message}`, HttpStatus.UNAUTHORIZED, {\n            cause: error.message,\n            description: error,\n          });\n        });\n\n      if (!canActivate) {\n        throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\n      }\n      return true;\n    }\n\n    // throw exception if no canActivate\n    throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                comparePasswords\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \ncomparePasswords(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:34\n                        \n                    \n\n\n            \n                \n                        Compares a given password with its hashed version.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to a boolean indicating whether the password matches the hashed password.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:15\n                        \n                    \n\n\n            \n                \n                        Hashes a given password using bcrypt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                [object Object]\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe password to be hashed. Can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to the hashed password as a string.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  /**\n   * Hashes a given password using bcrypt.\n   *\n   * @param options - The options for hashing the password.\n   * @param options.password - The password to be hashed. Can be a string or a Buffer.\n   *\n   * @returns A Promise that resolves to the hashed password as a string.\n   */\n  public async hashPassword({\n    password,\n  }: {\n    password: string | Buffer;\n  }): Promise {\n    const salt = await bcrypt.genSalt();\n    const hashed = bcrypt.hash(password, salt);\n\n    return hashed;\n  }\n\n  /**\n   * Compares a given password with its hashed version.\n   *\n   * @param password - The password to compare. It can be a string or a Buffer.\n   * @param hashedPassword - The hashed version of the password to compare against.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the password matches the hashed password.\n   */\n  comparePasswords({\n    password,\n    hashedPassword,\n  }: {\n    password: string | Buffer;\n    hashedPassword: string;\n  }): Promise {\n    const compare = bcrypt.compare(password, hashedPassword);\n    return compare;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-many-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Array of users to be created', type: undefined, required: true, isArray: true, items: undefined, example: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-many-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entity/user.entity';\n\nexport class CreateManyUsersDto {\n  @ApiProperty({\n    description: 'Array of users to be created',\n    type: [CreateUserDto],\n    required: true,\n    isArray: true,\n    items: {\n      type: 'User',\n    },\n    example: [\n      {\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john@doe.com',\n        password: 'nestjsIS6@awesome',\n      },\n      {\n        firstName: 'Jane',\n        lastName: 'Doe',\n        email: 'jane@doe.com',\n        password: 'nestjsIS6@awesome',\n      },\n    ],\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMetaOptionsDto.html":{"url":"classes/CreateMetaOptionsDto.html","title":"class - CreateMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-meta-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from \"class-validator\";\n\nexport class CreateMetaOptionsDto {\n    // @ApiProperty()\n    // @IsString()\n    // @MinLength(4)\n    // @IsNotEmpty()\n    // key: string;\n  \n    // @ApiProperty()\n    // @IsNotEmpty()\n    // value: any;\n  \n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the additional options for the post', example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}', type: 'string', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostTypes, description: 'Possible tags for a post, range: ['post', 'page', 'story', 'series']', type: 'string'})@IsString()@IsEnum(PostTypes)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the date when the post was published', example: '2024-03-16T12:00:00+0000', format: 'date-time', type: 'string'})@IsDate()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the excerpt of the post. Serialize your json content or else there will be an error', example: '{\n \"@context\": \"https://schema.org\", \n \"@type\": \"Person\"\n}', format: 'json', type: 'string'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(255)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']', type: 'string'})@IsString()@IsNotEmpty()@IsEnum(PostStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined, type: 'array', required: false})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is a title of the post', example: 'Hello World', type: 'string'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { CreateMetaOptionsDto } from 'src/meta-options/dtos/create-meta-options.dto';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is a title of the post',\n    example: 'Hello World',\n    type: 'string',\n\n    // default: \"Hello World\"\n  }) // this adds the value to the post documentation\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostTypes,\n    description:\n      \"Possible tags for a post, range: ['post', 'page', 'story', 'series']\",\n    type: 'string',\n  })\n  @IsString()\n  //   @IsEnum(['post', 'page', 'story', 'series'])\n  @IsEnum(PostTypes)\n  @IsNotEmpty()\n  postType: PostTypes;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description:\n      \"Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']\",\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'This is the excerpt of the post. Serialize your json content or else there will be an error',\n    example:\n      '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\", \\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}',\n    format: 'json',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'This is the date when the post was published',\n    example: '2024-03-16T12:00:00+0000',\n    format: 'date-time',\n    type: 'string',\n  })\n  @IsDate()\n  @IsNotEmpty()\n  publishedOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1, 4],\n    type: 'array',\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true }) // validate each item in the array as a string\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    description: 'This is the additional options for the post',\n    example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n    type: 'string',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'The meta value is a json object',\n          example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n        },\n      },\n      required: ['key', 'value'],\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreateMetaOptionsDto)\n  metaOptions?: CreateMetaOptionsDto | null;\n\n  // @ApiProperty({\n  //   description: 'This is the id of the author of the post',\n  //   example: 123,\n  //   type: 'integer',\n  //   required: true,\n  // })\n  // @IsInt()\n  // @IsNotEmpty()\n  // authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Tag Description', example: 'A modern programming language', type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)@Matches(/^https?:\\/\\/[^\\s]+$/, {message: 'Invalid URL format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the tag', example: 'TypeScript', type: 'string'})@IsNotEmpty()@IsString()@MinLength(3)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(512)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty({\n    description: 'Name of the tag',\n    example: 'TypeScript',\n    type: 'string',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(255)\n  name: string;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(512)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiPropertyOptional({\n    description: 'Tag Description',\n    example: 'A modern programming language',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional({})\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  @Matches(/^https?:\\/\\/[^\\s]+$/, {\n    message: 'Invalid URL format',\n  })\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/provider/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/user/provider/create-user.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/provider/create-user.provider.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../entity/user.entity';\nimport { Repository } from 'typeorm';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    // injecting user service repository dependency\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    // injecting hashing provider\n    @Inject(forwardRef(() => HashingProvider)) // doing this because this is a circular dependency\n    private hashingProvider: HashingProvider,\n  ) {}\n\n  public async createUser({\n    user,\n  }: {\n    user: CreateUserDto;\n  }): Promise {\n    // check user\n    let existingUser = undefined;\n\n    try {\n      existingUser = await this.userRepository.findOne({\n        where: { email: user.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException('Request timeout', {\n        cause: error,\n        description: 'Request timeout',\n      });\n    }\n\n    // handle exception\n    if (existingUser) {\n      throw new HttpException('Email already exists', HttpStatus.CONFLICT);\n    }\n\n    const hashedPassword = await this.hashingProvider.hashPassword({\n      password: user.password,\n    });\n\n    user.password = hashedPassword\n\n    // create a new user\n    const newUser = await this.userRepository.create(user);\n    await this.userRepository.save(newUser);\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokenProvider.html":{"url":"injectables/GenerateTokenProvider.html","title":"injectable - GenerateTokenProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokenProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-token.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createToken\n                            \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-token.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    createToken(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-token.provider.ts:19\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-token.provider.ts:48\n                        \n                    \n\n\n            \n                \n                        generateTokens\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from 'src/config/jwt.config';\nimport { UserPayload } from '../guards/access-token/access-token.guard';\nimport { User } from 'src/user/entity/user.entity';\n\n@Injectable()\nexport class GenerateTokenProvider {\n  constructor(\n    // injecting jwt service dependency\n    private jwtService: JwtService,\n\n    // injecting jwtConfig (environment values)\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n  ) {}\n\n  private async createToken({\n    userId,\n    expiresIn,\n    payload,\n  }: {\n    userId: number;\n    expiresIn: number;\n    payload?: T;\n  }) {\n    // generate jwt(refresh) token for authenticated user\n    const signToken = await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        expiresIn: expiresIn,\n        secret: this.jwtConfiguration.jwtSecret,\n        audience: this.jwtConfiguration.jwtTokenAudience,\n        issuer: this.jwtConfiguration.jwtTokenIssuer,\n      },\n    );\n\n    return signToken;\n  }\n\n  /**\n   * generateTokens\n   */\n  public async generateTokens({\n    user,\n  }: {\n    // user: Omit;\n    user: User;\n  }) {\n    const [accessToken, refreshToken] = await Promise.all([\n      await this.createToken({\n        expiresIn: this.jwtConfiguration.jwtTokenExpiration,\n        userId: user.id,\n        payload: {\n          email: user.email,\n        },\n      }),\n\n      await this.createToken({\n        expiresIn: this.jwtConfiguration.jwtRefreshTokenExpiration,\n        userId: user.id,\n      }),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto.html":{"url":"classes/GetPostsBaseDto.html","title":"class - GetPostsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger'; // importing from swagger so i get automatic documentation\nimport { PaginationQueryDto } from 'src/global/pagination/dto/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsQueryDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsQueryDto.html":{"url":"classes/GetPostsQueryDto.html","title":"class - GetPostsQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger'; // importing from swagger so i get automatic documentation\nimport { PaginationQueryDto } from 'src/global/pagination/dto/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsQueryDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 123, type: Number})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/get-users-param.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 123,\n    type: Number,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number) // transform string to number if provided\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePasswords\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:19\n                        \n                    \n\n\n            \n                \n                        Compares a plain text password with a hashed password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                [object Object]\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text password to compare. Can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to a boolean indicating whether the passwords match.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n  abstract hashPassword({\n    password,\n  }: {\n    password: string | Buffer;\n  }): Promise;\n\n  /**\n   * Compares a plain text password with a hashed password.\n   * \n   * @param options - The options for password comparison.\n   * @param options.password - The plain text password to compare. Can be a string or a Buffer.\n   * @param options.hashedPassword - The hashed password to compare against.\n   * @returns A promise that resolves to a boolean indicating whether the passwords match.\n   */\n  abstract comparePasswords({\n    password,\n    hashedPassword,\n  }: {\n    password: string | Buffer;\n    hashedPassword: string;\n  }): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/entity/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  }) // creating bi-directional relationship\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOptions(createMetaOptionsDto: CreateMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionsDto\n                                            \n                                                            CreateMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private metaOptionsService: MetaOptionsService) {}\n\n  @Post()\n  createMetaOptions(@Body() createMetaOptionsDto: CreateMetaOptionsDto) {\n    const metaOptions = this.metaOptionsService.create({\n      metaOptions: createMetaOptionsDto,\n    });\n\n    return metaOptions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './entity/meta-option.entity';\nimport { MetaOptionsController } from './meta-options.controller';\n\n@Module({\n  providers: [MetaOptionsService],\n  controllers: [MetaOptionsController],\n  exports: [MetaOptionsService],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/meta-options.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\nimport { MetaOption as MetaOptionsRepository } from './entity/meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    // injecting meta options service repository dependency\n    @InjectRepository(MetaOptionsRepository)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create({ metaOptions }: { metaOptions: CreateMetaOptionsDto }) {\n    const createdMetaOption =\n      await this.metaOptionsRepository.create(metaOptions);\n    await this.metaOptionsRepository.save(createdMetaOption);\n\n    return createdMetaOption;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/interface/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[]; // replace with your actual entity type... it would be generic\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    prev: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaginationModule_exports\n\n\n\n\nPaginationService \n\nPaginationService \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationService  -->\n\nPaginationModule->PaginationService \n\n\n\n\n\nPaginationService\n\nPaginationService\n\nPaginationModule -->\n\nPaginationService->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/global/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationService } from './pagination.service';\n\n@Module({\n  providers: [PaginationService],\n  exports: [PaginationService],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/dto/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of items to fetch', example: 10, type: Number, default: 10, minimum: 1})@IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/global/pagination/dto/pagination-query.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of page to fetch', example: 10, type: Number, default: 10, minimum: 1})@IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/global/pagination/dto/pagination-query.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsOptional, IsPositive } from 'class-validator';\n\nexport class PaginationQueryDto {\n  @ApiPropertyOptional({\n    description: 'Number of items to fetch',\n    example: 10,\n    type: Number,\n    default: 10,\n    minimum: 1,\n  })\n  @IsOptional()\n  @IsPositive()\n  limit?: number = 10;\n\n  @ApiPropertyOptional({\n    description: 'Number of page to fetch',\n    example: 10,\n    type: Number,\n    default: 10,\n    minimum: 1,\n  })\n  @IsOptional()\n  @IsPositive()\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationService.html":{"url":"injectables/PaginationService.html","title":"injectable - PaginationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/pagination.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/global/pagination/pagination.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/global/pagination/pagination.service.ts:16\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PaginationQueryDto } from './dto/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport { Paginated } from './interface/paginated.interface';\n\n@Injectable()\nexport class PaginationService {\n  constructor(\n    // injecting the request object\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  public async paginateQuery({\n    paginationQuery,\n    repository,\n  }: {\n    paginationQuery: PaginationQueryDto;\n    repository: Repository;\n  }): Promise> {\n    const { limit, page } = paginationQuery;\n\n    const query = await repository.find({\n      skip: (page - 1) * limit,\n      take: limit,\n    });\n\n    // creating url\n\n    const baseUrl =\n      this.request.protocol + '://' + this.request.headers.host + '/';\n\n    const newUrl = new URL(this.request.url, baseUrl);\n\n    const totalItems = await repository.count({});\n    const totalPages = Math.ceil(totalItems / limit);\n    const nextPage = totalPages === page ? page : page + 1;\n    const prevPage = page === 1 ? page : page - 1;\n\n    const finalResponse: Paginated = {\n      data: query,\n      meta: {\n        itemsPerPage: limit,\n        totalItems,\n        currentPage: page,\n        totalPages,\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?page=1&limit=${limit}}`,\n        last: `${newUrl.pathname}?page=${totalPages}&limit=${limit}`,\n        current: `${newUrl.pathname}?page=${page}&limit=${limit}`,\n        next: `${newUrl.pathname}?page=${nextPage}&limit=${limit}`,\n        prev: `${newUrl.pathname}?page=${prevPage}&limit=${limit}`,\n      },\n    };\n\n    console.log({ baseUrl, requestUrl: this.request.url, newUrl });\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Update post with a specific id', example: 123, type: 'number'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n// import { PartialType } from '@nestjs/mapped-types'; \n// we are using the import from swagger so it shows up in our documentation, it still works likes expected as the import from @nestjs/mapped-types\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'Update post with a specific id',\n    example: 123,\n    type: 'number',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entity/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostTypes, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tags => tags.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { MetaOption } from '../../meta-options/entity/meta-option.entity';\nimport { User } from 'src/user/entity/user.entity';\nimport { Tag } from 'src/tags/entity/tags.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostTypes,\n    default: PostTypes.POST,\n  })\n  postType: PostTypes;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: false,\n  })\n  publishedOn: Date;\n\n  @ManyToMany(() => Tag, (tags) => tags.posts, {\n    eager: true,\n  })\n  @JoinTable() // this must be on the owning side of the relationship and join table is used for M2M relationships, it also creates a new table for the relationship\n  tags?: Tag[];\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    // cascade: ['remove'] // setting cascade to work for a few methods\n    cascade: true, // this enables us create data in the metaoption table by just passing the value\n    eager: true, // loading the metaOptions eagerly instead of lazy loading it\n  })\n  // @JoinColumn()\n  metaOptions?: MetaOption;\n\n  // metaOptions?: CreatePostDtoWithMeta[];\n\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                deletePost\n                            \n                            \n                                    \n                                    \n                                    \n                                getAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: UserPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post', description: 'Creates a new post for a signed in user.'})@ApiResponse({status: undefined, description: 'Created post', type: CreatePostDto})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\nThis function handles the creation of a new post by processing the provided CreatePostDto.\nIt logs the received data and returns a confirmation message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the details of the post to be created.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            UserPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the post request was received.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post'})@ApiResponse({status: undefined, description: 'Deleted post'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(userId: number, postQuery: GetPostsQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Retrieves all posts for a specific user'})@ApiResponse({status: undefined, description: 'All posts', type: undefined})@Get(':userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\nThis function handles GET requests to fetch all posts associated with a given user ID.\nIt logs the user ID for which posts are being retrieved and then calls the post service\nto fetch the posts.\nExample :                                representing all posts for the specified user.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user whose posts are to be retrieved.\n\n\n                                            \n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CreatePostDto objects,\nrepresenting all posts for the specified user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(updatePostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates a post'})@ApiResponse({status: undefined, description: 'Updated post', type: CreatePostDto})@Patch('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\nThis function handles PATCH requests to update an existing post using the provided data.\nIt logs the update data received and processes the partial post update through the\nPatchPostDto data transfer object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the fields to be updated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the patch request was received.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  Req,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsQueryDto } from './dtos/get-posts.dto';\nimport { Auth, AuthType } from 'src/auth/decorators/auth.decorator';\nimport { ActiveUser } from 'src/auth/decorators/active-user.decorator';\nimport { UserPayload } from 'src/auth/guards/access-token/access-token.guard';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   *\n   * This function handles GET requests to fetch all posts associated with a given user ID.\n   * It logs the user ID for which posts are being retrieved and then calls the post service\n   * to fetch the posts.\n   *\n   * @param {number} userId - The ID of the user whose posts are to be retrieved.\n   * @returns {Promise} A promise that resolves to an array of CreatePostDto objects,\n   *                                     representing all posts for the specified user.\n   */\n\n  @ApiOperation({\n    summary: 'Retrieves all posts for a specific user',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'All posts',\n    type: [CreatePostDto],\n  })\n  @Get(':userId?')\n  getAllPosts(\n    @Param('userId') userId: number,\n    @Query() postQuery: GetPostsQueryDto,\n  ) {\n    console.log({ postQuery });\n\n    return this.postService.getAllPosts({ userId, queryParams: postQuery });\n  }\n\n  /**\n   * Creates a new post.\n   *\n   * This function handles the creation of a new post by processing the provided CreatePostDto.\n   * It logs the received data and returns a confirmation message.\n   *\n   * @param {CreatePostDto} createPostDto - The data transfer object containing the details of the post to be created.\n   * @returns {string} A confirmation message indicating that the post request was received.\n   */\n  @ApiOperation({\n    summary: 'Creates a new post',\n    description: 'Creates a new post for a signed in user.',\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Created post',\n    type: CreatePostDto,\n  })\n  @Post('')\n  createPost(\n    @Body() createPostDto: CreatePostDto,\n    @ActiveUser() user: UserPayload,\n  ) {\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.UNAUTHORIZED);\n    }\n\n    const createdPost = this.postService.create({\n      createPost: createPostDto,\n      authorId: user.sub as number,\n    });\n    return createdPost;\n  }\n\n  /**\n   * Updates an existing post.\n   *\n   * This function handles PATCH requests to update an existing post using the provided data.\n   * It logs the update data received and processes the partial post update through the\n   * PatchPostDto data transfer object.\n   *\n   * @param {PatchPostDto} updatePostDto - The data transfer object containing the fields to be updated.\n   * @returns {string} A confirmation message indicating that the patch request was received.\n   */\n  @ApiOperation({\n    summary: 'Updates a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Updated post',\n    type: CreatePostDto,\n  })\n  @Patch('')\n  updatePost(@Body() updatePostDto: PatchPostDto) {\n    // console.log({updatePostDto})\n    const updatedPost = this.postService.update({ updatePost: updatePostDto });\n    return updatedPost;\n  }\n\n  @ApiOperation({\n    summary: 'Deletes a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Deleted post',\n  })\n  @Delete('')\n  deletePost(@Query('id', ParseIntPipe) id: number) {\n    if (!id) {\n      throw new HttpException('No ID Provided', HttpStatus.BAD_REQUEST);\n    }\n\n    const deleteRequest = this.postService.delete({ id });\n\n    return deleteRequest;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { UserModule } from 'src/user/user.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post as PostEntity } from './entity/post.entity';\nimport { MetaOption } from 'src/meta-options/entity/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/global/pagination/pagination.module';\n\n@Module({\n  imports: [\n    UserModule,\n    TagsModule,\n    PaginationModule,\n    TypeOrmModule.forFeature([PostEntity, MetaOption]),\n  ],\n  controllers: [PostsController],\n  providers: [PostsService],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userServices: UserService, tagsService: TagsService, postRepository: Repository, metaOptionsRepository: Repository, paginationService: PaginationService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userServices\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:155\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption as MetaOptionRepository } from 'src/meta-options/entity/meta-option.entity';\nimport { Post, Post as PostRepository } from './entity/post.entity';\nimport { TagsService } from 'src/tags/tags.service';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsQueryDto } from './dtos/get-posts.dto';\nimport { PaginationService } from 'src/global/pagination/pagination.service';\nimport { Paginated } from 'src/global/pagination/interface/paginated.interface';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /**\n     * Repositories Injections\n     */\n\n    // injecting user service (making user of another service (a single dependency injection))\n    private userServices: UserService,\n\n    private tagsService: TagsService,\n\n    /**\n     * Repositories Injections\n     */\n    @InjectRepository(PostRepository)\n    private postRepository: Repository,\n\n    @InjectRepository(MetaOptionRepository)\n    private metaOptionsRepository: Repository,\n\n    // injecting pagination service\n    private paginationService: PaginationService,\n  ) {}\n\n  public async create({\n    createPost,\n    authorId,\n  }: {\n    createPost: CreatePostDto;\n    authorId: number;\n  }) {\n    const author = await this.userServices.findOneById({\n      id: authorId,\n    });\n\n    if (!author) {\n      throw new HttpException('Author not found', HttpStatus.NOT_FOUND);\n    }\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: createPost.tags,\n    });\n\n    if (!tags.length || tags.length === 0) {\n      throw new HttpException('Tags not found', HttpStatus.NOT_FOUND, {\n        cause: 'Tags not found',\n        description: 'Provide a valid tags to create',\n      });\n    }\n\n    const normalizedSlug = createPost.slug.toLowerCase();\n    const existingSlug = await this.postRepository.findOne({\n      where: {\n        slug: normalizedSlug,\n      },\n    });\n\n    if (existingSlug) {\n      throw new HttpException('Slug already exists', HttpStatus.CONFLICT);\n    }\n\n    try {\n      const post = await this.postRepository.create({\n        ...createPost,\n        author: author,\n        tags: tags,\n        slug: normalizedSlug,\n      });\n\n      await this.postRepository.save(post);\n\n      return post;\n    } catch (error: any) {\n      throw new HttpException(\n        `Error while creating post`,\n        HttpStatus.BAD_REQUEST,\n        {\n          cause: error.message,\n          description: String(error),\n        },\n      );\n    }\n  }\n\n  public async update({ updatePost }: { updatePost: PatchPostDto }) {\n    // find the tags\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: updatePost.tags,\n    });\n\n    if (!(tags.length > 0)) {\n      throw new HttpException('Tags not found', HttpStatus.NOT_FOUND, {\n        cause: 'Tags not found',\n        description: 'Provide a valid tags to update',\n      });\n    }\n\n    const post = await this.postRepository.findOneBy({ id: updatePost.id });\n\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    }\n\n    post.title = updatePost.title ?? post.title;\n    post.postType = updatePost.postType ?? post.postType;\n    post.slug = updatePost.slug ?? post.slug;\n    post.status = updatePost.status ?? post.status;\n    post.content = updatePost.content ?? post.content;\n    post.schema = updatePost.schema ?? post.schema;\n    post.featuredImageUrl =\n      updatePost.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishedOn = updatePost.publishedOn ?? post.publishedOn;\n    post.tags = updatePost.tags ? tags : post.tags;\n\n    const updatedPost = await this.postRepository.save(post);\n\n    return updatedPost;\n  }\n\n  public async getAllPosts({\n    userId,\n    queryParams,\n  }: {\n    userId: number;\n    queryParams: GetPostsQueryDto;\n  }): Promise> {\n    const { endDate, limit, page, startDate } = queryParams;\n\n    const posts = await this.paginationService.paginateQuery({\n      paginationQuery: {\n        limit,\n        page,\n      },\n      repository: this.postRepository,\n    });\n\n    return posts;\n  }\n\n  public async delete({ id }: { id: number }) {\n    // const post = await this.postRepository.findOneBy({ id });\n\n    // if (!post) {\n    //   throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    // }\n\n    await this.postRepository.delete({ id });\n\n    // await this.metaOptionsRepository.delete({ id: post.metaOptions.id });\n\n    return { message: 'Post deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @IsString()\n  @IsNotEmpty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenProvider.html":{"url":"injectables/RefreshTokenProvider.html","title":"injectable - RefreshTokenProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-token.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokenProvider, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-token.provider.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRefreshToken(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-token.provider.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from 'src/config/jwt.config';\nimport { GenerateTokenProvider } from './generate-token.provider';\nimport { UserService } from 'src/user/user.service';\nimport { UserPayload } from '../guards/access-token/access-token.guard';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\n\n@Injectable()\nexport class RefreshTokenProvider {\n  constructor(\n    // injecting jwt service dependency\n    private jwtService: JwtService,\n\n    // injecting jwtConfig (environment values)\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n\n    private generateTokenProvider: GenerateTokenProvider,\n\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n  ) {}\n\n  public async getRefreshToken({ token }: { token: RefreshTokenDto }) {\n    try {\n      // verify the refresh token sent\n      const { sub } = await this.jwtService.verifyAsync\n      >(token.refreshToken, {\n        secret: this.jwtConfiguration.jwtSecret,\n        audience: this.jwtConfiguration.jwtTokenAudience,\n        issuer: this.jwtConfiguration.jwtTokenIssuer,\n      });\n      // fetch the user\n      const user = await this.userService.findOneById({ id: sub });\n\n      // generate new access and refresh tokens\n      const { accessToken, refreshToken } =\n        await this.generateTokenProvider.generateTokens({\n          user,\n        });\n\n      return { accessToken, refreshToken };\n    } catch (error: any) {\n      throw new HttpException(\n        `Invalid refresh token ${error.message}`,\n        HttpStatus.UNAUTHORIZED,\n        {\n          cause: error.message,\n          description: error,\n        },\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\"\n\nexport class SignInDto {\n    @IsNotEmpty()\n    @IsEmail()\n    email: string\n\n    @IsNotEmpty()\n    @IsString()\n    password: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/entity/tags.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                deletedDate\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'json',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n    length: 1024,\n  })\n  featuredImageUrl?: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @DeleteDateColumn({})\n  deletedDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteTag\n                            \n                            \n                                    \n                                    \n                                    Async\n                                softDeleteTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createTag: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a tag'})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTag\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a tag by id'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        softDeleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDeleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Soft Delete a tag by id'})@Delete('/soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { ApiOperation } from '@nestjs/swagger';\nimport { TagsService } from './tags.service';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(private tagsService: TagsService) {}\n\n  @ApiOperation({ summary: 'Create a tag' })\n  @Post('')\n  createPost(@Body() createTag: CreateTagDto) {\n    const createdTags = this.tagsService.createTag({ tag: createTag });\n    return createdTags;\n  }\n\n  @ApiOperation({ summary: 'Delete a tag by id' })\n  @Delete('')\n  async deleteTag(@Query('id', ParseIntPipe) id: number) {\n    return await this.tagsService.delete({ id });\n  }\n\n  @ApiOperation({ summary: 'Soft Delete a tag by id' })\n  @Delete('/soft-delete')\n  async softDeleteTag(@Query('id', ParseIntPipe) id: number) {\n    return await this.tagsService.softDelete({ id });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsService } from './tags.service';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './entity/tags.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Tag])],\n  controllers: [TagsController],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTags\n                            \n                            \n                                    Public\n                                    Async\n                                getTagById\n                            \n                            \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTags()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getTagById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTagById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { In, Repository } from 'typeorm';\nimport { Tag as TagRepository } from './entity/tags.entity';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    @InjectRepository(TagRepository)\n    private tagsRepository: Repository,\n  ) {}\n\n  public async createTag({ tag }: { tag: CreateTagDto }) {\n    const existingTags = await this.tagsRepository.findOne({\n      where: { name: tag.name },\n    });\n\n    if (existingTags) {\n      throw new HttpException('Tag already exists', HttpStatus.CONFLICT);\n    }\n\n    const createdTags = await this.tagsRepository.create(tag);\n\n    await this.tagsRepository.save(createdTags);\n\n    return createdTags;\n  }\n\n  public async getAllTags() {\n    const tags = await this.tagsRepository.find({});\n\n    return tags;\n  }\n\n  public async getTagById({ id }: { id: number }) {\n    const tag = await this.tagsRepository.findOneBy({ id });\n\n    if (!tag) {\n      throw new HttpException('Tag not found', HttpStatus.NOT_FOUND);\n    }\n\n    return tag;\n  }\n\n  public async findMultipleTags({ tags }: { tags: number[] }) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags),\n      },\n    });\n\n    return results;\n  }\n\n  public async delete({ id }: { id: number }) {\n    await this.tagsRepository.delete({ id });\n\n    return { message: 'Tag deleted successfully', status: 'success', id };\n  }\n\n  public async softDelete({ id }: { id: number }) {\n    await this.tagsRepository.softDelete({ id });\n\n    return { message: 'Tag soft deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 60, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, posts => posts.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    unique: true,\n    nullable: false,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 60,\n    nullable: false,\n  })\n  password: string;\n\n  @OneToMany(() => Post, (posts) => posts.author) // first argument is the one we want to setup a relationship with, second argument is the what references the relationship\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create users', description: 'Create multiple users'})@Auth(AuthType.BEARER)@Post('/create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new user', description: 'Create a new user for the application'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all users', description: 'Get all users with optional pagination'})@ApiResponse({status: 200, description: 'All users', type: CreateUserDto})@ApiQuery({name: 'limit', type: Number, required: false, description: 'Limit the number of returned results', example: 10})@ApiQuery({name: 'page', type: Number, required: false, description: 'The position of the number that you want the api to return', example: 1})@Get('/:id?')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n  UseGuards,\n  SetMetadata,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-user.dto';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { Auth, AuthType } from 'src/auth/decorators/auth.decorator';\n\n@Controller('users')\n@ApiTags('Users') // with the updated version of @nestjs/swagger there is no need to use @ApiTags\nexport class UserController {\n  /**\n   * Final Endpoint - /users/id?limit=10&page=1\n   * Parama id - optional, convert to integer, cannot have a default value\n   * Query limit - integer, default 10\n   * Query page - integer, default value 1\n   * ==> USE CASES\n   * /users/ -> return all users with default pagination\n   * /users/1223 -> returns one user whos id is 1234\n   * /users?limit=10&page=2 -> return page 2 with limit of pagination 10\n   */\n\n  constructor(private readonly userService: UserService) {}\n\n  @ApiOperation({\n    summary: 'Get all users',\n    description: 'Get all users with optional pagination',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'All users',\n    type: CreateUserDto,\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: Number,\n    required: false,\n    description: 'Limit the number of returned results',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    required: false,\n    description: 'The position of the number that you want the api to return',\n    example: 1,\n  })\n  @Get('/:id?')\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    // console.log(getUserParamDto);\n    // console.log(`Limit: ${limit}, Page: ${page}`);\n\n    const findAll = this.userService.findAll({\n      page,\n      limit,\n      userParamsDTO: getUserParamDto,\n    });\n\n    return findAll;\n  }\n\n  @ApiOperation({\n    summary: 'Create a new user',\n    description: 'Create a new user for the application',\n  })\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    const createUser = this.userService.createUser({ user: createUserDto });\n    return createUser;\n  }\n\n  @ApiOperation({\n    summary: 'Create users',\n    description: 'Create multiple users',\n  })\n  // @UseGuards(AccessTokenGuard)\n  @Auth(AuthType.BEARER)\n  @Post('/create-many')\n  public createManyUsers(@Body() createUsersDto: CreateManyUsersDto) {\n    console.log('hitting it')\n    // const createUsers = this.userService.createMany({ users: createUsersDto });\n    // return createUsers;\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n    // return 'You sent a patch request to users endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCreateMany.html":{"url":"injectables/UserCreateMany.html","title":"injectable - UserCreateMany","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCreateMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-create-many.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-create-many.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user-create-many.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { DataSource } from 'typeorm';\nimport { User } from './entity/user.entity';\nimport { CreateManyUsersDto } from './dtos/create-many-user.dto';\n\n@Injectable()\nexport class UserCreateMany {\n  constructor(\n    // injecting datasource for typeorm transactions\n    private dataSource: DataSource,\n  ) {}\n\n  public async createMany({ users }: { users: CreateManyUsersDto }) {\n    // create query runner instance\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    // connect query runner to datasource\n    try {\n      await queryRunner.connect();\n    } catch (error: any) {\n      throw new HttpException(\n        'Database connection failed',\n        HttpStatus.REQUEST_TIMEOUT,\n        {\n          cause: error.message,\n          description: String(error),\n        },\n      );\n    }\n\n    // start transaction\n    try {\n      await queryRunner.startTransaction();\n    } catch (error: any) {\n      throw new HttpException(\n        'Failed to start QueryRunner Transaction',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n        {\n          cause: error.message,\n          description: String(error),\n        },\n      );\n    }\n\n    let newUser: User[] = [];\n    try {\n      // if successful commit the transaction\n      for (let user of users.users) {\n        const newUserInstance = queryRunner.manager.create(User, user); // entity and object\n        const savedNewUserInstance =\n          await queryRunner.manager.save(newUserInstance); // save entity to the database\n\n        newUser.push(savedNewUserInstance); // keeping track of the users we have created\n      }\n\n      await queryRunner.commitTransaction();\n    } catch (error: any) {\n      // if failed rollback transaction\n      await queryRunner.rollbackTransaction();\n\n      throw new HttpException('Transaction Failed', HttpStatus.BAD_REQUEST, {\n        cause: error.message,\n        description: String(error),\n      });\n    } finally {\n      // release connection\n      try {\n        await queryRunner.release();\n      } catch (error: any) {\n        throw new HttpException(\n          'Failed to release QueryRunner connection',\n          HttpStatus.INTERNAL_SERVER_ERROR,\n          {\n            cause: error.message,\n            description: String(error),\n          },\n        );\n      }\n    }\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nUserCreateMany\n\nUserCreateMany\n\nUserModule -->\n\nUserCreateMany->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            UserCreateMany\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entity/user.entity';\nimport { ConfigModule, ConfigType } from '@nestjs/config';\nimport { UserCreateMany } from './user-create-many';\nimport { CreateUserProvider } from './provider/create-user.provider';\nimport profileConfig from './config/profile.config';\nimport jwtConfig from 'src/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { APP_GUARD } from '@nestjs/core';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule), // for dependency injection (circular dependency injection)\n    TypeOrmModule.forFeature([User]), // for repository (entity) injection\n    ConfigModule.forFeature(profileConfig),\n    // ConfigModule.forFeature(jwtConfig),\n    // JwtModule.registerAsync({\n    //   imports: [ConfigModule.forFeature(jwtConfig)],\n    //   useFactory: async (jwtConfiguration: ConfigType) => ({\n    //     secret: jwtConfiguration.jwtSecret,\n    //     signOptions: {\n    //       audience: jwtConfiguration.jwtTokenAudience,\n    //       issuer: jwtConfiguration.jwtTokenIssuer,\n    //       expiresIn: jwtConfiguration.jwtTokenExpiration,\n    //     },\n    //   }),\n    //   inject: [jwtConfig.KEY],\n    // }),\n  ],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    UserCreateMany,\n    CreateUserProvider,\n    // {\n    //   provide: APP_GUARD,\n    //   useClass: AccessTokenGuard\n    // }, // setting a guard globally (this protect the entire application, everywhere the userModule is been imported)\n  ],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    Public\n                                    Async\n                                findUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository, configService: ConfigService, profileConfiguration: ConfigType<>, usersCreateMany: UserCreateMany, createUserProvider: CreateUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateMany\n                                                  \n                                                        \n                                                                        UserCreateMany\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/auth.service';\nimport { DataSource, Repository } from 'typeorm';\nimport { User } from './entity/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from './config/profile.config';\nimport { UserCreateMany } from './user-create-many';\nimport { CreateManyUsersDto } from './dtos/create-many-user.dto';\nimport { CreateUserProvider } from './provider/create-user.provider';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => AuthService))\n    private authService: AuthService,\n\n    // injecting user service repository dependency\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    // injecting environment variables\n    private configService: ConfigService,\n\n    // injecting module specific configuration dependencies (environment variables)\n    @Inject(profileConfig.KEY)\n    private profileConfiguration: ConfigType,\n\n    private usersCreateMany: UserCreateMany,\n\n    private createUserProvider: CreateUserProvider,\n  ) {}\n\n  public async createUser({\n    user,\n  }: {\n    user: CreateUserDto;\n  }): Promise {\n    return await this.createUserProvider.createUser({ user });\n  }\n\n  public findAll({\n    userParamsDTO,\n    limit,\n    page,\n  }: {\n    userParamsDTO: GetUsersParamDto;\n    limit: number;\n    page: number;\n  }) {\n    const environment = this.configService.get('S3_BUCKET');\n    console.log(`Environment: ${environment}`);\n\n    console.log('NODE_ENV: ', process.env.NODE_ENV);\n\n    console.log('Profile: ', this.profileConfiguration);\n\n    throw new HttpException(\n      'Api endpoint does not exist',\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        description: 'Occurred because the API endpoint was deprecated',\n        cause: 'Api endpoint does not exist',\n      },\n    );\n  }\n\n  public async findOneById({ id }: { id: number }) {\n    const user = await this.userRepository.findOneBy({ id });\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    return user;\n  }\n\n  public async findUserByEmail({ email }: { email: string }) {\n    try {\n      const user = await this.userRepository.findOneBy({ email });\n\n      if (!user) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n\n      return user;\n    } catch (error: any) {\n      throw new RequestTimeoutException('Timeout occurred');\n    }\n  }\n\n  public async createMany({ users }: { users: CreateManyUsersDto }) {\n    return await this.usersCreateMany.createMany({ users });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/auth/decorators/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/guards/access-token/access-token.guard.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/guards/access-token/access-token.guard.ts\n            \n            type alias\n            UserPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-token.provider.ts\n            \n            injectable\n            GenerateTokenProvider\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-token.provider.ts\n            \n            injectable\n            RefreshTokenProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/global/pagination/dto/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/global/pagination/interface/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/global/pagination/pagination.service.ts\n            \n            injectable\n            PaginationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-meta-options.dto.ts\n            \n            class\n            CreateMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/entity/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsQueryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/entity/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/entity/tags.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tags/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/dtos/create-many-user.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/provider/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user-create-many.ts\n            \n            injectable\n            UserCreateMany\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth.decorator.ts)\n                        \n                        \n                            PostStatus   (src/.../posts.enums.ts)\n                        \n                        \n                            PostTypes   (src/.../posts.enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 BEARER\n                            \n                        \n                        \n                            \n                                Value : bearer\n                            \n                        \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n            \n        \n\n    src/posts/enums/posts.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PostTypes\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationService \n\nPaginationService \n\nPaginationService  -->\n\nPaginationModule->PaginationService \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nPaginationModule -->\n\nPaginationService->PaginationModule\n\n\n\nAppModule -->\n\nPaginationService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokenProvider\n\nGenerateTokenProvider\n\nAuthModule -->\n\nGenerateTokenProvider->AuthModule\n\n\n\n\n\nRefreshTokenProvider\n\nRefreshTokenProvider\n\nAuthModule -->\n\nRefreshTokenProvider->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nUserCreateMany\n\nUserCreateMany\n\nUserModule -->\n\nUserCreateMany->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserPayload   (src/.../access-token.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/guards/access-token/access-token.guard.ts\n    \n    \n        \n            \n                \n                    \n                    UserPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.decorator.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../access-token.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof UserPayload | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: UserPayload = request[REQUEST_USER_KEY];\n\n    if (field) {\n      return user[field];\n    } else {\n      return user;\n    }\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) => SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/auth/guards/access-token/access-token.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
