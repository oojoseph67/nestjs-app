var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.075,1,2.285]],["body/controllers/AppController.html",[0,1.769,1,3.76,2,1.541,3,0.457,4,0.41,5,0.41,6,3.881,7,0.554,8,1.89,9,5.368,10,1.263,11,0.026,12,0.833,13,4.59,14,1.648,15,1.769,16,0.56,17,1.031,18,3.39,19,3.881,20,0.457,21,0.087,22,2.555,23,3.414,24,1.648,25,4.59,26,0.021,27,0.021]],["title/modules/AppModule.html",[28,1.075,29,2.285]],["body/modules/AppModule.html",[0,0.798,1,2.997,2,1.264,3,0.253,4,0.227,5,0.444,11,0.026,16,0.649,17,0.57,18,3.091,19,2.147,20,0.253,21,0.048,26,0.014,27,0.014,28,1.665,29,4.353,30,1.123,31,1.046,32,1.304,33,1.304,34,1.123,35,2.304,36,1.304,37,2.147,38,2.147,39,2.147,40,3.091,41,3.371,42,3.371,43,3.091,44,2.851,45,1.933,46,1.304,47,1.304,48,1.889,49,2.725,50,2.725,51,2.725,52,2.763,53,2.539,54,2.539,55,2.539,56,2.539,57,2.539,58,1.542,59,1.046,60,1.791,61,2.286,62,2.147,63,2.539,64,2.539,65,2.539,66,3.184,67,4.196,68,1.696,69,3.765,70,2.539,71,3.765,72,2.539,73,3.765,74,2.539,75,1.046,76,3.338,77,1.889,78,2.539,79,2.539,80,2.498,81,2.539,82,2.539,83,3.765,84,3.765,85,3.184,86,2.515,87,2.539,88,3.765,89,2.539,90,3.765,91,2.539,92,2.539,93,2.539,94,2.539,95,2.147,96,2.539,97,2.147,98,2.147,99,2.539,100,1.046,101,2.539,102,2.539,103,2.147,104,2.801,105,2.539,106,0.427,107,2.539,108,2.539,109,2.539,110,3.765,111,2.539,112,2.539,113,1.889,114,2.539,115,1.542,116,2.539,117,1.889,118,2.539,119,1.414,120,2.539,121,2.539,122,2.539,123,1.304,124,2.147,125,2.539,126,2.801,127,2.539,128,1.208,129,0.912,130,1.889,131,2.539,132,2.539,133,2.539,134,1.889]],["title/injectables/AppService.html",[18,1.904,135,1.149]],["body/injectables/AppService.html",[3,0.475,4,0.427,5,0.427,7,0.576,8,1.936,9,5.44,11,0.026,12,0.865,14,1.713,15,1.811,16,0.475,17,1.072,18,3.209,20,0.475,21,0.091,24,1.713,26,0.021,27,0.021,135,1.936,136,2.45,137,4.035,138,4.771,139,4.035,140,4.035]],["title/controllers/AuthController.html",[0,1.075,141,2.285]],["body/controllers/AuthController.html",[0,1.331,2,1.423,3,0.422,4,0.379,5,0.379,7,0.512,8,1.799,10,1.166,11,0.026,12,0.769,14,1.521,15,1.683,16,0.533,17,0.952,20,0.422,21,0.081,22,2.359,24,1.521,26,0.02,27,0.02,106,0.901,113,3.152,115,2.573,141,3.577,142,3.152,143,2.573,144,4.237,145,4.529,146,4.237,147,4.835,148,5.356,149,4.237,150,1.745,151,1.521,152,1.09,153,2.573,154,1.09,155,3.016,156,3.583,157,1.246,158,1.166,159,4.237,160,4.237,161,4.237]],["title/modules/AuthModule.html",[28,1.075,40,1.904]],["body/modules/AuthModule.html",[2,1.753,3,0.405,4,0.364,5,0.364,11,0.026,16,0.605,17,0.914,20,0.405,21,0.077,26,0.019,27,0.019,28,1.811,30,1.798,31,1.675,32,2.089,33,2.089,34,1.798,35,2.959,36,2.959,40,3.641,44,2.68,45,2.68,46,2.089,47,2.089,52,2.265,141,3.849,155,3.507,156,3.44,162,3.44,163,3.44,164,3.44,165,4.068,166,3.486,167,4.068,168,3.44,169,2.906,170,3.169,171,2.717]],["title/injectables/AuthService.html",[135,1.149,155,1.756]],["body/injectables/AuthService.html",[3,0.346,4,0.311,5,0.311,7,0.42,8,1.581,11,0.026,12,0.968,14,1.691,15,1.677,16,0.469,17,0.782,20,0.346,21,0.066,24,1.916,26,0.017,27,0.017,75,1.433,80,1.938,104,2.589,106,0.962,113,3.503,115,3.241,117,2.589,135,1.581,136,1.787,145,5.052,150,1.939,151,1.691,152,1.212,155,2.418,157,1.569,158,0.958,166,2.324,169,2.622,170,2.113,171,2.324,172,2.943,173,3.428,174,5.718,175,2.859,176,3.48,177,2.995,178,3.48,179,3.48,180,3.48,181,3.48,182,2.622,183,3.48,184,2.943,185,2.324,186,2.113,187,2.943,188,2.113,189,2.943,190,2.197,191,2.589,192,3.48,193,3.48,194,3.48,195,3.48,196,3.48,197,3.48,198,3.48,199,3.48,200,3.48]],["title/classes/CreateMetaOptionsDto.html",[21,0.065,201,1.904]],["body/classes/CreateMetaOptionsDto.html",[3,0.438,4,0.394,5,0.394,7,0.532,10,1.212,11,0.026,12,0.799,15,1.879,16,0.438,20,0.438,21,0.104,26,0.02,27,0.02,60,2.611,106,0.741,201,3.056,202,2.096,203,2.426,204,4.083,205,3.726,206,1.971,207,4.448,208,4.406,209,4.406,210,4.083,211,3.8,212,2.263,213,3.666,214,2.943,215,3.726,216,3.726,217,2.453]],["title/classes/CreatePostDto.html",[21,0.065,218,1.904]],["body/classes/CreatePostDto.html",[3,0.157,4,0.141,5,0.141,7,0.19,10,1.507,11,0.026,12,0.993,15,1.951,16,0.42,20,0.157,21,0.063,26,0.01,27,0.01,60,1.232,80,2.975,97,2.191,106,1.12,123,1.694,139,2.789,140,2.789,152,1.375,154,1.618,157,0.762,158,1.051,201,2.127,202,0.75,203,0.697,204,1.172,206,1.184,207,1.172,210,1.927,211,2.913,212,0.809,213,3.204,214,3.032,215,1.332,216,1.332,217,1.837,218,1.442,219,4.728,220,1.172,221,3.299,222,3.861,223,2.203,224,2.203,225,2.789,226,2.789,227,2.203,228,2.82,229,2.351,230,2.913,231,3.57,232,2.842,233,1.573,234,3.188,235,1.927,236,2.191,237,4.057,238,1.576,239,1.576,240,3.141,241,3.231,242,3.231,243,1.576,244,1.576,245,2.191,246,2.191,247,3.231,248,2.191,249,3.839,250,1.576,251,1.576,252,2.591,253,1.927,254,3.299,255,3.299,256,2.591,257,1.576,258,1.576,259,1.576,260,3.141,261,2.591,262,2.222,263,3.821,264,3.821,265,2.203,266,2.789,267,2.789,268,1.576,269,1.576,270,3.032,271,3.231,272,2.591,273,2.591,274,2.591,275,2.591,276,1.576,277,1.576,278,2.591,279,2.591,280,3.377,281,2.191,282,2.591,283,1.576,284,1.576,285,1.576,286,1.576,287,2.191,288,1.576,289,3.231,290,3.231,291,1.442,292,2.191,293,2.191,294,2.191,295,1.927,296,2.191,297,1.927,298,1.576,299,3.141,300,2.191,301,2.191,302,2.191,303,1.576,304,1.576,305,3.57,306,2.591,307,1.052,308,1.576,309,1.576,310,1.576,311,1.576,312,2.591,313,1.576,314,1.576,315,2.789,316,2.591,317,3.032,318,2.191,319,1.172,320,1.172,321,1.172,322,2.591,323,1.332,324,1.172,325,3.377,326,0.75,327,1.172,328,1.052,329,1.576,330,1.172,331,1.332,332,2.191,333,1.576,334,1.576,335,1.332,336,1.332,337,1.576,338,2.591,339,1.576,340,1.576,341,1.332,342,1.332,343,1.332,344,3.299,345,1.576,346,1.576,347,1.927]],["title/classes/CreateTagDto.html",[21,0.065,348,2.077]],["body/classes/CreateTagDto.html",[3,0.275,4,0.248,5,0.248,7,0.334,10,1.51,11,0.025,12,0.996,15,2.048,16,0.399,20,0.275,21,0.076,26,0.015,27,0.015,106,1.088,151,1.971,152,1.473,154,1.331,202,1.316,206,1.44,210,2.983,211,2.864,212,1.421,213,3.15,214,3.454,222,2.983,223,3.15,227,3.15,228,3.666,232,2.983,234,3.213,240,2.983,241,3.391,242,3.391,245,3.391,246,3.391,247,4.84,248,3.391,249,4.373,262,2.368,287,3.391,289,4.373,290,4.373,291,2.879,292,3.391,293,3.391,294,3.391,295,2.983,296,3.391,297,2.983,317,3.454,318,3.391,319,2.059,320,2.059,321,2.059,325,3.847,326,1.316,331,2.34,335,2.34,336,2.34,341,2.34,348,2.435,349,4.84,350,2.34,351,2.46,352,4.01,353,4.01,354,4.01,355,2.768,356,2.768,357,2.768,358,4.01,359,2.768,360,3.391,361,2.768,362,2.768,363,2.768,364,2.768,365,2.768,366,2.768,367,2.34,368,2.768]],["title/classes/CreateUserDto.html",[21,0.065,369,1.904]],["body/classes/CreateUserDto.html",[3,0.355,4,0.319,5,0.319,7,0.43,10,1.589,11,0.025,12,1.047,15,2.023,16,0.355,20,0.355,21,0.091,26,0.018,27,0.018,106,0.971,115,3.28,152,1.232,158,1.317,202,1.695,206,1.718,211,3.506,212,1.83,214,3.857,291,2.664,295,3.56,317,3.196,319,2.652,320,2.652,321,2.652,367,4.046,369,2.664,370,5.093,371,2.652,372,4.018,373,4.568,374,4.568,375,3.564,376,3.564,377,3.564,378,3.564,379,3.564,380,3.564,381,3.564,382,5.774,383,4.785,384,4.785,385,4.785,386,4.785,387,4.613,388,4.785,389,4.785,390,4.785,391,3.564,392,4.785,393,5.774,394,3.564,395,3.564]],["title/classes/GetUsersParamDto.html",[21,0.065,396,2.077]],["body/classes/GetUsersParamDto.html",[3,0.412,4,0.371,5,0.371,7,0.5,10,1.14,11,0.026,12,0.752,15,1.302,16,0.578,20,0.412,21,0.111,26,0.02,27,0.02,106,1.064,152,1.359,157,1.859,158,1.739,190,2.029,202,1.971,206,1.896,212,2.128,234,2.712,235,3.929,240,3.083,262,1.593,315,4.466,317,3.527,324,3.083,325,3.929,326,1.971,396,3.207,397,4.466,398,3.527,399,3.504,400,3.527,401,4.144,402,4.144,403,4.144,404,3.504]],["title/entities/MetaOption.html",[129,1.228,405,1.627]],["body/entities/MetaOption.html",[3,0.348,4,0.313,5,0.313,7,0.422,10,1.647,11,0.026,12,1.086,15,1.485,16,0.47,20,0.348,21,0.067,26,0.018,27,0.018,100,1.441,106,1.038,119,1.948,123,2.426,129,1.697,154,1.672,157,1.573,158,1.3,203,2.726,206,1.697,207,3.981,270,3.827,280,3.515,405,2.248,406,3.745,407,2.958,408,4.525,409,4.525,410,4.525,411,3.499,412,3.574,413,3.499,414,2.337,415,3.156,416,3.499,417,2.958,418,4.726,419,3.996,420,3.499,421,3.499,422,4.525,423,3.499,424,2.603,425,3.156,426,3.996,427,3.996,428,2.603,429,3.499,430,3.499,431,3.499,432,2.603]],["title/controllers/MetaOptionsController.html",[0,1.075,50,2.077]],["body/controllers/MetaOptionsController.html",[0,1.29,2,1.379,3,0.409,4,0.367,5,0.367,7,0.496,8,1.763,10,1.13,11,0.026,12,0.745,14,1.474,16,0.576,17,0.922,20,0.409,21,0.078,22,2.286,24,1.474,26,0.019,27,0.019,50,3.188,60,2.753,61,3.188,75,1.691,106,0.691,143,2.493,150,1.691,151,1.474,152,1.057,153,2.493,154,1.489,201,3.649,203,2.321,224,3.865,253,3.905,327,3.054,433,3.472,434,5.25,435,4.106,436,4.106,437,3.222,438,3.472,439,1.953,440,4.106,441,4.106,442,4.106]],["title/modules/MetaOptionsModule.html",[28,1.075,41,2.077]],["body/modules/MetaOptionsModule.html",[2,1.749,3,0.404,4,0.363,5,0.363,11,0.026,16,0.625,17,0.911,20,0.404,21,0.077,26,0.019,27,0.019,28,1.808,30,1.793,31,1.67,32,2.083,33,2.083,34,1.793,35,2.955,36,2.955,41,3.969,45,2.675,46,2.083,47,2.083,50,3.494,52,2.258,58,2.463,59,1.67,60,2.478,61,2.463,62,3.429,203,1.793,405,1.929,437,3.8,438,3.429,443,3.429,444,3.429,445,3.429,446,4.056,447,3.429,448,2.463,449,4.056]],["title/injectables/MetaOptionsService.html",[135,1.149,437,1.904]],["body/injectables/MetaOptionsService.html",[3,0.367,4,0.329,5,0.329,7,0.445,8,1.643,11,0.026,12,0.887,14,1.323,16,0.606,17,0.827,20,0.367,21,0.07,24,1.323,26,0.018,27,0.018,59,1.517,60,2.327,61,3.335,75,1.517,100,1.517,106,0.984,128,2.612,135,1.643,136,1.891,150,2.014,151,1.756,152,1.259,169,2.051,173,3.057,175,2.97,182,2.723,185,2.46,186,2.237,188,2.237,201,2.723,203,2.427,224,3.267,253,2.74,327,2.74,405,1.752,437,2.723,439,1.752,447,3.115,448,2.237,450,3.115,451,3.335,452,3.683,453,3.39,454,3.683,455,4.644,456,3.115,457,3.683,458,2.237,459,2.46,460,3.683,461,4.891,462,2.97,463,3.683,464,3.683]],["title/classes/PatchPostDto.html",[21,0.065,465,2.077]],["body/classes/PatchPostDto.html",[3,0.393,4,0.353,5,0.353,7,0.477,10,1.086,11,0.026,12,0.716,16,0.635,20,0.393,21,0.097,26,0.019,27,0.019,106,0.956,126,2.936,128,1.877,154,1.317,157,1.831,158,1.563,202,1.877,206,1.838,211,3.108,212,2.027,213,3.418,218,2.197,220,2.936,232,2.936,234,2.628,235,3.807,262,1.517,326,1.877,330,2.936,400,3.418,465,3.108,466,4.328,467,4.328,468,5.118,469,3.807,470,3.947,471,3.947,472,4.328,473,2.936,474,5.118,475,3.807,476,3.807,477,3.947,478,3.947,479,3.947,480,3.947,481,3.947,482,3.947,483,3.947]],["title/classes/PatchUserDto.html",[21,0.065,484,2.285]],["body/classes/PatchUserDto.html",[3,0.489,4,0.439,5,0.439,11,0.025,16,0.584,20,0.489,21,0.093,26,0.022,27,0.022,128,2.337,202,2.337,369,2.735,371,3.655,467,4.96,472,4.154,475,3.655,476,3.655,484,3.918,485,4.154,486,5.866,487,3.655]],["title/entities/Post.html",[129,1.228,154,0.88]],["body/entities/Post.html",[3,0.205,4,0.184,5,0.184,7,0.248,8,0.691,10,1.653,11,0.026,12,1.09,15,1.824,16,0.48,20,0.205,21,0.039,26,0.012,27,0.012,60,0.979,80,3.466,100,0.847,106,1.087,119,1.146,123,2.981,128,0.979,129,1.152,152,1.494,154,0.826,157,1.16,158,0.883,190,1.966,206,1.152,217,1.146,222,2.934,223,2.634,224,3.568,225,3.335,226,3.335,227,2.634,228,2.634,229,2.196,230,2.932,231,3.335,233,2.395,260,3.592,270,2.143,299,3.592,307,2.143,323,1.74,328,2.975,332,4.673,351,2.118,405,2.297,406,1.25,412,2.634,414,3.691,415,4.196,417,1.74,425,3.792,426,2.713,427,2.713,428,3.313,432,2.387,448,1.25,488,1.74,489,2.058,490,3.209,491,5.115,492,2.058,493,3.766,494,2.058,495,3.805,496,3.805,497,2.713,498,2.058,499,2.058,500,3.209,501,2.058,502,2.058,503,3.209,504,2.058,505,2.058,506,2.387,507,2.387,508,2.058,509,2.058,510,1.74,511,3.209,512,2.058,513,2.058,514,2.713,515,2.058,516,2.713,517,2.713,518,3.209,519,2.058,520,2.058,521,2.058,522,2.058,523,2.058,524,1.74,525,1.74,526,3.335,527,2.058,528,2.058,529,2.058,530,1.74,531,1.057,532,2.058,533,2.058,534,2.058,535,2.058,536,2.058,537,1.74,538,2.058,539,3.209,540,2.058,541,2.058,542,2.058,543,2.058]],["title/controllers/PostsController.html",[0,1.075,49,2.077]],["body/controllers/PostsController.html",[0,0.532,2,0.568,3,0.168,4,0.151,5,0.151,7,0.204,8,0.922,10,1.097,11,0.026,12,0.723,14,1.912,15,0.863,16,0.436,17,0.38,20,0.168,21,0.032,22,0.942,23,1.259,24,1.432,26,0.01,27,0.01,49,1.668,75,1.427,106,0.921,126,2.043,134,3.493,143,1.028,150,1.642,151,1.432,152,1.026,153,1.028,154,1.662,157,1.646,158,1.361,186,1.668,190,2.151,218,3.359,229,2.22,234,0.869,262,2.151,291,2.614,305,2.322,307,2.664,326,0.805,347,3.493,400,1.834,404,3.707,439,0.805,465,3.003,469,3.493,473,2.043,530,3.372,531,2.54,537,4.827,544,1.431,545,4.03,546,2.578,547,2.746,548,2.322,549,2.93,550,1.693,551,2.93,552,3.466,553,3.372,554,1.693,555,1.693,556,4.695,557,2.746,558,2.746,559,4.695,560,5.152,561,4.695,562,4.695,563,3.988,564,2.746,565,3.988,566,2.966,567,1.693,568,2.746,569,2.043,570,1.693,571,1.693,572,1.693,573,1.693,574,1.693,575,1.693,576,2.746,577,3.988,578,3.988,579,2.746,580,2.746,581,2.746,582,3.988,583,2.746,584,3.466,585,3.466,586,3.372,587,2.746,588,2.93,589,2.746,590,2.746,591,1.693,592,3.988,593,3.372,594,1.693,595,1.693,596,3.988,597,3.97,598,2.746,599,2.746,600,2.746,601,3.988,602,2.746,603,1.668,604,1.13,605,1.13,606,3.372,607,2.043,608,1.13,609,1.529,610,1.431,611,2.966,612,3.707,613,1.259,614,1.693,615,1.693,616,3.466,617,1.693,618,1.693,619,1.693,620,2.578,621,1.693,622,1.431,623,2.746,624,1.693,625,1.693,626,1.693,627,2.322,628,1.693,629,1.693,630,1.13,631,1.693,632,1.693,633,2.746,634,1.693]],["title/modules/PostsModule.html",[28,1.075,42,2.077]],["body/modules/PostsModule.html",[2,1.64,3,0.366,4,0.328,5,0.328,11,0.026,16,0.645,17,0.825,20,0.366,21,0.07,26,0.018,27,0.018,28,1.723,30,1.624,31,1.513,32,1.886,33,1.886,34,1.624,35,2.816,36,2.816,42,4.057,43,3.482,44,3.212,45,2.507,46,1.886,47,1.886,49,3.33,52,2.718,58,2.231,59,1.513,154,0.945,168,3.106,203,1.624,405,2.322,406,2.231,448,2.231,609,3.746,610,3.106,635,3.106,636,3.106,637,3.673,638,3.106,639,3.673,640,3.673,641,3.673,642,3.106,643,3.673,644,3.673]],["title/injectables/PostsService.html",[135,1.149,609,1.904]],["body/injectables/PostsService.html",[3,0.194,4,0.175,5,0.175,7,0.236,8,1.034,11,0.026,12,0.854,14,1.554,16,0.556,17,0.438,20,0.194,21,0.037,24,1.554,26,0.011,27,0.011,59,0.804,75,2.235,100,0.804,103,2.603,106,1.012,128,1.813,135,1.034,136,1.002,150,1.939,151,1.691,152,1.212,154,1.397,157,1.596,158,0.847,169,1.087,170,1.185,173,3.301,175,1.869,177,2.058,182,3.021,184,1.651,185,1.304,186,1.869,188,2.627,190,1.183,203,0.863,218,1.714,229,1.087,230,3.472,233,2.314,262,0.75,291,1.087,405,0.928,406,1.185,439,0.928,448,1.185,451,3.601,453,2.915,455,3.223,456,1.651,458,2.627,459,1.304,462,3.541,465,1.869,469,3.218,473,2.29,531,1.957,545,2.056,546,2.835,548,3.223,549,2.603,569,1.452,586,2.603,603,2.314,604,1.304,605,1.304,609,1.714,613,1.452,627,2.603,630,2.546,642,1.651,645,1.651,646,1.952,647,2.689,648,4.327,649,1.952,650,3.078,651,1.952,652,1.651,653,1.952,654,1.952,655,1.952,656,1.952,657,1.952,658,1.952,659,1.952,660,3.078,661,1.952,662,1.952,663,1.952,664,1.952,665,1.952,666,1.952,667,1.952,668,3.078,669,1.952,670,1.952,671,3.078,672,1.952,673,3.078,674,1.952,675,1.651,676,1.952,677,3.218,678,2.835,679,1.651,680,1.952,681,1.952,682,3.078,683,1.952,684,3.078,685,3.078,686,1.952,687,3.078,688,1.952,689,3.078,690,1.952,691,3.078,692,1.952,693,3.078,694,1.952,695,3.078,696,1.952,697,3.078,698,1.952,699,3.078,700,1.952,701,2.603,702,1.952,703,1.952,704,1.952,705,1.952,706,1.651,707,1.651]],["title/entities/Tag.html",[129,1.228,351,1.627]],["body/entities/Tag.html",[3,0.272,4,0.244,5,0.244,7,0.33,10,1.717,11,0.026,12,1.132,15,1.961,16,0.395,20,0.272,21,0.052,26,0.015,27,0.015,80,3.474,100,1.126,106,1.102,119,1.522,123,2.64,129,1.427,151,1.681,152,1.467,154,1.467,157,1.377,158,1.093,206,1.427,223,3.128,227,3.128,228,3.128,262,1.799,270,3.806,280,2.956,351,1.89,408,3.96,409,3.96,410,3.96,412,3.128,414,3.648,415,4.168,419,3.36,422,3.96,424,2.033,425,3.806,428,2.956,493,3.36,495,4.239,496,4.239,497,3.36,506,2.956,507,3.824,510,2.311,514,3.36,516,2.311,517,3.36,545,3.128,701,3.36,708,2.311,709,4.683,710,2.733,711,4.683,712,2.733,713,2.733,714,2.733,715,2.733,716,2.733,717,2.733,718,2.733,719,2.733,720,2.733]],["title/controllers/TagsController.html",[0,1.075,51,2.077]],["body/controllers/TagsController.html",[0,0.992,2,1.06,3,0.314,4,0.282,5,0.282,7,0.381,8,1.479,10,1.395,11,0.026,12,0.92,14,1.821,16,0.546,17,0.709,20,0.314,21,0.06,22,1.757,24,1.821,26,0.016,27,0.016,51,2.674,75,1.3,106,0.853,128,2.095,143,1.917,150,2.088,151,1.821,152,1.305,153,1.917,154,1.133,157,1.84,158,1.645,230,1.917,326,1.502,348,3.332,351,2.843,439,1.502,451,3.63,458,2.674,462,2.674,546,3.276,551,4.288,603,3.799,607,3.772,608,2.108,611,4.082,620,3.772,622,2.669,647,2.604,721,2.669,722,4.403,723,4.403,724,3.157,725,3.157,726,3.157,727,4.288,728,3.157,729,3.157,730,3.157,731,3.157,732,3.724,733,3.157,734,3.157,735,2.669,736,2.669,737,3.157,738,3.724,739,3.157,740,3.157,741,3.157,742,3.157,743,3.157,744,3.157]],["title/modules/TagsModule.html",[28,1.075,43,1.904]],["body/modules/TagsModule.html",[2,1.766,3,0.41,4,0.368,5,0.368,11,0.026,16,0.628,17,0.925,20,0.41,21,0.078,26,0.02,27,0.02,28,1.821,30,1.821,31,1.696,32,2.115,33,2.115,34,1.821,35,2.976,36,2.976,43,3.652,45,2.701,46,2.115,47,2.115,51,3.52,52,2.293,58,2.501,59,1.696,351,1.959,647,3.513,736,3.483,745,3.483,746,3.483,747,3.483,748,4.119,749,4.119,750,3.483,751,4.119]],["title/injectables/TagsService.html",[135,1.149,647,1.756]],["body/injectables/TagsService.html",[3,0.229,4,0.206,5,0.206,7,0.278,8,1.174,11,0.026,12,1.009,14,1.921,16,0.506,17,0.517,20,0.229,21,0.044,24,1.921,26,0.018,27,0.013,59,0.948,75,2.092,100,0.948,106,1.079,135,1.174,136,1.182,150,2.203,151,1.996,152,1.377,157,1.813,158,1.3,173,3.617,175,2.123,182,3.331,188,1.397,191,1.712,229,1.947,230,2.869,291,1.947,348,2.123,351,2.725,439,1.095,451,3.945,453,2.63,458,3.249,459,1.537,462,3.479,531,1.796,569,2.601,603,2.568,604,1.537,605,1.537,630,2.335,647,1.796,652,1.946,677,1.712,678,1.712,706,2.957,707,2.957,727,3.576,732,1.946,735,1.946,738,2.957,750,1.946,752,1.946,753,4.229,754,4.724,755,4.229,756,4.229,757,2.301,758,2.301,759,3.497,760,2.301,761,2.301,762,2.301,763,2.301,764,2.301,765,2.301,766,2.301,767,2.301,768,2.301,769,2.301,770,2.301,771,2.301,772,3.497,773,2.301,774,2.301,775,3.497,776,1.946,777,1.946,778,2.301,779,2.301,780,3.497,781,2.301,782,2.301,783,2.301,784,2.301]],["title/entities/User.html",[129,1.228,190,1.314]],["body/entities/User.html",[3,0.313,4,0.281,5,0.281,7,0.379,10,1.642,11,0.026,12,1.083,15,1.964,16,0.437,20,0.313,21,0.06,26,0.016,27,0.016,80,3.049,100,1.294,106,1.082,115,3.072,119,1.749,123,3.065,129,1.576,130,2.337,152,1.13,154,1.409,157,1.487,158,1.208,190,1.687,206,1.576,297,2.337,372,3.763,373,4.277,374,4.277,387,2.337,412,3.378,414,3.657,415,4.174,424,2.337,425,3.848,432,3.265,495,4.649,496,4.649,506,3.265,507,3.265,545,3.848,785,2.657,786,3.142,787,5.476,788,3.142,789,3.142,790,3.142,791,3.711,792,3.142,793,3.142,794,4.389,795,3.142,796,4.389,797,4.389,798,3.142,799,3.142,800,3.142]],["title/controllers/UserController.html",[0,1.075,801,2.285]],["body/controllers/UserController.html",[0,0.694,2,0.742,3,0.22,4,0.198,5,0.198,7,0.267,8,1.138,10,1.135,11,0.026,12,0.748,14,1.661,16,0.524,17,0.496,20,0.22,21,0.042,22,1.23,23,1.643,24,2.031,26,0.017,27,0.013,75,1.396,95,2.866,106,0.976,123,2.375,130,2.521,143,1.341,150,1.698,151,1.791,152,1.355,153,1.341,154,1.061,157,0.997,158,1.72,173,3.229,177,1.961,190,1.302,217,1.887,229,1.23,234,2.375,236,3.487,237,3.911,262,2.173,265,3.954,326,1.612,328,3.089,342,3.487,369,3.149,387,1.643,396,2.808,398,4.022,439,1.051,484,3.777,487,2.521,531,1.74,566,1.643,593,1.868,597,3.911,603,1.341,606,2.866,607,3.068,608,2.754,611,2.521,612,2.866,613,1.643,620,1.643,801,2.264,802,1.868,803,3.389,804,4.124,805,3.389,806,2.209,807,2.209,808,2.209,809,5.092,810,2.209,811,2.209,812,3.389,813,2.209,814,3.389,815,2.209,816,3.389,817,2.866,818,2.209,819,4.124,820,2.209,821,2.209,822,2.209,823,2.209,824,2.209,825,2.209,826,2.209,827,1.868,828,1.868,829,1.868,830,4.124,831,3.389,832,2.209,833,2.209,834,1.868,835,2.209,836,2.209,837,2.866,838,2.209,839,2.209,840,2.209,841,4.124,842,2.209,843,4.124,844,2.209,845,2.209,846,2.209,847,2.209,848,2.209,849,2.209,850,2.209,851,2.209,852,2.209,853,2.209,854,2.209,855,2.209,856,2.866,857,2.209,858,1.868,859,2.209,860,2.866,861,2.209,862,2.209,863,2.209]],["title/modules/UserModule.html",[28,1.075,44,1.756]],["body/modules/UserModule.html",[2,1.667,3,0.375,4,0.337,5,0.337,11,0.026,16,0.649,17,0.846,20,0.375,21,0.072,26,0.018,27,0.018,28,1.745,30,1.665,31,1.551,32,1.934,33,1.934,34,1.665,35,2.851,36,2.851,40,2.764,44,3.298,45,2.549,46,1.934,47,1.934,52,2.097,58,2.288,59,1.551,66,3.186,68,2.516,129,1.353,166,3.316,169,2.764,170,3.372,171,2.516,177,3.212,190,1.448,453,2.097,801,3.709,829,3.186,864,3.186,865,3.186,866,3.186,867,3.767,868,3.767,869,3.767,870,3.186,871,3.186,872,3.186,873,3.767,874,3.767]],["title/injectables/UserService.html",[135,1.149,177,1.627]],["body/injectables/UserService.html",[3,0.186,4,0.167,5,0.167,7,0.225,8,0.998,11,0.026,12,0.836,14,1.515,16,0.548,17,0.419,20,0.186,21,0.035,24,1.067,26,0.011,27,0.011,28,0.587,31,0.769,59,0.769,67,4.352,68,1.247,75,2.021,77,1.389,85,3.568,86,1.984,100,1.223,104,1.389,106,1.001,117,1.389,128,1.413,129,1.067,135,0.998,136,0.958,150,1.897,151,1.654,152,1.186,155,2.643,157,1.088,158,1.018,166,1.247,169,2.061,170,1.134,171,1.247,173,3.264,175,1.804,177,1.413,182,2.974,185,3.077,186,1.804,187,1.578,188,2.797,189,1.578,190,2.253,191,1.389,262,1.142,265,1.984,281,3.568,307,1.247,347,1.389,369,2.061,372,1.389,396,1.804,398,3.077,400,1.247,439,0.888,451,3.343,453,2.565,458,1.134,459,1.247,462,3.426,487,1.389,531,2.366,553,1.578,566,1.389,588,2.512,604,1.984,605,1.247,608,1.984,630,3.077,677,1.389,678,1.389,679,2.512,776,1.578,777,1.578,809,2.512,817,3.13,827,1.578,828,1.578,837,3.13,856,3.13,858,2.512,860,3.13,870,1.578,871,1.578,872,1.578,875,1.578,876,3.701,877,3.701,878,1.867,879,3.701,880,3.701,881,4.22,882,5.505,883,1.867,884,1.867,885,1.867,886,1.867,887,1.867,888,1.867,889,1.867,890,1.867,891,1.867,892,1.867,893,1.867,894,1.867,895,1.867,896,1.867,897,1.867,898,1.867,899,3.701,900,2.971,901,1.867,902,1.867,903,2.971,904,1.867,905,2.971,906,1.867,907,1.867,908,1.867,909,3.701,910,1.867,911,1.867,912,1.867,913,1.867,914,1.867,915,1.867,916,1.867,917,2.971,918,1.867,919,1.867,920,1.867,921,1.867,922,1.867,923,2.971,924,1.867,925,1.867,926,1.867,927,1.867,928,1.867,929,1.578,930,3.701,931,1.867,932,1.867,933,1.867,934,1.867,935,1.867,936,1.867,937,1.867,938,1.867,939,1.867,940,1.867,941,1.867,942,1.867,943,1.867,944,1.867,945,1.867,946,1.867,947,1.867,948,1.867,949,1.867]],["title/coverage.html",[950,3.462]],["body/coverage.html",[0,1.871,1,2.084,5,0.279,6,2.638,11,0.026,18,1.737,21,0.116,26,0.016,27,0.016,34,1.379,48,2.321,49,1.894,50,1.894,51,1.894,60,1.484,61,2.652,76,2.321,106,0.735,129,1.96,134,2.321,135,2,137,2.638,141,2.084,142,3.249,147,2.321,154,0.803,155,1.602,172,2.638,177,1.484,190,1.199,201,1.737,203,2.413,204,2.321,205,2.638,218,1.737,219,2.638,220,3.249,330,2.321,348,1.894,349,2.638,350,2.638,351,1.484,369,1.737,370,2.638,371,3.249,396,1.894,397,2.638,398,2.084,399,2.638,405,1.484,406,1.894,407,2.638,433,2.638,437,1.737,450,2.638,465,1.894,466,2.638,484,2.084,485,2.638,488,2.638,526,2.638,531,1.602,544,2.638,609,1.737,645,2.638,647,1.602,675,5.843,708,2.638,721,2.638,752,2.638,785,2.638,791,2.638,801,2.084,802,2.638,875,2.638,950,2.321,951,3.12,952,3.12,953,6.114,954,3.12,955,6.238,956,3.12,957,5.039,958,2.638,959,3.12,960,3.12,961,3.12,962,5.039,963,3.12,964,3.12,965,3.12]],["title/dependencies.html",[31,1.692,966,2.422]],["body/dependencies.html",[11,0.026,17,1.013,21,0.106,26,0.021,27,0.021,31,1.858,59,1.858,68,3.013,100,1.858,212,2.317,324,3.356,326,2.146,475,3.356,476,3.356,967,4.511,968,4.511,969,6.043,970,4.511,971,4.511,972,4.511,973,4.511,974,4.511,975,4.511,976,4.511,977,4.511,978,4.511,979,4.511,980,4.511,981,4.511,982,4.511,983,4.511,984,4.511,985,4.511,986,4.511,987,4.511,988,4.511]],["title/miscellaneous/enumerations.html",[989,1.362,990,3.475]],["body/miscellaneous/enumerations.html",[7,0.562,11,0.026,26,0.021,27,0.021,154,1.461,217,3.785,260,4.223,265,3.792,266,4.801,267,4.801,271,4.801,299,4.223,300,4.801,301,4.801,302,4.801,989,2.214,990,3.935,991,5.678,992,4.654]],["title/miscellaneous/functions.html",[989,1.362,993,3.475]],["body/miscellaneous/functions.html",[7,0.638,11,0.023,26,0.023,27,0.023,34,2.858,958,4.469,989,2.514,993,4.469,994,5.286]],["title/index.html",[7,0.346,995,2.864,996,2.864]],["body/index.html",[4,0.351,11,0.026,26,0.019,27,0.019,98,3.318,124,3.318,233,2.383,234,2.908,262,1.508,360,3.318,453,2.184,524,3.318,525,3.318,929,3.318,950,2.919,997,3.923,998,3.923,999,5.098,1000,3.923,1001,3.923,1002,3.923,1003,3.923,1004,3.923,1005,5.664,1006,3.923,1007,3.923,1008,6.486,1009,3.923,1010,3.923,1011,3.923,1012,6.37,1013,3.923,1014,5.098,1015,3.923,1016,3.923,1017,3.923,1018,5.098,1019,5.098,1020,3.923,1021,3.923,1022,3.923,1023,5.098,1024,5.098,1025,3.923,1026,3.923,1027,3.923,1028,3.923,1029,3.923,1030,3.318,1031,3.923,1032,3.923,1033,3.923,1034,3.923,1035,3.923,1036,3.923,1037,3.923,1038,3.923,1039,3.923,1040,3.923,1041,3.923,1042,3.923,1043,3.923,1044,3.923,1045,3.318]],["title/modules.html",[30,2.057]],["body/modules.html",[11,0.022,26,0.022,27,0.022,29,3.233,30,2.14,40,2.695,41,2.94,42,2.94,43,2.695,44,2.486,1030,5.678,1046,6.715,1047,6.715,1048,6.715]],["title/overview.html",[1049,3.935]],["body/overview.html",[2,1.145,11,0.026,18,2.94,26,0.017,27,0.017,28,1.071,29,4.496,30,1.507,31,1.404,32,1.75,33,1.75,34,1.507,35,1.75,36,1.75,37,2.882,38,2.882,39,2.882,40,3.407,41,3.716,42,3.969,43,3.487,44,3.216,45,2.384,46,1.75,47,1.75,119,1.898,136,1.75,155,3.216,162,2.882,163,2.882,164,2.882,177,2.979,202,1.621,343,2.882,437,3.487,443,2.882,444,2.882,445,2.882,609,3.487,635,2.882,636,2.882,638,2.882,647,3.216,745,2.882,746,2.882,747,2.882,864,2.882,865,2.882,866,2.882,1049,2.882,1050,5.28,1051,3.409]],["title/properties.html",[206,1.476,966,2.422]],["body/properties.html",[11,0.025,26,0.023,27,0.023,206,1.875,233,3.172,262,2.007,834,4.417,1045,4.417,1052,5.223,1053,5.223]],["title/miscellaneous/typealiases.html",[989,1.362,1054,4.11]],["body/miscellaneous/typealiases.html",[7,0.633,11,0.023,26,0.023,27,0.023,106,1.026,142,3.901,147,4.534,182,2.919,989,2.494,1055,5.244,1056,5.244]],["title/miscellaneous/variables.html",[86,2.745,989,1.362]],["body/miscellaneous/variables.html",[7,0.631,11,0.024,26,0.023,27,0.023,48,3.885,76,4.524,77,3.885,86,3.488,217,2.908,328,3.488,989,2.484,1057,5.223]],["title/routes.html",[1058,3.935]],["body/routes.html",[11,0.023,26,0.023,27,0.023,1058,4.598]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":675,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1052,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":978,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":985,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":977,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":955,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":960,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":957,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":964,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":962,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":963,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":342,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["1.1.26",{"_index":968,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":841,"title":{},"body":{"controllers/UserController.html":{}}}],["10.0.0",{"_index":969,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":497,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":815,"title":{},"body":{"controllers/UserController.html":{}}}],["123",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["1234",{"_index":846,"title":{},"body":{"controllers/UserController.html":{}}}],["16t12:00:00+0000",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.13.3",{"_index":980,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":848,"title":{},"body":{"controllers/UserController.html":{}}}],["2.0.6",{"_index":972,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":812,"title":{},"body":{"controllers/UserController.html":{}}}],["2024",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["255",{"_index":506,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["3.3.0",{"_index":970,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":961,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":343,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["512",{"_index":514,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6",{"_index":1050,"title":{},"body":{"overview.html":{}}}],["60",{"_index":791,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["7",{"_index":1051,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":975,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":982,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":787,"title":{},"body":{"entities/User.html":{}}}],["actual",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["additional",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{}}}],["adds",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alias",{"_index":956,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1055,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["already",{"_index":776,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["amazing",{"_index":1031,"title":{},"body":{"index.html":{}}}],["another",{"_index":662,"title":{},"body":{"injectables/PostsService.html":{}}}],["api",{"_index":817,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["apioperation",{"_index":611,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":551,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["apiproperty",{"_index":213,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({})@isjson()@isoptional",{"_index":363,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiquery",{"_index":830,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":612,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["apiresponse({status",{"_index":573,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags",{"_index":831,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":833,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":1010,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1004,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":797,"title":{},"body":{"entities/User.html":{}}}],["array",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["associated",{"_index":579,"title":{},"body":{"controllers/PostsController.html":{}}}],["async",{"_index":451,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":141,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":155,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":462,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":1032,"title":{},"body":{"index.html":{}}}],["being",{"_index":581,"title":{},"body":{"controllers/PostsController.html":{}}}],["bi",{"_index":430,"title":{},"body":{"entities/MetaOption.html":{}}}],["blog",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["body",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1048,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1046,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1000,"title":{},"body":{"index.html":{}}}],["calls",{"_index":583,"title":{},"body":{"controllers/PostsController.html":{}}}],["cascade",{"_index":428,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":420,"title":{},"body":{"entities/MetaOption.html":{}}}],["cases",{"_index":842,"title":{},"body":{"controllers/UserController.html":{}}}],["catch",{"_index":903,"title":{},"body":{"injectables/UserService.html":{}}}],["cause",{"_index":679,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["character",{"_index":390,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["check",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["circular",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["class",{"_index":21,"title":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":202,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":443,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_exports",{"_index":444,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":445,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":635,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":636,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":637,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":638,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":745,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":746,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":747,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":864,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":866,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":865,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":425,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":414,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["commit",{"_index":933,"title":{},"body":{"injectables/UserService.html":{}}}],["compodoc/compodoc",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["composed",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["config/database.config",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["config/index.config",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":872,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["configmodule",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":874,"title":{},"body":{"modules/UserModule.html":{}}}],["configmodule.forroot",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["configservice.get('database.port",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_host",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_name",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_password",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_port",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_username",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":881,"title":{},"body":{"injectables/UserService.html":{}}}],["configuration",{"_index":896,"title":{},"body":{"injectables/UserService.html":{}}}],["confirmation",{"_index":561,"title":{},"body":{"controllers/PostsController.html":{}}}],["connect",{"_index":927,"title":{},"body":{"injectables/UserService.html":{}}}],["connection",{"_index":948,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('node_env",{"_index":914,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('profile",{"_index":915,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`environment",{"_index":913,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`limit",{"_index":855,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(`logging",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(getuserparamdto",{"_index":854,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log({updatepostdto",{"_index":626,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":878,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(metaoptionsrepository",{"_index":452,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["constructor(tagsrepository",{"_index":757,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userservice",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(userservices",{"_index":646,"title":{},"body":{"injectables/PostsService.html":{}}}],["containing",{"_index":563,"title":{},"body":{"controllers/PostsController.html":{}}}],["content",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{}}}],["context",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":440,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":614,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":737,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":832,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convert",{"_index":840,"title":{},"body":{"controllers/UserController.html":{}}}],["correct",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["coverage",{"_index":950,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/UserService.html":{}}}],["create(undefined",{"_index":456,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["created",{"_index":553,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["createdatecolumn",{"_index":410,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createddate",{"_index":408,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdmetaoption",{"_index":461,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createdpost",{"_index":623,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdtags",{"_index":738,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createmany",{"_index":876,"title":{},"body":{"injectables/UserService.html":{}}}],["createmany(undefined",{"_index":884,"title":{},"body":{"injectables/UserService.html":{}}}],["createmetaoptions",{"_index":434,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(@body",{"_index":441,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(createmetaoptionsdto",{"_index":435,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptionsdto",{"_index":201,"title":{"classes/CreateMetaOptionsDto.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createpost",{"_index":546,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["createpost(@body",{"_index":622,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["createpost(createpostdto",{"_index":550,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createtag",{"_index":724,"title":{},"body":{"controllers/TagsController.html":{}}}],["createpost.authorid",{"_index":667,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost.tags",{"_index":669,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":218,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdtowithmeta",{"_index":543,"title":{},"body":{"entities/Post.html":{}}}],["createpostdto})@patch",{"_index":594,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto})@post",{"_index":554,"title":{},"body":{"controllers/PostsController.html":{}}}],["creates",{"_index":530,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{}}}],["createtag",{"_index":727,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtag(undefined",{"_index":760,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtagdto",{"_index":348,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":860,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(undefined",{"_index":886,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":369,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto})@apiquery({name",{"_index":813,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers",{"_index":803,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(@body",{"_index":859,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(createuserdto",{"_index":806,"title":{},"body":{"controllers/UserController.html":{}}}],["creating",{"_index":429,"title":{},"body":{"entities/MetaOption.html":{}}}],["creation",{"_index":557,"title":{},"body":{"controllers/PostsController.html":{}}}],["custom",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["data",{"_index":537,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{}}}],["database",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["databaseconfig",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":882,"title":{},"body":{"injectables/UserService.html":{}}}],["date",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":825,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":853,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(10",{"_index":851,"title":{},"body":{"controllers/UserController.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":603,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["delete('/soft",{"_index":742,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(undefined",{"_index":652,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":569,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedatecolumn",{"_index":711,"title":{},"body":{"entities/Tag.html":{}}}],["deleteddate",{"_index":709,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":547,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":629,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":567,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleterequest",{"_index":633,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletes",{"_index":568,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletetag",{"_index":722,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(@query('id",{"_index":740,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(id",{"_index":728,"title":{},"body":{"controllers/TagsController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["deprecated",{"_index":920,"title":{},"body":{"injectables/UserService.html":{}}}],["description",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":564,"title":{},"body":{"controllers/PostsController.html":{}}}],["development",{"_index":1011,"title":{},"body":{"index.html":{}}}],["directional",{"_index":431,"title":{},"body":{"entities/MetaOption.html":{}}}],["dist/**/*.entity.js",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["draft",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":439,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/get",{"_index":827,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/patch",{"_index":613,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["e.g",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["e2e",{"_index":1020,"title":{},"body":{"index.html":{}}}],["each",{"_index":344,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":491,"title":{},"body":{"entities/Post.html":{}}}],["eagerly",{"_index":540,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1001,"title":{},"body":{"index.html":{}}}],["eight",{"_index":386,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":372,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["enables",{"_index":536,"title":{},"body":{"entities/Post.html":{}}}],["endpoint",{"_index":837,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":129,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entity/meta",{"_index":447,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["entity/post.entity",{"_index":642,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entity/tags.entity",{"_index":750,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["entity/user.entity",{"_index":870,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["enum",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":990,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posts.enums",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env}.local",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development.local",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["environmentvalidation",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UserService.html":{}}}],["example",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["exception",{"_index":907,"title":{},"body":{"injectables/UserService.html":{}}}],["excerpt",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["exist",{"_index":917,"title":{},"body":{"injectables/UserService.html":{}}}],["existing",{"_index":596,"title":{},"body":{"controllers/PostsController.html":{}}}],["existingtags",{"_index":772,"title":{},"body":{"injectables/TagsService.html":{}}}],["existinguser",{"_index":899,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["expected",{"_index":483,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exporting",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":974,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":467,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["failed",{"_index":943,"title":{},"body":{"injectables/UserService.html":{}}}],["false",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["false})@isoptional()@isarray()@isint({each",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featured",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["featuredimageurl",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["fetch",{"_index":578,"title":{},"body":{"controllers/PostsController.html":{}}}],["few",{"_index":535,"title":{},"body":{"entities/Post.html":{}}}],["fields",{"_index":602,"title":{},"body":{"controllers/PostsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["final",{"_index":836,"title":{},"body":{"controllers/UserController.html":{}}}],["finally",{"_index":946,"title":{},"body":{"injectables/UserService.html":{}}}],["find",{"_index":672,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":856,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(undefined",{"_index":888,"title":{},"body":{"injectables/UserService.html":{}}}],["findmultipletags",{"_index":753,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(undefined",{"_index":763,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":877,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(undefined",{"_index":891,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/User.html":{}}}],["firstname",{"_index":373,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["footerenabled",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["format",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["forwardref",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["found",{"_index":677,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":999,"title":{},"body":{"index.html":{}}}],["from.env",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["function",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["functions",{"_index":993,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":849,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":810,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':userid",{"_index":617,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts",{"_index":548,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallposts(@param('userid",{"_index":618,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts(undefined",{"_index":654,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(userid",{"_index":572,"title":{},"body":{"controllers/PostsController.html":{}}}],["getalltags",{"_index":754,"title":{},"body":{"injectables/TagsService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gettagbyid",{"_index":755,"title":{},"body":{"injectables/TagsService.html":{}}}],["gettagbyid(undefined",{"_index":766,"title":{},"body":{"injectables/TagsService.html":{}}}],["getting",{"_index":995,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":819,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers",{"_index":804,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":808,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersparamdto",{"_index":396,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["given",{"_index":580,"title":{},"body":{"controllers/PostsController.html":{}}}],["grow",{"_index":1027,"title":{},"body":{"index.html":{}}}],["handle",{"_index":906,"title":{},"body":{"injectables/UserService.html":{}}}],["handles",{"_index":556,"title":{},"body":{"controllers/PostsController.html":{}}}],["headers",{"_index":823,"title":{},"body":{"controllers/UserController.html":{}}}],["hello",{"_index":139,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["here",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["host",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["httpexception",{"_index":604,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpexception('email",{"_index":908,"title":{},"body":{"injectables/UserService.html":{}}}],["httpexception('no",{"_index":631,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpexception('post",{"_index":684,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('tag",{"_index":775,"title":{},"body":{"injectables/TagsService.html":{}}}],["httpexception('tags",{"_index":676,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('user",{"_index":922,"title":{},"body":{"injectables/UserService.html":{}}}],["https://example.com/image.jpg",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["https://nestjs.com",{"_index":1042,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org",{"_index":339,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":605,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":632,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.conflict",{"_index":777,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.created",{"_index":621,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.moved_permanently",{"_index":918,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":678,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.ok",{"_index":616,"title":{},"body":{"controllers/PostsController.html":{}}}],["hyphens",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["id",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id'})@delete",{"_index":729,"title":{},"body":{"controllers/TagsController.html":{}}}],["id'})@delete('/soft",{"_index":733,"title":{},"body":{"controllers/TagsController.html":{}}}],["identifier",{"_index":951,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["in(tags",{"_index":782,"title":{},"body":{"injectables/TagsService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":565,"title":{},"body":{"controllers/PostsController.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(profileconfig.key",{"_index":897,"title":{},"body":{"injectables/UserService.html":{}}}],["injectable",{"_index":135,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":136,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["injection",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injections",{"_index":660,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository",{"_index":459,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoptionrepository",{"_index":665,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(metaoptionsrepository",{"_index":460,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["injectrepository(postrepository",{"_index":664,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tagrepository",{"_index":771,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":895,"title":{},"body":{"injectables/UserService.html":{}}}],["installation",{"_index":1007,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1009,"title":{},"body":{"index.html":{}}}],["instance",{"_index":924,"title":{},"body":{"injectables/UserService.html":{}}}],["instead",{"_index":541,"title":{},"body":{"entities/Post.html":{}}}],["integer",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["invalid",{"_index":358,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["ip",{"_index":824,"title":{},"body":{"controllers/UserController.html":{}}}],["isarray",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauthenticated",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":375,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(['post",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypes",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isiso8601",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":210,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":211,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":208,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["isnumber",{"_index":474,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":214,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":377,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":381,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":379,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["item",{"_index":346,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["joi",{"_index":979,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":525,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["joincolumn",{"_index":426,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":516,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["json",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["kamil",{"_index":1039,"title":{},"body":{"index.html":{}}}],["keeping",{"_index":940,"title":{},"body":{"injectables/UserService.html":{}}}],["key",{"_index":216,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["language",{"_index":354,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["lastname",{"_index":374,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lazy",{"_index":542,"title":{},"body":{"entities/Post.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":496,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":388,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1045,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1024,"title":{},"body":{"index.html":{}}}],["likes",{"_index":482,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["limit",{"_index":809,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["literal",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["loading",{"_index":539,"title":{},"body":{"entities/Post.html":{}}}],["logic",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginbody",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginbody",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["logs",{"_index":559,"title":{},"body":{"controllers/PostsController.html":{}}}],["lowercase",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["m2m",{"_index":528,"title":{},"body":{"entities/Post.html":{}}}],["main",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["make",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["making",{"_index":661,"title":{},"body":{"injectables/PostsService.html":{}}}],["manytomany",{"_index":517,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":510,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":518,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":489,"title":{},"body":{"entities/Post.html":{}}}],["matches",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matches(/^https?:\\/\\/[^\\s",{"_index":368,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["maxlength",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":341,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(255",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["meta",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":984,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":405,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":658,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptions",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["metaoptions.post",{"_index":500,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":50,"title":{"controllers/MetaOptionsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":41,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":455,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":437,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":207,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["migrations",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":385,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":367,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":215,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":989,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1023,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1014,"title":{},"body":{"index.html":{}}}],["modern",{"_index":352,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1036,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1040,"title":{},"body":{"index.html":{}}}],["name",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["need",{"_index":835,"title":{},"body":{"controllers/UserController.html":{}}}],["nest",{"_index":1005,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1044,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":971,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":475,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":973,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":531,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newuser",{"_index":909,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.push(savednewuserinstance",{"_index":939,"title":{},"body":{"injectables/UserService.html":{}}}],["newuserinstance",{"_index":934,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":998,"title":{},"body":{"index.html":{}}}],["null",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":415,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number'})@isnumber()@isnotempty",{"_index":470,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["number})@isoptional()@isint()@type(undefined",{"_index":401,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["object",{"_index":347,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["objects",{"_index":590,"title":{},"body":{"controllers/PostsController.html":{}}}],["occurred",{"_index":919,"title":{},"body":{"injectables/UserService.html":{}}}],["ondelete",{"_index":419,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":387,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["onetomany",{"_index":796,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":793,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":427,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":417,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1025,"title":{},"body":{"index.html":{}}}],["option.entity",{"_index":448,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":407,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":413,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":416,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":411,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":423,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:33",{"_index":421,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["options",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.controller",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":433,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:10",{"_index":436,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":205,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:16",{"_index":209,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["options.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":446,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":438,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":450,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:15",{"_index":457,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":454,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":204,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["options/entity/meta",{"_index":406,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/meta",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1049,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owning",{"_index":523,"title":{},"body":{"entities/Post.html":{}}}],["package",{"_index":966,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":843,"title":{},"body":{"controllers/UserController.html":{}}}],["pagination'})@apiresponse({status",{"_index":811,"title":{},"body":{"controllers/UserController.html":{}}}],["param",{"_index":606,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["param.dto",{"_index":828,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param.dto.ts",{"_index":399,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:16",{"_index":402,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parama",{"_index":839,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parseintpipe",{"_index":607,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["partial",{"_index":599,"title":{},"body":{"controllers/PostsController.html":{}}}],["partialtype",{"_index":472,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":468,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":486,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passing",{"_index":538,"title":{},"body":{"entities/Post.html":{}}}],["password",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":597,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["patchpostdto",{"_index":465,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchuser",{"_index":805,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(@body",{"_index":862,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(patchuserdto",{"_index":820,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuserdto",{"_index":484,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["path",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["person",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":340,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":981,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":1034,"title":{},"body":{"index.html":{}}}],["port",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":816,"title":{},"body":{"controllers/UserController.html":{}}}],["possible",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":154,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":552,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@delete",{"_index":570,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('login",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.content",{"_index":693,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":473,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:103",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:113",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:124",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:146",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:15",{"_index":471,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:156",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:34",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:46",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:60",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:71",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:80",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:92",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.featuredimageurl",{"_index":697,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":418,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.metaoptions.id",{"_index":705,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.posttype",{"_index":687,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishedon",{"_index":699,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.schema",{"_index":695,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":689,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":691,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":701,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":685,"title":{},"body":{"injectables/PostsService.html":{}}}],["postentity",{"_index":641,"title":{},"body":{"modules/PostsModule.html":{}}}],["postgres",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["postrepository",{"_index":648,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":545,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.author",{"_index":794,"title":{},"body":{"entities/User.html":{}}}],["posts.controller",{"_index":640,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":610,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.controller",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":49,"title":{"controllers/PostsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":615,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":42,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":609,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":522,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["posttypes",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttypes.post",{"_index":521,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":412,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["processes",{"_index":598,"title":{},"body":{"controllers/PostsController.html":{}}}],["processing",{"_index":558,"title":{},"body":{"controllers/PostsController.html":{}}}],["production",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["profileconfig",{"_index":871,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["profileconfiguration",{"_index":880,"title":{},"body":{"injectables/UserService.html":{}}}],["programming",{"_index":353,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["progressive",{"_index":997,"title":{},"body":{"index.html":{}}}],["project",{"_index":1026,"title":{},"body":{"index.html":{}}}],["promise",{"_index":588,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":206,"title":{"properties.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":680,"title":{},"body":{"injectables/PostsService.html":{}}}],["provided",{"_index":404,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["published",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["put",{"_index":822,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":608,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["query('limit",{"_index":850,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":852,"title":{},"body":{"controllers/UserController.html":{}}}],["queryrunner",{"_index":925,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.committransaction",{"_index":942,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.connect",{"_index":928,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.manager.create(user",{"_index":935,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.manager.save(newuserinstance",{"_index":937,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.release",{"_index":949,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":945,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.starttransaction",{"_index":931,"title":{},"body":{"injectables/UserService.html":{}}}],["r\\n",{"_index":338,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["range",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1035,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["received",{"_index":560,"title":{},"body":{"controllers/PostsController.html":{}}}],["references",{"_index":800,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":983,"title":{},"body":{"dependencies.html":{}}}],["relationship",{"_index":432,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["relationships",{"_index":529,"title":{},"body":{"entities/Post.html":{}}}],["release",{"_index":947,"title":{},"body":{"injectables/UserService.html":{}}}],["remove",{"_index":532,"title":{},"body":{"entities/Post.html":{}}}],["replace",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["repositories",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{}}}],["repository",{"_index":453,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["representing",{"_index":584,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":566,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["requests",{"_index":577,"title":{},"body":{"controllers/PostsController.html":{}}}],["requesttimeoutexception",{"_index":893,"title":{},"body":{"injectables/UserService.html":{}}}],["requesttimeoutexception('request",{"_index":904,"title":{},"body":{"injectables/UserService.html":{}}}],["require",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["required",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":589,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["retrieved",{"_index":582,"title":{},"body":{"controllers/PostsController.html":{}}}],["retrieves",{"_index":576,"title":{},"body":{"controllers/PostsController.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returned",{"_index":814,"title":{},"body":{"controllers/UserController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["review",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":944,"title":{},"body":{"injectables/UserService.html":{}}}],["routes",{"_index":1058,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":1012,"title":{},"body":{"index.html":{}}}],["runner",{"_index":923,"title":{},"body":{"injectables/UserService.html":{}}}],["rxjs",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":938,"title":{},"body":{"injectables/UserService.html":{}}}],["savednewuserinstance",{"_index":936,"title":{},"body":{"injectables/UserService.html":{}}}],["scalable",{"_index":1002,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["second",{"_index":799,"title":{},"body":{"entities/User.html":{}}}],["sent",{"_index":863,"title":{},"body":{"controllers/UserController.html":{}}}],["serialize",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":1003,"title":{},"body":{"index.html":{}}}],["service",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["set",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["setting",{"_index":533,"title":{},"body":{"entities/Post.html":{}}}],["setup",{"_index":798,"title":{},"body":{"entities/User.html":{}}}],["shows",{"_index":478,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["side",{"_index":524,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["sidebarenabled",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["single",{"_index":663,"title":{},"body":{"injectables/PostsService.html":{}}}],["slug",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["soft",{"_index":732,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":756,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdelete(undefined",{"_index":768,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdeletetag",{"_index":723,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(@query('id",{"_index":743,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(id",{"_index":731,"title":{},"body":{"controllers/TagsController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["special",{"_index":389,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":400,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["specified",{"_index":585,"title":{},"body":{"controllers/PostsController.html":{}}}],["specify",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["sponsors",{"_index":1029,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.controller.ts",{"_index":1056,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":994,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posts.enums.ts",{"_index":991,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":137,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":138,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":869,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":894,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:5",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":958,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":203,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":466,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity",{"_index":424,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/entity/post.entity.ts",{"_index":488,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity.ts:19",{"_index":499,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:26",{"_index":515,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:34",{"_index":502,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:42",{"_index":508,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:50",{"_index":509,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:56",{"_index":494,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:62",{"_index":505,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:69",{"_index":498,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:75",{"_index":504,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:81",{"_index":513,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:89",{"_index":501,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:96",{"_index":492,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/enums/posts.enums.ts",{"_index":992,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":544,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:100",{"_index":571,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:40",{"_index":575,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:62",{"_index":555,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:86",{"_index":595,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":639,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":645,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:12",{"_index":649,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:33",{"_index":651,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:53",{"_index":657,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:89",{"_index":655,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:95",{"_index":653,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":349,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity",{"_index":520,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/entity/tags.entity.ts",{"_index":708,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity.ts:16",{"_index":715,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:24",{"_index":716,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:32",{"_index":719,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:38",{"_index":713,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:44",{"_index":718,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:51",{"_index":714,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:56",{"_index":717,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:59",{"_index":710,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:62",{"_index":720,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:65",{"_index":712,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":721,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:19",{"_index":726,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:26",{"_index":730,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:32",{"_index":734,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":643,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":748,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/tags/tags.service",{"_index":659,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/tags.service.ts",{"_index":752,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/tags.service.ts:14",{"_index":761,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:30",{"_index":765,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:36",{"_index":767,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:46",{"_index":764,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:56",{"_index":762,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:62",{"_index":769,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:8",{"_index":758,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/user/dtos/create",{"_index":370,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/get",{"_index":397,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/user/dtos/patch",{"_index":485,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/user/entity/user.entity",{"_index":519,"title":{},"body":{"entities/Post.html":{}}}],["src/user/entity/user.entity.ts",{"_index":785,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entity/user.entity.ts:14",{"_index":788,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:21",{"_index":790,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:29",{"_index":786,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:36",{"_index":792,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:39",{"_index":795,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:7",{"_index":789,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":802,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:63",{"_index":818,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:81",{"_index":807,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:87",{"_index":821,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/user/user.module.ts",{"_index":867,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/user/user.service.ts",{"_index":875,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:107",{"_index":885,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:19",{"_index":883,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:40",{"_index":887,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:71",{"_index":889,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:97",{"_index":892,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":929,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["start:dev",{"_index":1015,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1016,"title":{},"body":{"index.html":{}}}],["started",{"_index":996,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1006,"title":{},"body":{"index.html":{}}}],["statements",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["stay",{"_index":1037,"title":{},"body":{"index.html":{}}}],["still",{"_index":480,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["story",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["string'})@isiso8601()@isnotempty",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isnotempty()@isstring()@minlength(3)@maxlength(255",{"_index":361,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isjson",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isstring",{"_index":355,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024)@matches(/^https?:\\/\\/[^\\s",{"_index":357,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isenum(posttypes)@isnotempty",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@isenum(poststatus",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(255)@matches(/^[a",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(512)@matches(/^[a",{"_index":365,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isoptional",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["success",{"_index":707,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["successful",{"_index":932,"title":{},"body":{"injectables/UserService.html":{}}}],["successfully",{"_index":706,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["summary",{"_index":620,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":1030,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["svg",{"_index":1047,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":477,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["synchronize",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":526,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":965,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":351,"title":{"entities/Tag.html":{}},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag'})@post",{"_index":725,"title":{},"body":{"controllers/TagsController.html":{}}}],["tag.dto",{"_index":735,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":350,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:23",{"_index":362,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:37",{"_index":366,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:46",{"_index":356,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:51",{"_index":364,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:65",{"_index":359,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.name",{"_index":774,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagrepository",{"_index":770,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":749,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":674,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags.posts",{"_index":511,"title":{},"body":{"entities/Post.html":{}}}],["tags.service",{"_index":736,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["tags/tags.controller",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":51,"title":{"controllers/TagsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":43,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":759,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":647,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":1019,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1022,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1021,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1018,"title":{},"body":{"index.html":{}}}],["text",{"_index":493,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1028,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(loginbody",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('s3_bucket",{"_index":912,"title":{},"body":{"injectables/UserService.html":{}}}],["this.datasource.createqueryrunner",{"_index":926,"title":{},"body":{"injectables/UserService.html":{}}}],["this.metaoptionsrepository.create(metaoptions",{"_index":463,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.delete",{"_index":704,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.save(createdmetaoption",{"_index":464,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create",{"_index":442,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postrepository.create",{"_index":670,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.delete",{"_index":703,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.find",{"_index":702,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findoneby",{"_index":682,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(post",{"_index":671,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postservice.create",{"_index":624,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.delete",{"_index":634,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.getallposts",{"_index":619,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.update",{"_index":628,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.profileconfiguration",{"_index":916,"title":{},"body":{"injectables/UserService.html":{}}}],["this.tagsrepository.create(tag",{"_index":778,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete",{"_index":783,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":780,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":773,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findoneby",{"_index":781,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(createdtags",{"_index":779,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete",{"_index":784,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtag",{"_index":739,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete",{"_index":741,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags",{"_index":668,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softdelete",{"_index":744,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userrepository.create(user",{"_index":910,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":901,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":921,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":911,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser",{"_index":861,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":857,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyid",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservices.findonebyid",{"_index":666,"title":{},"body":{"injectables/PostsService.html":{}}}],["through",{"_index":600,"title":{},"body":{"controllers/PostsController.html":{}}}],["throw",{"_index":630,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["time",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["timeout",{"_index":905,"title":{},"body":{"injectables/UserService.html":{}}}],["timestamp",{"_index":503,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":1038,"title":{},"body":{"index.html":{}}}],["track",{"_index":941,"title":{},"body":{"injectables/UserService.html":{}}}],["transaction",{"_index":930,"title":{},"body":{"injectables/UserService.html":{}}}],["transactions",{"_index":898,"title":{},"body":{"injectables/UserService.html":{}}}],["transfer",{"_index":562,"title":{},"body":{"controllers/PostsController.html":{}}}],["transform",{"_index":403,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["transformer",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@isint()@isnotempty",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@jointable",{"_index":512,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["try",{"_index":900,"title":{},"body":{"injectables/UserService.html":{}}}],["twitter",{"_index":1043,"title":{},"body":{"index.html":{}}}],["type",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1054,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm.forfeature",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":449,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([postentity",{"_index":644,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":751,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":873,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":476,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":360,"title":{},"body":{"classes/CreateTagDto.html":{},"index.html":{}}}],["undefined",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["undefined})@get(':userid",{"_index":574,"title":{},"body":{"controllers/PostsController.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":507,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1017,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":458,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1053,"title":{},"body":{"properties.html":{}}}],["up",{"_index":479,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["update",{"_index":469,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["update(undefined",{"_index":656,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":593,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["updatedatecolumn",{"_index":422,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updateddate",{"_index":409,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedpost",{"_index":627,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost",{"_index":549,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":625,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(updatepostdto",{"_index":591,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost.content",{"_index":694,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.featuredimageurl",{"_index":698,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.id",{"_index":683,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.posttype",{"_index":688,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.publishedon",{"_index":700,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.schema",{"_index":696,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.slug",{"_index":690,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.status",{"_index":692,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.tags",{"_index":673,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.title",{"_index":686,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":601,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":592,"title":{},"body":{"controllers/PostsController.html":{}}}],["url",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["use",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{}}}],["used",{"_index":527,"title":{},"body":{"entities/Post.html":{}}}],["usefactory",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":190,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":868,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":487,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":371,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":378,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":380,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":376,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":902,"title":{},"body":{"injectables/UserService.html":{}}}],["user.firstname",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.posts",{"_index":490,"title":{},"body":{"entities/Post.html":{}}}],["user.service",{"_index":829,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":801,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":586,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["usermodule",{"_index":44,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userparamsdto",{"_index":858,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":879,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":398,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["users/1223",{"_index":844,"title":{},"body":{"controllers/UserController.html":{}}}],["users/id?limit=10&page=1",{"_index":838,"title":{},"body":{"controllers/UserController.html":{}}}],["users?limit=10&page=2",{"_index":847,"title":{},"body":{"controllers/UserController.html":{}}}],["userservice",{"_index":177,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservices",{"_index":650,"title":{},"body":{"injectables/PostsService.html":{}}}],["using",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["valid",{"_index":681,"title":{},"body":{"injectables/PostsService.html":{}}}],["validate",{"_index":345,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":826,"title":{},"body":{"controllers/UserController.html":{}}}],["validationschema",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":212,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":217,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":495,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":954,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":86,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":834,"title":{},"body":{"controllers/UserController.html":{},"properties.html":{}}}],["void",{"_index":890,"title":{},"body":{"injectables/UserService.html":{}}}],["want",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["watch",{"_index":1013,"title":{},"body":{"index.html":{}}}],["website",{"_index":1041,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["whos",{"_index":845,"title":{},"body":{"controllers/UserController.html":{}}}],["whose",{"_index":587,"title":{},"body":{"controllers/PostsController.html":{}}}],["work",{"_index":534,"title":{},"body":{"entities/Post.html":{}}}],["works",{"_index":481,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["world",{"_index":140,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["yarn",{"_index":1008,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1033,"title":{},"body":{"index.html":{}}}],["your.env",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["z0",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":384,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":383,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":382,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            PostsController\n                        \n                        \n                            MetaOptionsController\n                        \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { PostsController } from './posts/posts.controller';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOptionsController } from './meta-options/meta-options.controller';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsController } from './tags/tags.controller';\nimport { TagsModule } from './tags/tags.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/index.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\n\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true, // make sure this is set to true to load environment variables from.env file\n      // envFilePath: ['.env.development.local'], // specify the path to your.env file\n      envFilePath: !ENV ? '.env' : `.env.${ENV}.local`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }), // to use environment variables\n    UserModule,\n    PostsModule,\n    AuthModule,\n    MetaOptionsModule,\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // specify any additional imports here, e.g., TypeORM migrations or custom repositories\n      inject: [ConfigService], // inject\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DATABASE_HOST'),\n        port: +configService.get('database.port'),\n        // port: +configService.get('DATABASE_PORT'),\n        username: configService.get('DATABASE_USERNAME'),\n        password: configService.get('DATABASE_PASSWORD'),\n        database: configService.get('DATABASE_NAME'),\n        entities: ['dist/**/*.entity.js'],\n        synchronize: configService.get('database.synchronize'), // set to false in production\n        // autoLoadEntities: true, // using this would require us to create a module (controller and module file) for every entity we want to add, exporting it and using the TypeORM.forFeature([]) function\n      }),\n    }),\n    TagsModule,\n  ],\n  controllers: [\n    AppController,\n    PostsController,\n    MetaOptionsController,\n    TagsController,\n  ],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginBody: LoginBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginBody\n                                            \n                                                            LoginBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\ntype LoginBody = {\n  id: number;\n  username: string;\n  password: string;\n};\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  login(@Body() loginBody: LoginBody) {\n    return this.authService.login(loginBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from 'src/user/user.module';\n\n@Module({\n  imports: [forwardRef(() => UserModule)], // for dependency injection (circular dependency injection)\n  exports: [AuthService],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n  ) {}\n\n  public login({\n    id,\n    username,\n    password,\n  }: {\n    id: number;\n    username: string;\n    password: string;\n  }) {\n    // check user exists in the database and if the password is correct\n    // login\n    // token\n\n    // const user = this.userService.findOneById({ id });\n    // console.log(`Logging in user ${user.firstName}`);\n\n    // return user;\n\n    return 'login';\n  }\n\n  public isAuthenticated() {\n    return true; // replace with actual authentication logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMetaOptionsDto.html":{"url":"classes/CreateMetaOptionsDto.html","title":"class - CreateMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-meta-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from \"class-validator\";\n\nexport class CreateMetaOptionsDto {\n    // @ApiProperty()\n    // @IsString()\n    // @MinLength(4)\n    // @IsNotEmpty()\n    // key: string;\n  \n    // @ApiProperty()\n    // @IsNotEmpty()\n    // value: any;\n  \n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the id of the author of the post', example: 123, type: 'integer', required: true})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the additional options for the post', example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}', type: 'string', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostTypes, description: 'Possible tags for a post, range: ['post', 'page', 'story', 'series']', type: 'string'})@IsString()@IsEnum(PostTypes)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the date when the post was published', example: '2024-03-16T12:00:00+0000', format: 'date-time', type: 'string'})@IsISO8601()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the excerpt of the post. Serialize your json content or else there will be an error', example: '{\n \"@context\": \"https://schema.org\", \n \"@type\": \"Person\"\n}', format: 'json', type: 'string'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(255)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']', type: 'string'})@IsString()@IsNotEmpty()@IsEnum(PostStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined, type: 'array', required: false})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is a title of the post', example: 'Hello World', type: 'string'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { CreateMetaOptionsDto } from 'src/meta-options/dtos/create-meta-options.dto';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is a title of the post',\n    example: 'Hello World',\n    type: 'string',\n\n    // default: \"Hello World\"\n  }) // this adds the value to the post documentation\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostTypes,\n    description:\n      \"Possible tags for a post, range: ['post', 'page', 'story', 'series']\",\n    type: 'string',\n  })\n  @IsString()\n  //   @IsEnum(['post', 'page', 'story', 'series'])\n  @IsEnum(PostTypes)\n  @IsNotEmpty()\n  postType: PostTypes;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description:\n      \"Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']\",\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'This is the excerpt of the post. Serialize your json content or else there will be an error',\n    example:\n      '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\", \\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}',\n    format: 'json',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'This is the date when the post was published',\n    example: '2024-03-16T12:00:00+0000',\n    format: 'date-time',\n    type: 'string',\n  })\n  @IsISO8601()\n  @IsNotEmpty()\n  publishedOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1, 4],\n    type: 'array',\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true }) // validate each item in the array as a string\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    description: 'This is the additional options for the post',\n    example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n    type: 'string',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'The meta value is a json object',\n          example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n        },\n      },\n      required: ['key', 'value'],\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreateMetaOptionsDto)\n  metaOptions?: CreateMetaOptionsDto | null;\n\n  @ApiProperty({\n    description: 'This is the id of the author of the post',\n    example: 123,\n    type: 'integer',\n    required: true,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Tag Description', example: 'A modern programming language', type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)@Matches(/^https?:\\/\\/[^\\s]+$/, {message: 'Invalid URL format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the tag', example: 'TypeScript', type: 'string'})@IsNotEmpty()@IsString()@MinLength(3)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(512)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty({\n    description: 'Name of the tag',\n    example: 'TypeScript',\n    type: 'string',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(255)\n  name: string;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(512)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiPropertyOptional({\n    description: 'Tag Description',\n    example: 'A modern programming language',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional({})\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  @Matches(/^https?:\\/\\/[^\\s]+$/, {\n    message: 'Invalid URL format',\n  })\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 123, type: Number})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/get-users-param.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 123,\n    type: Number,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number) // transform string to number if provided\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/entity/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  }) // creating bi-directional relationship\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOptions(createMetaOptionsDto: CreateMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionsDto\n                                            \n                                                            CreateMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private metaOptionsService: MetaOptionsService) {}\n\n  @Post()\n  createMetaOptions(@Body() createMetaOptionsDto: CreateMetaOptionsDto) {\n    const metaOptions = this.metaOptionsService.create({\n      metaOptions: createMetaOptionsDto,\n    });\n\n    return metaOptions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './entity/meta-option.entity';\nimport { MetaOptionsController } from './meta-options.controller';\n\n@Module({\n  providers: [MetaOptionsService],\n  controllers: [MetaOptionsController],\n  exports: [MetaOptionsService],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/meta-options.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\nimport { MetaOption as MetaOptionsRepository } from './entity/meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    // injecting meta options service repository dependency\n    @InjectRepository(MetaOptionsRepository)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create({ metaOptions }: { metaOptions: CreateMetaOptionsDto }) {\n    const createdMetaOption =\n      await this.metaOptionsRepository.create(metaOptions);\n    await this.metaOptionsRepository.save(createdMetaOption);\n\n    return createdMetaOption;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Update post with a specific id', example: 123, type: 'number'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n// import { PartialType } from '@nestjs/mapped-types'; \n// we are using the import from swagger so it shows up in our documentation, it still works likes expected as the import from @nestjs/mapped-types\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'Update post with a specific id',\n    example: 123,\n    type: 'number',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entity/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostTypes, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tags => tags.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { MetaOption } from '../../meta-options/entity/meta-option.entity';\nimport { User } from 'src/user/entity/user.entity';\nimport { Tag } from 'src/tags/entity/tags.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostTypes,\n    default: PostTypes.POST,\n  })\n  postType: PostTypes;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: false,\n  })\n  publishedOn: Date;\n\n  @ManyToMany(() => Tag, (tags) => tags.posts, {\n    eager: true,\n  })\n  @JoinTable() // this must be on the owning side of the relationship and join table is used for M2M relationships, it also creates a new table for the relationship\n  tags?: Tag[];\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    // cascade: ['remove'] // setting cascade to work for a few methods\n    cascade: true, // this enables us create data in the metaoption table by just passing the value\n    eager: true, // loading the metaOptions eagerly instead of lazy loading it\n  })\n  // @JoinColumn()\n  metaOptions?: MetaOption;\n\n  // metaOptions?: CreatePostDtoWithMeta[];\n\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                deletePost\n                            \n                            \n                                    \n                                    \n                                getAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post'})@ApiResponse({status: undefined, description: 'Created post', type: CreatePostDto})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:62\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\nThis function handles the creation of a new post by processing the provided CreatePostDto.\nIt logs the received data and returns a confirmation message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the details of the post to be created.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the post request was received.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post'})@ApiResponse({status: undefined, description: 'Deleted post'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: undefined, description: 'All posts', type: undefined})@Get(':userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\nThis function handles GET requests to fetch all posts associated with a given user ID.\nIt logs the user ID for which posts are being retrieved and then calls the post service\nto fetch the posts.\nExample :                                representing all posts for the specified user.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user whose posts are to be retrieved.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CreatePostDto objects,\nrepresenting all posts for the specified user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(updatePostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates a post'})@ApiResponse({status: undefined, description: 'Updated post', type: CreatePostDto})@Patch('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:86\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\nThis function handles PATCH requests to update an existing post using the provided data.\nIt logs the update data received and processes the partial post update through the\nPatchPostDto data transfer object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the fields to be updated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the patch request was received.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   *\n   * This function handles GET requests to fetch all posts associated with a given user ID.\n   * It logs the user ID for which posts are being retrieved and then calls the post service\n   * to fetch the posts.\n   *\n   * @param {number} userId - The ID of the user whose posts are to be retrieved.\n   * @returns {Promise} A promise that resolves to an array of CreatePostDto objects,\n   *                                     representing all posts for the specified user.\n   */\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'All posts',\n    type: [CreatePostDto],\n  })\n  @Get(':userId?')\n  getAllPosts(@Param('userId') userId: number) {\n    return this.postService.getAllPosts({ userId });\n  }\n\n  /**\n   * Creates a new post.\n   *\n   * This function handles the creation of a new post by processing the provided CreatePostDto.\n   * It logs the received data and returns a confirmation message.\n   *\n   * @param {CreatePostDto} createPostDto - The data transfer object containing the details of the post to be created.\n   * @returns {string} A confirmation message indicating that the post request was received.\n   */\n  @ApiOperation({\n    summary: 'Creates a new post',\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Created post',\n    type: CreatePostDto,\n  })\n  @Post('')\n  createPost(@Body() createPostDto: CreatePostDto) {\n    const createdPost = this.postService.create({ createPost: createPostDto });\n    return createdPost;\n  }\n\n  /**\n   * Updates an existing post.\n   *\n   * This function handles PATCH requests to update an existing post using the provided data.\n   * It logs the update data received and processes the partial post update through the\n   * PatchPostDto data transfer object.\n   *\n   * @param {PatchPostDto} updatePostDto - The data transfer object containing the fields to be updated.\n   * @returns {string} A confirmation message indicating that the patch request was received.\n   */\n  @ApiOperation({\n    summary: 'Updates a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Updated post',\n    type: CreatePostDto,\n  })\n  @Patch('')\n  updatePost(@Body() updatePostDto: PatchPostDto) {\n    // console.log({updatePostDto})\n    const updatedPost = this.postService.update({ updatePost: updatePostDto });\n    return updatedPost;\n  }\n\n  @ApiOperation({\n    summary: 'Deletes a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Deleted post',\n  })\n  @Delete('')\n  deletePost(@Query('id', ParseIntPipe) id: number) {\n    if (!id) {\n      throw new HttpException('No ID Provided', HttpStatus.BAD_REQUEST);\n    }\n\n    const deleteRequest = this.postService.delete({ id });\n\n    return deleteRequest;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { UserModule } from 'src/user/user.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post as PostEntity } from './entity/post.entity';\nimport { MetaOption } from 'src/meta-options/entity/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\n\n@Module({\n  imports: [\n    UserModule,\n    TagsModule,\n    TypeOrmModule.forFeature([PostEntity, MetaOption]),\n  ],\n  controllers: [PostsController],\n  providers: [PostsService],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userServices: UserService, tagsService: TagsService, postRepository: Repository, metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userServices\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption as MetaOptionRepository } from 'src/meta-options/entity/meta-option.entity';\nimport { Post as PostRepository } from './entity/post.entity';\nimport { TagsService } from 'src/tags/tags.service';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /**\n     * Repositories Injections\n     */\n\n    // injecting user service (making user of another service (a single dependency injection))\n    private userServices: UserService,\n\n    private tagsService: TagsService,\n\n    /**\n     * Repositories Injections\n     */\n    @InjectRepository(PostRepository)\n    private postRepository: Repository,\n\n    @InjectRepository(MetaOptionRepository)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create({ createPost }: { createPost: CreatePostDto }) {\n    const author = await this.userServices.findOneById({\n      id: createPost.authorId,\n    });\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: createPost.tags,\n    });\n\n    const post = await this.postRepository.create({\n      ...createPost,\n      author: author,\n      tags: tags,\n    });\n\n    await this.postRepository.save(post);\n\n    return post;\n  }\n\n  public async update({ updatePost }: { updatePost: PatchPostDto }) {\n    // find the tags\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: updatePost.tags,\n    });\n\n    if (!(tags.length > 0)) {\n      throw new HttpException('Tags not found', HttpStatus.NOT_FOUND, {\n        cause: 'Tags not found',\n        description: 'Provide a valid tags to update',\n      });\n    }\n\n    const post = await this.postRepository.findOneBy({ id: updatePost.id });\n\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    }\n\n    post.title = updatePost.title ?? post.title;\n    post.postType = updatePost.postType ?? post.postType;\n    post.slug = updatePost.slug ?? post.slug;\n    post.status = updatePost.status ?? post.status;\n    post.content = updatePost.content ?? post.content;\n    post.schema = updatePost.schema ?? post.schema;\n    post.featuredImageUrl =\n      updatePost.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishedOn = updatePost.publishedOn ?? post.publishedOn;\n    post.tags = updatePost.tags ? tags : post.tags;\n\n    const updatedPost = await this.postRepository.save(post);\n\n    return updatedPost;\n  }\n\n  public async getAllPosts({ userId }: { userId: number }) {\n    const posts = await this.postRepository.find({});\n\n    return posts;\n  }\n\n  public async delete({ id }: { id: number }) {\n    // const post = await this.postRepository.findOneBy({ id });\n\n    // if (!post) {\n    //   throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    // }\n\n    await this.postRepository.delete({ id });\n\n    // await this.metaOptionsRepository.delete({ id: post.metaOptions.id });\n\n    return { message: 'Post deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/entity/tags.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                deletedDate\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'json',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n    length: 1024,\n  })\n  featuredImageUrl?: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @DeleteDateColumn({})\n  deletedDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteTag\n                            \n                            \n                                    \n                                    \n                                    Async\n                                softDeleteTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createTag: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a tag'})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTag\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a tag by id'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        softDeleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDeleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Soft Delete a tag by id'})@Delete('/soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { ApiOperation } from '@nestjs/swagger';\nimport { TagsService } from './tags.service';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(private tagsService: TagsService) {}\n\n  @ApiOperation({ summary: 'Create a tag' })\n  @Post('')\n  createPost(@Body() createTag: CreateTagDto) {\n    const createdTags = this.tagsService.createTag({ tag: createTag });\n    return createdTags;\n  }\n\n  @ApiOperation({ summary: 'Delete a tag by id' })\n  @Delete('')\n  async deleteTag(@Query('id', ParseIntPipe) id: number) {\n    return await this.tagsService.delete({ id });\n  }\n\n  @ApiOperation({ summary: 'Soft Delete a tag by id' })\n  @Delete('/soft-delete')\n  async softDeleteTag(@Query('id', ParseIntPipe) id: number) {\n    return await this.tagsService.softDelete({ id });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsService } from './tags.service';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './entity/tags.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Tag])],\n  controllers: [TagsController],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTags\n                            \n                            \n                                    Public\n                                    Async\n                                getTagById\n                            \n                            \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTags()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getTagById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTagById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { In, Repository } from 'typeorm';\nimport { Tag as TagRepository } from './entity/tags.entity';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    @InjectRepository(TagRepository)\n    private tagsRepository: Repository,\n  ) {}\n\n  public async createTag({ tag }: { tag: CreateTagDto }) {\n    const existingTags = await this.tagsRepository.findOne({\n      where: { name: tag.name },\n    });\n\n    if (existingTags) {\n      throw new HttpException('Tag already exists', HttpStatus.CONFLICT);\n    }\n\n    const createdTags = await this.tagsRepository.create(tag);\n\n    await this.tagsRepository.save(createdTags);\n\n    return createdTags;\n  }\n\n  public async getAllTags() {\n    const tags = await this.tagsRepository.find({});\n\n    return tags;\n  }\n\n  public async getTagById({ id }: { id: number }) {\n    const tag = await this.tagsRepository.findOneBy({ id });\n\n    if (!tag) {\n      throw new HttpException('Tag not found', HttpStatus.NOT_FOUND);\n    }\n\n    return tag;\n  }\n\n  public async findMultipleTags({ tags }: { tags: number[] }) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags),\n      },\n    });\n\n    return results;\n  }\n\n  public async delete({ id }: { id: number }) {\n    await this.tagsRepository.delete({ id });\n\n    return { message: 'Tag deleted successfully', status: 'success', id };\n  }\n\n  public async softDelete({ id }: { id: number }) {\n    await this.tagsRepository.softDelete({ id });\n\n    return { message: 'Tag soft deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 60, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, posts => posts.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    unique: true,\n    nullable: false,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 60,\n    nullable: false,\n  })\n  password: string;\n\n  @OneToMany(() => Post, (posts) => posts.author) // first argument is the one we want to setup a relationship with, second argument is the what references the relationship\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Get all users', description: 'Get all users with optional pagination'})@ApiResponse({status: 200, description: 'All users', type: CreateUserDto})@ApiQuery({name: 'limit', type: Number, required: false, description: 'Limit the number of returned results', example: 10})@ApiQuery({name: 'page', type: Number, required: false, description: 'The position of the number that you want the api to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users') // with the updated version of @nestjs/swagger there is no need to use @ApiTags\nexport class UserController {\n  /**\n   * Final Endpoint - /users/id?limit=10&page=1\n   * Parama id - optional, convert to integer, cannot have a default value\n   * Query limit - integer, default 10\n   * Query page - integer, default value 1\n   * ==> USE CASES\n   * /users/ -> return all users with default pagination\n   * /users/1223 -> returns one user whos id is 1234\n   * /users?limit=10&page=2 -> return page 2 with limit of pagination 10\n   */\n\n  constructor(private readonly userService: UserService) {}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Get all users',\n    description: 'Get all users with optional pagination',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'All users',\n    type: CreateUserDto,\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: Number,\n    required: false,\n    description: 'Limit the number of returned results',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    required: false,\n    description: 'The position of the number that you want the api to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    // console.log(getUserParamDto);\n    // console.log(`Limit: ${limit}, Page: ${page}`);\n\n    const findAll = this.userService.findAll({\n      page,\n      limit,\n      userParamsDTO: getUserParamDto,\n    });\n\n    return findAll;\n  }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    const createUser = this.userService.createUser({ user: createUserDto });\n    return createUser;\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n    // return 'You sent a patch request to users endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entity/user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport profileConfig from './config/profile.config';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule), // for dependency injection (circular dependency injection)\n    TypeOrmModule.forFeature([User]), // for repository (entity) injection\n    ConfigModule.forFeature(profileConfig)\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository, configService: ConfigService, profileConfiguration: ConfigType<>, dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/auth.service';\nimport { DataSource, Repository } from 'typeorm';\nimport { User } from './entity/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from './config/profile.config';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => AuthService))\n    private authService: AuthService,\n\n    // injecting user service repository dependency\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    // injecting environment variables\n    private configService: ConfigService,\n\n    // injecting module specific configuration dependencies (environment variables)\n    @Inject(profileConfig.KEY)\n    private profileConfiguration: ConfigType,\n\n    // injecting datasource for typeorm transactions\n    private dataSource: DataSource,\n  ) {}\n\n  public async createUser({\n    user,\n  }: {\n    user: CreateUserDto;\n  }): Promise {\n    // check user\n    let existingUser = undefined;\n\n    try {\n      existingUser = await this.userRepository.findOne({\n        where: { email: user.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException('Request timeout', {\n        cause: error,\n        description: 'Request timeout',\n      });\n    }\n\n    // handle exception\n    if (existingUser) {\n      throw new HttpException('Email already exists', HttpStatus.CONFLICT);\n    }\n\n    // create a new user\n    const newUser = await this.userRepository.create(user);\n    await this.userRepository.save(newUser);\n\n    return newUser;\n  }\n\n  public findAll({\n    userParamsDTO,\n    limit,\n    page,\n  }: {\n    userParamsDTO: GetUsersParamDto;\n    limit: number;\n    page: number;\n  }) {\n    const environment = this.configService.get('S3_BUCKET');\n    console.log(`Environment: ${environment}`);\n\n    console.log('NODE_ENV: ', process.env.NODE_ENV);\n\n    console.log('Profile: ', this.profileConfiguration);\n\n    throw new HttpException(\n      'Api endpoint does not exist',\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        description: 'Occurred because the API endpoint was deprecated',\n        cause: 'Api endpoint does not exist',\n      },\n    );\n  }\n\n  public async findOneById({ id }: { id: number }) {\n    const user = await this.userRepository.findOneBy({ id });\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    return user;\n  }\n\n  public async createMany({ users }: { users: CreateUserDto[] }) {\n    // create query runner instance\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    // connect query runner to datasource\n    await queryRunner.connect();\n\n    // start transaction\n    await queryRunner.startTransaction();\n\n    let newUser: User[] = [];\n    try {\n      // if successful commit the transaction\n      for (let user of users) {\n        const newUserInstance = queryRunner.manager.create(User, user); // entity and object\n        const savedNewUserInstance =\n          await queryRunner.manager.save(newUserInstance); // save entity to the database\n\n        newUser.push(savedNewUserInstance); // keeping track of the users we have created\n      }\n\n      await queryRunner.commitTransaction();\n    } catch (error: any) {\n      // if failed rollback transaction\n      await queryRunner.rollbackTransaction();\n      throw error;\n    } finally {\n      // release connection\n      await queryRunner.release();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/auth.controller.ts\n            \n            type alias\n            LoginBody\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-meta-options.dto.ts\n            \n            class\n            CreateMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/entity/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/entity/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/entity/tags.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tags/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../posts.enums.ts)\n                        \n                        \n                            PostTypes   (src/.../posts.enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/posts.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PostTypes\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LoginBody   (src/.../auth.controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.controller.ts\n    \n    \n        \n            \n                \n                    \n                    LoginBody\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
