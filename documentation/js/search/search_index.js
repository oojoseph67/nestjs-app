var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.075,1,2.285]],["body/controllers/AppController.html",[0,1.749,1,3.717,2,1.513,3,0.448,4,0.403,5,0.403,6,3.81,7,0.544,8,1.869,9,5.334,10,1.24,11,0.026,12,0.817,13,4.505,14,1.618,15,1.749,16,0.554,17,1.012,18,3.362,19,3.81,20,0.448,21,0.086,22,2.508,23,3.351,24,1.618,25,4.505,26,0.021,27,0.021]],["title/modules/AppModule.html",[28,1.149,29,2.285]],["body/modules/AppModule.html",[0,0.86,1,3.13,2,1.336,3,0.272,4,0.245,5,0.356,11,0.026,16,0.636,17,0.615,18,3.174,19,2.315,20,0.272,21,0.052,26,0.015,27,0.015,28,1.835,29,4.404,30,1.21,31,1.21,32,1.406,33,1.406,34,1.21,35,2.407,36,1.406,37,2.315,38,2.315,39,2.315,40,3.174,41,3.462,42,3.462,43,3.174,44,2.928,45,2.043,46,1.406,47,1.406,48,2.315,49,2.846,50,2.846,51,2.846,52,2.864,53,2.738,54,2.738,55,2.738,56,2.738,57,2.738,58,1.662,59,1.127,60,1.892,61,2.416,62,2.315,63,2.738,64,2.738,65,2.738,66,2.738,67,2.738,68,2.315,69,2.315,70,2.738,71,1.127,72,2.738,73,2.738,74,2.315,75,2.96,76,2.738,77,0.461,78,3.979,79,2.738,80,2.738,81,2.738,82,2.738,83,2.036,84,1.662,85,2.738,86,2.315,87,2.036,88,2.315,89,1.524,90,2.738,91,2.738,92,2.215,93,2.738,94,1.406,95,2.315,96,2.738,97,2.96,98,2.738,99,1.406,100,1.052,101,2.036,102,2.738,103,2.738,104,2.738,105,2.036]],["title/injectables/AppService.html",[18,1.904,106,1.149]],["body/injectables/AppService.html",[3,0.468,4,0.42,5,0.42,7,0.567,8,1.918,9,5.412,11,0.025,12,0.852,14,1.687,15,1.794,16,0.468,17,1.056,18,3.18,20,0.468,21,0.089,24,1.687,26,0.021,27,0.021,106,1.918,107,2.413,108,3.974,109,4.699,110,3.974,111,3.974]],["title/controllers/AuthController.html",[0,1.075,112,2.285]],["body/controllers/AuthController.html",[0,1.299,2,1.388,3,0.411,4,0.37,5,0.37,7,0.499,8,1.77,10,1.137,11,0.026,12,0.75,14,1.484,15,1.657,16,0.525,17,0.928,20,0.411,21,0.079,22,2.301,24,1.484,26,0.02,27,0.02,77,0.887,83,3.074,84,2.51,112,3.521,113,3.074,114,2.51,115,4.133,116,4.458,117,4.133,118,4.804,119,5.272,120,4.133,121,1.702,122,1.484,123,1.064,124,2.51,125,1.137,126,2.981,127,3.495,128,1.299,129,1.215,130,4.133,131,4.133,132,4.133]],["title/modules/AuthModule.html",[28,1.149,40,1.904]],["body/modules/AuthModule.html",[2,1.721,3,0.394,4,0.354,5,0.354,11,0.026,16,0.599,17,0.889,20,0.394,21,0.075,26,0.019,27,0.019,28,1.909,30,1.749,31,1.749,32,2.031,33,2.031,34,1.749,35,2.92,36,2.92,40,3.618,44,2.632,45,2.632,46,2.031,47,2.031,52,2.202,112,3.798,126,3.493,127,3.345,133,3.345,134,3.345,135,3.345,136,3.956,137,3.423,138,3.956,139,3.345,140,2.854,141,3.113,142,2.642]],["title/injectables/AuthService.html",[106,1.149,126,1.756]],["body/injectables/AuthService.html",[3,0.333,4,0.299,5,0.299,7,0.404,8,1.54,11,0.026,12,0.949,14,1.647,15,1.644,16,0.456,17,0.752,20,0.333,21,0.064,24,1.879,26,0.017,27,0.017,75,2.491,77,0.947,83,3.412,84,3.177,86,2.832,92,1.864,106,1.54,107,1.72,116,4.984,121,1.889,122,1.647,123,1.18,126,2.355,128,1.644,129,0.985,137,2.237,140,2.554,141,2.033,142,2.237,143,2.832,144,3.389,145,5.627,146,2.785,147,3.349,148,2.965,149,3.349,150,3.349,151,3.349,152,3.349,153,2.554,154,3.349,155,2.832,156,2.237,157,2.033,158,2.832,159,2.033,160,2.832,161,2.162,162,2.491,163,3.349,164,3.349,165,1.48,166,3.349,167,3.349,168,3.349,169,3.349,170,3.349,171,3.349,172,3.349]],["title/classes/CreateMetaOptionsDto.html",[21,0.065,173,1.904]],["body/classes/CreateMetaOptionsDto.html",[3,0.429,4,0.386,5,0.386,7,0.52,10,1.186,11,0.026,12,0.782,15,1.86,16,0.429,20,0.429,21,0.103,26,0.02,27,0.02,60,2.576,77,0.725,173,3.015,174,2.051,175,2.393,176,4.028,177,3.645,178,1.944,179,4.404,180,4.311,181,4.311,182,4.028,183,3.771,184,2.214,185,3.617,186,2.879,187,3.645,188,3.645,189,2.4]],["title/classes/CreatePostDto.html",[21,0.065,190,1.904]],["body/classes/CreatePostDto.html",[3,0.146,4,0.131,5,0.131,7,0.177,10,1.472,11,0.025,12,0.97,15,1.924,16,0.404,20,0.146,21,0.06,26,0.009,27,0.009,60,1.161,68,2.064,77,1.112,87,2.719,92,2.902,94,1.61,110,2.651,111,2.651,123,1.341,125,1.708,128,0.767,129,1.075,173,2.035,174,0.697,175,0.648,176,1.091,178,1.126,179,1.091,182,1.816,183,2.822,184,0.753,185,3.104,186,2.927,187,1.24,188,1.24,189,1.746,190,1.359,191,4.626,192,1.091,193,3.136,194,3.759,195,2.094,196,2.094,197,2.651,198,2.651,199,2.094,200,2.712,201,2.465,202,2.822,203,3.433,204,2.719,205,1.482,206,3.144,207,1.816,208,2.064,209,3.929,210,1.466,211,1.466,212,3.02,213,3.091,214,1.466,215,1.466,216,2.064,217,2.064,218,3.091,219,2.064,220,3.706,221,1.466,222,1.466,223,2.441,224,1.816,225,3.136,226,3.136,227,2.441,228,1.466,229,1.466,230,1.466,231,3.02,232,2.441,233,2.507,234,3.656,235,3.656,236,2.094,237,2.651,238,2.651,239,1.466,240,1.466,241,2.927,242,3.091,243,2.441,244,2.441,245,2.441,246,2.441,247,1.466,248,1.466,249,2.441,250,2.441,251,3.26,252,2.441,253,2.441,254,1.466,255,1.466,256,1.466,257,1.466,258,2.064,259,1.466,260,3.091,261,3.091,262,1.482,263,2.064,264,2.064,265,2.064,266,1.816,267,2.064,268,1.816,269,1.466,270,3.02,271,2.064,272,2.064,273,2.064,274,1.466,275,1.466,276,3.433,277,2.441,278,1.091,279,1.466,280,1.466,281,1.466,282,1.466,283,2.441,284,1.466,285,1.466,286,2.651,287,2.441,288,2.927,289,2.064,290,1.091,291,1.091,292,1.091,293,2.441,294,1.24,295,1.091,296,3.26,297,0.697,298,1.091,299,0.979,300,1.466,301,1.091,302,1.24,303,2.064,304,1.466,305,1.466,306,1.24,307,1.24,308,1.466,309,2.441,310,1.466,311,1.466,312,1.24,313,1.091,314,1.24,315,3.136,316,1.466,317,1.466,318,2.064]],["title/classes/CreateTagDto.html",[21,0.065,319,2.077]],["body/classes/CreateTagDto.html",[3,0.262,4,0.235,5,0.235,7,0.317,10,1.479,11,0.025,12,0.975,15,2.03,16,0.384,20,0.262,21,0.073,26,0.014,27,0.014,77,1.078,87,2.874,122,1.931,123,1.447,125,1.389,174,1.251,178,1.387,182,2.874,183,2.781,184,1.35,185,3.059,186,3.371,194,2.874,195,3.059,199,3.059,200,3.591,204,2.874,206,3.176,212,2.874,213,3.267,216,3.267,217,3.267,218,4.754,219,3.267,220,4.268,233,2.689,258,3.267,260,4.268,261,4.268,262,3.065,263,3.267,264,3.267,265,3.267,266,2.874,267,3.267,268,2.874,288,3.371,289,3.267,290,1.956,291,1.956,292,1.956,296,3.755,297,1.251,302,2.224,306,2.224,307,2.224,312,2.224,319,2.346,320,4.754,321,2.224,322,2.401,323,3.863,324,3.863,325,3.863,326,2.63,327,2.63,328,2.63,329,3.863,330,2.63,331,3.267,332,2.63,333,2.63,334,2.63,335,2.63,336,2.63,337,2.63,338,2.224,339,2.63]],["title/classes/CreateUserDto.html",[21,0.065,340,1.904]],["body/classes/CreateUserDto.html",[3,0.342,4,0.307,5,0.307,7,0.415,10,1.565,11,0.025,12,1.032,15,2.006,16,0.342,20,0.342,21,0.089,26,0.017,27,0.017,77,0.957,84,3.219,123,1.201,129,1.372,174,1.634,178,1.676,183,3.454,184,1.764,186,3.799,262,2.834,266,3.472,288,3.117,290,2.555,291,2.555,292,2.555,338,3.946,340,2.598,341,5.029,342,2.555,343,3.943,344,3.943,345,4.482,346,3.435,347,3.435,348,3.435,349,3.435,350,3.435,351,3.435,352,3.435,353,5.687,354,4.667,355,4.667,356,4.667,357,4.667,358,4.563,359,4.667,360,4.667,361,4.667,362,3.435,363,4.667,364,5.687,365,3.435,366,3.435]],["title/classes/GetUsersParamDto.html",[21,0.065,367,2.077]],["body/classes/GetUsersParamDto.html",[3,0.402,4,0.361,5,0.361,7,0.487,10,1.11,11,0.026,12,0.732,15,1.268,16,0.571,20,0.402,21,0.109,26,0.019,27,0.019,77,1.055,123,1.336,128,1.97,129,1.844,161,1.995,174,1.92,178,1.864,184,2.072,206,2.666,207,3.862,212,3.002,233,1.784,286,4.39,288,3.468,295,3.002,296,3.862,297,1.92,367,3.153,368,4.39,369,3.468,370,3.413,371,3.862,372,4.036,373,4.036,374,4.036,375,3.413]],["title/entities/MetaOption.html",[100,1.314,376,1.627]],["body/entities/MetaOption.html",[3,0.335,4,0.301,5,0.301,7,0.407,10,1.625,11,0.026,12,1.071,15,1.447,16,0.458,20,0.335,21,0.064,26,0.017,27,0.017,71,1.387,77,1.026,89,1.875,94,2.364,100,1.769,125,1.774,128,1.649,129,1.354,175,2.695,178,1.653,179,3.903,241,3.767,251,3.425,376,2.19,377,3.703,378,2.848,379,4.437,380,4.437,381,4.437,382,3.368,383,3.504,384,3.368,385,2.249,386,3.075,387,3.368,388,2.848,389,4.604,390,4.604,391,3.368,392,3.368,393,4.437,394,3.368,395,2.848,396,3.075,397,3.893,398,3.893,399,2.848,400,3.368,401,3.368,402,3.368,403,2.505]],["title/controllers/MetaOptionsController.html",[0,1.075,50,2.077]],["body/controllers/MetaOptionsController.html",[0,1.255,2,1.342,3,0.398,4,0.357,5,0.357,7,0.482,8,1.732,10,1.099,11,0.026,12,0.725,14,1.435,16,0.569,17,0.898,20,0.398,21,0.076,22,2.224,24,1.435,26,0.019,27,0.019,50,3.133,60,2.718,61,3.133,77,0.672,114,2.426,121,1.645,122,1.435,123,1.028,124,2.426,125,1.572,165,1.766,173,3.626,175,2.28,196,3.816,224,3.837,298,2.972,404,3.378,405,5.159,406,3.995,407,3.995,408,3.181,409,3.378,410,1.9,411,3.995,412,3.995,413,3.995]],["title/modules/MetaOptionsModule.html",[28,1.149,41,2.077]],["body/modules/MetaOptionsModule.html",[2,1.718,3,0.392,4,0.353,5,0.353,11,0.026,16,0.619,17,0.886,20,0.392,21,0.075,26,0.019,27,0.019,28,1.906,30,1.743,31,1.743,32,2.025,33,2.025,34,1.743,35,2.915,36,2.915,41,3.943,45,2.626,46,2.025,47,2.025,50,3.447,52,2.195,58,2.394,59,1.624,60,2.433,61,2.394,62,3.334,175,1.743,376,1.875,408,3.785,409,3.334,414,3.334,415,3.334,416,3.334,417,3.943,418,3.334,419,2.394,420,3.943]],["title/injectables/MetaOptionsService.html",[106,1.149,408,1.904]],["body/injectables/MetaOptionsService.html",[3,0.354,4,0.318,5,0.318,7,0.429,8,1.605,11,0.026,12,0.867,14,1.277,16,0.599,17,0.799,20,0.354,21,0.068,24,1.277,26,0.018,27,0.018,59,1.465,60,2.273,61,3.277,71,1.465,77,0.971,99,2.771,106,1.605,107,1.827,121,1.968,122,1.716,123,1.23,140,1.98,144,3.004,146,2.902,153,2.661,156,2.376,157,2.16,159,2.16,165,1.572,173,2.661,175,2.385,196,3.192,224,2.646,298,2.646,376,1.692,408,2.661,410,1.692,418,3.008,419,2.16,421,3.008,422,3.604,423,3.557,424,3.351,425,3.557,426,4.563,427,3.008,428,3.557,429,2.376,430,2.376,431,3.557,432,4.779,433,3.192,434,3.557,435,3.557]],["title/classes/PatchPostDto.html",[21,0.065,436,2.285]],["body/classes/PatchPostDto.html",[3,0.381,4,0.342,5,0.342,7,0.462,10,1.054,11,0.026,12,0.695,16,0.63,20,0.381,21,0.095,26,0.019,27,0.019,77,0.942,97,2.849,99,1.966,125,1.381,128,1.938,129,1.646,174,1.822,178,1.802,183,3.047,184,1.966,185,3.352,190,2.132,192,2.849,204,2.849,206,2.577,207,3.733,233,1.693,297,1.822,301,2.849,371,3.733,436,3.352,437,4.244,438,4.244,439,5.018,440,4.244,441,3.83,442,3.83,443,4.244,444,2.849,445,5.018,446,3.733,447,3.733,448,3.83,449,3.83,450,3.83,451,3.83,452,3.83,453,3.83,454,3.83]],["title/classes/PatchUserDto.html",[21,0.065,455,2.285]],["body/classes/PatchUserDto.html",[3,0.483,4,0.434,5,0.434,11,0.025,16,0.579,20,0.483,21,0.092,26,0.022,27,0.022,99,2.491,174,2.308,340,2.701,342,3.609,438,4.923,443,4.102,446,3.609,447,3.609,455,3.889,456,4.102,457,5.822,458,3.609]],["title/entities/Post.html",[100,1.314,125,0.941]],["body/entities/Post.html",[3,0.194,4,0.174,5,0.174,7,0.235,8,0.655,10,1.631,11,0.026,12,1.075,15,1.796,16,0.468,20,0.194,21,0.037,26,0.011,27,0.011,60,0.928,71,0.803,77,1.077,89,1.086,92,3.428,94,2.935,99,1.001,100,1.182,123,1.471,125,0.846,128,1.197,129,0.904,161,1.922,178,1.105,189,1.086,194,2.833,195,2.544,196,3.496,197,3.221,198,3.221,199,2.544,200,2.544,201,2.313,202,2.313,203,3.221,205,2.313,231,3.501,241,2.055,270,3.501,278,2.288,294,1.649,299,2.888,303,4.587,322,2.057,376,2.239,377,1.184,383,2.544,385,3.623,386,4.152,388,1.649,396,3.729,397,2.601,398,2.601,399,3.657,403,2.288,419,1.184,459,1.649,460,1.95,461,3.076,462,5.001,463,1.95,464,3.657,465,1.95,466,3.72,467,3.72,468,2.601,469,1.95,470,1.95,471,3.076,472,1.95,473,1.95,474,3.076,475,1.95,476,1.95,477,2.288,478,2.288,479,1.95,480,1.95,481,1.95,482,1.95,483,1.95,484,2.601,485,1.95,486,3.076,487,3.076,488,3.076,489,1.95,490,1.95,491,1.95,492,1.95,493,1.95,494,1.649,495,1.649,496,3.221,497,1.95,498,1.95,499,1.95,500,1.649,501,1.001,502,1.95,503,1.95,504,1.95,505,1.95,506,1.95,507,1.649,508,1.95,509,3.076,510,1.95,511,1.95,512,1.95,513,1.95]],["title/controllers/PostsController.html",[0,1.075,49,2.077]],["body/controllers/PostsController.html",[0,0.497,2,0.531,3,0.157,4,0.141,5,0.141,7,0.191,8,0.872,10,1.053,11,0.026,12,0.694,14,1.866,15,1.039,16,0.421,17,0.355,20,0.157,21,0.03,22,0.88,23,1.176,24,1.374,26,0.01,27,0.01,49,1.577,77,0.9,97,1.932,105,3.382,114,0.96,121,1.576,122,1.374,123,0.985,124,0.96,125,1.759,128,1.722,129,1.413,157,1.577,161,2.106,165,1.148,190,3.307,201,2.324,206,0.811,233,2.423,262,2.761,276,2.196,278,2.847,297,0.752,318,3.844,371,1.932,375,3.576,410,0.752,436,3.208,440,3.844,444,1.932,500,3.237,501,2.467,507,4.732,514,1.336,515,4.467,516,2.459,517,2.597,518,2.196,519,2.597,520,1.58,521,3.305,522,3.305,523,3.828,524,1.58,525,1.58,526,4.546,527,2.597,528,2.597,529,4.546,530,5.017,531,4.546,532,4.546,533,3.828,534,2.597,535,3.828,536,3.576,537,1.58,538,2.597,539,2.196,540,1.58,541,1.58,542,1.58,543,1.58,544,1.58,545,1.58,546,2.597,547,3.828,548,3.828,549,2.597,550,2.597,551,2.597,552,3.828,553,2.597,554,3.305,555,3.305,556,3.237,557,2.597,558,2.795,559,2.597,560,2.597,561,1.58,562,3.828,563,3.237,564,1.58,565,1.58,566,3.828,567,4.062,568,2.597,569,2.597,570,2.597,571,3.828,572,2.597,573,1.932,574,1.056,575,1.056,576,3.237,577,2.196,578,1.336,579,1.446,580,1.336,581,2.847,582,3.576,583,1.336,584,1.58,585,1.58,586,3.305,587,1.58,588,1.58,589,1.58,590,2.795,591,1.58,592,1.336,593,2.597,594,1.58,595,1.58,596,1.336,597,1.336,598,1.336,599,1.58,600,1.056,601,1.58,602,1.58,603,2.597,604,1.58]],["title/modules/PostsModule.html",[28,1.149,42,2.077]],["body/modules/PostsModule.html",[2,1.602,3,0.353,4,0.317,5,0.317,11,0.026,16,0.64,17,0.797,20,0.353,21,0.067,26,0.018,27,0.018,28,1.809,30,1.568,31,1.568,32,1.821,33,1.821,34,1.568,35,2.767,36,2.767,42,4.034,43,3.447,44,3.18,45,2.449,46,1.821,47,1.821,49,3.272,52,2.655,58,2.154,59,1.46,125,0.976,139,2.999,175,1.568,376,2.268,377,2.154,419,2.154,579,3.725,580,2.999,605,2.999,606,2.999,607,3.547,608,2.999,609,3.547,610,3.547,611,3.547,612,2.999,613,3.547,614,3.547]],["title/injectables/PostsService.html",[106,1.149,579,1.904]],["body/injectables/PostsService.html",[3,0.231,4,0.207,5,0.207,7,0.28,8,1.181,11,0.026,12,0.86,14,1.526,16,0.571,17,0.521,20,0.231,21,0.044,24,1.526,26,0.013,27,0.013,59,0.955,71,0.955,74,2.975,77,1.009,99,2.182,106,1.181,107,1.191,121,1.953,122,1.703,123,1.221,125,1.476,128,1.752,129,1.034,140,1.291,141,1.409,144,3.274,146,2.136,148,2.256,153,2.988,155,1.961,156,1.549,157,2.136,159,2.88,161,1.352,165,2.254,175,1.025,190,1.959,201,1.409,202,2.88,205,2.581,262,1.409,376,1.103,377,1.409,410,1.103,419,1.409,422,3.928,424,3.104,426,3.594,427,1.961,429,2.838,430,1.549,433,3.836,444,1.725,501,1.191,515,2.617,516,3.161,518,3.594,539,1.961,556,2.975,573,3.161,574,1.549,575,1.549,579,1.959,600,1.549,612,1.961,615,1.961,616,2.32,617,2.863,618,4.743,619,2.32,620,3.518,621,2.32,622,2.32,623,2.32,624,2.32,625,2.32,626,2.32,627,2.32,628,3.518,629,2.32,630,2.32,631,2.32,632,2.32,633,2.32,634,2.32,635,2.32,636,2.32,637,2.32,638,2.32,639,2.32,640,2.32,641,2.32,642,2.32,643,1.725,644,1.725,645,2.32,646,2.32,647,2.32,648,2.32,649,2.32]],["title/entities/Tag.html",[100,1.314,322,1.627]],["body/entities/Tag.html",[3,0.279,4,0.251,5,0.251,7,0.338,10,1.701,11,0.026,12,1.121,15,1.972,16,0.279,20,0.279,21,0.053,26,0.015,27,0.015,71,1.154,77,1.099,89,1.56,92,3.494,94,2.67,100,1.555,122,1.705,123,1.479,128,1.492,129,1.19,178,1.453,195,3.172,199,3.172,200,3.172,233,2.099,241,3.839,251,3.009,322,1.924,379,4.015,380,4.015,381,4.015,383,3.172,385,3.684,386,4.191,393,4.015,396,3.839,464,3.421,466,4.275,467,4.275,468,3.421,477,3.009,478,3.868,484,3.421,650,2.369,651,4.749,652,2.801,653,4.749,654,2.801,655,2.801,656,2.801,657,2.801,658,2.801,659,2.801,660,2.801,661,2.801]],["title/controllers/TagsController.html",[0,1.075,51,2.077]],["body/controllers/TagsController.html",[0,1.268,2,1.355,3,0.402,4,0.361,5,0.361,7,0.487,8,1.744,10,1.11,11,0.026,12,0.732,14,1.449,16,0.603,17,0.907,20,0.402,21,0.077,22,2.247,24,1.449,26,0.019,27,0.019,51,3.153,77,0.679,114,2.451,121,1.662,122,1.449,123,1.039,124,2.451,125,1.579,165,1.784,202,2.451,297,1.92,319,3.68,322,1.92,410,1.92,516,3.862,581,3.002,592,3.413,617,2.948,662,3.413,663,4.036,664,4.036,665,4.854,666,3.413,667,3.413,668,4.036,669,4.39,670,4.036]],["title/modules/TagsModule.html",[28,1.149,43,1.904]],["body/modules/TagsModule.html",[2,1.736,3,0.399,4,0.359,5,0.359,11,0.026,16,0.623,17,0.901,20,0.399,21,0.076,26,0.019,27,0.019,28,1.922,30,1.772,31,1.772,32,2.058,33,2.058,34,1.772,35,2.938,36,2.938,43,3.629,45,2.655,46,2.058,47,2.058,51,3.475,52,2.232,58,2.434,59,1.651,322,1.907,617,3.499,667,3.39,671,3.39,672,3.39,673,3.39,674,4.009,675,4.009,676,3.39,677,4.009]],["title/injectables/TagsService.html",[106,1.149,617,1.756]],["body/injectables/TagsService.html",[3,0.259,4,0.233,5,0.233,7,0.315,8,1.289,11,0.026,12,0.972,14,1.805,16,0.533,17,0.586,20,0.259,21,0.05,24,1.805,26,0.019,27,0.014,59,1.073,71,1.073,77,1.038,106,1.289,107,1.339,121,2.07,122,1.924,123,1.294,128,1.579,129,1.129,144,3.525,146,2.331,153,3.12,159,1.583,162,1.939,165,2.368,202,3.052,319,2.331,322,2.666,410,1.24,422,4.229,424,2.798,429,3.357,430,1.741,433,3.743,501,1.971,574,1.741,575,1.741,600,2.564,617,1.971,643,1.939,644,1.939,665,3.853,666,2.204,669,3.246,676,2.204,678,2.204,679,4.556,680,5.026,681,4.556,682,2.607,683,2.607,684,3.839,685,2.607,686,2.607,687,2.607,688,2.607,689,2.607,690,2.607,691,2.607,692,2.607,693,2.607,694,3.839,695,2.607,696,2.607,697,3.839,698,2.204,699,2.204,700,2.607,701,2.607,702,3.839,703,2.607,704,2.607]],["title/entities/User.html",[100,1.314,161,1.314]],["body/entities/User.html",[3,0.299,4,0.269,5,0.269,7,0.363,10,1.619,11,0.026,12,1.067,15,1.942,16,0.423,20,0.299,21,0.057,26,0.016,27,0.016,71,1.237,77,1.072,84,2.998,89,1.673,92,2.989,94,3.021,100,1.635,101,2.235,123,1.095,125,1.477,128,1.551,129,1.251,161,1.635,178,1.527,268,2.235,343,3.673,344,3.673,345,4.175,358,2.235,383,3.298,385,3.586,386,4.127,395,2.541,396,3.785,403,3.164,466,4.597,467,4.597,477,3.164,478,3.164,515,4.215,705,2.541,706,3.005,707,5.369,708,3.005,709,3.005,710,3.005,711,3.597,712,3.005,713,3.005,714,4.254,715,3.005,716,4.254,717,4.254,718,3.005,719,3.005,720,3.005]],["title/controllers/UserController.html",[0,1.075,721,2.285]],["body/controllers/UserController.html",[0,0.653,2,0.698,3,0.207,4,0.186,5,0.186,7,0.251,8,1.086,10,1.092,11,0.026,12,0.72,14,1.608,16,0.511,17,0.467,20,0.207,21,0.04,22,1.157,23,1.546,24,1.991,26,0.017,27,0.012,77,0.958,94,2.299,101,2.405,114,1.262,121,1.634,122,1.742,123,1.322,124,1.262,125,1.092,128,1.016,129,1.816,144,3.171,148,1.888,161,1.243,165,1.429,189,1.8,201,1.262,206,2.299,208,3.356,209,3.786,233,2.451,236,3.888,297,1.538,299,2.991,313,2.952,340,3.087,358,1.546,367,2.719,369,3.96,410,0.989,455,3.703,458,2.405,501,1.66,536,1.758,563,1.758,567,3.786,573,1.546,576,2.734,577,3.356,578,3.356,581,2.405,582,2.734,583,1.758,590,1.758,597,1.758,598,2.734,721,2.16,722,1.758,723,3.234,724,3.969,725,3.234,726,2.079,727,2.079,728,2.079,729,5.014,730,2.079,731,2.079,732,3.234,733,2.079,734,3.234,735,2.079,736,3.234,737,3.234,738,2.079,739,3.969,740,2.079,741,2.079,742,2.079,743,2.079,744,2.079,745,2.079,746,2.079,747,1.758,748,1.758,749,1.758,750,3.969,751,3.234,752,2.079,753,2.079,754,1.758,755,2.079,756,3.234,757,2.079,758,2.079,759,2.079,760,2.079,761,3.969,762,2.079,763,3.969,764,2.079,765,2.079,766,2.079,767,2.079,768,1.758,769,2.079,770,2.079,771,2.079,772,2.079,773,2.079,774,2.079,775,2.079,776,2.734,777,2.079,778,1.758,779,2.079,780,2.734,781,2.079,782,2.079]],["title/modules/UserModule.html",[28,1.149,44,1.756]],["body/modules/UserModule.html",[2,1.661,3,0.373,4,0.335,5,0.335,11,0.026,16,0.626,17,0.842,20,0.373,21,0.071,26,0.018,27,0.018,28,1.86,30,1.656,31,1.656,32,1.923,33,1.923,34,1.656,35,2.843,36,2.843,40,2.754,44,3.293,45,2.54,46,1.923,47,1.923,52,2.086,58,2.275,59,1.542,100,1.439,137,3.304,140,2.754,141,3.363,142,2.502,148,3.21,161,1.439,424,2.086,721,3.699,749,3.168,783,3.168,784,3.168,785,3.168,786,3.746,787,3.746,788,3.746,789,3.168,790,3.746]],["title/injectables/UserService.html",[106,1.149,148,1.627]],["body/injectables/UserService.html",[3,0.227,4,0.204,5,0.204,7,0.275,8,1.166,11,0.026,12,0.853,14,1.51,16,0.551,17,0.512,20,0.227,21,0.043,24,1.51,26,0.013,27,0.013,59,0.939,71,0.939,75,1.696,77,1.004,99,1.171,106,1.166,107,1.171,121,1.936,122,1.688,123,1.21,126,2.846,128,1.795,129,1.236,137,1.523,140,2.341,141,1.384,142,1.523,144,3.258,146,2.108,148,1.652,153,2.968,156,2.319,157,2.108,158,1.928,159,2.108,160,1.928,161,2.249,162,1.696,165,2.236,236,3.14,313,1.696,340,1.933,343,3.128,344,2.583,367,2.108,369,2.319,410,1.084,422,3.56,424,2.817,429,1.523,430,1.523,433,3.14,458,1.696,501,2.414,558,2.936,574,1.523,575,1.523,596,1.928,600,2.809,643,2.583,644,1.696,698,1.928,699,1.928,729,3.975,747,1.928,748,1.928,768,1.928,776,3.556,778,3.556,780,3.556,789,1.928,791,1.928,792,4.205,793,2.28,794,4.205,795,2.28,796,2.28,797,2.28,798,2.28,799,2.28,800,2.28,801,2.28,802,2.28,803,2.28,804,3.472,805,2.28,806,2.28,807,2.28,808,2.28,809,2.28,810,3.472,811,2.28,812,2.28,813,4.205,814,2.28,815,2.28,816,2.28,817,3.472,818,2.28,819,2.28,820,2.28,821,3.472,822,2.28,823,2.28,824,2.28,825,2.28]],["title/coverage.html",[826,3.462]],["body/coverage.html",[0,1.853,1,2.022,5,0.271,6,2.56,11,0.026,18,1.686,21,0.115,26,0.016,27,0.016,34,1.338,49,1.839,50,1.839,51,1.839,60,1.44,61,2.597,77,0.719,100,2.07,105,2.252,106,1.981,108,2.56,112,2.022,113,3.181,118,2.252,125,0.833,126,1.555,143,2.56,148,1.44,161,1.163,173,1.686,175,2.381,176,2.252,177,2.56,190,1.686,191,2.56,192,3.181,301,2.252,319,1.839,320,2.56,321,2.56,322,1.44,340,1.686,341,2.56,342,3.181,367,1.839,368,2.56,369,2.022,370,2.56,376,1.44,377,1.839,378,2.56,404,2.56,408,1.686,421,2.56,436,2.022,437,2.56,455,2.022,456,2.56,459,2.56,496,2.56,501,1.555,514,2.56,579,1.686,615,2.56,617,1.555,650,2.56,662,2.56,678,2.56,705,2.56,711,2.56,721,2.022,722,2.56,791,2.56,826,2.252,827,3.028,828,3.028,829,6.876,830,6.191,831,3.028,832,6.062,833,4.276,834,2.56,835,3.028,836,3.028,837,3.028,838,4.958,839,4.276,840,3.028]],["title/dependencies.html",[31,1.817,841,2.422]],["body/dependencies.html",[11,0.026,17,1.016,21,0.106,26,0.021,27,0.021,31,1.999,59,1.862,71,1.862,184,2.322,295,3.364,297,2.151,446,3.364,447,3.364,842,4.522,843,4.522,844,6.049,845,4.522,846,4.522,847,4.522,848,4.522,849,4.522,850,4.522,851,4.522,852,4.522,853,4.522,854,4.522,855,4.522,856,4.522,857,4.522,858,4.522,859,4.522,860,4.522]],["title/miscellaneous/enumerations.html",[861,1.362,862,3.475]],["body/miscellaneous/enumerations.html",[7,0.552,11,0.025,26,0.021,27,0.021,125,1.546,189,3.773,231,4.179,236,3.752,237,4.75,238,4.75,242,4.75,270,4.179,271,4.75,272,4.75,273,4.75,861,2.176,862,3.868,863,5.618,864,4.574]],["title/miscellaneous/functions.html",[861,1.362,865,3.475]],["body/miscellaneous/functions.html",[7,0.634,11,0.023,26,0.023,27,0.023,34,2.851,834,4.444,861,2.5,865,4.444,866,5.255]],["title/index.html",[7,0.346,867,2.864,868,2.864]],["body/index.html",[4,0.34,11,0.025,26,0.019,27,0.019,69,3.218,88,3.218,95,3.218,205,2.311,206,2.865,233,1.682,331,3.218,424,2.119,494,3.218,495,3.218,826,2.831,869,3.805,870,3.805,871,4.998,872,3.805,873,3.805,874,3.805,875,3.805,876,3.805,877,5.58,878,3.805,879,3.805,880,6.438,881,3.805,882,3.805,883,6.317,884,3.805,885,3.805,886,4.998,887,3.805,888,3.805,889,3.805,890,4.998,891,4.998,892,3.805,893,3.805,894,3.805,895,4.998,896,4.998,897,3.805,898,3.805,899,3.805,900,3.805,901,3.805,902,3.218,903,3.805,904,3.805,905,3.805,906,3.805,907,3.805,908,3.805,909,3.805,910,3.805,911,3.805,912,3.805,913,3.805,914,3.805,915,3.805,916,3.805,917,3.218]],["title/modules.html",[30,2.057]],["body/modules.html",[11,0.021,26,0.021,27,0.021,29,3.189,30,2.11,40,2.658,41,2.899,42,2.899,43,2.658,44,2.452,902,5.659,918,6.693,919,6.693,920,6.693]],["title/overview.html",[921,3.935]],["body/overview.html",[2,1.1,11,0.025,18,2.879,26,0.017,27,0.017,28,1.1,29,4.471,30,1.448,31,1.448,32,1.682,33,1.682,34,1.448,35,1.682,36,1.682,37,2.77,38,2.77,39,2.77,40,3.366,41,3.672,42,3.938,43,3.45,44,3.182,45,2.32,46,1.682,47,1.682,89,1.824,107,1.682,126,3.182,133,2.77,134,2.77,135,2.77,148,2.947,174,1.558,314,2.77,408,3.45,414,2.77,415,2.77,416,2.77,579,3.45,605,2.77,606,2.77,608,2.77,617,3.182,671,2.77,672,2.77,673,2.77,783,2.77,784,2.77,785,2.77,921,2.77,922,5.172,923,3.276]],["title/properties.html",[178,1.476,841,2.422]],["body/properties.html",[11,0.025,26,0.022,27,0.022,178,1.862,205,3.15,233,2.293,754,4.386,917,4.386,924,5.187,925,5.187]],["title/miscellaneous/typealiases.html",[861,1.362,926,4.11]],["body/miscellaneous/typealiases.html",[7,0.629,11,0.023,26,0.023,27,0.023,77,1.022,113,3.875,118,4.517,153,2.9,861,2.478,927,5.209,928,5.209]],["title/routes.html",[929,3.935]],["body/routes.html",[11,0.023,26,0.023,27,0.023,929,4.584]],["title/miscellaneous/variables.html",[861,1.362,930,3.475]],["body/miscellaneous/variables.html",[7,0.626,11,0.024,26,0.022,27,0.022,48,4.386,189,2.888,299,3.464,861,2.467,930,4.386,931,6.057,932,5.187,933,5.187]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":924,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":832,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["1.1.26",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":761,"title":{},"body":{"controllers/UserController.html":{}}}],["10.0.0",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":468,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":735,"title":{},"body":{"controllers/UserController.html":{}}}],["123",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["1234",{"_index":766,"title":{},"body":{"controllers/UserController.html":{}}}],["16t12:00:00+0000",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":768,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["2.0.6",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":732,"title":{},"body":{"controllers/UserController.html":{}}}],["2024",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["255",{"_index":477,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["3/5",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["512",{"_index":484,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["5432",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":922,"title":{},"body":{"overview.html":{}}}],["60",{"_index":711,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["7",{"_index":923,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":707,"title":{},"body":{"entities/User.html":{}}}],["actual",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["additional",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{}}}],["adds",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alias",{"_index":831,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":927,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["already",{"_index":698,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["amazing",{"_index":903,"title":{},"body":{"index.html":{}}}],["another",{"_index":630,"title":{},"body":{"injectables/PostsService.html":{}}}],["api",{"_index":737,"title":{},"body":{"controllers/UserController.html":{}}}],["apioperation",{"_index":581,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":521,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":185,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({})@isjson()@isoptional",{"_index":334,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiquery",{"_index":750,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":582,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["apiresponse({status",{"_index":543,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags",{"_index":751,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":753,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app.controller",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":876,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":717,"title":{},"body":{"entities/User.html":{}}}],["array",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["associated",{"_index":549,"title":{},"body":{"controllers/PostsController.html":{}}}],["async",{"_index":422,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":112,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":816,"title":{},"body":{"injectables/UserService.html":{}}}],["authentication",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":126,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":433,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":904,"title":{},"body":{"index.html":{}}}],["being",{"_index":551,"title":{},"body":{"controllers/PostsController.html":{}}}],["bi",{"_index":401,"title":{},"body":{"entities/MetaOption.html":{}}}],["blog",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["body",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":920,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":918,"title":{},"body":{"modules.html":{}}}],["building",{"_index":872,"title":{},"body":{"index.html":{}}}],["calls",{"_index":553,"title":{},"body":{"controllers/PostsController.html":{}}}],["cascade",{"_index":399,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["cascade'})@joincolumn",{"_index":391,"title":{},"body":{"entities/MetaOption.html":{}}}],["cases",{"_index":762,"title":{},"body":{"controllers/UserController.html":{}}}],["character",{"_index":361,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["check",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["circular",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["class",{"_index":21,"title":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":174,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":414,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_exports",{"_index":415,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":416,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":605,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":606,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":607,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":608,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":671,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":672,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":673,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":783,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":785,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":784,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":396,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":385,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["compodoc/compodoc",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["composed",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["confirmation",{"_index":531,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log",{"_index":596,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["console.log(`limit",{"_index":775,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(`logging",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`user",{"_index":815,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(getuserparamdto",{"_index":774,"title":{},"body":{"controllers/UserController.html":{}}}],["const",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":793,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(metaoptionsrepository",{"_index":423,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["constructor(tagsrepository",{"_index":682,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userservice",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(userservices",{"_index":616,"title":{},"body":{"injectables/PostsService.html":{}}}],["containing",{"_index":533,"title":{},"body":{"controllers/PostsController.html":{}}}],["content",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{}}}],["context",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":411,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":584,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":668,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":752,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convert",{"_index":760,"title":{},"body":{"controllers/UserController.html":{}}}],["correct",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["coverage",{"_index":826,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["create(undefined",{"_index":427,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["created",{"_index":523,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdatecolumn",{"_index":381,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createddate",{"_index":379,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdmetaoption",{"_index":432,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createdpost",{"_index":593,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdtags",{"_index":669,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createmetaoptions",{"_index":405,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(@body",{"_index":412,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(createmetaoptionsdto",{"_index":406,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptionsdto",{"_index":173,"title":{"classes/CreateMetaOptionsDto.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createpost",{"_index":516,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["createpost(@body",{"_index":592,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["createpost(createpostdto",{"_index":520,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createtag",{"_index":663,"title":{},"body":{"controllers/TagsController.html":{}}}],["createpost.authorid",{"_index":635,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost.tags",{"_index":637,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":190,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdtowithmeta",{"_index":513,"title":{},"body":{"entities/Post.html":{}}}],["createpostdto})@patch",{"_index":564,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto})@post",{"_index":524,"title":{},"body":{"controllers/PostsController.html":{}}}],["creates",{"_index":500,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{}}}],["createtag",{"_index":665,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtag(undefined",{"_index":685,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtagdto",{"_index":319,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":780,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(undefined",{"_index":796,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":340,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto})@apiquery({name",{"_index":733,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers",{"_index":723,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(@body",{"_index":779,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(createuserdto",{"_index":726,"title":{},"body":{"controllers/UserController.html":{}}}],["creating",{"_index":400,"title":{},"body":{"entities/MetaOption.html":{}}}],["creation",{"_index":527,"title":{},"body":{"controllers/PostsController.html":{}}}],["custom",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["data",{"_index":507,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{}}}],["database",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["date",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":745,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":773,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(10",{"_index":771,"title":{},"body":{"controllers/UserController.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":573,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["delete(undefined",{"_index":622,"title":{},"body":{"injectables/PostsService.html":{}}}],["deleted",{"_index":539,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletedatecolumn",{"_index":653,"title":{},"body":{"entities/Tag.html":{}}}],["deleteddate",{"_index":651,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":517,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":599,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":537,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleterequest",{"_index":603,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletes",{"_index":538,"title":{},"body":{"controllers/PostsController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["description",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":534,"title":{},"body":{"controllers/PostsController.html":{}}}],["development",{"_index":882,"title":{},"body":{"index.html":{}}}],["directional",{"_index":402,"title":{},"body":{"entities/MetaOption.html":{}}}],["dist/**/*.entity.js",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["doe",{"_index":821,"title":{},"body":{"injectables/UserService.html":{}}}],["draft",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":410,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/get",{"_index":747,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/patch",{"_index":583,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["e.g",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["e2e",{"_index":892,"title":{},"body":{"index.html":{}}}],["each",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":462,"title":{},"body":{"entities/Post.html":{}}}],["eagerly",{"_index":510,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":873,"title":{},"body":{"index.html":{}}}],["eight",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["enables",{"_index":506,"title":{},"body":{"entities/Post.html":{}}}],["endpoint",{"_index":598,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["entities",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":100,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["entity/meta",{"_index":418,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["entity/post.entity",{"_index":612,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entity/tags.entity",{"_index":676,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["entity/user.entity",{"_index":789,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["enum",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":862,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posts.enums",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["exception",{"_index":808,"title":{},"body":{"injectables/UserService.html":{}}}],["excerpt",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["existing",{"_index":566,"title":{},"body":{"controllers/PostsController.html":{}}}],["existingtags",{"_index":694,"title":{},"body":{"injectables/TagsService.html":{}}}],["existinguser",{"_index":804,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["expected",{"_index":454,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exporting",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":438,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["false})@isoptional()@isarray()@isint({each",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featured",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["featuredimageurl",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["fetch",{"_index":548,"title":{},"body":{"controllers/PostsController.html":{}}}],["few",{"_index":505,"title":{},"body":{"entities/Post.html":{}}}],["fields",{"_index":572,"title":{},"body":{"controllers/PostsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["final",{"_index":757,"title":{},"body":{"controllers/UserController.html":{}}}],["find",{"_index":819,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":776,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(undefined",{"_index":798,"title":{},"body":{"injectables/UserService.html":{}}}],["findmultipletags",{"_index":679,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(undefined",{"_index":687,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":792,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(undefined",{"_index":800,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/User.html":{}}}],["firstname",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["footerenabled",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["format",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["forwardref",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["found",{"_index":643,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":871,"title":{},"body":{"index.html":{}}}],["function",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["functions",{"_index":865,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":769,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":730,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':userid",{"_index":587,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts",{"_index":518,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallposts(@param('userid",{"_index":588,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts(undefined",{"_index":624,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(userid",{"_index":542,"title":{},"body":{"controllers/PostsController.html":{}}}],["getalltags",{"_index":680,"title":{},"body":{"injectables/TagsService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gettagbyid",{"_index":681,"title":{},"body":{"injectables/TagsService.html":{}}}],["gettagbyid(undefined",{"_index":690,"title":{},"body":{"injectables/TagsService.html":{}}}],["getting",{"_index":867,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":739,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers",{"_index":724,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":728,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersparamdto",{"_index":367,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["given",{"_index":550,"title":{},"body":{"controllers/PostsController.html":{}}}],["grow",{"_index":899,"title":{},"body":{"index.html":{}}}],["handle",{"_index":807,"title":{},"body":{"injectables/UserService.html":{}}}],["handles",{"_index":526,"title":{},"body":{"controllers/PostsController.html":{}}}],["headers",{"_index":743,"title":{},"body":{"controllers/UserController.html":{}}}],["hello",{"_index":110,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["here",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["host",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["httpexception",{"_index":574,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpexception('email",{"_index":809,"title":{},"body":{"injectables/UserService.html":{}}}],["httpexception('no",{"_index":601,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpexception('post",{"_index":642,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('tag",{"_index":697,"title":{},"body":{"injectables/TagsService.html":{}}}],["httpexception('user",{"_index":817,"title":{},"body":{"injectables/UserService.html":{}}}],["https://example.com/image.jpg",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["https://nestjs.com",{"_index":914,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":575,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":602,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.conflict",{"_index":699,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.created",{"_index":591,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.forbidden",{"_index":818,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":644,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.ok",{"_index":586,"title":{},"body":{"controllers/PostsController.html":{}}}],["hyphens",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["id",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":827,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["in(tags",{"_index":704,"title":{},"body":{"injectables/TagsService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":535,"title":{},"body":{"controllers/PostsController.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":106,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":107,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["injection",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injections",{"_index":628,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository",{"_index":430,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoptionrepository",{"_index":633,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(metaoptionsrepository",{"_index":431,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["injectrepository(postrepository",{"_index":632,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tagrepository",{"_index":693,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":803,"title":{},"body":{"injectables/UserService.html":{}}}],["installation",{"_index":879,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":881,"title":{},"body":{"index.html":{}}}],["instead",{"_index":511,"title":{},"body":{"entities/Post.html":{}}}],["integer",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["invalid",{"_index":329,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["ip",{"_index":744,"title":{},"body":{"controllers/UserController.html":{}}}],["isarray",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":813,"title":{},"body":{"injectables/UserService.html":{}}}],["isauthenticated",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":363,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(['post",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypes",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isiso8601",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":182,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":183,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":180,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["isnumber",{"_index":445,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":186,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["item",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jane",{"_index":823,"title":{},"body":{"injectables/UserService.html":{}}}],["jane@doe.com",{"_index":824,"title":{},"body":{"injectables/UserService.html":{}}}],["john",{"_index":820,"title":{},"body":{"injectables/UserService.html":{}}}],["john@doe.com",{"_index":822,"title":{},"body":{"injectables/UserService.html":{}}}],["join",{"_index":495,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["joincolumn",{"_index":397,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":486,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["kamil",{"_index":911,"title":{},"body":{"index.html":{}}}],["key",{"_index":188,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["language",{"_index":325,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["lastname",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lazy",{"_index":512,"title":{},"body":{"entities/Post.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":467,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":917,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":896,"title":{},"body":{"index.html":{}}}],["likes",{"_index":453,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["limit",{"_index":729,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["literal",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["loading",{"_index":509,"title":{},"body":{"entities/Post.html":{}}}],["localhost",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginbody",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginbody",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["logs",{"_index":529,"title":{},"body":{"controllers/PostsController.html":{}}}],["lowercase",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["m2m",{"_index":498,"title":{},"body":{"entities/Post.html":{}}}],["main",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["making",{"_index":629,"title":{},"body":{"injectables/PostsService.html":{}}}],["manytomany",{"_index":487,"title":{},"body":{"entities/Post.html":{}}}],["manytomany(undefined",{"_index":481,"title":{},"body":{"entities/Post.html":{}}}],["manytoone",{"_index":488,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":460,"title":{},"body":{"entities/Post.html":{}}}],["matches",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":366,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matches(/^https?:\\/\\/[^\\s",{"_index":339,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(255",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":364,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["meta",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":376,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":626,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptions",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["metaoptions.post",{"_index":471,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":50,"title":{"controllers/MetaOptionsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":41,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":426,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":408,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":179,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["migrations",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":338,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":187,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":365,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":861,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":895,"title":{},"body":{"index.html":{}}}],["mode",{"_index":886,"title":{},"body":{"index.html":{}}}],["modern",{"_index":323,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":908,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":912,"title":{},"body":{"index.html":{}}}],["name",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["need",{"_index":755,"title":{},"body":{"controllers/UserController.html":{}}}],["nest",{"_index":877,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":916,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":446,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":501,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newuser",{"_index":810,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":870,"title":{},"body":{"index.html":{}}}],["null",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":386,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number'})@isnumber()@isnotempty",{"_index":441,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["number})@isoptional()@isint()@type(undefined",{"_index":372,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["object",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["objects",{"_index":560,"title":{},"body":{"controllers/PostsController.html":{}}}],["ondelete",{"_index":390,"title":{},"body":{"entities/MetaOption.html":{}}}],["one",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["onetomany",{"_index":716,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":713,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":398,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":388,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["oojoseph",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["open",{"_index":897,"title":{},"body":{"index.html":{}}}],["option.entity",{"_index":419,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":378,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":384,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":387,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":382,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":394,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:33",{"_index":392,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["options",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.controller",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":404,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:10",{"_index":407,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":177,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:16",{"_index":181,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["options.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":417,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":409,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":421,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:15",{"_index":428,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":425,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":176,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["options/entity/meta",{"_index":377,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/meta",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":921,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owning",{"_index":493,"title":{},"body":{"entities/Post.html":{}}}],["package",{"_index":841,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":763,"title":{},"body":{"controllers/UserController.html":{}}}],["pagination'})@apiresponse({status",{"_index":731,"title":{},"body":{"controllers/UserController.html":{}}}],["param",{"_index":576,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["param.dto",{"_index":748,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param.dto.ts",{"_index":370,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:16",{"_index":373,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parama",{"_index":759,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parseintpipe",{"_index":577,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["partial",{"_index":569,"title":{},"body":{"controllers/PostsController.html":{}}}],["partialtype",{"_index":443,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":439,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":457,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passing",{"_index":508,"title":{},"body":{"entities/Post.html":{}}}],["password",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":567,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["patchpostdto",{"_index":436,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":725,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(@body",{"_index":782,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(patchuserdto",{"_index":740,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuserdto",{"_index":455,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["person",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":906,"title":{},"body":{"index.html":{}}}],["port",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":736,"title":{},"body":{"controllers/UserController.html":{}}}],["possible",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":125,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":522,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@delete",{"_index":540,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('login",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.dto",{"_index":444,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:103",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:113",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:124",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:146",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:15",{"_index":442,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:156",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:34",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:46",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:60",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:71",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:80",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:92",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.metaoptions",{"_index":389,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.metaoptions.id",{"_index":647,"title":{},"body":{"injectables/PostsService.html":{}}}],["postentity",{"_index":611,"title":{},"body":{"modules/PostsModule.html":{}}}],["postgres",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["postrepository",{"_index":618,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":515,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{}}}],["posts.author",{"_index":714,"title":{},"body":{"entities/User.html":{}}}],["posts.controller",{"_index":610,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":580,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.controller",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":49,"title":{"controllers/PostsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":585,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":42,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":579,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":492,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["posttypes",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttypes.post",{"_index":491,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":383,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processes",{"_index":568,"title":{},"body":{"controllers/PostsController.html":{}}}],["processing",{"_index":528,"title":{},"body":{"controllers/PostsController.html":{}}}],["production",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["programming",{"_index":324,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["progressive",{"_index":869,"title":{},"body":{"index.html":{}}}],["project",{"_index":898,"title":{},"body":{"index.html":{}}}],["promise",{"_index":558,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":178,"title":{"properties.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provided",{"_index":375,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["published",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["put",{"_index":742,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":578,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["query('limit",{"_index":770,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":772,"title":{},"body":{"controllers/UserController.html":{}}}],["r\\n",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["range",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":907,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["received",{"_index":530,"title":{},"body":{"controllers/PostsController.html":{}}}],["references",{"_index":720,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["relationship",{"_index":403,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["relationships",{"_index":499,"title":{},"body":{"entities/Post.html":{}}}],["remove",{"_index":502,"title":{},"body":{"entities/Post.html":{}}}],["replace",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["repositories",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{}}}],["repository",{"_index":424,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["representing",{"_index":554,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":536,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["requests",{"_index":547,"title":{},"body":{"controllers/PostsController.html":{}}}],["require",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["required",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":559,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":552,"title":{},"body":{"controllers/PostsController.html":{}}}],["retrieves",{"_index":546,"title":{},"body":{"controllers/PostsController.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returned",{"_index":734,"title":{},"body":{"controllers/UserController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["review",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["routes",{"_index":929,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":883,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":874,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["second",{"_index":719,"title":{},"body":{"entities/User.html":{}}}],["sent",{"_index":597,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["serialize",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":875,"title":{},"body":{"index.html":{}}}],["service",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["set",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["setting",{"_index":503,"title":{},"body":{"entities/Post.html":{}}}],["setup",{"_index":718,"title":{},"body":{"entities/User.html":{}}}],["shows",{"_index":449,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["side",{"_index":494,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["sidebarenabled",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["single",{"_index":631,"title":{},"body":{"injectables/PostsService.html":{}}}],["slug",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["special",{"_index":360,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":371,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["specified",{"_index":555,"title":{},"body":{"controllers/PostsController.html":{}}}],["specify",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["sponsors",{"_index":901,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.controller.ts",{"_index":928,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":866,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posts.enums.ts",{"_index":863,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":108,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":109,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":788,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":802,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:5",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":834,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":175,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":437,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity",{"_index":395,"title":{},"body":{"entities/MetaOption.html":{},"entities/User.html":{}}}],["src/posts/entity/post.entity.ts",{"_index":459,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity.ts:19",{"_index":470,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:26",{"_index":485,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:34",{"_index":473,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:42",{"_index":479,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:50",{"_index":480,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:56",{"_index":465,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:62",{"_index":476,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:69",{"_index":469,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:75",{"_index":475,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:81",{"_index":483,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:89",{"_index":472,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:96",{"_index":463,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/enums/posts.enums.ts",{"_index":864,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":514,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:100",{"_index":541,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:40",{"_index":545,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:62",{"_index":525,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:86",{"_index":565,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":609,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":615,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:11",{"_index":619,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:32",{"_index":621,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:52",{"_index":625,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:58",{"_index":623,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":320,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity",{"_index":490,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/entity/tags.entity.ts",{"_index":650,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity.ts:13",{"_index":657,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:21",{"_index":658,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:29",{"_index":660,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:35",{"_index":655,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:41",{"_index":659,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:48",{"_index":656,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:51",{"_index":652,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:54",{"_index":661,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:57",{"_index":654,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":662,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:11",{"_index":664,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":613,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":674,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/tags/tags.service",{"_index":627,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/tags.service.ts",{"_index":678,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/tags.service.ts:14",{"_index":686,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:30",{"_index":689,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:36",{"_index":691,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:46",{"_index":688,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:8",{"_index":683,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/user/dtos/create",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/get",{"_index":368,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/user/dtos/patch",{"_index":456,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/user/entity/user.entity",{"_index":489,"title":{},"body":{"entities/Post.html":{}}}],["src/user/entity/user.entity.ts",{"_index":705,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entity/user.entity.ts:14",{"_index":708,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:21",{"_index":710,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:29",{"_index":706,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:36",{"_index":712,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:39",{"_index":715,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:7",{"_index":709,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":722,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:63",{"_index":738,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:81",{"_index":727,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:87",{"_index":741,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/user/user.module.ts",{"_index":786,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/user/user.service.ts",{"_index":791,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:16",{"_index":795,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:27",{"_index":797,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:49",{"_index":799,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:77",{"_index":801,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":884,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":887,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":888,"title":{},"body":{"index.html":{}}}],["started",{"_index":868,"title":{"index.html":{}},"body":{}}],["starter",{"_index":878,"title":{},"body":{"index.html":{}}}],["statements",{"_index":828,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["stay",{"_index":909,"title":{},"body":{"index.html":{}}}],["still",{"_index":451,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["story",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["string'})@isiso8601()@isnotempty",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isnotempty()@isstring()@minlength(3)@maxlength(255",{"_index":332,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isjson",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isstring",{"_index":326,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024)@matches(/^https?:\\/\\/[^\\s",{"_index":328,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isenum(posttypes)@isnotempty",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@isenum(poststatus",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(255)@matches(/^[a",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(512)@matches(/^[a",{"_index":336,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isoptional",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["success",{"_index":649,"title":{},"body":{"injectables/PostsService.html":{}}}],["successfully",{"_index":648,"title":{},"body":{"injectables/PostsService.html":{}}}],["summary",{"_index":590,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":902,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":919,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":448,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["synchronize",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":496,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":840,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":322,"title":{"entities/Tag.html":{}},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":666,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":321,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:23",{"_index":333,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:37",{"_index":337,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:46",{"_index":327,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:51",{"_index":335,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:65",{"_index":330,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.name",{"_index":696,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagrepository",{"_index":692,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":675,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.service",{"_index":667,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["tags/tags.controller",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":51,"title":{"controllers/TagsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":43,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":684,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":617,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":891,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":894,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":893,"title":{},"body":{"index.html":{}}}],["tests",{"_index":890,"title":{},"body":{"index.html":{}}}],["text",{"_index":464,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":900,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauthenticated",{"_index":814,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.login(loginbody",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.metaoptionsrepository.create(metaoptions",{"_index":434,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.delete",{"_index":646,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.save(createdmetaoption",{"_index":435,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create",{"_index":413,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postrepository.create",{"_index":638,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.delete",{"_index":645,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.find",{"_index":640,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findoneby",{"_index":641,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(post",{"_index":639,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postservice.create",{"_index":594,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.delete",{"_index":604,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.getallposts",{"_index":589,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.tagsrepository.create(tag",{"_index":700,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":702,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":695,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findoneby",{"_index":703,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(createdtags",{"_index":701,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtag",{"_index":670,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags",{"_index":636,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.userrepository.create(user",{"_index":811,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":805,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":825,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":812,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser",{"_index":781,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":777,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyid",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservices.findonebyid",{"_index":634,"title":{},"body":{"injectables/PostsService.html":{}}}],["through",{"_index":570,"title":{},"body":{"controllers/PostsController.html":{}}}],["throw",{"_index":600,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["time",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["timestamp",{"_index":474,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":910,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":532,"title":{},"body":{"controllers/PostsController.html":{}}}],["transform",{"_index":374,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["transformer",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@isint()@isnotempty",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@jointable",{"_index":482,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":915,"title":{},"body":{"index.html":{}}}],["type",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":926,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm.forfeature",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":420,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([postentity",{"_index":614,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":677,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":790,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":447,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":331,"title":{},"body":{"classes/CreateTagDto.html":{},"index.html":{}}}],["undefined",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["undefined})@get(':userid",{"_index":544,"title":{},"body":{"controllers/PostsController.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":478,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":889,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":429,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":925,"title":{},"body":{"properties.html":{}}}],["up",{"_index":450,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["update",{"_index":440,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated",{"_index":563,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["updatedatecolumn",{"_index":393,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updateddate",{"_index":380,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":519,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":595,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(updatepostdto",{"_index":561,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepostdto",{"_index":571,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":562,"title":{},"body":{"controllers/PostsController.html":{}}}],["url",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["use",{"_index":756,"title":{},"body":{"controllers/UserController.html":{}}}],["used",{"_index":497,"title":{},"body":{"entities/Post.html":{}}}],["usefactory",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":161,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":787,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":458,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":362,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":806,"title":{},"body":{"injectables/UserService.html":{}}}],["user.firstname",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.posts",{"_index":461,"title":{},"body":{"entities/Post.html":{}}}],["user.service",{"_index":749,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":721,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":556,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["usermodule",{"_index":44,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userparamsdto",{"_index":778,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":794,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":369,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["users/1223",{"_index":764,"title":{},"body":{"controllers/UserController.html":{}}}],["users/id?limit=10&page=1",{"_index":758,"title":{},"body":{"controllers/UserController.html":{}}}],["users?limit=10&page=2",{"_index":767,"title":{},"body":{"controllers/UserController.html":{}}}],["userservice",{"_index":148,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservices",{"_index":620,"title":{},"body":{"injectables/PostsService.html":{}}}],["using",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["validate",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":746,"title":{},"body":{"controllers/UserController.html":{}}}],["validator",{"_index":184,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":189,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":466,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variables",{"_index":930,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":754,"title":{},"body":{"controllers/UserController.html":{},"properties.html":{}}}],["want",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["watch",{"_index":885,"title":{},"body":{"index.html":{}}}],["website",{"_index":913,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["whos",{"_index":765,"title":{},"body":{"controllers/UserController.html":{}}}],["whose",{"_index":557,"title":{},"body":{"controllers/PostsController.html":{}}}],["work",{"_index":504,"title":{},"body":{"entities/Post.html":{}}}],["works",{"_index":452,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["world",{"_index":111,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["yarn",{"_index":880,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":905,"title":{},"body":{"index.html":{}}}],["z0",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            PostsController\n                        \n                        \n                            MetaOptionsController\n                        \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { PostsController } from './posts/posts.controller';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOptionsController } from './meta-options/meta-options.controller';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsController } from './tags/tags.controller';\nimport { TagsModule } from './tags/tags.module';\n\n@Module({\n  imports: [\n    UserModule,\n    PostsModule,\n    AuthModule,\n    MetaOptionsModule,\n    TypeOrmModule.forRootAsync({\n      imports: [], // specify any additional imports here, e.g., TypeORM migrations or custom repositories\n      inject: [], // inject\n      useFactory: () => ({\n        type: 'postgres',\n        host: 'localhost',\n        port: 5432,\n        username: 'postgres',\n        password: 'oojoseph',\n        database: 'blog-app',\n        entities: ['dist/**/*.entity.js'],\n        synchronize: true, // set to false in production\n        // autoLoadEntities: true, // using this would require us to create a module (controller and module file) for every entity we want to add, exporting it and using the TypeORM.forFeature([]) function\n      }),\n    }),\n    TagsModule,\n  ],\n  controllers: [AppController, PostsController, MetaOptionsController, TagsController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginBody: LoginBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginBody\n                                            \n                                                            LoginBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\ntype LoginBody = {\n  id: number;\n  username: string;\n  password: string;\n};\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  login(@Body() loginBody: LoginBody) {\n    return this.authService.login(loginBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from 'src/user/user.module';\n\n@Module({\n  imports: [forwardRef(() => UserModule)], // for dependency injection (circular dependency injection)\n  exports: [AuthService],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n  ) {}\n\n  public login({\n    id,\n    username,\n    password,\n  }: {\n    id: number;\n    username: string;\n    password: string;\n  }) {\n    // check user exists in the database and if the password is correct\n    // login\n    // token\n\n    // const user = this.userService.findOneById({ id });\n    // console.log(`Logging in user ${user.firstName}`);\n\n    // return user;\n\n    return 'login';\n  }\n\n  public isAuthenticated() {\n    return true; // replace with actual authentication logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMetaOptionsDto.html":{"url":"classes/CreateMetaOptionsDto.html","title":"class - CreateMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-meta-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from \"class-validator\";\n\nexport class CreateMetaOptionsDto {\n    // @ApiProperty()\n    // @IsString()\n    // @MinLength(4)\n    // @IsNotEmpty()\n    // key: string;\n  \n    // @ApiProperty()\n    // @IsNotEmpty()\n    // value: any;\n  \n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the id of the author of the post', example: 123, type: 'integer', required: true})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the additional options for the post', example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}', type: 'string', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostTypes, description: 'Possible tags for a post, range: ['post', 'page', 'story', 'series']', type: 'string'})@IsString()@IsEnum(PostTypes)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the date when the post was published', example: '2024-03-16T12:00:00+0000', format: 'date-time', type: 'string'})@IsISO8601()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the excerpt of the post. Serialize your json content or else there will be an error', example: '{\n \"@context\": \"https://schema.org\", \n \"@type\": \"Person\"\n}', format: 'json', type: 'string'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(255)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']', type: 'string'})@IsString()@IsNotEmpty()@IsEnum(PostStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined, type: 'array', required: false})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is a title of the post', example: 'Hello World', type: 'string'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { CreateMetaOptionsDto } from 'src/meta-options/dtos/create-meta-options.dto';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is a title of the post',\n    example: 'Hello World',\n    type: 'string',\n\n    // default: \"Hello World\"\n  }) // this adds the value to the post documentation\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostTypes,\n    description:\n      \"Possible tags for a post, range: ['post', 'page', 'story', 'series']\",\n    type: 'string',\n  })\n  @IsString()\n  //   @IsEnum(['post', 'page', 'story', 'series'])\n  @IsEnum(PostTypes)\n  @IsNotEmpty()\n  postType: PostTypes;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description:\n      \"Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']\",\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'This is the excerpt of the post. Serialize your json content or else there will be an error',\n    example:\n      '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\", \\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}',\n    format: 'json',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'This is the date when the post was published',\n    example: '2024-03-16T12:00:00+0000',\n    format: 'date-time',\n    type: 'string',\n  })\n  @IsISO8601()\n  @IsNotEmpty()\n  publishedOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1, 4],\n    type: 'array',\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true }) // validate each item in the array as a string\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    description: 'This is the additional options for the post',\n    example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n    type: 'string',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'The meta value is a json object',\n          example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n        },\n      },\n      required: ['key', 'value'],\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreateMetaOptionsDto)\n  metaOptions?: CreateMetaOptionsDto | null;\n\n  @ApiProperty({\n    description: 'This is the id of the author of the post',\n    example: 123,\n    type: 'integer',\n    required: true,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Tag Description', example: 'A modern programming language', type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)@Matches(/^https?:\\/\\/[^\\s]+$/, {message: 'Invalid URL format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the tag', example: 'TypeScript', type: 'string'})@IsNotEmpty()@IsString()@MinLength(3)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(512)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty({\n    description: 'Name of the tag',\n    example: 'TypeScript',\n    type: 'string',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(255)\n  name: string;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(512)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiPropertyOptional({\n    description: 'Tag Description',\n    example: 'A modern programming language',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional({})\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  @Matches(/^https?:\\/\\/[^\\s]+$/, {\n    message: 'Invalid URL format',\n  })\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 123, type: Number})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/get-users-param.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 123,\n    type: Number,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number) // transform string to number if provided\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/entity/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  }) // creating bi-directional relationship\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOptions(createMetaOptionsDto: CreateMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionsDto\n                                            \n                                                            CreateMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private metaOptionsService: MetaOptionsService) {}\n\n  @Post()\n  createMetaOptions(@Body() createMetaOptionsDto: CreateMetaOptionsDto) {\n    const metaOptions = this.metaOptionsService.create({\n      metaOptions: createMetaOptionsDto,\n    });\n\n    return metaOptions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './entity/meta-option.entity';\nimport { MetaOptionsController } from './meta-options.controller';\n\n@Module({\n  providers: [MetaOptionsService],\n  controllers: [MetaOptionsController],\n  exports: [MetaOptionsService],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/meta-options.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\nimport { MetaOption as MetaOptionsRepository } from './entity/meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    // injecting meta options service repository dependency\n    @InjectRepository(MetaOptionsRepository)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create({ metaOptions }: { metaOptions: CreateMetaOptionsDto }) {\n    const createdMetaOption =\n      await this.metaOptionsRepository.create(metaOptions);\n    await this.metaOptionsRepository.save(createdMetaOption);\n\n    return createdMetaOption;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Update post with a specific id', example: 123, type: 'number'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n// import { PartialType } from '@nestjs/mapped-types'; \n// we are using the import from swagger so it shows up in our documentation, it still works likes expected as the import from @nestjs/mapped-types\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'Update post with a specific id',\n    example: 123,\n    type: 'number',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entity/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostTypes, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { MetaOption } from '../../meta-options/entity/meta-option.entity';\nimport { User } from 'src/user/entity/user.entity';\nimport { Tag } from 'src/tags/entity/tags.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostTypes,\n    default: PostTypes.POST,\n  })\n  postType: PostTypes;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: false,\n  })\n  publishedOn: Date;\n\n  @ManyToMany(() => Tag, {\n    eager: true,\n  })\n  @JoinTable() // this must be on the owning side of the relationship and join table is used for M2M relationships, it also creates a new table for the relationship\n  tags?: Tag[];\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    // cascade: ['remove'] // setting cascade to work for a few methods\n    cascade: true, // this enables us create data in the metaoption table by just passing the value\n    eager: true, // loading the metaOptions eagerly instead of lazy loading it\n  })\n  // @JoinColumn()\n  metaOptions?: MetaOption;\n\n  // metaOptions?: CreatePostDtoWithMeta[];\n\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                deletePost\n                            \n                            \n                                    \n                                    \n                                getAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post'})@ApiResponse({status: undefined, description: 'Created post', type: CreatePostDto})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:62\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\nThis function handles the creation of a new post by processing the provided CreatePostDto.\nIt logs the received data and returns a confirmation message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the details of the post to be created.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the post request was received.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post'})@ApiResponse({status: undefined, description: 'Deleted post'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: undefined, description: 'All posts', type: undefined})@Get(':userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\nThis function handles GET requests to fetch all posts associated with a given user ID.\nIt logs the user ID for which posts are being retrieved and then calls the post service\nto fetch the posts.\nExample :                                representing all posts for the specified user.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user whose posts are to be retrieved.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CreatePostDto objects,\nrepresenting all posts for the specified user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(updatePostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates a post'})@ApiResponse({status: undefined, description: 'Updated post', type: CreatePostDto})@Patch('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:86\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\nThis function handles PATCH requests to update an existing post using the provided data.\nIt logs the update data received and processes the partial post update through the\nPatchPostDto data transfer object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the fields to be updated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A confirmation message indicating that the patch request was received.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   *\n   * This function handles GET requests to fetch all posts associated with a given user ID.\n   * It logs the user ID for which posts are being retrieved and then calls the post service\n   * to fetch the posts.\n   *\n   * @param {number} userId - The ID of the user whose posts are to be retrieved.\n   * @returns {Promise} A promise that resolves to an array of CreatePostDto objects,\n   *                                     representing all posts for the specified user.\n   */\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'All posts',\n    type: [CreatePostDto],\n  })\n  @Get(':userId?')\n  getAllPosts(@Param('userId') userId: number) {\n    return this.postService.getAllPosts({ userId });\n  }\n\n  /**\n   * Creates a new post.\n   *\n   * This function handles the creation of a new post by processing the provided CreatePostDto.\n   * It logs the received data and returns a confirmation message.\n   *\n   * @param {CreatePostDto} createPostDto - The data transfer object containing the details of the post to be created.\n   * @returns {string} A confirmation message indicating that the post request was received.\n   */\n  @ApiOperation({\n    summary: 'Creates a new post',\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Created post',\n    type: CreatePostDto,\n  })\n  @Post('')\n  createPost(@Body() createPostDto: CreatePostDto) {\n    const createdPost = this.postService.create({ createPost: createPostDto });\n    return createdPost;\n  }\n\n  /**\n   * Updates an existing post.\n   *\n   * This function handles PATCH requests to update an existing post using the provided data.\n   * It logs the update data received and processes the partial post update through the\n   * PatchPostDto data transfer object.\n   *\n   * @param {PatchPostDto} updatePostDto - The data transfer object containing the fields to be updated.\n   * @returns {string} A confirmation message indicating that the patch request was received.\n   */\n  @ApiOperation({\n    summary: 'Updates a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Updated post',\n    type: CreatePostDto,\n  })\n  @Patch('')\n  updatePost(@Body() updatePostDto: PatchPostDto) {\n    console.log({ updatePostDto });\n\n    return 'You sent a patch request to posts endpoint';\n  }\n\n  @ApiOperation({\n    summary: 'Deletes a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Deleted post',\n  })\n  @Delete('')\n  deletePost(@Query('id', ParseIntPipe) id: number) {\n    if (!id) {\n      throw new HttpException('No ID Provided', HttpStatus.BAD_REQUEST);\n    }\n\n    const deleteRequest = this.postService.delete({ id });\n\n    return deleteRequest;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { UserModule } from 'src/user/user.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post as PostEntity } from './entity/post.entity';\nimport { MetaOption } from 'src/meta-options/entity/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\n\n@Module({\n  imports: [\n    UserModule,\n    TagsModule,\n    TypeOrmModule.forFeature([PostEntity, MetaOption]),\n  ],\n  controllers: [PostsController],\n  providers: [PostsService],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAllPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userServices: UserService, tagsService: TagsService, postRepository: Repository, metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userServices\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption as MetaOptionRepository } from 'src/meta-options/entity/meta-option.entity';\nimport { Post as PostRepository } from './entity/post.entity';\nimport { TagsService } from 'src/tags/tags.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /**\n     * Repositories Injections\n     */\n\n    // injecting user service (making user of another service (a single dependency injection))\n    private userServices: UserService,\n\n    private tagsService: TagsService,\n\n    /**\n     * Repositories Injections\n     */\n    @InjectRepository(PostRepository)\n    private postRepository: Repository,\n\n    @InjectRepository(MetaOptionRepository)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create({ createPost }: { createPost: CreatePostDto }) {\n    const author = await this.userServices.findOneById({\n      id: createPost.authorId,\n    });\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: createPost.tags,\n    });\n\n    const post = await this.postRepository.create({\n      ...createPost,\n      author: author,\n      tags: tags,\n    });\n\n    await this.postRepository.save(post);\n\n    return post;\n  }\n\n  public async getAllPosts({ userId }: { userId: number }) {\n    const posts = await this.postRepository.find({});\n\n    return posts;\n  }\n\n  public async delete({ id }: { id: number }) {\n    // const post = await this.postRepository.findOneBy({ id });\n\n    // if (!post) {\n    //   throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    // }\n\n    await this.postRepository.delete({ id });\n\n    // await this.metaOptionsRepository.delete({ id: post.metaOptions.id });\n\n    return { message: 'Post deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/entity/tags.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                deletedDate\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:54\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'json',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n    length: 1024,\n  })\n  featuredImageUrl?: string;\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @DeleteDateColumn({})\n  deletedDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createTag: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTag\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { ApiOperation } from '@nestjs/swagger';\nimport { TagsService } from './tags.service';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(private tagsService: TagsService) {}\n\n  @Post('')\n  createPost(@Body() createTag: CreateTagDto) {\n    const createdTags = this.tagsService.createTag({ tag: createTag });\n\n    return createdTags;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsService } from './tags.service';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './entity/tags.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Tag])],\n  controllers: [TagsController],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTags\n                            \n                            \n                                    Public\n                                    Async\n                                getTagById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTags()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getTagById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTagById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { In, Repository } from 'typeorm';\nimport { Tag as TagRepository } from './entity/tags.entity';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    @InjectRepository(TagRepository)\n    private tagsRepository: Repository,\n  ) {}\n\n  public async createTag({ tag }: { tag: CreateTagDto }) {\n    const existingTags = await this.tagsRepository.findOne({\n      where: { name: tag.name },\n    });\n\n    if (existingTags) {\n      throw new HttpException('Tag already exists', HttpStatus.CONFLICT);\n    }\n\n    const createdTags = await this.tagsRepository.create(tag);\n\n    await this.tagsRepository.save(createdTags);\n\n    return createdTags;\n  }\n\n  public async getAllTags() {\n    const tags = await this.tagsRepository.find({});\n\n    return tags;\n  }\n\n  public async getTagById({ id }: { id: number }) {\n    const tag = await this.tagsRepository.findOneBy({ id });\n\n    if (!tag) {\n      throw new HttpException('Tag not found', HttpStatus.NOT_FOUND);\n    }\n\n    return tag;\n  }\n\n  public async findMultipleTags({ tags }: { tags: number[] }) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags),\n      },\n    });\n\n    return results;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 60, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, posts => posts.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    unique: true,\n    nullable: false,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 60,\n    nullable: false,\n  })\n  password: string;\n\n  @OneToMany(() => Post, (posts) => posts.author) // first argument is the one we want to setup a relationship with, second argument is the what references the relationship\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Get all users', description: 'Get all users with optional pagination'})@ApiResponse({status: 200, description: 'All users', type: CreateUserDto})@ApiQuery({name: 'limit', type: Number, required: false, description: 'Limit the number of returned results', example: 10})@ApiQuery({name: 'page', type: Number, required: false, description: 'The position of the number that you want the api to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users') // with the updated version of @nestjs/swagger there is no need to use @ApiTags\nexport class UserController {\n  /**\n   * Final Endpoint - /users/id?limit=10&page=1\n   * Parama id - optional, convert to integer, cannot have a default value\n   * Query limit - integer, default 10\n   * Query page - integer, default value 1\n   * ==> USE CASES\n   * /users/ -> return all users with default pagination\n   * /users/1223 -> returns one user whos id is 1234\n   * /users?limit=10&page=2 -> return page 2 with limit of pagination 10\n   */\n\n  constructor(private readonly userService: UserService) {}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Get all users',\n    description: 'Get all users with optional pagination',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'All users',\n    type: CreateUserDto,\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: Number,\n    required: false,\n    description: 'Limit the number of returned results',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    required: false,\n    description: 'The position of the number that you want the api to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    // console.log(getUserParamDto);\n    // console.log(`Limit: ${limit}, Page: ${page}`);\n\n    const findAll = this.userService.findAll({\n      page,\n      limit,\n      userParamsDTO: getUserParamDto,\n    });\n\n    return findAll;\n  }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    const createUser = this.userService.createUser({ user: createUserDto });\n    return createUser;\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n    // return 'You sent a patch request to users endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entity/user.entity';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule), // for dependency injection (circular dependency injection)\n    TypeOrmModule.forFeature([User]), // for repository (entity) injection\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/auth.service';\nimport { Repository } from 'typeorm';\nimport { User } from './entity/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from './dtos/create-user.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => AuthService))\n    private authService: AuthService,\n\n    // injecting user service repository dependency\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) {}\n\n  public async createUser({\n    user,\n  }: {\n    user: CreateUserDto;\n  }): Promise {\n    // check user\n    const existingUser = await this.userRepository.findOne({\n      where: { email: user.email },\n    });\n\n    // handle exception\n    if (existingUser) {\n      throw new HttpException('Email already exists', HttpStatus.CONFLICT);\n    }\n\n    // create a new user\n    const newUser = await this.userRepository.create(user);\n    await this.userRepository.save(newUser);\n\n    return newUser;\n  }\n\n  public findAll({\n    userParamsDTO,\n    limit,\n    page,\n  }: {\n    userParamsDTO: GetUsersParamDto;\n    limit: number;\n    page: number;\n  }) {\n    const { id } = userParamsDTO;\n\n    const isAuth = this.authService.isAuthenticated();\n    console.log(`User authenticated: ${isAuth}`);\n\n    if (!isAuth) {\n      throw new HttpException('User not found', HttpStatus.FORBIDDEN);\n    }\n\n    console.log(\n      `Find all users with id: ${id}, limit: ${limit}, page: ${page}`,\n    );\n\n    return [\n      { id: 1, firstName: 'John Doe', email: 'john@doe.com' },\n      { id: 2, firstName: 'Jane Doe', email: 'jane@doe.com' },\n    ];\n  }\n\n  public async findOneById({ id }: { id: number }) {\n    const user = await this.userRepository.findOneBy({ id });\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/auth.controller.ts\n            \n            type alias\n            LoginBody\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-meta-options.dto.ts\n            \n            class\n            CreateMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/entity/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/entity/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/entity/tags.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tags/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../posts.enums.ts)\n                        \n                        \n                            PostTypes   (src/.../posts.enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/posts.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PostTypes\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LoginBody   (src/.../auth.controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.controller.ts\n    \n    \n        \n            \n                \n                    \n                    LoginBody\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
