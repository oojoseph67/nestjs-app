var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.367,1,2.221]],["body/guards/AccessTokenGuard.html",[1,2.703,2,2.543,3,0.15,4,0.135,5,0.135,6,3.454,7,2.643,8,2.326,9,0.232,10,1.044,11,1.7,12,5.505,13,2.139,14,5.501,15,1.581,16,2.543,17,4.701,18,3.161,19,2.643,20,0.573,21,3.277,22,1.382,23,0.016,24,1.273,25,0.576,26,0.943,27,4.068,28,4.266,29,3.277,30,3.338,31,1.088,32,2.409,33,3.277,34,1.581,35,3.277,36,0.335,37,1.513,38,1.312,39,1.255,40,0.703,41,0.513,42,1.312,43,1.775,44,3.781,45,2.326,46,2.543,47,2.326,48,1.883,49,2.007,50,0.252,51,1.81,52,2.543,53,1.056,54,2.547,55,2.326,56,1.772,57,1.592,58,1.501,59,3.277,60,3.277,61,3.277,62,3.277,63,0.054,64,2.152,65,1.972,66,2.835,67,2.835,68,2.007,69,2.007,70,1.679,71,2.326,72,3.277,73,3.781,74,3.277,75,1.088,76,1.883,77,2.835,78,3.277,79,2.835,80,3.277,81,3.277,82,3.277,83,2.835,84,1.972,85,1.65,86,2.835,87,2.835,88,2.881,89,1.592,90,3.65,91,1.15,92,3.277,93,2.007,94,2.543,95,2.007,96,2.543,97,2.007,98,2.543,99,3.277,100,2.285,101,2.835,102,1.592,103,2.068,104,2.835,105,1.592,106,1.775,107,0.858,108,0.009,109,0.009]],["title/controllers/AppController.html",[110,1.299,111,2.743]],["body/controllers/AppController.html",[3,0.246,4,0.221,5,0.221,9,0.381,10,1.451,20,0.561,23,0.016,31,1.245,36,0.331,41,0.842,50,0.246,58,1.784,63,0.088,75,1.245,108,0.013,109,0.013,110,2.197,111,4.639,112,1.971,113,4.655,114,6.335,115,1.352,116,5.381,117,4.313,118,4.655,119,3.296,120,3.534,121,5.381]],["title/modules/AppModule.html",[122,1.299,123,2.743]],["body/modules/AppModule.html",[0,2.333,1,3.003,3,0.113,4,0.101,5,0.232,7,1.086,11,0.763,18,1.419,19,1.675,23,0.016,25,0.215,36,0.386,39,1.78,41,0.386,42,0.989,43,1.337,48,1.419,50,0.174,51,0.702,63,0.04,68,1.512,69,2.333,93,1.512,95,1.512,97,1.512,100,2.259,108,0.008,109,0.008,110,0.83,111,3.299,112,1.395,117,3.655,118,2.136,122,1.898,123,5.333,124,1.14,125,1.086,126,1.265,127,1.265,128,1.14,129,2.381,130,1.265,131,2.136,132,2.136,133,2.136,134,3.655,135,3.918,136,3.918,137,3.655,138,3.918,139,3.655,140,3.429,141,3.429,142,1.951,143,1.265,144,1.265,145,1.916,146,3.053,147,3.053,148,3.053,149,3.245,150,2.469,151,2.469,152,2.469,153,2.469,154,2.469,155,1.512,156,1.035,157,1.85,158,2.501,159,2.136,160,2.469,161,2.469,162,2.469,163,2.703,164,4.521,165,2.469,166,2.469,167,3.294,168,2.469,169,3.808,170,2.469,171,3.808,172,2.469,173,3.294,174,3.808,175,1.621,176,2.469,177,1.337,178,2.469,179,1.916,180,2.703,181,2.469,182,2.703,183,2.469,184,1.916,185,2.469,186,1.621,187,2.469,188,2.703,189,2.469,190,4.382,191,1.916,192,5.226,193,2.469,194,2.469,195,2.469,196,2.469,197,3.808,198,3.808,199,2.501,200,2.703,201,2.469,202,3.808,203,2.469,204,3.808,205,1.752,206,2.469,207,2.469,208,2.469,209,2.136,210,3.608,211,2.469,212,2.136,213,2.469,214,0.945,215,2.469,216,2.469,217,2.136,218,2.956,219,2.469,220,2.469,221,2.469,222,3.808,223,2.469,224,2.469,225,2.469,226,2.469,227,1.265,228,2.469,229,2.469,230,1.419,231,2.469,232,2.469,233,2.469,234,1.337,235,2.136,236,2.469,237,2.501,238,2.469,239,0.945,240,0.945,241,1.916,242,2.469,243,2.469,244,2.469,245,1.916,246,2.956,247,2.956,248,1.916,249,1.916,250,1.916,251,1.916,252,1.916,253,1.752,254,1.916,255,1.916,256,1.916,257,1.14,258,1.337,259,2.501,260,3.608,261,2.469,262,2.469]],["title/injectables/AppService.html",[40,0.577,117,2.367]],["body/injectables/AppService.html",[3,0.255,4,0.229,5,0.229,9,0.394,10,1.481,20,0.58,23,0.016,31,1.288,36,0.282,40,0.997,41,0.872,50,0.255,58,1.821,63,0.091,75,1.288,108,0.013,109,0.013,114,6.409,117,4.088,263,1.872,264,4.818,265,5.569,266,4.818,267,4.818]],["title/controllers/AuthController.html",[110,1.299,268,2.743]],["body/controllers/AuthController.html",[3,0.198,4,0.178,5,0.178,9,0.306,10,1.264,20,0.593,22,1.432,23,0.016,24,1.318,25,0.495,26,0.977,31,1.318,36,0.356,38,1.734,41,0.678,50,0.198,63,0.071,73,3.664,75,1.318,108,0.011,109,0.011,110,1.455,112,1.586,115,1.432,119,2.652,268,4.043,269,3.746,270,2.489,271,2.768,272,4.928,273,3.741,274,4.33,275,4.442,276,4.33,277,4.33,278,6.367,279,4.33,280,4.144,281,4.33,282,4.33,283,4.33,284,3.086,285,3.361,286,2.844,287,1.395,288,3.659,289,3.746,290,3.746,291,2.489,292,3.746,293,3.361,294,2.844,295,4.33,296,3.361,297,4.33,298,4.928,299,4.33,300,4.33,301,2.489,302,3.361,303,4.33,304,2.489,305,4.33,306,3.746,307,4.33,308,4.33,309,3.746,310,4.33,311,4.33,312,4.33]],["title/modules/AuthModule.html",[122,1.299,134,2.367]],["body/modules/AuthModule.html",[3,0.166,4,0.149,5,0.149,11,1.119,18,2.082,19,2.22,23,0.016,36,0.385,39,1.387,41,0.567,42,1.451,43,1.962,48,2.082,49,2.219,50,0.166,63,0.059,93,2.219,95,2.219,97,2.219,108,0.01,109,0.01,112,1.85,122,1.953,124,1.673,125,1.593,126,1.856,127,1.856,128,1.673,129,2.977,130,2.977,134,4.667,140,2.901,142,2.586,143,1.856,144,1.856,149,2.901,163,2.571,179,2.812,218,2.812,247,3.918,248,2.812,249,2.812,250,2.812,251,2.812,252,2.812,253,2.571,254,2.812,255,2.812,257,2.331,258,2.734,259,2.379,260,2.812,268,4.124,288,4.317,289,3.134,313,3.134,314,3.134,315,3.134,316,3.88,317,3.707,318,4.192,319,4.192,320,3.623,321,4.124,322,2.901,323,3.623,324,3.134,325,3.134,326,3.583,327,3.623,328,2.812,329,3.583,330,3.134,331,5.049,332,3.623,333,3.134,334,3.134,335,3.134,336,2.219,337,3.623]],["title/injectables/AuthService.html",[40,0.577,288,2.221]],["body/injectables/AuthService.html",[3,0.127,4,0.114,5,0.114,7,1.224,9,0.197,10,0.926,11,1.931,13,1.868,15,1.402,17,4.6,18,2.875,19,2.444,20,0.651,22,1.257,23,0.016,24,1.158,25,0.593,26,0.858,31,1.158,34,1.868,36,0.357,37,1.285,38,1.114,39,1.065,40,0.623,41,0.436,42,1.114,43,1.507,44,1.507,48,2.397,49,1.704,50,0.127,51,1.58,53,0.897,54,1.507,57,2.026,63,0.045,65,2.331,69,1.704,70,2.137,71,1.975,73,2.71,75,1.158,84,1.749,85,1.463,88,1.704,89,1.352,91,1.95,100,1.352,102,1.352,103,1.834,105,1.352,107,0.729,108,0.008,109,0.008,177,1.507,199,1.827,227,2.137,256,2.16,257,2.566,258,1.507,263,0.935,272,4.328,273,3.65,275,2.739,280,2.555,284,2.71,288,2.397,290,2.407,293,2.16,294,1.827,316,3.61,317,3.225,319,4.252,322,1.599,325,2.407,328,2.16,329,2.96,330,2.407,336,2.555,338,2.407,339,1.138,340,2.814,341,5.954,342,5.558,343,5.003,344,2.783,345,3.148,346,2.783,347,2.783,348,2.96,349,2.783,350,2.783,351,1.834,352,2.783,353,2.783,354,2.783,355,2.783,356,2.16,357,1.975,358,2.16,359,2.739,360,2.16,361,2.16,362,2.407,363,2.16,364,3.608,365,2.783,366,5.003,367,2.783,368,1.975,369,2.783,370,2.783,371,2.407,372,2.16,373,2.407,374,2.783,375,2.783,376,4.313,377,2.783,378,2.783,379,2.407,380,2.407,381,2.783]],["title/guards/AuthenticationGuard.html",[0,2.367,180,2.743]],["body/guards/AuthenticationGuard.html",[0,2.015,1,3.926,2,5.148,3,0.151,4,0.135,5,0.135,7,1.446,9,0.233,10,1.046,11,1.703,12,6.387,13,2.229,15,1.585,20,0.491,22,1.185,23,0.016,24,1.091,25,0.523,26,0.808,27,4.079,28,4.273,30,2.335,31,1.091,32,2.416,36,0.322,37,1.519,38,1.317,40,0.704,41,0.515,46,2.553,47,2.335,50,0.151,51,1.712,63,0.054,64,2.16,65,1.978,66,2.845,67,2.845,68,2.015,75,1.091,84,2.525,85,1.934,87,2.845,88,3.376,91,1.154,100,2.291,103,1.446,104,2.845,105,1.598,106,1.782,107,0.861,108,0.009,109,0.009,175,2.16,177,1.782,180,3.347,271,2.925,291,2.71,339,0.898,348,2.335,382,2.845,383,4.716,384,4.716,385,4.716,386,3.29,387,6.988,388,3.29,389,3.29,390,2.845,391,3.66,392,2.553,393,4.716,394,3.29,395,3.29,396,3.29,397,2.16,398,2.845,399,4.079,400,5.512,401,4.079,402,3.29,403,3.29,404,3.29,405,3.29,406,3.29,407,3.29,408,3.29,409,3.097,410,4.716,411,3.29,412,3.29,413,3.29,414,3.29,415,2.553,416,2.553,417,2.335,418,4.716,419,2.845,420,3.29,421,4.079,422,3.29,423,3.29,424,3.29,425,3.29,426,4.716,427,2.553]],["title/injectables/BcryptProvider.html",[40,0.577,326,2.743]],["body/injectables/BcryptProvider.html",[3,0.163,4,0.146,5,0.146,9,0.251,10,1.104,11,1.776,20,0.518,22,1.251,23,0.016,24,1.151,25,0.591,26,0.853,31,1.441,32,3.65,34,2.094,36,0.291,40,0.744,41,0.556,50,0.163,51,1.634,58,1.945,63,0.058,64,2.331,75,1.151,76,2.86,91,1.245,107,0.93,108,0.01,109,0.01,227,3.996,237,3.268,263,1.193,286,4.091,316,2.696,326,3.532,340,2.2,348,3.532,360,2.755,368,4.421,372,4.835,428,3.07,429,4.972,430,4.972,431,3.07,432,3.549,433,4.305,434,5.389,435,6.417,436,4.461,437,4.835,438,3.863,439,4.305,440,3.532,441,3.07,442,3.549,443,4.977,444,5.389,445,5.674,446,3.549,447,3.268,448,3.07,449,4.977,450,3.549,451,3.549,452,3.07,453,3.549]],["title/classes/CreateManyUsersDto.html",[63,0.063,454,2.367]],["body/classes/CreateManyUsersDto.html",[3,0.199,4,0.179,5,0.179,9,0.308,20,0.453,23,0.016,25,0.628,36,0.356,50,0.199,53,1.842,57,2.777,63,0.104,100,3.42,107,1.14,108,0.011,109,0.011,115,1.094,227,2.928,239,1.666,339,1.56,417,4.056,454,3.501,455,1.666,456,4.436,457,3.501,458,3.088,459,4.312,460,3.813,461,3.088,462,4.436,463,3.285,464,3.753,465,5.863,466,4.436,467,2.928,468,4.352,469,3.764,470,4.352,471,2.928,472,4.944,473,1.743,474,2.666,475,2.666,476,3.753,477,1.825,478,2.858,479,4.056,480,4.352,481,4.056,482,5.716,483,4.352,484,5.716,485,4.352,486,4.352,487,3.764]],["title/classes/CreateMetaOptionsDto.html",[63,0.063,488,2.367]],["body/classes/CreateMetaOptionsDto.html",[3,0.238,4,0.213,5,0.213,9,0.367,20,0.541,23,0.016,25,0.451,36,0.263,50,0.238,58,1.891,63,0.105,108,0.013,109,0.013,115,1.304,157,3.106,339,1.745,455,1.987,471,3.705,473,2.078,476,4.199,488,3.916,489,3.275,490,4.962,491,4.489,492,5.378,493,5.19,494,5.19,495,4.962,496,3.179,497,4.489,498,4.028,499,2.983]],["title/classes/CreatePostDto.html",[63,0.063,500,2.367]],["body/classes/CreatePostDto.html",[3,0.093,4,0.083,5,0.083,9,0.143,20,0.661,23,0.016,25,0.667,26,1.088,30,2.309,36,0.259,50,0.093,56,1.315,58,1.978,63,0.067,76,1.87,83,1.749,100,3.083,103,1.43,107,1.783,108,0.007,109,0.007,115,1.595,157,1.58,212,2.814,234,2.211,266,3.531,267,3.531,287,2.349,301,1.162,304,2.947,339,1.114,415,2.525,417,3.639,440,1.435,447,2.136,455,0.774,461,2.897,463,1.162,464,3.597,465,2.814,466,2.525,467,3.689,469,1.749,471,2.95,472,2.814,473,0.81,475,1.238,476,3.782,477,0.848,487,3.531,488,2.866,489,1.036,490,1.569,492,1.569,495,2.525,496,3.355,497,1.749,498,1.569,499,2.346,500,1.993,501,5.611,502,1.569,503,4.388,504,2.897,505,2.897,506,3.531,507,3.531,508,2.897,509,3.367,510,3.782,511,4.435,512,3.639,513,4.047,514,4.047,515,2.022,516,2.022,517,2.814,518,2.136,519,3.631,520,2.814,521,4.739,522,2.022,523,2.022,524,4.082,525,4.082,526,2.022,527,2.022,528,3.979,529,3.253,530,4.678,531,4.678,532,2.346,533,3.531,534,3.531,535,2.022,536,2.022,537,3.148,538,4.047,539,3.253,540,3.253,541,3.253,542,3.253,543,2.022,544,2.022,545,3.253,546,3.253,547,4.252,548,2.022,549,2.022,550,2.022,551,2.022,552,2.814,553,2.022,554,4.047,555,4.047,556,1.993,557,2.814,558,2.814,559,2.814,560,2.525,561,2.814,562,2.136,563,2.022,564,3.979,565,2.814,566,2.814,567,2.814,568,2.022,569,2.022,570,3.253,571,2.022,572,2.022,573,2.022,574,2.022,575,2.525,576,2.022,577,3.531,578,2.022,579,3.148,580,2.814,581,1.569,582,1.569,583,1.749,584,3.888,585,1.569,586,2.022,587,1.328,588,1.749,589,2.525,590,2.022,591,2.022,592,1.749,593,1.749,594,2.022,595,3.253,596,2.022,597,2.022,598,1.749,599,1.328,600,2.022,601,2.022,602,0.741,603,1.328,604,1.569,605,1.749,606,1.569]],["title/classes/CreateTagDto.html",[63,0.063,607,2.538]],["body/classes/CreateTagDto.html",[3,0.156,4,0.14,5,0.14,9,0.24,20,0.672,23,0.016,24,1.493,25,0.651,26,1.149,36,0.244,50,0.156,58,2.059,63,0.079,107,1.878,108,0.01,109,0.01,115,1.622,287,1.969,339,1.317,440,2.411,455,1.301,461,3.425,467,3.724,471,2.875,473,1.361,476,3.685,477,1.425,495,3.746,496,3.743,503,3.425,504,3.983,508,3.983,509,4.238,512,3.425,513,4.175,514,4.175,517,4.175,518,3.169,519,5.204,520,4.175,521,5.285,552,4.175,554,5.285,555,5.285,556,3.743,557,4.175,558,4.175,559,4.175,560,3.746,561,4.175,562,3.169,579,3.511,580,4.175,581,2.637,582,2.637,584,4.336,588,2.939,592,2.939,593,2.939,598,2.939,607,3.169,608,5.8,609,2.939,610,3.309,611,4.826,612,4.826,613,4.175,614,3.398,615,3.398,616,3.398,617,4.175,618,3.398,619,4.175,620,3.398,621,3.398,622,3.398,623,3.398,624,3.398,625,3.398,626,2.939,627,3.398]],["title/classes/CreateUserDto.html",[63,0.063,460,2.093]],["body/classes/CreateUserDto.html",[3,0.187,4,0.167,5,0.167,9,0.288,20,0.718,23,0.016,25,0.599,26,1.216,36,0.206,50,0.187,56,1.764,57,3.002,58,2.058,63,0.09,108,0.011,109,0.011,115,1.732,227,3.166,339,1.494,440,2.894,455,1.561,456,5.506,458,2.894,460,2.965,471,3.384,473,1.633,479,4.386,481,4.386,496,4.22,556,3.353,560,4.249,579,3.796,581,3.165,582,3.165,626,4.736,628,4.058,629,4.078,630,4.078,631,4.078,632,4.078,633,4.078,634,4.078,635,4.078,636,4.078,637,4.078,638,6.606,639,5.475,640,5.475,641,4.736,642,5.475,643,5.506,644,5.475,645,5.475,646,5.475,647,4.078,648,4.736,649,6.606,650,4.078,651,4.078]],["title/injectables/CreateUserProvider.html",[40,0.577,652,2.367]],["body/injectables/CreateUserProvider.html",[3,0.156,4,0.14,5,0.14,9,0.241,10,1.072,11,1.736,13,1.624,15,1.624,20,0.503,22,1.214,23,0.016,24,1.118,25,0.532,26,0.828,31,0.788,32,2.475,34,1.624,36,0.339,37,2.231,38,1.363,39,1.303,40,0.722,41,0.533,44,1.844,50,0.156,51,1.374,53,2.223,57,1.654,63,0.056,65,2.027,70,1.744,75,0.788,84,2.356,85,2.145,88,2.085,89,1.654,91,2.145,102,1.654,103,2.125,105,2.348,107,1.266,108,0.01,109,0.01,156,1.428,214,1.303,227,3.133,239,1.85,257,2.231,259,2.236,263,1.144,316,3.819,322,1.957,336,2.085,340,2.151,356,2.642,359,2.236,360,2.642,361,2.642,362,2.945,364,4.86,368,3.43,371,4.18,427,2.642,460,2.618,463,1.957,464,2.236,474,2.085,478,2.236,628,3.689,652,2.96,653,4.86,654,2.945,655,4.36,656,3.405,657,3.308,658,3.405,659,4.18,660,2.945,661,3.405,662,1.654,663,2.085,664,3.405,665,2.945,666,3.405,667,6.116,668,6.116,669,3.751,670,2.945,671,3.405,672,2.945,673,3.405,674,3.405,675,3.405,676,2.642,677,2.416,678,2.642,679,3.405,680,3.751,681,3.405,682,3.405]],["title/injectables/DataResponseInterceptor.html",[40,0.577,182,2.743]],["body/injectables/DataResponseInterceptor.html",[3,0.189,4,0.169,5,0.169,9,0.292,10,1.224,13,1.387,15,1.855,19,2.918,20,0.575,22,1.387,23,0.016,24,1.277,25,0.48,26,0.946,28,4.71,30,3.916,31,0.955,36,0.336,39,1.58,40,0.824,41,0.646,42,1.653,44,2.235,46,4.825,47,2.928,50,0.189,63,0.067,64,2.71,65,1.73,68,2.527,75,1.277,77,5.741,108,0.011,109,0.011,167,3.569,182,3.916,184,4.825,263,1.387,409,3.623,683,5.377,684,3.569,685,5.518,686,4.126,687,4.126,688,5.518,689,5.518,690,4.825,691,6.637,692,4.126,693,5.518,694,4.126,695,4.126,696,4.126,697,3.569,698,4.126,699,6.637,700,5.518,701,6.637,702,4.126,703,4.126,704,4.126,705,4.126,706,3.808,707,4.126,708,4.126,709,4.126,710,4.126]],["title/controllers/FileUploadController.html",[110,1.299,711,2.743]],["body/controllers/FileUploadController.html",[3,0.177,4,0.159,5,0.306,9,0.273,10,1.171,13,1.298,15,1.298,20,0.402,22,0.971,23,0.016,24,1.653,25,0.522,26,0.662,31,0.894,36,0.342,39,1.479,41,0.605,45,4.265,50,0.177,63,0.063,68,2.366,73,2.092,75,0.894,100,3.391,107,1.905,108,0.011,109,0.011,110,1.298,112,1.415,115,0.971,120,2.536,186,3.465,270,2.22,287,1.7,464,4.584,477,1.62,503,3.745,613,3.341,706,3.232,711,3.745,712,3.033,713,3.341,714,4.012,715,4.564,716,3.862,717,4.665,718,3.862,719,3.862,720,3.862,721,3.862,722,3.862,723,3.341,724,3.862,725,3.341,726,5.277,727,5.277,728,3.745,729,3.956,730,3.341,731,3.862,732,5.277,733,3.862,734,3.341,735,3.862,736,3.862,737,3.862,738,5.277,739,3.862,740,3.862,741,3.862,742,2.741,743,2.998,744,3.862,745,3.862,746,3.862]],["title/modules/FileUploadModule.html",[122,1.299,135,2.538]],["body/modules/FileUploadModule.html",[3,0.213,4,0.191,5,0.271,23,0.016,36,0.383,41,0.728,42,1.863,50,0.213,63,0.076,108,0.012,109,0.012,112,2.187,122,2.215,124,2.148,125,2.046,126,2.383,127,2.383,128,2.148,129,3.376,130,2.383,135,4.976,142,3.057,143,2.383,144,2.383,149,2.674,155,2.85,156,1.951,163,3.302,186,3.055,188,3.302,711,4.677,712,2.674,714,2.674,729,4.506,730,4.024,747,4.024,748,4.024,749,4.506,750,4.652,751,4.652,752,4.024,753,4.024,754,3.611,755,4.024,756,4.652,757,4.652]],["title/injectables/FileUploadService.html",[40,0.577,729,2.367]],["body/injectables/FileUploadService.html",[3,0.23,4,0.147,5,0.288,9,0.254,10,1.112,11,1.786,13,1.942,15,1.685,19,2.751,20,0.522,22,1.26,23,0.016,24,1.16,25,0.593,26,0.859,31,0.83,34,1.685,36,0.354,39,1.373,40,0.749,41,0.561,42,1.436,50,0.164,51,1.643,63,0.059,75,0.83,84,2.102,85,2.027,89,1.742,91,1.758,102,1.742,103,1.577,108,0.01,109,0.01,156,1.504,186,3.795,188,2.545,205,2.545,210,3.89,214,1.373,258,1.942,263,1.205,340,2.213,351,1.577,361,2.783,657,3.373,663,2.196,712,3.321,714,3.784,715,4.999,717,2.783,729,3.07,743,2.783,749,4.179,752,3.102,753,3.102,754,2.783,755,3.102,758,3.102,759,3.586,760,5.779,761,4.999,762,3.586,763,3.586,764,3.586,765,5.013,766,3.586,767,2.783,768,3.586,769,3.102,770,3.586,771,3.586,772,3.586,773,3.586,774,3.586,775,3.586,776,3.586,777,3.586,778,3.586,779,3.586,780,3.89,781,3.586,782,5.779,783,3.586,784,3.586,785,3.102,786,3.102,787,3.586,788,2.783,789,3.586,790,3.102,791,3.102,792,3.102,793,3.102,794,3.586,795,2.545,796,3.586,797,3.586,798,3.586]],["title/injectables/GenerateTokenProvider.html",[40,0.577,317,2.093]],["body/injectables/GenerateTokenProvider.html",[3,0.158,4,0.142,5,0.142,7,1.518,9,0.244,10,1.083,11,2.082,13,2.182,15,1.64,16,2.679,17,4.783,18,3.253,19,2.706,20,0.59,22,1.546,23,0.016,24,1.31,25,0.615,26,0.97,31,1.129,34,2.068,36,0.341,39,1.321,40,0.729,41,0.54,42,1.382,43,1.869,48,2.804,49,2.114,50,0.158,51,1.388,53,2.171,54,1.869,55,2.45,56,1.572,57,1.677,63,0.056,65,2.046,69,2.114,70,1.768,71,2.45,73,1.869,75,1.129,90,4.775,91,2.158,93,2.114,94,2.679,95,2.114,96,2.679,97,2.114,98,2.679,108,0.01,109,0.01,177,1.869,199,2.266,253,4.783,257,1.594,263,1.16,273,3.204,317,2.643,340,2.167,351,2.146,358,2.679,363,2.679,376,3.787,672,2.986,795,2.45,799,5.323,800,2.679,801,5.661,802,6.492,803,3.452,804,3.452,805,3.452,806,3.787,807,3.452,808,3.452,809,2.986,810,5.038,811,3.452,812,3.452,813,4.88,814,3.452,815,3.452,816,3.452,817,4.88,818,3.452,819,4.88,820,3.452]],["title/classes/GetPostsBaseDto.html",[63,0.063,821,2.743]],["body/classes/GetPostsBaseDto.html",[3,0.223,4,0.2,5,0.2,9,0.345,20,0.64,23,0.016,25,0.534,26,1.212,36,0.341,50,0.223,63,0.11,108,0.012,109,0.012,115,1.545,339,1.677,455,1.865,473,1.951,477,2.043,537,4.064,575,5.227,579,3.87,587,3.199,821,4.779,822,5.227,823,3.781,824,5.227,825,5.227,826,6.147,827,4.872,828,4.872,829,5.317,830,4.215,831,3.781,832,4.215,833,3.765,834,3.458,835,3.781,836,2.984,837,3.458]],["title/classes/GetPostsQueryDto.html",[63,0.063,836,2.367]],["body/classes/GetPostsQueryDto.html",[3,0.239,4,0.214,5,0.214,23,0.016,36,0.352,50,0.239,63,0.114,108,0.013,109,0.013,455,1.999,473,2.091,477,2.189,537,3.688,575,5.392,579,3.993,587,3.428,821,4.931,822,4.052,823,4.052,824,4.052,825,4.052,829,6.01,830,4.516,831,4.052,832,4.516,833,4.256,834,3.705,835,4.052,836,3.931,837,4.554]],["title/classes/GetUsersParamDto.html",[63,0.063,838,2.538]],["body/classes/GetUsersParamDto.html",[3,0.225,4,0.202,5,0.202,9,0.348,20,0.512,23,0.016,25,0.635,26,1.059,36,0.342,50,0.225,53,1.991,56,2.355,58,1.341,63,0.111,107,1.287,108,0.012,109,0.012,115,1.235,339,1.686,455,1.881,459,3.785,467,3.165,473,1.968,475,3.009,477,2.06,512,3.487,577,5.345,579,3.551,584,4.386,602,2.678,604,4.796,669,3.813,838,4.058,839,5.345,840,4.25,841,4.386,842,4.913,843,4.913,844,4.913]],["title/controllers/GoogleAuthenticationController.html",[110,1.299,321,2.743]],["body/controllers/GoogleAuthenticationController.html",[3,0.22,4,0.197,5,0.197,9,0.34,10,1.352,13,1.615,15,1.615,20,0.501,22,1.208,23,0.016,24,1.112,25,0.418,26,0.824,31,1.112,36,0.356,38,1.925,41,0.752,50,0.22,63,0.079,73,2.603,75,1.112,108,0.012,109,0.012,110,1.615,112,1.76,115,1.208,256,4.729,270,2.762,271,2.334,284,3.811,285,3.729,287,1.963,291,2.762,292,4.157,294,3.156,296,3.729,298,4.157,318,4.099,321,4.325,333,4.157,845,4.729,846,4.157,847,4.325,848,6.094,849,4.805,850,4.621,851,4.805,852,4.805,853,4.157,854,4.805,855,4.805,856,4.805]],["title/injectables/GoogleAuthenticationService.html",[40,0.577,318,2.367]],["body/injectables/GoogleAuthenticationService.html",[3,0.142,4,0.127,5,0.127,9,0.22,10,1.003,11,1.648,13,2.185,15,1.52,19,2.577,20,0.61,22,1.136,23,0.016,24,1.046,25,0.541,26,0.775,31,1.046,34,1.52,36,0.34,39,1.188,40,0.675,41,0.486,42,1.243,50,0.142,51,1.909,53,2.216,55,2.202,57,2.591,63,0.051,64,2.038,65,1.301,69,1.901,73,3.521,75,1.234,79,2.684,84,1.301,85,1.871,89,1.507,90,4.139,91,1.871,102,1.507,103,1.988,105,1.507,106,1.681,107,0.813,108,0.009,109,0.009,239,1.188,246,2.408,257,1.433,258,1.681,263,1.043,271,1.507,294,2.038,317,3.174,318,2.769,322,1.783,328,2.408,329,2.202,334,2.684,335,2.684,336,1.901,339,1.234,340,2.042,345,3.341,351,1.364,357,2.202,359,2.038,479,2.202,481,2.202,628,4.09,677,2.202,680,3.509,697,2.684,795,2.202,845,4.834,847,3.208,850,2.969,853,2.684,857,2.684,858,5.333,859,5.333,860,6.502,861,3.103,862,5.333,863,3.103,864,4.521,865,3.103,866,3.103,867,3.103,868,2.408,869,5.86,870,3.103,871,3.103,872,2.684,873,3.103,874,3.103,875,4.521,876,3.103,877,4.521,878,3.103,879,3.103,880,3.103,881,3.103,882,2.684,883,3.103,884,3.103,885,3.103,886,3.103,887,3.103,888,4.521,889,4.521,890,2.684,891,3.103,892,3.103,893,2.684,894,3.103,895,4.521,896,3.103,897,2.684,898,2.684,899,3.103]],["title/classes/GoogleTokenDto.html",[63,0.063,850,2.538]],["body/classes/GoogleTokenDto.html",[3,0.255,4,0.229,5,0.229,9,0.394,20,0.58,23,0.016,25,0.484,36,0.282,50,0.255,58,1.821,63,0.109,108,0.013,109,0.013,115,1.4,339,1.821,455,2.132,471,3.661,473,2.23,850,4.382,900,5.773,901,4.322,902,7.146,903,5.569]],["title/injectables/HashingProvider.html",[40,0.577,316,2.093]],["body/injectables/HashingProvider.html",[3,0.188,4,0.169,5,0.169,9,0.291,10,1.221,20,0.573,22,1.382,23,0.016,24,1.273,25,0.618,26,0.943,31,1.435,32,3.641,34,2.226,36,0.208,40,0.822,41,0.643,50,0.188,58,1.885,63,0.067,76,3.161,107,1.076,108,0.011,109,0.011,227,3.928,263,1.38,286,4.073,316,2.979,348,3.904,368,3.904,372,4.813,373,4.758,429,5.365,430,5.365,431,3.553,433,4.758,435,5.365,437,4.269,438,4.269,439,4.758,441,3.553,445,5.73,447,3.612,448,3.553,452,3.553,904,3.553,905,7.26,906,4.107,907,6.624,908,5.141,909,5.5,910,4.107,911,4.107,912,4.107]],["title/entities/MetaOption.html",[240,1.48,913,2.093]],["body/entities/MetaOption.html",[3,0.193,4,0.173,5,0.173,9,0.298,20,0.726,23,0.016,25,0.622,36,0.283,50,0.193,56,1.803,58,1.527,63,0.069,108,0.011,109,0.011,115,1.751,214,1.614,230,2.423,234,3.032,240,2.143,287,2.42,339,1.527,489,3.668,492,4.877,537,3.847,547,4.344,602,2.302,913,3.032,914,4.703,915,3.647,916,5.435,917,5.435,918,4.877,919,4.216,920,4.126,921,4.216,922,2.768,923,3.675,924,4.216,925,3.647,926,5.597,927,4.842,928,4.216,929,4.216,930,4.877,931,4.216,932,3.272,933,3.675,934,4.842,935,4.842,936,3.272,937,3.272,938,4.216,939,4.216,940,3.272]],["title/controllers/MetaOptionsController.html",[110,1.299,147,2.538]],["body/controllers/MetaOptionsController.html",[3,0.223,4,0.2,5,0.2,9,0.345,10,1.364,20,0.508,22,1.224,23,0.016,24,1.127,25,0.424,26,0.835,31,1.127,36,0.341,41,0.763,50,0.223,51,1.386,63,0.08,75,1.127,108,0.012,109,0.012,110,1.638,112,1.785,115,1.224,119,2.984,147,4.036,157,3.271,158,4.036,270,2.8,284,2.639,287,2.17,447,4.036,488,4.63,489,3.149,505,4.779,585,3.781,662,2.367,941,4.215,942,6.147,943,4.872,944,4.872,945,4.125,946,4.215,947,4.872,948,4.872,949,4.872]],["title/modules/MetaOptionsModule.html",[122,1.299,136,2.538]],["body/modules/MetaOptionsModule.html",[3,0.221,4,0.198,5,0.198,23,0.016,36,0.368,41,0.754,50,0.221,63,0.079,108,0.012,109,0.012,112,2.236,122,2.252,124,2.225,125,2.119,126,2.468,127,2.468,128,2.225,129,3.432,130,3.432,136,4.952,142,3.127,143,2.468,144,2.468,147,4.4,149,2.769,155,2.951,156,2.021,157,2.965,158,3.164,159,4.168,489,2.468,913,2.61,945,4.808,946,4.168,950,4.168,951,4.168,952,4.168,953,4.819,954,4.168,955,3.164,956,4.819]],["title/injectables/MetaOptionsService.html",[40,0.577,945,2.367]],["body/injectables/MetaOptionsService.html",[3,0.202,4,0.181,5,0.181,9,0.312,10,1.281,11,1.987,13,1.485,15,1.94,20,0.601,22,1.451,23,0.016,24,1.335,25,0.593,26,0.99,31,1.022,34,1.94,36,0.358,40,0.862,41,0.692,50,0.202,51,1.256,63,0.072,65,1.853,70,2.263,75,1.022,91,2.025,108,0.012,109,0.012,156,1.853,157,2.804,158,4.222,214,1.691,239,2.462,257,2.04,263,1.485,340,2.462,351,1.942,447,2.901,488,3.536,489,3.293,505,4.097,585,3.429,657,3.623,662,2.146,663,2.706,913,2.393,945,3.536,954,3.821,955,2.901,957,3.821,958,4.418,959,4.418,960,5.562,961,3.821,962,4.418,963,4.418,964,5.772,965,4.418,966,4.418]],["title/interfaces/Paginated.html",[967,2.743,968,2.538]],["body/interfaces/Paginated.html",[3,0.229,4,0.205,5,0.205,9,0.353,23,0.016,25,0.668,34,2.399,50,0.229,56,2.3,58,2.005,108,0.013,109,0.013,157,3.467,240,1.913,339,1.704,379,4.323,380,4.323,562,3.282,690,3.878,706,4.372,806,5.287,967,3.547,968,4.101,969,4.997,970,4.323,971,6.174,972,4.997,973,4.323,974,4.323,975,4.323,976,4.323,977,4.323,978,4.323,979,4.323]],["title/modules/PaginationModule.html",[122,1.299,137,2.367]],["body/modules/PaginationModule.html",[3,0.238,4,0.213,5,0.213,23,0.016,36,0.323,41,0.812,50,0.238,63,0.085,108,0.013,109,0.013,122,2.329,124,2.396,125,2.282,126,2.658,127,2.658,128,2.396,129,3.55,130,3.55,137,4.694,141,4.555,142,3.275,143,2.658,144,2.658,980,4.489,981,4.489,982,5.19,983,5.19,984,5.19]],["title/classes/PaginationQueryDto.html",[63,0.063,833,2.367]],["body/classes/PaginationQueryDto.html",[3,0.196,4,0.176,5,0.176,9,0.303,20,0.59,23,0.016,25,0.638,26,1.155,36,0.321,50,0.196,56,2.487,63,0.104,107,1.482,108,0.011,109,0.011,115,1.422,301,4.135,339,1.545,455,1.642,466,4.393,467,3.452,473,1.717,475,2.626,477,1.798,499,3.253,512,4.017,532,4.026,579,3.642,584,4.497,599,4.425,641,5.829,833,3.467,834,4.497,985,3.709,986,4.161,987,6.582,988,5.23,989,5.66,990,4.288,991,4.288,992,6.337]],["title/injectables/PaginationService.html",[40,0.577,141,2.221]],["body/injectables/PaginationService.html",[3,0.16,4,0.143,5,0.143,9,0.247,10,1.091,11,1.759,13,1.172,15,1.652,20,0.512,22,1.43,23,0.016,24,1.137,25,0.566,26,0.842,31,0.806,32,2.517,34,1.652,36,0.342,39,1.335,40,0.734,41,0.546,44,3.842,45,2.474,50,0.16,51,2.051,63,0.057,65,1.462,75,0.806,76,2.003,85,1.223,91,1.724,108,0.01,109,0.01,120,2.289,141,2.824,157,1.693,175,2.289,214,1.335,263,1.172,340,2.179,409,2.289,519,2.705,532,4.145,562,2.289,599,4.058,657,3.166,690,2.705,706,2.135,806,2.705,833,3.01,835,2.705,937,2.705,968,3.227,971,3.015,973,3.015,974,4.251,975,3.015,976,4.923,977,3.015,978,3.015,979,3.015,986,4.279,993,3.015,994,5.691,995,3.486,996,3.486,997,3.486,998,3.486,999,3.486,1000,3.486,1001,3.486,1002,3.486,1003,4.923,1004,3.227,1005,3.486,1006,3.486,1007,3.486,1008,5.691,1009,3.486,1010,3.486,1011,4.914,1012,3.486,1013,3.486,1014,3.486,1015,3.486,1016,3.486,1017,4.914,1018,3.486,1019,3.486,1020,3.486,1021,3.486,1022,3.486,1023,3.486,1024,3.486]],["title/classes/PatchPostDto.html",[63,0.063,1025,2.538]],["body/classes/PatchPostDto.html",[3,0.215,4,0.193,5,0.193,9,0.333,20,0.49,23,0.016,25,0.576,36,0.373,50,0.215,56,2.134,63,0.098,107,1.231,108,0.012,109,0.012,115,1.182,237,3.088,239,1.8,287,1.936,339,1.64,397,3.946,455,1.8,461,3.337,467,3.078,471,3.078,473,1.883,476,3.946,477,1.972,500,2.88,502,3.649,587,3.088,602,2.643,604,4.664,831,3.649,837,4.265,841,4.265,1025,3.946,1026,5.199,1027,6.01,1028,4.664,1029,4.702,1030,4.702,1031,5.199,1032,3.649,1033,6.01,1034,4.664,1035,4.702,1036,4.702,1037,4.702,1038,4.702,1039,4.702,1040,4.702]],["title/classes/PatchUserDto.html",[63,0.063,1041,2.743]],["body/classes/PatchUserDto.html",[3,0.262,4,0.235,5,0.235,23,0.016,36,0.343,50,0.262,63,0.093,108,0.014,109,0.014,239,2.188,397,3.753,455,2.188,458,4.056,460,3.095,474,3.5,837,4.81,1031,4.943,1034,4.435,1041,4.81,1042,4.943,1043,6.777]],["title/entities/Post.html",[240,1.48,287,1.245]],["body/entities/Post.html",[3,0.118,4,0.106,5,0.106,9,0.182,10,0.571,20,0.731,23,0.016,25,0.651,26,1.167,36,0.291,50,0.118,53,1.955,56,1.267,58,1.857,63,0.042,85,0.903,100,3.52,108,0.008,109,0.008,115,1.764,157,1.25,214,0.986,230,1.479,234,3.686,239,0.986,240,1.506,287,1.267,301,3.07,304,2.742,339,1.073,463,2.26,499,1.479,503,3.386,504,3.386,505,4.479,506,4.128,507,4.128,508,3.386,509,3.133,510,3.778,511,4.128,528,4.466,537,2.26,564,4.466,583,2.227,589,5.051,602,1.748,603,3.133,610,2.893,706,1.577,809,2.227,908,4.146,913,3.117,914,1.69,920,3.133,922,4.273,923,4.797,925,2.227,933,4.38,934,3.402,935,3.402,936,4.146,940,3.052,955,1.69,1044,2.227,1045,2.574,1046,3.932,1047,6.066,1048,2.574,1049,2.574,1050,4.305,1051,4.305,1052,3.052,1053,2.574,1054,2.574,1055,3.932,1056,2.574,1057,2.574,1058,3.402,1059,2.574,1060,2.574,1061,2.791,1062,3.052,1063,2.574,1064,2.574,1065,2.227,1066,3.932,1067,2.574,1068,2.574,1069,3.402,1070,2.574,1071,3.402,1072,3.402,1073,3.932,1074,2.574,1075,2.574,1076,2.574,1077,2.574,1078,2.227,1079,2.227,1080,4.128,1081,2.574,1082,2.574,1083,2.574,1084,2.227,1085,2.574,1086,2.227,1087,2.574,1088,2.574,1089,2.574,1090,2.574,1091,3.932,1092,2.574,1093,2.227,1094,2.574,1095,2.574]],["title/controllers/PostsController.html",[110,1.299,146,2.538]],["body/controllers/PostsController.html",[3,0.089,4,0.08,5,0.08,6,1.115,7,0.853,9,0.137,10,0.699,20,0.476,22,1.148,23,0.016,24,1.057,25,0.545,26,0.783,31,1.411,32,2.034,36,0.308,37,0.896,38,0.777,41,0.304,44,2.474,50,0.089,51,1.129,53,2.247,54,2.474,56,1.901,58,0.859,63,0.032,70,1.613,75,1.057,76,3.09,84,1.32,85,2.198,86,1.679,88,1.189,107,1.74,108,0.006,109,0.006,110,0.652,112,0.711,115,1.148,119,1.189,120,1.275,146,2.067,177,1.051,237,2.067,245,4.173,270,1.115,271,0.943,284,1.705,286,3,287,2.409,291,1.115,304,2.626,392,1.506,409,1.275,417,2.234,419,2.723,434,2.723,437,2.443,438,3.546,462,3.546,463,2.626,467,0.994,477,0.814,500,4.23,556,3.294,602,2.348,606,1.506,662,0.943,669,3.897,706,4.002,728,3.564,742,3.242,810,3.546,836,2.798,841,3.242,988,3.546,1004,2.067,1025,3.719,1028,4.173,1032,2.443,1084,4.651,1096,1.679,1097,4.995,1098,3.546,1099,3.148,1100,3.435,1101,3.435,1102,1.941,1103,3.546,1104,3.148,1105,1.941,1106,1.941,1107,1.941,1108,5.377,1109,3.148,1110,3.148,1111,5.377,1112,5.9,1113,5.377,1114,5.377,1115,4.569,1116,3.148,1117,1.941,1118,3.148,1119,3.148,1120,2.443,1121,1.941,1122,1.941,1123,1.941,1124,5.022,1125,4.569,1126,1.941,1127,1.941,1128,1.941,1129,4.569,1130,3.148,1131,3.148,1132,4.569,1133,3.148,1134,3.971,1135,3.971,1136,3.148,1137,3.148,1138,1.941,1139,4.569,1140,3.952,1141,1.941,1142,1.941,1143,4.569,1144,4.651,1145,3.148,1146,3.148,1147,4.569,1148,3.148,1149,2.067,1150,2.443,1151,1.941,1152,1.928,1153,1.679,1154,4.344,1155,1.506,1156,1.377,1157,1.679,1158,2.443,1159,1.506,1160,1.941,1161,1.941,1162,1.941,1163,3.971,1164,1.941,1165,1.941,1166,1.941,1167,1.679,1168,1.941,1169,1.679,1170,1.377,1171,3.148,1172,1.941,1173,1.941,1174,1.941,1175,1.941,1176,2.723,1177,1.941,1178,1.941,1179,1.377,1180,3.148,1181,1.941]],["title/modules/PostsModule.html",[122,1.299,138,2.538]],["body/modules/PostsModule.html",[3,0.195,4,0.175,5,0.175,23,0.016,36,0.381,41,0.668,50,0.195,63,0.07,108,0.011,109,0.011,112,2.067,122,2.125,124,1.97,125,1.876,126,2.186,127,2.186,128,1.97,129,3.238,130,3.238,137,4.402,138,5.094,139,4.402,140,4.13,142,2.89,143,2.186,144,2.186,146,4.151,149,3.243,155,2.614,156,1.789,287,1.375,324,3.691,489,2.186,913,3.056,914,2.802,955,2.802,1152,4.725,1153,3.691,1182,3.691,1183,3.691,1184,4.267,1185,3.691,1186,4.267,1187,4.267,1188,4.267,1189,3.691,1190,4.267,1191,4.267,1192,4.267]],["title/injectables/PostsService.html",[40,0.577,1152,2.367]],["body/injectables/PostsService.html",[3,0.095,4,0.085,5,0.085,9,0.147,10,0.738,11,2.057,13,1.747,15,1.117,20,0.541,22,1.306,23,0.016,24,1.202,25,0.588,26,0.891,31,1.099,32,1.703,34,2.033,36,0.337,37,1.535,38,0.832,40,0.497,41,0.325,50,0.095,51,1.859,53,1.071,56,1.339,63,0.034,65,1.394,70,2.129,75,1.099,84,2.442,85,2.042,89,1.009,91,2.335,102,1.009,103,1.462,105,2.019,106,1.125,107,1.088,108,0.007,109,0.007,141,3.346,156,0.871,214,0.795,217,2.876,239,1.819,257,0.959,258,1.125,259,2.183,263,0.698,287,2.062,302,1.612,304,1.193,340,2.548,345,2.308,351,1.828,357,1.474,489,1.064,500,2.036,509,2.183,510,4.371,532,1.91,556,1.272,602,2.216,603,3.12,606,3.226,657,3.099,662,1.009,663,1.272,676,1.612,677,1.474,678,1.612,810,2.58,824,1.612,825,1.612,836,2.036,890,1.796,913,1.125,914,1.364,937,1.612,955,1.364,960,3.595,961,1.796,968,1.364,986,2.183,1003,1.796,1025,2.183,1028,3.687,1032,2.58,1097,2.359,1098,3.226,1100,3.595,1101,2.876,1120,1.612,1149,2.729,1152,2.036,1155,1.612,1156,1.474,1157,1.796,1167,3.595,1170,4.132,1176,2.876,1179,1.474,1189,1.796,1193,1.796,1194,2.077,1195,3.346,1196,4.751,1197,2.077,1198,3.324,1199,2.077,1200,1.796,1201,2.077,1202,2.077,1203,2.077,1204,2.077,1205,2.077,1206,2.077,1207,2.077,1208,2.077,1209,2.077,1210,3.324,1211,2.077,1212,2.077,1213,2.077,1214,2.077,1215,2.077,1216,1.796,1217,2.077,1218,2.077,1219,4.034,1220,3.324,1221,2.077,1222,4.157,1223,2.876,1224,3.324,1225,3.324,1226,4.157,1227,2.077,1228,3.324,1229,2.077,1230,2.077,1231,2.077,1232,3.324,1233,1.796,1234,3.324,1235,3.324,1236,2.077,1237,3.324,1238,3.324,1239,2.077,1240,3.324,1241,2.077,1242,3.324,1243,2.077,1244,3.324,1245,2.077,1246,3.324,1247,2.077,1248,3.324,1249,2.077,1250,3.324,1251,2.077,1252,3.324,1253,2.077,1254,2.876,1255,2.077,1256,2.077,1257,2.077,1258,2.077,1259,2.077,1260,1.796]],["title/classes/RefreshTokenDto.html",[63,0.063,280,2.367]],["body/classes/RefreshTokenDto.html",[3,0.253,4,0.227,5,0.227,9,0.391,20,0.576,23,0.016,25,0.481,36,0.28,50,0.253,58,1.814,63,0.109,108,0.013,109,0.013,115,1.391,273,4.68,280,4.072,339,1.814,455,2.119,471,3.406,473,2.216,496,4.072,901,4.295,1261,5.751,1262,5.534,1263,5.534]],["title/injectables/RefreshTokenProvider.html",[40,0.577,319,2.367]],["body/injectables/RefreshTokenProvider.html",[3,0.159,4,0.143,5,0.143,7,1.53,9,0.246,10,1.089,11,1.757,13,2.075,15,1.649,16,2.7,17,4.795,18,3.267,19,2.715,20,0.511,22,1.233,23,0.016,24,1.135,25,0.537,26,0.841,31,0.805,34,1.649,36,0.359,37,2.266,38,1.393,39,1.332,40,0.733,41,0.545,42,1.393,43,1.884,48,2.82,49,2.131,50,0.159,51,1.617,53,1.832,54,1.884,55,3.483,63,0.057,65,2.058,69,2.131,70,1.782,71,2.469,73,3.344,75,0.805,84,1.459,85,1.721,88,2.131,89,1.69,91,1.994,93,2.131,94,2.7,95,2.131,96,2.7,97,2.131,98,2.7,102,1.69,103,2.158,105,1.69,106,2.658,107,0.911,108,0.01,109,0.01,177,1.884,199,2.284,257,1.606,263,1.169,273,3.222,280,3.006,293,2.7,294,2.284,317,3.761,319,3.006,322,1.999,329,2.469,340,2.177,345,3.444,351,1.53,357,2.469,358,2.7,359,2.284,363,2.7,376,3.809,390,3.009,602,1.274,617,3.009,795,3.483,800,2.7,882,3.009,893,4.918,897,3.009,988,2.7,1264,4.918,1265,5.685,1266,3.479,1267,3.479,1268,3.479,1269,3.009,1270,3.479,1271,3.479,1272,3.479,1273,3.479]],["title/classes/SignInDto.html",[63,0.063,275,2.538]],["body/classes/SignInDto.html",[3,0.243,4,0.218,5,0.218,9,0.376,20,0.676,23,0.016,25,0.564,36,0.269,50,0.243,57,3.402,58,1.99,63,0.106,108,0.013,109,0.013,115,1.631,227,3.587,275,4.261,339,1.771,455,2.035,471,3.587,473,2.129,496,3.974,648,5.613,1274,4.598,1275,5.316,1276,5.316,1277,5.316,1278,5.316]],["title/entities/Tag.html",[240,1.48,610,2.093]],["body/entities/Tag.html",[3,0.154,4,0.138,5,0.138,9,0.238,20,0.755,23,0.016,24,1.29,25,0.659,26,1.145,36,0.242,50,0.154,56,1.542,58,1.979,63,0.055,100,3.523,107,1.46,108,0.01,109,0.01,115,1.823,214,1.286,230,1.93,234,3.292,240,1.833,287,2.152,339,1.306,504,3.958,508,3.958,509,3.662,537,3.839,547,3.715,602,2.043,610,2.593,908,3.715,916,4.824,917,4.824,918,4.328,920,3.662,922,4.219,923,4.763,927,4.14,930,4.328,932,2.607,933,4.386,936,3.715,1050,4.74,1051,4.74,1052,3.715,1061,3.397,1062,4.717,1065,2.905,1069,4.14,1071,2.905,1072,4.14,1097,3.958,1254,4.14,1279,2.905,1280,5.577,1281,3.359,1282,5.577,1283,3.359,1284,3.359,1285,3.359,1286,3.359,1287,3.359,1288,3.359,1289,3.359,1290,3.359,1291,3.359]],["title/controllers/TagsController.html",[110,1.299,148,2.538]],["body/controllers/TagsController.html",[3,0.176,4,0.158,5,0.158,9,0.271,10,1.166,11,2.153,20,0.624,22,1.505,23,0.016,24,1.386,25,0.521,26,1.027,31,1.386,36,0.326,41,0.601,50,0.176,51,1.091,56,2.245,63,0.063,75,1.386,91,1.843,108,0.011,109,0.011,110,1.29,112,1.406,115,1.505,119,2.35,148,3.449,239,2.011,270,2.205,284,2.078,287,1.693,351,2.31,477,1.609,510,2.52,602,2.661,607,4.23,610,3.773,662,1.864,728,4.571,742,4.251,1004,2.52,1098,4.077,1103,4.649,1149,4.769,1150,4.649,1195,3.442,1292,3.319,1293,5.253,1294,5.253,1295,3.837,1296,3.837,1297,3.837,1298,5.181,1299,3.837,1300,3.837,1301,3.837,1302,3.837,1303,4.544,1304,3.837,1305,3.837,1306,3.319,1307,3.319,1308,3.837,1309,3.837,1310,4.544,1311,3.837,1312,3.837,1313,3.837,1314,3.837,1315,3.837,1316,3.837]],["title/modules/TagsModule.html",[122,1.299,139,2.367]],["body/modules/TagsModule.html",[3,0.224,4,0.201,5,0.201,23,0.016,36,0.369,41,0.765,50,0.224,63,0.08,108,0.012,109,0.012,112,2.256,122,2.266,124,2.256,125,2.148,126,2.503,127,2.503,128,2.256,129,3.454,130,3.454,139,4.633,142,3.154,143,2.503,144,2.503,148,4.428,149,2.808,155,2.993,156,2.049,610,2.646,1195,4.519,1307,4.226,1317,4.226,1318,4.226,1319,4.226,1320,4.886,1321,4.886,1322,4.226,1323,4.886]],["title/injectables/TagsService.html",[40,0.577,1195,2.221]],["body/injectables/TagsService.html",[3,0.131,4,0.117,5,0.117,9,0.202,10,0.945,11,2.325,13,0.961,15,1.431,20,0.681,22,1.587,23,0.016,24,1.513,25,0.646,26,1.082,31,1.461,34,2.349,36,0.305,37,1.321,38,1.145,40,0.636,41,0.448,50,0.131,51,1.713,56,1.815,63,0.047,75,1.461,84,1.785,85,1.493,91,2.357,108,0.011,109,0.009,156,1.199,214,1.095,263,0.961,302,3.304,304,2.447,340,2.881,351,2.776,510,3.699,556,2.608,602,2.631,607,2.796,610,3.64,657,2.886,662,1.389,663,1.752,676,2.22,677,2.03,678,2.22,1120,3.304,1149,3.34,1170,2.03,1195,2.447,1200,2.474,1219,2.22,1260,3.683,1298,4.399,1303,2.474,1306,2.474,1310,3.683,1322,2.474,1324,2.474,1325,5.086,1326,5.634,1327,5.086,1328,5.086,1329,2.86,1330,2.86,1331,4.257,1332,2.86,1333,2.86,1334,2.86,1335,2.86,1336,2.86,1337,2.86,1338,2.86,1339,2.86,1340,2.86,1341,2.86,1342,2.86,1343,2.86,1344,4.257,1345,2.86,1346,2.86,1347,4.257,1348,2.86,1349,2.86,1350,4.257,1351,2.86,1352,2.86,1353,2.86,1354,2.86]],["title/entities/Upload.html",[240,1.48,714,2.221]],["body/entities/Upload.html",[3,0.159,4,0.143,5,0.143,9,0.246,20,0.738,23,0.016,25,0.665,36,0.176,50,0.224,56,1.988,58,1.843,63,0.057,108,0.01,109,0.01,115,1.781,205,4.03,214,1.329,230,1.995,234,3.956,240,1.876,301,2.816,339,1.337,397,2.28,463,1.995,518,3.218,537,3.546,589,5.05,602,2.08,712,4.141,714,2.816,767,5.05,785,3.003,788,4.408,790,3.003,791,4.913,793,4.913,918,4.408,920,3.729,922,4.272,923,4.796,930,4.408,933,4.434,1050,5.03,1051,5.03,1052,4.788,1061,3.478,1355,2.695,1356,5.679,1357,5.679,1358,3.472,1359,3.472,1360,3.472,1361,4.9,1362,3.472,1363,3.472,1364,3.472,1365,3.472,1366,3.472,1367,4.239,1368,4.239,1369,4.239,1370,3.472,1371,3.472,1372,3.472]],["title/injectables/UploadToAwsProvider.html",[40,0.577,749,2.367]],["body/injectables/UploadToAwsProvider.html",[3,0.158,4,0.142,5,0.277,9,0.244,10,1.083,11,1.749,13,2.068,15,1.64,19,2.706,20,0.59,22,1.423,23,0.016,24,1.31,25,0.602,26,0.97,31,1.129,34,2.068,36,0.341,37,2.253,38,1.382,39,1.321,40,0.729,41,0.54,42,1.382,50,0.158,51,2.012,58,0.942,63,0.056,75,1.129,84,1.447,85,1.986,89,1.677,91,1.211,102,1.677,103,1.518,105,1.677,106,2.643,107,0.904,108,0.01,109,0.01,188,2.45,205,3.463,263,1.16,284,1.869,340,2.167,351,1.518,409,2.266,498,2.679,518,2.266,602,1.788,712,3.536,714,1.984,717,3.787,749,2.989,754,2.679,761,4.221,769,2.986,780,2.679,788,3.787,792,2.986,1058,2.986,1179,2.45,1373,5.323,1374,2.986,1375,5.661,1376,5.661,1377,3.452,1378,3.452,1379,3.452,1380,3.452,1381,3.452,1382,3.452,1383,5.661,1384,2.986,1385,3.452,1386,4.88,1387,2.986,1388,3.452,1389,3.452,1390,3.452,1391,4.88,1392,3.452,1393,3.452,1394,4.88,1395,3.452,1396,3.452,1397,3.452,1398,3.452,1399,3.452,1400,3.452,1401,3.452,1402,3.452,1403,3.452,1404,3.452,1405,3.452,1406,3.452,1407,3.452,1408,3.452,1409,3.452,1410,3.452,1411,4.88,1412,3.452,1413,3.452,1414,2.986,1415,3.452]],["title/entities/User.html",[53,1.245,240,1.48]],["body/entities/User.html",[3,0.162,4,0.145,5,0.145,9,0.25,20,0.726,23,0.016,25,0.65,26,1.163,36,0.29,50,0.162,53,1.597,56,1.597,57,2.783,58,2,63,0.081,100,3.297,108,0.01,109,0.01,115,1.752,214,1.351,227,2.934,230,2.028,234,3.365,237,2.317,240,1.897,241,2.738,271,1.714,287,2.002,339,1.352,475,2.161,479,4.066,481,4.066,562,2.317,602,2.099,628,3.762,643,2.738,847,2.504,920,3.762,922,4.298,923,4.812,932,2.738,933,4.457,940,3.846,1050,5.201,1051,5.05,1061,3.517,1062,3.846,1097,4.645,1416,3.052,1417,3.528,1418,6.213,1419,3.528,1420,4.956,1421,3.528,1422,3.528,1423,3.528,1424,4.287,1425,3.528,1426,3.528,1427,4.956,1428,3.528,1429,5.729,1430,4.956,1431,3.528,1432,4.956,1433,3.528,1434,3.528,1435,3.528]],["title/controllers/UserController.html",[110,1.299,1436,2.743]],["body/controllers/UserController.html",[1,1.352,3,0.108,4,0.097,5,0.097,6,1.352,7,1.035,9,0.166,10,0.814,20,0.531,22,1.28,23,0.016,24,1.353,25,0.577,26,1.047,31,1.277,36,0.329,38,0.942,41,0.368,44,1.274,50,0.108,51,1.282,53,1.885,56,2.271,63,0.038,75,1.502,85,2.052,107,1.8,108,0.01,109,0.007,110,0.791,112,0.862,115,1.28,119,1.441,120,1.545,177,1.274,209,3.174,234,2.759,239,2.42,241,2.847,270,1.352,271,1.143,284,1.274,285,1.826,286,2.409,287,1.182,291,1.352,296,1.826,301,2.927,304,1.352,306,3.174,309,2.035,340,2.631,345,2.191,392,1.826,416,1.826,436,1.826,454,3.12,457,2.762,459,4.361,460,3.423,464,3.344,467,2.609,474,2.762,477,1.539,499,2.108,532,3.816,599,2.409,602,1.344,605,3.901,643,1.826,655,3.953,662,1.782,723,2.035,728,3.615,742,3.2,838,3.344,868,1.826,898,2.035,986,4.442,987,3.901,1004,2.961,1041,4.485,1103,3.5,1140,2.035,1144,4.406,1149,1.545,1150,3.5,1154,3.174,1155,1.826,1156,1.67,1216,3.901,1269,2.035,1436,2.604,1437,2.035,1438,3.669,1439,4.51,1440,3.669,1441,2.353,1442,3.669,1443,2.353,1444,2.353,1445,4.51,1446,2.353,1447,2.353,1448,2.353,1449,2.353,1450,2.353,1451,2.353,1452,3.669,1453,2.353,1454,3.669,1455,3.174,1456,2.353,1457,2.353,1458,4.51,1459,2.353,1460,2.353,1461,2.353,1462,2.353,1463,2.353,1464,2.353,1465,2.353,1466,2.353,1467,2.353,1468,2.353,1469,2.035,1470,2.035,1471,4.51,1472,3.669,1473,2.353,1474,2.353,1475,2.353,1476,2.353,1477,3.174,1478,2.353,1479,2.353,1480,2.353,1481,2.353,1482,2.353,1483,2.353,1484,2.353,1485,2.353,1486,2.353,1487,2.353,1488,2.353,1489,2.353,1490,2.353,1491,2.353,1492,2.353,1493,3.174,1494,2.353,1495,2.035,1496,2.035,1497,2.353,1498,2.353,1499,2.353,1500,2.353,1501,2.353,1502,2.353,1503,2.353,1504,3.669,1505,2.353,1506,2.353]],["title/injectables/UserCreateMany.html",[40,0.577,1507,2.367]],["body/injectables/UserCreateMany.html",[3,0.149,4,0.134,5,0.134,9,0.231,10,1.041,11,1.696,13,1.097,15,1.576,20,0.489,22,1.179,23,0.016,24,1.085,25,0.522,26,0.804,31,0.755,34,1.576,36,0.304,37,2.771,38,1.308,40,0.701,41,0.511,50,0.149,51,1.561,53,1.933,63,0.053,65,1.369,75,0.755,76,1.876,84,2.516,85,2.105,89,2.915,91,2.321,102,2.915,103,2.638,105,2.915,106,3.25,107,1.571,108,0.009,109,0.009,210,3.64,214,1.796,239,2.297,240,1.796,263,1.097,340,2.102,351,1.436,421,2.824,454,2.873,457,2,459,3.362,462,2.534,474,2,478,2.144,662,1.586,680,3.64,786,2.824,1004,3.08,1179,2.317,1233,5.19,1414,5.497,1507,2.873,1508,4.748,1509,2.824,1510,4.748,1511,3.265,1512,6.033,1513,3.265,1514,2.824,1515,3.265,1516,3.265,1517,4.69,1518,5.489,1519,3.265,1520,3.265,1521,3.265,1522,5.489,1523,3.265,1524,4.057,1525,6,1526,3.265,1527,4.69,1528,3.265,1529,3.265,1530,3.265,1531,3.265,1532,3.265,1533,3.265,1534,3.265,1535,3.265,1536,3.265,1537,3.265,1538,3.265,1539,3.265,1540,3.265,1541,3.265,1542,3.265,1543,4.69,1544,3.265]],["title/modules/UserModule.html",[122,1.299,140,2.221]],["body/modules/UserModule.html",[0,2.152,1,2.84,3,0.161,4,0.144,5,0.144,6,2.019,7,1.545,11,1.086,18,2.019,19,2.173,23,0.016,36,0.384,39,1.345,41,0.55,42,1.407,43,1.903,48,2.019,49,2.152,50,0.161,53,1.592,63,0.057,93,2.152,95,2.152,97,2.152,108,0.01,109,0.01,112,1.81,122,1.921,124,1.622,125,1.545,126,1.8,127,1.8,128,1.622,129,2.928,130,2.928,134,3.027,140,4.294,142,2.531,143,1.8,144,1.8,149,2.84,155,2.152,156,1.474,163,2.494,173,4.275,175,2.307,177,1.903,179,2.727,218,2.727,239,1.345,240,1.345,247,3.835,248,2.727,249,2.727,250,2.727,251,2.727,252,2.727,253,2.494,254,2.727,255,2.727,257,2.282,258,3.096,259,2.307,260,2.727,322,2.84,336,2.152,345,3.63,457,2.152,478,2.307,652,4.152,657,1.8,1086,3.04,1436,4.057,1470,3.04,1496,3.04,1507,4.152,1545,3.04,1546,3.04,1547,3.04,1548,3.514,1549,3.514,1550,3.514,1551,3.04,1552,3.04,1553,3.04,1554,3.04,1555,3.514,1556,3.514,1557,3.514,1558,3.514,1559,3.514,1560,3.514,1561,3.514]],["title/injectables/UserService.html",[40,0.577,345,1.878]],["body/injectables/UserService.html",[3,0.104,4,0.093,5,0.093,9,0.16,10,0.79,11,2.183,13,1.935,15,1.197,19,2.193,20,0.627,22,1.514,23,0.016,24,1.393,25,0.634,26,1.032,31,1.332,32,1.824,34,2.288,36,0.344,37,1.644,38,0.907,39,0.867,40,0.532,41,0.354,42,0.907,50,0.104,51,1.418,53,2.298,56,1.418,57,2.137,58,0.972,63,0.037,65,2.092,70,1.824,75,1.393,84,2.414,85,2.02,89,1.73,91,1.902,102,1.73,103,1.566,105,1.1,106,1.929,107,0.593,108,0.007,109,0.007,122,0.761,125,0.996,156,0.95,164,5.21,191,1.758,199,3.275,200,2.527,214,0.867,239,0.867,246,1.758,257,2.032,258,1.227,263,0.761,288,3.461,322,1.301,336,1.387,340,2.775,345,1.73,351,2.193,356,1.758,359,1.487,415,2.763,427,1.758,454,2.181,457,2.181,459,3.055,460,1.929,474,2.181,478,1.487,532,2.046,602,1.612,628,2.889,652,3.689,655,3.415,657,2.778,659,3.806,660,1.959,662,1.73,663,1.387,665,1.959,838,2.338,841,1.607,868,1.758,986,2.338,1093,1.959,1156,1.607,1169,3.806,1170,3.54,1219,3.415,1455,3.806,1469,1.959,1477,3.806,1493,3.806,1495,3.08,1507,3.055,1510,3.806,1512,1.959,1514,1.959,1551,1.959,1552,1.959,1553,1.959,1554,1.959,1562,1.959,1563,4.4,1564,4.4,1565,4.4,1566,2.265,1567,4.4,1568,4.4,1569,2.265,1570,2.265,1571,2.265,1572,2.265,1573,2.265,1574,2.265,1575,2.265,1576,2.265,1577,2.265,1578,2.265,1579,2.265,1580,2.265,1581,2.265,1582,2.265,1583,2.265,1584,2.265,1585,2.265,1586,2.265,1587,2.265,1588,3.561,1589,2.265,1590,4.4,1591,2.265,1592,4.4,1593,3.561,1594,2.265,1595,2.265]],["title/coverage.html",[1596,4.097]],["body/coverage.html",[0,2.467,1,1.526,5,0.109,6,2.796,7,2.139,8,3.452,23,0.016,25,0.35,40,1.105,52,2.061,53,0.856,54,1.439,63,0.118,85,0.932,108,0.008,109,0.008,110,2.209,111,1.885,113,2.298,117,1.627,128,1.226,141,1.526,145,2.061,146,1.744,147,1.744,148,1.744,157,1.29,158,2.645,180,1.885,182,1.885,184,2.061,186,2.645,190,2.061,239,1.017,240,2.234,245,2.061,264,2.298,268,1.885,269,2.298,271,1.29,275,1.744,280,1.627,287,0.856,288,1.526,316,1.439,317,1.439,318,1.627,319,1.627,321,1.885,326,1.885,338,2.298,345,1.29,382,2.298,391,2.061,428,2.298,454,1.627,456,3.126,457,1.627,458,3.452,459,1.627,460,1.439,488,1.627,489,2.781,490,2.061,491,2.298,500,1.627,501,2.298,502,3.126,587,1.744,607,1.744,608,2.298,609,2.298,610,1.439,652,1.627,653,2.298,654,2.298,683,2.298,684,2.298,711,1.885,712,3.12,713,2.298,714,1.526,729,1.627,749,1.627,758,2.298,799,2.298,800,3.126,821,1.885,822,3.126,823,3.126,833,1.627,834,1.885,836,1.627,838,1.744,839,2.298,840,2.298,845,3.126,846,2.298,850,1.744,857,2.298,900,2.298,901,3.126,904,2.298,913,1.439,914,1.744,915,2.298,941,2.298,945,1.627,957,2.298,967,1.885,968,1.744,970,2.298,985,2.298,993,2.298,1025,1.744,1026,2.298,1041,1.885,1042,2.298,1044,2.298,1080,2.298,1096,2.298,1152,1.627,1158,2.061,1159,2.061,1193,2.298,1195,1.526,1223,6.907,1261,2.298,1264,2.298,1274,2.298,1279,2.298,1292,2.298,1324,2.298,1355,2.061,1373,2.298,1374,2.298,1416,2.298,1424,2.298,1436,1.885,1437,2.298,1507,1.627,1508,2.298,1509,2.298,1562,2.298,1596,2.061,1597,2.656,1598,2.656,1599,6.972,1600,5.835,1601,7.224,1602,6.972,1603,2.656,1604,2.298,1605,3.126,1606,5.429,1607,2.656,1608,4.864,1609,2.656,1610,2.656,1611,2.656,1612,2.656,1613,2.656,1614,2.656,1615,2.298,1616,2.656,1617,2.656,1618,4.864,1619,4.027,1620,2.656]],["title/dependencies.html",[125,2.044,1621,2.79]],["body/dependencies.html",[23,0.016,41,0.78,42,1.996,43,2.699,45,3.536,47,3.536,63,0.102,108,0.013,109,0.013,125,2.191,156,2.09,175,3.272,214,1.908,271,2.421,397,3.272,398,4.31,444,4.31,473,1.996,475,3.052,477,2.09,725,4.31,780,3.867,847,3.536,872,4.31,1034,3.867,1384,4.31,1387,4.31,1622,4.983,1623,4.983,1624,6.235,1625,4.983,1626,4.983,1627,4.983,1628,4.983,1629,4.983,1630,4.983,1631,4.983,1632,4.983,1633,4.983,1634,4.983,1635,4.983,1636,4.983,1637,4.983,1638,4.983,1639,4.983,1640,4.983,1641,4.983,1642,4.983,1643,4.983,1644,4.983,1645,4.983,1646,4.983]],["title/miscellaneous/enumerations.html",[1647,1.747,1648,4.022]],["body/miscellaneous/enumerations.html",[9,0.348,23,0.016,108,0.012,109,0.012,287,1.991,291,3.551,499,4.573,518,4.058,528,4.796,532,3.551,533,5.345,534,5.345,538,5.345,564,4.796,565,5.345,566,5.345,567,5.345,670,5.345,712,2.824,734,5.345,767,4.796,1355,3.813,1367,5.345,1368,5.345,1369,5.345,1605,3.813,1647,2.661,1648,4.25,1649,4.25,1650,4.913,1651,6.18,1652,4.913]],["title/miscellaneous/functions.html",[1647,1.747,1653,4.022]],["body/miscellaneous/functions.html",[9,0.431,23,0.014,108,0.014,109,0.014,128,3.426,1615,5.27,1647,3.3,1653,5.27,1654,6.092]],["title/index.html",[9,0.228,399,2.79,1655,3.226]],["body/index.html",[4,0.192,23,0.016,68,2.865,107,1.225,108,0.012,109,0.012,235,4.046,467,3.384,603,3.071,619,4.046,657,2.396,743,3.63,1078,4.046,1079,4.046,1524,4.046,1596,3.63,1656,4.677,1657,4.677,1658,5.989,1659,4.677,1660,4.677,1661,4.677,1662,4.677,1663,6.607,1664,4.677,1665,4.677,1666,7.491,1667,4.677,1668,4.677,1669,4.677,1670,7.367,1671,4.677,1672,5.989,1673,4.677,1674,4.677,1675,4.677,1676,5.989,1677,5.989,1678,4.677,1679,4.677,1680,4.677,1681,5.989,1682,5.989,1683,4.677,1684,4.677,1685,4.677,1686,4.677,1687,4.677,1688,4.046,1689,4.677,1690,4.677,1691,4.677,1692,4.677,1693,4.677,1694,4.677,1695,4.677,1696,4.677,1697,4.677,1698,4.677,1699,4.677,1700,4.677,1701,4.677,1702,4.677,1703,4.046]],["title/modules.html",[124,2.438]],["body/modules.html",[23,0.013,108,0.013,109,0.013,123,3.878,124,2.523,134,3.347,135,3.589,136,3.589,137,3.347,138,3.589,139,3.347,140,3.141,1688,6.759,1704,7.814,1705,7.814,1706,7.814]],["title/overview.html",[1707,4.566]],["body/overview.html",[2,2.647,23,0.016,108,0.01,109,0.01,112,1.25,117,3.445,122,1.147,123,5.511,124,1.575,125,1.5,126,1.747,127,1.747,128,1.575,129,1.747,130,1.747,131,2.951,132,2.951,133,2.951,134,4.591,135,4.534,136,4.408,137,4.229,138,4.881,139,4.229,140,4.23,141,4.054,142,2.479,143,1.747,144,1.747,230,1.96,263,1.147,288,3.968,313,2.951,314,2.951,315,2.951,316,3.315,317,3.046,318,3.445,319,3.445,345,3.354,416,2.647,455,1.306,599,2.24,652,3.445,729,3.445,747,2.951,748,2.951,749,3.445,945,4.229,950,2.951,951,2.951,952,2.951,967,2.421,980,2.951,981,2.951,1152,4.229,1182,2.951,1183,2.951,1185,2.951,1195,3.968,1317,2.951,1318,2.951,1319,2.951,1507,3.445,1545,2.951,1546,2.951,1547,2.951,1707,2.951,1708,4.839,1709,3.411,1710,3.411,1711,3.411]],["title/properties.html",[339,1.269,1621,2.79]],["body/properties.html",[23,0.016,107,1.579,108,0.014,109,0.014,339,1.645,436,4.679,603,3.959,1703,5.215,1712,6.029,1713,6.029]],["title/miscellaneous/typealiases.html",[1647,1.747,1714,4.65]],["body/miscellaneous/typealiases.html",[6,3.441,7,2.633,8,4.944,9,0.424,23,0.014,25,0.605,34,2.013,54,3.773,108,0.014,109,0.014,1647,3.243,1715,5.988,1716,5.18]],["title/miscellaneous/variables.html",[200,3.3,1647,1.747]],["body/miscellaneous/variables.html",[6,2.754,7,2.107,8,4.317,9,0.339,23,0.016,25,0.529,28,3.401,44,2.596,51,1.73,52,4.721,53,2.153,54,3.295,58,1.66,75,1.407,101,4.145,108,0.012,109,0.012,145,3.719,190,4.721,191,3.719,200,3.401,271,2.955,291,3.496,301,4.17,391,4.721,401,5.262,463,2.754,499,4.17,1158,4.721,1159,3.719,1604,5.262,1605,3.719,1647,2.596,1649,5.262,1716,4.145,1717,4.792,1718,4.792,1719,4.792,1720,6.083,1721,4.792,1722,4.792,1723,4.792,1724,4.792,1725,4.792]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1223,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1712,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1636,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1643,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1645,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1635,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1601,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1616,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1599,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1602,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1606,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1608,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1618,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1603,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1619,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":540,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":599,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["1.1.26",{"_index":1623,"title":{},"body":{"dependencies.html":{}}}],["1.4.12",{"_index":1632,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1614,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1612,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":987,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{}}}],["10.0.0",{"_index":1624,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1630,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1626,"title":{},"body":{"dependencies.html":{}}}],["10.4.15",{"_index":1628,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":1052,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["10})@apiquery({name",{"_index":1453,"title":{},"body":{"controllers/UserController.html":{}}}],["11.0.4",{"_index":1646,"title":{},"body":{"dependencies.html":{}}}],["123",{"_index":604,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["1234",{"_index":1484,"title":{},"body":{"controllers/UserController.html":{}}}],["128",{"_index":1361,"title":{},"body":{"entities/Upload.html":{}}}],["14",{"_index":1711,"title":{},"body":{"overview.html":{}}}],["16t12:00:00+0000",{"_index":541,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17",{"_index":1710,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":1639,"title":{},"body":{"dependencies.html":{}}}],["1})@get('/:id",{"_index":1456,"title":{},"body":{"controllers/UserController.html":{}}}],["1})@isoptional()@ispositive",{"_index":989,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["2",{"_index":416,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["2.0.6",{"_index":1627,"title":{},"body":{"dependencies.html":{}}}],["2.1643.0",{"_index":1633,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":1610,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["2024",{"_index":539,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["25",{"_index":1611,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":1061,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["3.3.0",{"_index":1625,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":1617,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1613,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":600,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["5",{"_index":1709,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1634,"title":{},"body":{"dependencies.html":{}}}],["512",{"_index":1069,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["60",{"_index":1424,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["66",{"_index":1609,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":1644,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1708,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":1629,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":1641,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":555,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["9.15.0",{"_index":1637,"title":{},"body":{"dependencies.html":{}}}],["96",{"_index":1418,"title":{},"body":{"entities/User.html":{}}}],["_",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["aac",{"_index":1371,"title":{},"body":{"entities/Upload.html":{}}}],["abstract",{"_index":905,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["accept",{"_index":738,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["access",{"_index":390,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/RefreshTokenProvider.html":{}}}],["access_token",{"_index":902,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["accesskeyid",{"_index":1398,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["accesstoken",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["accesstokenprovider",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["activeuser",{"_index":1158,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["actual",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Paginated.html":{}}}],["add",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["additional",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{}}}],["adds",{"_index":586,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["against",{"_index":452,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["alias",{"_index":1607,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1715,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowedmimetypes",{"_index":770,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["allowedmimetypes.includes(file.mimetype",{"_index":775,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["alphanumeric",{"_index":559,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["already",{"_index":676,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["amazing",{"_index":1689,"title":{},"body":{"index.html":{}}}],["another",{"_index":1212,"title":{},"body":{"injectables/PostsService.html":{}}}],["api",{"_index":1455,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["apiheader",{"_index":726,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["apiheaders",{"_index":727,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["apiheaders(['undefined",{"_index":718,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["apioperation",{"_index":728,"title":{},"body":{"controllers/FileUploadController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":1103,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":476,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":461,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":529,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":584,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({description",{"_index":512,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({})@isjson()@isoptional",{"_index":622,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiquery",{"_index":1471,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":1154,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":1472,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":1474,"title":{},"body":{"controllers/UserController.html":{}}}],["apiversion",{"_index":709,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app",{"_index":1668,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["app_interceptor",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{}}}],["appconfiguration",{"_index":688,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["appcontroller",{"_index":111,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1496,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["application'})@httpcode(httpstatus.created)@auth(authtype.none)@useinterceptors(classserializerinterceptor)@post",{"_index":1447,"title":{},"body":{"controllers/UserController.html":{}}}],["application/json",{"_index":739,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["applications",{"_index":1662,"title":{},"body":{"index.html":{}}}],["applying",{"_index":261,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":123,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":117,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":1432,"title":{},"body":{"entities/User.html":{}}}],["array",{"_index":417,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["assess",{"_index":892,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["assign",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["associated",{"_index":1130,"title":{},"body":{"controllers/PostsController.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["aud",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["audience",{"_index":95,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["audio",{"_index":1368,"title":{},"body":{"entities/Upload.html":{},"miscellaneous/enumerations.html":{}}}],["auth",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/PostsController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.bearer",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["auth(authtype.bearer)@post('refresh",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth(authtype.none",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["auth(authtype.none)@httpcode(httpstatus.ok)@post",{"_index":851,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["auth(authtype.none)@post('login')@httpcode(httpstatus.ok",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/access",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":391,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":268,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":859,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(undefined",{"_index":865,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticated",{"_index":812,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["authentication",{"_index":256,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{}}}],["authentication.controller.ts",{"_index":846,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:15",{"_index":852,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":333,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":857,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:16",{"_index":863,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:29",{"_index":870,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:31",{"_index":867,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:42",{"_index":866,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticationguard",{"_index":180,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":408,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":134,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":603,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":606,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["authorization",{"_index":733,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["authservice",{"_index":288,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":393,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":396,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":383,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":401,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":411,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":832,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["await",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":780,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["aws.provider",{"_index":753,"title":{},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{}}}],["aws.provider.ts",{"_index":1374,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["aws.provider.ts:15",{"_index":1382,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:28",{"_index":1380,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:9",{"_index":1378,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["awsconfig",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["awsconfiguration",{"_index":761,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["awsfileupload",{"_index":1375,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["awsfileupload(undefined",{"_index":1379,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["awskey",{"_index":782,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["backers",{"_index":1690,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":765,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["baseurl",{"_index":1008,"title":{},"body":{"injectables/PaginationService.html":{}}}],["bcrypt",{"_index":444,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":453,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":450,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(password",{"_index":451,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":326,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":734,"title":{},"body":{"controllers/FileUploadController.html":{},"miscellaneous/enumerations.html":{}}}],["before",{"_index":700,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["being",{"_index":1131,"title":{},"body":{"controllers/PostsController.html":{}}}],["bi",{"_index":938,"title":{},"body":{"entities/MetaOption.html":{}}}],["blog",{"_index":514,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["body",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["bootstrap",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1706,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1704,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1406,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["buffer",{"_index":445,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1659,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":691,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["calls",{"_index":1133,"title":{},"body":{"controllers/PostsController.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["cascade",{"_index":936,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":928,"title":{},"body":{"entities/MetaOption.html":{}}}],["cases",{"_index":1481,"title":{},"body":{"controllers/UserController.html":{}}}],["catch",{"_index":102,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["catch((error",{"_index":425,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["cause",{"_index":105,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["character",{"_index":646,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":560,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["check",{"_index":666,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["checking",{"_index":404,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["choice",{"_index":781,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["circular",{"_index":336,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["class",{"_index":63,"title":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":455,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":1468,"title":{},"body":{"controllers/UserController.html":{}}}],["clientid",{"_index":875,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":877,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cluster_appmodule",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":313,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":314,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":315,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_fileuploadmodule",{"_index":747,"title":{},"body":{"modules/FileUploadModule.html":{},"overview.html":{}}}],["cluster_fileuploadmodule_providers",{"_index":748,"title":{},"body":{"modules/FileUploadModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":950,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_exports",{"_index":951,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":952,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":980,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":981,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":982,"title":{},"body":{"modules/PaginationModule.html":{}}}],["cluster_postsmodule",{"_index":1182,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":1185,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1184,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1183,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1317,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1318,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1319,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1545,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1546,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1547,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["column",{"_index":933,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["column({type",{"_index":922,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["commit",{"_index":1529,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["compare",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords",{"_index":429,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords(undefined",{"_index":431,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["compares",{"_index":433,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparison",{"_index":911,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["compodoc/compodoc",{"_index":1622,"title":{},"body":{"dependencies.html":{}}}],["composed",{"_index":557,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["config",{"_index":697,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["config/aws.config",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["config/index.config",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":1554,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["configmodule",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forfeature(awsconfig",{"_index":756,"title":{},"body":{"modules/FileUploadModule.html":{}}}],["configmodule.forfeature(googleconfig",{"_index":337,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":247,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1556,"title":{},"body":{"modules/UserModule.html":{}}}],["configmodule.forroot",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["configservice.get('database.port",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_host",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_name",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_password",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_port",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_username",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["configuration",{"_index":246,"title":{},"body":{"modules/AppModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{}}}],["confirmation",{"_index":1113,"title":{},"body":{"controllers/PostsController.html":{}}}],["conflictexception",{"_index":766,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["conflictexception(error.message",{"_index":798,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["connect",{"_index":1520,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["connection",{"_index":1522,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["console.log",{"_index":409,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/UploadToAwsProvider.html":{}}}],["console.log('after",{"_index":705,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log('before",{"_index":702,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log('canactivate",{"_index":424,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["console.log('file",{"_index":784,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["console.log('guards",{"_index":413,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["console.log('hitting",{"_index":1503,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log('inside",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["console.log('node_env",{"_index":1585,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('profile",{"_index":1586,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`environment",{"_index":1584,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`limit",{"_index":1492,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(getuserparamdto",{"_index":1491,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log({updatepostdto",{"_index":1175,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["constructor(appconfiguration",{"_index":686,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["constructor(authservice",{"_index":1566,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(awsconfiguration",{"_index":1377,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["constructor(datasource",{"_index":1511,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["constructor(googleconfiguration",{"_index":861,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["constructor(metaoptionsrepository",{"_index":958,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":119,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":386,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(request",{"_index":995,"title":{},"body":{"injectables/PaginationService.html":{}}}],["constructor(tagsrepository",{"_index":1329,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(uploadtoawsprovider",{"_index":759,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["constructor(userrepository",{"_index":656,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["constructor(userservice",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(userservices",{"_index":1194,"title":{},"body":{"injectables/PostsService.html":{}}}],["containing",{"_index":1115,"title":{},"body":{"controllers/PostsController.html":{}}}],["content",{"_index":503,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/FileUploadController.html":{},"entities/Post.html":{}}}],["contenttype",{"_index":1410,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/DataResponseInterceptor.html":{}}}],["context.getclass",{"_index":406,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":405,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":110,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FileUploadController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/FileUploadController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('file",{"_index":731,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["controller('google",{"_index":854,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('meta",{"_index":947,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":1161,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":1308,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":1473,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convert",{"_index":1480,"title":{},"body":{"controllers/UserController.html":{}}}],["coverage",{"_index":1596,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["create(undefined",{"_index":961,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["created",{"_index":462,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/PostsController.html":{},"injectables/UserCreateMany.html":{}}}],["createdat",{"_index":1356,"title":{},"body":{"entities/Upload.html":{}}}],["createdatecolumn",{"_index":918,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["createddate",{"_index":916,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdmetaoption",{"_index":964,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createdpost",{"_index":1171,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdtags",{"_index":1310,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createmany",{"_index":1510,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["createmany(undefined",{"_index":1514,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["createmanyusers",{"_index":1438,"title":{},"body":{"controllers/UserController.html":{}}}],["createmanyusers(@body",{"_index":1502,"title":{},"body":{"controllers/UserController.html":{}}}],["createmanyusers(createusersdto",{"_index":1441,"title":{},"body":{"controllers/UserController.html":{}}}],["createmanyusersdto",{"_index":454,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createmetaoptions",{"_index":942,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(@body",{"_index":948,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(createmetaoptionsdto",{"_index":943,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptionsdto",{"_index":488,"title":{"classes/CreateMetaOptionsDto.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1098,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["createpost(@body",{"_index":1309,"title":{},"body":{"controllers/TagsController.html":{}}}],["createpost(createpostdto",{"_index":1102,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createtag",{"_index":1295,"title":{},"body":{"controllers/TagsController.html":{}}}],["createpost.slug.tolowercase",{"_index":1227,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost.tags",{"_index":1221,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":500,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdtowithmeta",{"_index":1095,"title":{},"body":{"entities/Post.html":{}}}],["createpostdto})@patch",{"_index":1141,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto})@post",{"_index":1106,"title":{},"body":{"controllers/PostsController.html":{}}}],["creates",{"_index":1084,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{}}}],["createtag",{"_index":1298,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtag(undefined",{"_index":1332,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtagdto",{"_index":607,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createtoken",{"_index":801,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["createtoken(undefined",{"_index":804,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["createuser",{"_index":655,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(@body",{"_index":1499,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(createuserdto",{"_index":1446,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(undefined",{"_index":660,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":460,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto})@apiquery({name",{"_index":1451,"title":{},"body":{"controllers/UserController.html":{}}}],["createuserprovider",{"_index":652,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":1504,"title":{},"body":{"controllers/UserController.html":{}}}],["createusersdto",{"_index":1445,"title":{},"body":{"controllers/UserController.html":{}}}],["creating",{"_index":937,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{}}}],["creation",{"_index":1109,"title":{},"body":{"controllers/PostsController.html":{}}}],["credentials",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":978,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["currentpage",{"_index":975,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["custom",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["data",{"_index":706,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["database",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileUploadService.html":{},"injectables/UserCreateMany.html":{}}}],["databaseconfig",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":182,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["datasource",{"_index":1512,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["date",{"_index":537,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["date().toisostring().replace(/:/g",{"_index":1395,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["db",{"_index":891,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["declarations",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":400,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["decorators",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/FileUploadController.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/Upload.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["decorators/auth.decorator",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["default",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"entities/Upload.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":385,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaultvaluepipe",{"_index":1464,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":1490,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(10",{"_index":1488,"title":{},"body":{"controllers/UserController.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":1149,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["delete('/soft",{"_index":1314,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(undefined",{"_index":1200,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":1120,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedatecolumn",{"_index":1282,"title":{},"body":{"entities/Tag.html":{}}}],["deleteddate",{"_index":1280,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":1099,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":1178,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1117,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleterequest",{"_index":1180,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletes",{"_index":1118,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletetag",{"_index":1293,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(@query('id",{"_index":1312,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(id",{"_index":1299,"title":{},"body":{"controllers/TagsController.html":{}}}],["dependencies",{"_index":125,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":257,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["deprecated",{"_index":1591,"title":{},"body":{"injectables/UserService.html":{}}}],["description",{"_index":107,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"controllers/FileUploadController.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"entities/Tag.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":1116,"title":{},"body":{"controllers/PostsController.html":{}}}],["development",{"_index":1669,"title":{},"body":{"index.html":{}}}],["directional",{"_index":939,"title":{},"body":{"entities/MetaOption.html":{}}}],["dist/**/*.entity.js",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["document",{"_index":1369,"title":{},"body":{"entities/Upload.html":{},"miscellaneous/enumerations.html":{}}}],["documentation",{"_index":587,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["doe",{"_index":482,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["doing",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["done",{"_index":1431,"title":{},"body":{"entities/User.html":{}}}],["draft",{"_index":565,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto/pagination",{"_index":999,"title":{},"body":{"injectables/PaginationService.html":{}}}],["dtos/create",{"_index":662,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["dtos/get",{"_index":1156,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/google",{"_index":853,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/patch",{"_index":1155,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["dtos/refresh",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["dtos/signin.dto",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["e.g",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["e2e",{"_index":1678,"title":{},"body":{"index.html":{}}}],["each",{"_index":487,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":1047,"title":{},"body":{"entities/Post.html":{}}}],["eagerly",{"_index":1092,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1660,"title":{},"body":{"index.html":{}}}],["eight",{"_index":642,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["en",{"_index":740,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["enables",{"_index":1089,"title":{},"body":{"entities/Post.html":{}}}],["enddate",{"_index":824,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PostsService.html":{}}}],["endpoint",{"_index":1477,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entire",{"_index":1559,"title":{},"body":{"modules/UserModule.html":{}}}],["entities",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":240,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["entity/meta",{"_index":954,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["entity/post.entity",{"_index":1189,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entity/tags.entity",{"_index":1322,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["entity/upload.entity",{"_index":755,"title":{},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{}}}],["entity/user.entity",{"_index":478,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entry",{"_index":796,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["enum",{"_index":589,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Upload.html":{}}}],["enumerations",{"_index":1648,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posts.enums",{"_index":583,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env}.local",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development.local",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserService.html":{}}}],["environmentvalidation",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":103,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["error.message",{"_index":106,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["error.stack",{"_index":1415,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["everywhere",{"_index":1560,"title":{},"body":{"modules/UserModule.html":{}}}],["example",{"_index":467,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["exception",{"_index":427,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["excerpt",{"_index":545,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["exclude",{"_index":1429,"title":{},"body":{"entities/User.html":{}}}],["executed",{"_index":699,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["execution",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1588,"title":{},"body":{"injectables/UserService.html":{}}}],["existing",{"_index":1143,"title":{},"body":{"controllers/PostsController.html":{}}}],["existingslug",{"_index":1228,"title":{},"body":{"injectables/PostsService.html":{}}}],["existingtags",{"_index":1344,"title":{},"body":{"injectables/TagsService.html":{}}}],["existinguser",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["existinguser.password",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":677,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["exp",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["expected",{"_index":1040,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["expiresin",{"_index":253,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{},"modules/UserModule.html":{}}}],["export",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exporting",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["exports",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/FileUploadController.html":{},"injectables/PaginationService.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":717,"title":{},"body":{"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["extends",{"_index":837,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["extension",{"_index":1389,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["extract",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["extractrequestfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(undefined",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["failed",{"_index":1414,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{}}}],["false",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["false})@isoptional()@isarray()@isint({each",{"_index":571,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["family_name",{"_index":889,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["featured",{"_index":517,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["featuredimageurl",{"_index":504,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["fetch",{"_index":988,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{}}}],["few",{"_index":1088,"title":{},"body":{"entities/Post.html":{}}}],["field",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fields",{"_index":1148,"title":{},"body":{"controllers/PostsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1409,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.mimetype",{"_index":792,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["file.originalname",{"_index":1388,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.size",{"_index":794,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["fileinterceptor",{"_index":724,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["filename",{"_index":788,"title":{},"body":{"injectables/FileUploadService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{}}}],["filenamewithoutspace",{"_index":1391,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["filetypes",{"_index":767,"title":{},"body":{"injectables/FileUploadService.html":{},"entities/Upload.html":{},"miscellaneous/enumerations.html":{}}}],["filetypes.image",{"_index":790,"title":{},"body":{"injectables/FileUploadService.html":{},"entities/Upload.html":{}}}],["fileuploadcontroller",{"_index":711,"title":{"controllers/FileUploadController.html":{}},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"coverage.html":{}}}],["fileuploadmodule",{"_index":135,"title":{"modules/FileUploadModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FileUploadModule.html":{},"modules.html":{},"overview.html":{}}}],["fileuploadservice",{"_index":729,"title":{"injectables/FileUploadService.html":{}},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"coverage.html":{},"overview.html":{}}}],["final",{"_index":1476,"title":{},"body":{"controllers/UserController.html":{}}}],["finally",{"_index":1542,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["finalresponse",{"_index":1017,"title":{},"body":{"injectables/PaginationService.html":{}}}],["find",{"_index":890,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{}}}],["findall",{"_index":1493,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(undefined",{"_index":1572,"title":{},"body":{"injectables/UserService.html":{}}}],["findmultipletags",{"_index":1325,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(undefined",{"_index":1335,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":1563,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(undefined",{"_index":1574,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyemail",{"_index":1564,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyemail(undefined",{"_index":1576,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbygoogleid",{"_index":1565,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbygoogleid(undefined",{"_index":1578,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":420,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["first",{"_index":562,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"entities/User.html":{}}}],["firstname",{"_index":479,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/User.html":{}}}],["footerenabled",{"_index":525,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["force",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["format",{"_index":521,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["forwardref",{"_index":322,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["found",{"_index":1170,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":1658,"title":{},"body":{"index.html":{}}}],["from.env",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["function",{"_index":245,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["functions",{"_index":1653,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":795,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["generatefilename",{"_index":1376,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatefilename(undefined",{"_index":1381,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatetoken",{"_index":862,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["generatetokenprovider",{"_index":317,"title":{"injectables/GenerateTokenProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{},"overview.html":{}}}],["generatetokens",{"_index":802,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["generatetokens(undefined",{"_index":807,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["generic",{"_index":972,"title":{},"body":{"interfaces/Paginated.html":{}}}],["get('/:id",{"_index":1486,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':userid",{"_index":1164,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts",{"_index":1100,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallposts(undefined",{"_index":1202,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(userid",{"_index":1123,"title":{},"body":{"controllers/PostsController.html":{}}}],["getalltags",{"_index":1326,"title":{},"body":{"injectables/TagsService.html":{}}}],["gethello",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpostsbasedto",{"_index":821,"title":{"classes/GetPostsBaseDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["getpostsquerydto",{"_index":836,"title":{"classes/GetPostsQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["getrefreshtoken",{"_index":1265,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["getrefreshtoken(undefined",{"_index":1267,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["gettagbyid",{"_index":1327,"title":{},"body":{"injectables/TagsService.html":{}}}],["gettagbyid(undefined",{"_index":1338,"title":{},"body":{"injectables/TagsService.html":{}}}],["getting",{"_index":399,"title":{"index.html":{}},"body":{"guards/AuthenticationGuard.html":{}}}],["getuserparamdto",{"_index":1458,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers",{"_index":1439,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":1449,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersparamdto",{"_index":838,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["gif",{"_index":778,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["given",{"_index":434,"title":{},"body":{"injectables/BcryptProvider.html":{},"controllers/PostsController.html":{}}}],["given_name",{"_index":888,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["global",{"_index":262,"title":{},"body":{"modules/AppModule.html":{}}}],["global/interceptors/data",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["global/pagination/pagination.module",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["global/pagination/pagination.service",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["globally",{"_index":1557,"title":{},"body":{"modules/UserModule.html":{}}}],["google",{"_index":847,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["googleauthentication",{"_index":848,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["googleauthentication(@body",{"_index":855,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["googleauthentication(body",{"_index":849,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["googleauthenticationcontroller",{"_index":321,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":318,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["googleconfig",{"_index":334,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["googleconfiguration",{"_index":864,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleid",{"_index":628,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["googletokendto",{"_index":850,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["grow",{"_index":1685,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["guards/access",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["handle",{"_index":674,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["handled",{"_index":708,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["handles",{"_index":1108,"title":{},"body":{"controllers/PostsController.html":{}}}],["hashed",{"_index":435,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashedpassword",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashes",{"_index":443,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashing",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{}}}],["hashing.provider",{"_index":446,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashingprovider",{"_index":316,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":430,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(undefined",{"_index":441,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["headers",{"_index":1462,"title":{},"body":{"controllers/UserController.html":{}}}],["hello",{"_index":266,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["here",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"index.html":{}}}],["host",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["httpcode",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.created",{"_index":1497,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["httpexception",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["httpexception('author",{"_index":1218,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('email",{"_index":675,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["httpexception('invalid",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('no",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/PostsController.html":{}}}],["httpexception('post",{"_index":1237,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('slug",{"_index":1230,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('tag",{"_index":1347,"title":{},"body":{"injectables/TagsService.html":{}}}],["httpexception('tags",{"_index":1224,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('transaction",{"_index":1541,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["httpexception('unauthorized",{"_index":426,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["httpexception('user",{"_index":1169,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["httpexception(`${error.message",{"_index":104,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["https://example.com/image.jpg",{"_index":520,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["https://nestjs.com",{"_index":1700,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":548,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org",{"_index":596,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":1179,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{}}}],["httpstatus.conflict",{"_index":678,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["httpstatus.created",{"_index":1168,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.internal_server_error",{"_index":1527,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["httpstatus.moved_permanently",{"_index":1589,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":1219,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.ok",{"_index":1163,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.request_timeout",{"_index":1523,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["httpstatus.unauthorized",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{}}}],["hyphens",{"_index":561,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["iat",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["id",{"_index":602,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id'})@delete",{"_index":1300,"title":{},"body":{"controllers/TagsController.html":{}}}],["id'})@delete('/soft",{"_index":1304,"title":{},"body":{"controllers/TagsController.html":{}}}],["identifier",{"_index":1597,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":570,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["idtoken",{"_index":885,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["ignoreexpiration",{"_index":99,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["image",{"_index":518,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"miscellaneous/enumerations.html":{}}}],["image/gif",{"_index":772,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["image/jpeg",{"_index":771,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["image/jpg",{"_index":774,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["image/png",{"_index":773,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["implements",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["import",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imported",{"_index":1561,"title":{},"body":{"modules/UserModule.html":{}}}],["importing",{"_index":830,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["imports",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["in(tags",{"_index":1352,"title":{},"body":{"injectables/TagsService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":438,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/PostsController.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject(appconfig.key",{"_index":698,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["inject(awsconfig.key",{"_index":769,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["inject(forwardref",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserService.html":{}}}],["inject(googleconfig.key",{"_index":874,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["inject(jwtconfig.key",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["inject(profileconfig.key",{"_index":1581,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(request",{"_index":1002,"title":{},"body":{"injectables/PaginationService.html":{}}}],["injectable",{"_index":40,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":263,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["injection",{"_index":258,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injections",{"_index":1210,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository",{"_index":663,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoptionrepository",{"_index":1215,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(metaoptionsrepository",{"_index":963,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["injectrepository(postrepository",{"_index":1214,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tagrepository",{"_index":1343,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(upload",{"_index":768,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["injectrepository(user",{"_index":665,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["installation",{"_index":1665,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1667,"title":{},"body":{"index.html":{}}}],["instance",{"_index":421,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/UserCreateMany.html":{}}}],["instead",{"_index":1093,"title":{},"body":{"entities/Post.html":{},"injectables/UserService.html":{}}}],["integer",{"_index":605,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["intercept",{"_index":685,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":689,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":967,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"coverage.html":{},"overview.html":{}}}],["interface/paginated.interface",{"_index":1001,"title":{},"body":{"injectables/PaginationService.html":{}}}],["interfaces",{"_index":969,"title":{},"body":{"interfaces/Paginated.html":{}}}],["intersectiontype",{"_index":829,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["invalid",{"_index":617,"title":{},"body":{"classes/CreateTagDto.html":{},"injectables/RefreshTokenProvider.html":{}}}],["ip",{"_index":1463,"title":{},"body":{"controllers/UserController.html":{}}}],["isarray",{"_index":465,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isauthenticated",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":575,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["isdate()@isoptional",{"_index":826,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["isemail",{"_index":648,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":629,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":576,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(['post",{"_index":590,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":594,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypes",{"_index":591,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":577,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isiso8601",{"_index":578,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":495,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":471,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isemail",{"_index":1275,"title":{},"body":{"classes/SignInDto.html":{}}}],["isnotempty()@isjson",{"_index":493,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["isnotempty()@isstring",{"_index":1277,"title":{},"body":{"classes/SignInDto.html":{}}}],["isnumber",{"_index":1033,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":579,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["ispasswordcorrect",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispositive",{"_index":992,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["iss",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["isstring",{"_index":496,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":1262,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":631,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional",{"_index":633,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":635,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":637,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issuer",{"_index":97,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["isurl",{"_index":580,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["item",{"_index":601,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":466,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{}}}],["itemsperpage",{"_index":973,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["jane",{"_index":485,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["jane@doe.com",{"_index":486,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["john",{"_index":480,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["john@doe.com",{"_index":483,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["joi",{"_index":1638,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1079,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["joincolumn",{"_index":934,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":1071,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["jpeg",{"_index":777,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["jpg",{"_index":776,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["json",{"_index":547,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["json.stringify(guards",{"_index":414,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["jwt",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["jwt(refresh",{"_index":811,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["jwtconfig",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["jwtconfig.key",{"_index":255,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwtsecret",{"_index":249,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwttokenaudience",{"_index":251,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwttokenexpiration",{"_index":254,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwttokenissuer",{"_index":252,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtmodule",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtmodule.registerasync",{"_index":248,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["kamil",{"_index":1697,"title":{},"body":{"index.html":{}}}],["keeping",{"_index":1536,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["key",{"_index":498,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"injectables/UploadToAwsProvider.html":{}}}],["keyof",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keys",{"_index":407,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["language",{"_index":613,"title":{},"body":{"classes/CreateTagDto.html":{},"controllers/FileUploadController.html":{}}}],["last",{"_index":977,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["lastname",{"_index":481,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/User.html":{}}}],["lazy",{"_index":1094,"title":{},"body":{"entities/Post.html":{}}}],["legend",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1051,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["letter",{"_index":644,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["library",{"_index":872,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1703,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1682,"title":{},"body":{"index.html":{}}}],["likes",{"_index":1039,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["limit",{"_index":986,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["links",{"_index":971,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["literal",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["loading",{"_index":1091,"title":{},"body":{"entities/Post.html":{}}}],["logic",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginbody",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginbody",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginticket",{"_index":883,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":887,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["logs",{"_index":1111,"title":{},"body":{"controllers/PostsController.html":{}}}],["loop",{"_index":418,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["lowercase",{"_index":558,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["m2m",{"_index":1082,"title":{},"body":{"entities/Post.html":{}}}],["main",{"_index":552,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["make",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["making",{"_index":1211,"title":{},"body":{"injectables/PostsService.html":{}}}],["many",{"_index":457,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["many.ts",{"_index":1509,"title":{},"body":{"injectables/UserCreateMany.html":{},"coverage.html":{}}}],["many.ts:13",{"_index":1515,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["many.ts:7",{"_index":1513,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["manytomany",{"_index":1072,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":1065,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":1073,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":1045,"title":{},"body":{"entities/Post.html":{}}}],["map",{"_index":695,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((data",{"_index":704,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["match",{"_index":909,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["matches",{"_index":440,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":651,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":593,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matches(/^https?:\\/\\/[^\\s",{"_index":627,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["matching",{"_index":109,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":1014,"title":{},"body":{"injectables/PaginationService.html":{}}}],["maxlength",{"_index":581,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":598,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(255",{"_index":592,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":588,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":649,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["media",{"_index":1370,"title":{},"body":{"entities/Upload.html":{}}}],["message",{"_index":556,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["meta",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":398,"title":{},"body":{"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["metaoption",{"_index":913,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":1206,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptions",{"_index":505,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["metaoptions.post",{"_index":1055,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":147,"title":{"controllers/MetaOptionsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":136,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":960,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":945,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":492,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":701,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["migrations",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["mime",{"_index":791,"title":{},"body":{"injectables/FileUploadService.html":{},"entities/Upload.html":{}}}],["minimum",{"_index":641,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginationQueryDto.html":{}}}],["minlength",{"_index":582,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":626,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":497,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":650,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1647,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1681,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1672,"title":{},"body":{"index.html":{}}}],["modern",{"_index":611,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["module",{"_index":122,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["modules",{"_index":124,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1694,"title":{},"body":{"index.html":{}}}],["mp4",{"_index":1372,"title":{},"body":{"entities/Upload.html":{}}}],["multipart/form",{"_index":732,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["multiple",{"_index":1442,"title":{},"body":{"controllers/UserController.html":{}}}],["myśliwiec",{"_index":1698,"title":{},"body":{"index.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["necessary",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["need",{"_index":1475,"title":{},"body":{"controllers/UserController.html":{}}}],["needs",{"_index":403,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["nest",{"_index":1663,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1702,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":693,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs/common",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DataResponseInterceptor.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1034,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":725,"title":{},"body":{"controllers/FileUploadController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":477,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/FileUploadController.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjsis6@awesome",{"_index":484,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["new",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newurl",{"_index":1011,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.origin}${newurl.pathname}?page=1&limit=${limit",{"_index":1018,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${nextpage}&limit=${limit",{"_index":1021,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${page}&limit=${limit",{"_index":1020,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${prevpage}&limit=${limit",{"_index":1022,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${totalpages}&limit=${limit",{"_index":1019,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newuser",{"_index":680,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserCreateMany.html":{}}}],["newuser.push(savednewuserinstance",{"_index":1535,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["newuserinstance",{"_index":1531,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["next",{"_index":690,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["next.handle().pipe",{"_index":703,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nextpage",{"_index":1015,"title":{},"body":{"injectables/PaginationService.html":{}}}],["node.js",{"_index":1657,"title":{},"body":{"index.html":{}}}],["none",{"_index":670,"title":{},"body":{"injectables/CreateUserProvider.html":{},"miscellaneous/enumerations.html":{}}}],["normalizedslug",{"_index":1226,"title":{},"body":{"injectables/PostsService.html":{}}}],["null",{"_index":415,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/UserService.html":{}}}],["nullable",{"_index":923,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["number",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number'})@isnumber()@isnotempty",{"_index":1029,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["number})@isoptional()@isint()@type(undefined",{"_index":842,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["oauth2client",{"_index":869,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":858,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/UserCreateMany.html":{}}}],["objectliteral",{"_index":1000,"title":{},"body":{"injectables/PaginationService.html":{}}}],["objects",{"_index":1137,"title":{},"body":{"controllers/PostsController.html":{}}}],["observable",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["occurred",{"_index":1590,"title":{},"body":{"injectables/UserService.html":{}}}],["omit",{"_index":815,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["ondelete",{"_index":927,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":643,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["onetomany",{"_index":1430,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1426,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":935,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":925,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onmoduleinit",{"_index":860,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1683,"title":{},"body":{"index.html":{}}}],["option.entity",{"_index":955,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":915,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":921,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":924,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":919,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":931,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:33",{"_index":929,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["options",{"_index":447,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.controller",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":941,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:10",{"_index":944,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":585,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":491,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:16",{"_index":494,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["options.hashedpassword",{"_index":912,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["options.module",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":953,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.password",{"_index":448,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["options.service",{"_index":946,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":957,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:15",{"_index":962,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":959,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":490,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["options/entity/meta",{"_index":914,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/meta",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["otherwise",{"_index":896,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["out",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1707,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owning",{"_index":1077,"title":{},"body":{"entities/Post.html":{}}}],["package",{"_index":1621,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":532,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":968,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":994,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginatequery(undefined",{"_index":997,"title":{},"body":{"injectables/PaginationService.html":{}}}],["pagination",{"_index":1216,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["pagination'})@apiresponse({status",{"_index":1450,"title":{},"body":{"controllers/UserController.html":{}}}],["pagination.service",{"_index":984,"title":{},"body":{"modules/PaginationModule.html":{}}}],["paginationmodule",{"_index":137,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationquery",{"_index":1003,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/PostsService.html":{}}}],["paginationquerydto",{"_index":833,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginationservice",{"_index":141,"title":{"injectables/PaginationService.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["param",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["param('userid",{"_index":1165,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":1469,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param.dto.ts",{"_index":840,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:16",{"_index":843,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parama",{"_index":1479,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["params",{"_index":1404,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["parseintpipe",{"_index":1150,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["partial",{"_index":1146,"title":{},"body":{"controllers/PostsController.html":{}}}],["partialtype",{"_index":1031,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":1027,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":1043,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["passing",{"_index":1090,"title":{},"body":{"entities/Post.html":{}}}],["password",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"classes/SignInDto.html":{},"entities/User.html":{}}}],["passwords",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashingProvider.html":{}}}],["patch",{"_index":1144,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["patchpostdto",{"_index":1025,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchuser",{"_index":1440,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(@body",{"_index":1506,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(patchuserdto",{"_index":1459,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuserdto",{"_index":1041,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["path",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileUploadService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{}}}],["path.extname(filename",{"_index":1390,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["payload",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["person",{"_index":549,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":597,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1640,"title":{},"body":{"dependencies.html":{}}}],["plain",{"_index":907,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["please",{"_index":1692,"title":{},"body":{"index.html":{}}}],["png",{"_index":779,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["port",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":1454,"title":{},"body":{"controllers/UserController.html":{}}}],["possible",{"_index":530,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":287,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/FileUploadController.html":{},"controllers/GoogleAuthenticationController.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":1119,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@delete",{"_index":1121,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('/create",{"_index":1501,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.content",{"_index":1246,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":1032,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":502,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:103",{"_index":523,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:113",{"_index":544,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:124",{"_index":572,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:146",{"_index":527,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:15",{"_index":1030,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:34",{"_index":574,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:46",{"_index":536,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:60",{"_index":563,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:71",{"_index":569,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:80",{"_index":516,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:92",{"_index":551,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.featuredimageurl",{"_index":1250,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":926,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.metaoptions.id",{"_index":1259,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.posttype",{"_index":1240,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishedon",{"_index":1252,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.schema",{"_index":1248,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":1242,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":1244,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":1254,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":1238,"title":{},"body":{"injectables/PostsService.html":{}}}],["postentity",{"_index":1188,"title":{},"body":{"modules/PostsModule.html":{}}}],["postgres",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["postquery",{"_index":1124,"title":{},"body":{"controllers/PostsController.html":{}}}],["postrepository",{"_index":1196,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":1097,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.author",{"_index":1427,"title":{},"body":{"entities/User.html":{}}}],["posts.controller",{"_index":1187,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.dto",{"_index":1157,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.dto.ts",{"_index":823,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["posts.dto.ts:12",{"_index":827,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.dto.ts:8",{"_index":828,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.service",{"_index":1153,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.controller",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":146,"title":{"controllers/PostsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":1162,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":138,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":1152,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":564,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":1076,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":506,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["posttypes",{"_index":528,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttypes.post",{"_index":1075,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FileUploadController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["prev",{"_index":979,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["prevpage",{"_index":1016,"title":{},"body":{"injectables/PaginationService.html":{}}}],["primarygeneratedcolumn",{"_index":920,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["processes",{"_index":1145,"title":{},"body":{"controllers/PostsController.html":{}}}],["processing",{"_index":1110,"title":{},"body":{"controllers/PostsController.html":{}}}],["production",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["profileconfig",{"_index":1553,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["profileconfiguration",{"_index":1567,"title":{},"body":{"injectables/UserService.html":{}}}],["programming",{"_index":612,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["progressive",{"_index":1656,"title":{},"body":{"index.html":{}}}],["project",{"_index":1684,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["promise.all",{"_index":816,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["promise.resolve(instance.canactivate(context",{"_index":422,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["properties",{"_index":339,"title":{"properties.html":{}},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"properties.html":{}}}],["protect",{"_index":1558,"title":{},"body":{"modules/UserModule.html":{}}}],["provide",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{}}}],["provided",{"_index":669,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{}}}],["provider",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{}}}],["provider/create",{"_index":1551,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["providers",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/bcrypt.provider",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/generate",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["providers/hashing.provider",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/refresh",{"_index":330,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/upload",{"_index":752,"title":{},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{}}}],["public",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["published",{"_index":538,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":507,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["put",{"_index":1461,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":1004,"title":{},"body":{"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{}}}],["query('limit",{"_index":1487,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":1489,"title":{},"body":{"controllers/UserController.html":{}}}],["query.dto",{"_index":835,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PaginationService.html":{}}}],["query.dto.ts",{"_index":985,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:15",{"_index":990,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:26",{"_index":991,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryparams",{"_index":1167,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["queryrunner",{"_index":1518,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.committransaction",{"_index":1538,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.connect",{"_index":1521,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.manager.create(user",{"_index":1532,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.manager.save(newuserinstance",{"_index":1534,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.release",{"_index":1544,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1540,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.starttransaction",{"_index":1526,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["r\\n",{"_index":595,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["range",{"_index":531,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1693,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":120,"title":{},"body":{"controllers/AppController.html":{},"controllers/FileUploadController.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["received",{"_index":1112,"title":{},"body":{"controllers/PostsController.html":{}}}],["record",{"_index":394,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["redirecturi",{"_index":880,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["references",{"_index":1435,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":1642,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":387,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refresh",{"_index":893,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["refreshtoken",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{}}}],["refreshtoken(@body",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(token",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokendto",{"_index":280,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["refreshtokenprovider",{"_index":319,"title":{"injectables/RefreshTokenProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtokens",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens(undefined",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["region",{"_index":1402,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["relationship",{"_index":940,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["relationships",{"_index":1083,"title":{},"body":{"entities/Post.html":{}}}],["release",{"_index":1543,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["remove",{"_index":1085,"title":{},"body":{"entities/Post.html":{}}}],["replace",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Paginated.html":{}}}],["replace(/\\s/g",{"_index":1393,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["repositories",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{}}}],["repository",{"_index":657,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":1013,"title":{},"body":{"injectables/PaginationService.html":{}}}],["repository.find",{"_index":1005,"title":{},"body":{"injectables/PaginationService.html":{}}}],["representing",{"_index":1134,"title":{},"body":{"controllers/PostsController.html":{}}}],["req",{"_index":1151,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":101,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requested",{"_index":736,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["requests",{"_index":1129,"title":{},"body":{"controllers/PostsController.html":{}}}],["requesttimeoutexception",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception('request",{"_index":673,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["requesttimeoutexception(`timeout",{"_index":1593,"title":{},"body":{"injectables/UserService.html":{}}}],["requesttimeoutexception(error.message",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["requesturl",{"_index":1023,"title":{},"body":{"injectables/PaginationService.html":{}}}],["require",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["required",{"_index":464,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"controllers/FileUploadController.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":437,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/PostsController.html":{}}}],["response",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.interceptor",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":684,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:13",{"_index":687,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:21",{"_index":692,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["results",{"_index":108,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1132,"title":{},"body":{"controllers/PostsController.html":{}}}],["retrieves",{"_index":1125,"title":{},"body":{"controllers/PostsController.html":{}}}],["return",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1452,"title":{},"body":{"controllers/UserController.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["review",{"_index":567,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["right",{"_index":410,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["rollback",{"_index":1539,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["run",{"_index":1670,"title":{},"body":{"index.html":{}}}],["runner",{"_index":1517,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["rxjs",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["s3",{"_index":1383,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["s3.types.putobjectrequest",{"_index":1405,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["s3.upload(params).promise",{"_index":1412,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["salt",{"_index":449,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["save",{"_index":786,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/UserCreateMany.html":{}}}],["savednewuserinstance",{"_index":1533,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["scalable",{"_index":1661,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":566,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":508,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["sdk",{"_index":1384,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["second",{"_index":1434,"title":{},"body":{"entities/User.html":{}}}],["secret",{"_index":93,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["secretaccesskey",{"_index":1400,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["sent",{"_index":1269,"title":{},"body":{"injectables/RefreshTokenProvider.html":{},"controllers/UserController.html":{}}}],["serialize",{"_index":546,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":534,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":743,"title":{},"body":{"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"index.html":{}}}],["server'})@useinterceptors(undefined)@post",{"_index":720,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["service",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserService.html":{}}}],["services",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["set",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["setmetadata",{"_index":1467,"title":{},"body":{"controllers/UserController.html":{}}}],["setmetadata(auth_type_key",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":1086,"title":{},"body":{"entities/Post.html":{},"modules/UserModule.html":{}}}],["setup",{"_index":1433,"title":{},"body":{"entities/User.html":{}}}],["shows",{"_index":1035,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["side",{"_index":1078,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["sidebarenabled",{"_index":524,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["signed",{"_index":1104,"title":{},"body":{"controllers/PostsController.html":{}}}],["signindto",{"_index":275,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signoptions",{"_index":250,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["signtoken",{"_index":813,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["single",{"_index":1213,"title":{},"body":{"injectables/PostsService.html":{}}}],["size",{"_index":793,"title":{},"body":{"injectables/FileUploadService.html":{},"entities/Upload.html":{}}}],["skip",{"_index":1006,"title":{},"body":{"injectables/PaginationService.html":{}}}],["slug",{"_index":509,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["social/google",{"_index":331,"title":{},"body":{"modules/AuthModule.html":{}}}],["soft",{"_index":1303,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":1328,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdelete(undefined",{"_index":1340,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdeletetag",{"_index":1294,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(@query('id",{"_index":1315,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(id",{"_index":1302,"title":{},"body":{"controllers/TagsController.html":{}}}],["something",{"_index":707,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["special",{"_index":645,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":841,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["specified",{"_index":1135,"title":{},"body":{"controllers/PostsController.html":{}}}],["specify",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["split('.')[0",{"_index":1392,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["sponsors",{"_index":1687,"title":{},"body":{"index.html":{}}}],["src/.../access",{"_index":1716,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../active",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1649,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1654,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posts.enums.ts",{"_index":1651,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../upload.entity.ts",{"_index":1650,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":113,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":116,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":264,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":265,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:28",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1550,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":1580,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:21",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:38",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:43",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:77",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:87",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/active",{"_index":1159,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":392,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1605,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refresh",{"_index":1261,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts",{"_index":1274,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts:10",{"_index":1278,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/signin.dto.ts:6",{"_index":1276,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":382,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:14",{"_index":388,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:33",{"_index":389,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":428,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:15",{"_index":442,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:34",{"_index":432,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":799,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":664,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":904,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:19",{"_index":906,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:5",{"_index":910,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1264,"title":{},"body":{"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["src/auth/social/dtos/google",{"_index":900,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":845,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/config/aws.config",{"_index":754,"title":{},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["src/config/google.config",{"_index":335,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["src/config/index.config",{"_index":696,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["src/config/jwt.config",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["src/file",{"_index":712,"title":{},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/global/interceptors/data",{"_index":683,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/global/pagination/dto/pagination",{"_index":834,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/global/pagination/interface/paginated.interface",{"_index":1209,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/global/pagination/interface/paginated.interface.ts",{"_index":970,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/global/pagination/pagination.module",{"_index":1191,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/global/pagination/pagination.module.ts",{"_index":983,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/global/pagination/pagination.service",{"_index":1208,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/global/pagination/pagination.service.ts",{"_index":993,"title":{},"body":{"injectables/PaginationService.html":{},"coverage.html":{}}}],["src/global/pagination/pagination.service.ts:16",{"_index":998,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/global/pagination/pagination.service.ts:9",{"_index":996,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/main.ts",{"_index":1615,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":489,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":501,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/get",{"_index":822,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":1026,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity",{"_index":932,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/entity/post.entity.ts",{"_index":1044,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity.ts:19",{"_index":1054,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:26",{"_index":1070,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:34",{"_index":1057,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:42",{"_index":1063,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:50",{"_index":1064,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:56",{"_index":1049,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:62",{"_index":1060,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:69",{"_index":1053,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:75",{"_index":1059,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:81",{"_index":1068,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:89",{"_index":1056,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:96",{"_index":1048,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/enums/posts.enums.ts",{"_index":1652,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":1096,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:111",{"_index":1142,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:125",{"_index":1122,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:49",{"_index":1128,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:77",{"_index":1107,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":1186,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":1193,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:135",{"_index":1203,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:15",{"_index":1197,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:155",{"_index":1201,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:39",{"_index":1199,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:99",{"_index":1205,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":608,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity",{"_index":1074,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/entity/tags.entity.ts",{"_index":1279,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity.ts:16",{"_index":1286,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:24",{"_index":1287,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:32",{"_index":1290,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:38",{"_index":1284,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:44",{"_index":1289,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:51",{"_index":1285,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:56",{"_index":1288,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:59",{"_index":1281,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:62",{"_index":1291,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:65",{"_index":1283,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":1292,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:19",{"_index":1297,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:26",{"_index":1301,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:32",{"_index":1305,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":1190,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":1320,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/tags/tags.service",{"_index":1207,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/tags.service.ts",{"_index":1324,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/tags.service.ts:14",{"_index":1333,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:30",{"_index":1337,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:36",{"_index":1339,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:46",{"_index":1336,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:56",{"_index":1334,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:62",{"_index":1341,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:8",{"_index":1330,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/user/dtos/create",{"_index":456,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/get",{"_index":839,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/user/dtos/patch",{"_index":1042,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/user/entity/user.entity",{"_index":809,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"entities/Post.html":{}}}],["src/user/entity/user.entity.ts",{"_index":1416,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entity/user.entity.ts:15",{"_index":1419,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:22",{"_index":1423,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:30",{"_index":1417,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:38",{"_index":1425,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:45",{"_index":1421,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:48",{"_index":1428,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:8",{"_index":1422,"title":{},"body":{"entities/User.html":{}}}],["src/user/provider/create",{"_index":653,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/user/user",{"_index":1508,"title":{},"body":{"injectables/UserCreateMany.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":1437,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:109",{"_index":1444,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:116",{"_index":1460,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:72",{"_index":1457,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:97",{"_index":1448,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/user/user.module.ts",{"_index":1548,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["src/user/user.service.ts",{"_index":1562,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:113",{"_index":1570,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:22",{"_index":1569,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:44",{"_index":1571,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:48",{"_index":1573,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:74",{"_index":1575,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:84",{"_index":1577,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:98",{"_index":1579,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":1524,"title":{},"body":{"injectables/UserCreateMany.html":{},"index.html":{}}}],["start:dev",{"_index":1673,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1674,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":825,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PostsService.html":{}}}],["started",{"_index":1655,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1664,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1598,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":384,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["stay",{"_index":1695,"title":{},"body":{"index.html":{}}}],["still",{"_index":1037,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["story",{"_index":533,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string'})@isdate()@isnotempty",{"_index":543,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isnotempty()@isstring()@minlength(3)@maxlength(255",{"_index":620,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isjson",{"_index":550,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isstring",{"_index":614,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024",{"_index":522,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024)@matches(/^https?:\\/\\/[^\\s",{"_index":616,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isenum(posttypes)@isnotempty",{"_index":535,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@isenum(poststatus",{"_index":568,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(255)@matches(/^[a",{"_index":553,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(512)@matches(/^[a",{"_index":624,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isoptional",{"_index":515,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":573,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string(error",{"_index":1233,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserCreateMany.html":{}}}],["sub",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["success",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["successful",{"_index":1528,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["successfully",{"_index":1260,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["summary",{"_index":742,"title":{},"body":{"controllers/FileUploadController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":1688,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["svg",{"_index":1705,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":831,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{}}}],["synchronize",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":806,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["table",{"_index":1080,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1620,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":610,"title":{"entities/Tag.html":{}},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag'})@post",{"_index":1296,"title":{},"body":{"controllers/TagsController.html":{}}}],["tag.dto",{"_index":1306,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":609,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:23",{"_index":621,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:37",{"_index":625,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:46",{"_index":615,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:51",{"_index":623,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:65",{"_index":618,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.name",{"_index":1346,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagrepository",{"_index":1342,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags",{"_index":510,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":1321,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":1222,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags.posts",{"_index":1066,"title":{},"body":{"entities/Post.html":{}}}],["tags.service",{"_index":1307,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["tags/tags.controller",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":148,"title":{"controllers/TagsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":139,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":1331,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":1195,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":1007,"title":{},"body":{"injectables/PaginationService.html":{}}}],["tap",{"_index":694,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["test",{"_index":1677,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1680,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1679,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1676,"title":{},"body":{"index.html":{}}}],["text",{"_index":908,"title":{},"body":{"injectables/HashingProvider.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1686,"title":{},"body":{"index.html":{}}}],["then((canactivate",{"_index":423,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.accesstokenguard",{"_index":395,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.accesstokenprovider.generatetokens",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appconfiguration.apiversion",{"_index":710,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.appservice.gethello",{"_index":121,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":412,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.awsconfiguration.awsaccesskey",{"_index":1399,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.awsconfiguration.awsbucketname",{"_index":1407,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.awsconfiguration.awscloudfronturl}/${awskey",{"_index":789,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["this.awsconfiguration.awsregion",{"_index":1403,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.awsconfiguration.awssecretaccesskey",{"_index":1401,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.configservice.get('appconfig.awsbucketname",{"_index":1397,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.configservice.get('s3_bucket",{"_index":1583,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createtoken",{"_index":817,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.createuserprovider.createuser",{"_index":1582,"title":{},"body":{"injectables/UserService.html":{}}}],["this.datasource.createqueryrunner",{"_index":1519,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["this.extractrequestfromheader",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.fileuploadservice.uploadfile",{"_index":746,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["this.generatefilename",{"_index":1408,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.generatetoken.generatetokens",{"_index":895,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokenprovider.generatetokens",{"_index":1273,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.googleauthenticationservice.authenticate",{"_index":856,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.googleconfiguration.googleclientid",{"_index":876,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleconfiguration.googleclientsecret",{"_index":878,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleconfiguration.googleredirecturi",{"_index":881,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.hashingprovider.comparepasswords",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashingprovider.hashpassword",{"_index":679,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration.jwtrefreshtokenexpiration",{"_index":820,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.jwtconfiguration.jwtsecret",{"_index":94,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtconfiguration.jwttokenaudience",{"_index":96,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtconfiguration.jwttokenexpiration",{"_index":818,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.jwtconfiguration.jwttokenissuer",{"_index":98,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtservice.signasync",{"_index":814,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":1270,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.metaoptionsrepository.create(metaoptions",{"_index":965,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.delete",{"_index":1258,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.save(createdmetaoption",{"_index":966,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create",{"_index":949,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.oauthclient",{"_index":879,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":884,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.paginationservice.paginatequery",{"_index":1255,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository",{"_index":1256,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.create",{"_index":1231,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.delete",{"_index":1257,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findone",{"_index":1229,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findoneby",{"_index":1235,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(post",{"_index":1232,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postservice.create",{"_index":1172,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.delete",{"_index":1181,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.getallposts",{"_index":1166,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.update",{"_index":1177,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.profileconfiguration",{"_index":1587,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflector.getallandoverride",{"_index":402,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.refreshtokenprovider.getrefreshtoken",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":1010,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.request.protocol",{"_index":1009,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.request.url",{"_index":1024,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.tagsrepository.create(tag",{"_index":1348,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete",{"_index":1353,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":1350,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":1345,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findoneby",{"_index":1351,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(createdtags",{"_index":1349,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete",{"_index":1354,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtag",{"_index":1311,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete",{"_index":1313,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags",{"_index":1220,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softdelete",{"_index":1316,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.uploadrepository.create",{"_index":787,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["this.uploadrepository.save(upload",{"_index":797,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["this.uploadtoawsprovider.awsfileupload",{"_index":783,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["this.userrepository.create(user",{"_index":681,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findone",{"_index":671,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":1592,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":682,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userscreatemany.createmany",{"_index":1595,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createmany",{"_index":1505,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.createuser",{"_index":898,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":1494,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyid",{"_index":1272,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.userservice.finduserbyemail",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.finduserbygoogleid",{"_index":894,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservices.findonebyid",{"_index":1217,"title":{},"body":{"injectables/PostsService.html":{}}}],["through",{"_index":419,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/PostsController.html":{}}}],["throw",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["throwing",{"_index":1594,"title":{},"body":{"injectables/UserService.html":{}}}],["time",{"_index":542,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["timeout",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["timestamp",{"_index":1058,"title":{},"body":{"entities/Post.html":{},"injectables/UploadToAwsProvider.html":{}}}],["timestamp}${extension",{"_index":1396,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["title",{"_index":511,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FileUploadController.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["token')@httpcode(httpstatus.ok",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.access_token",{"_index":886,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["token.dto",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["token.dto.ts",{"_index":901,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:5",{"_index":903,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["token.dto.ts:6",{"_index":1263,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["token.guard.ts:27",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:38",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:43",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.provider",{"_index":329,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts",{"_index":800,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["token.provider.ts:17",{"_index":1266,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts:19",{"_index":805,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["token.provider.ts:32",{"_index":1268,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts:48",{"_index":808,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["token.provider.ts:9",{"_index":803,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["token.refreshtoken",{"_index":1271,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":897,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["totalitems",{"_index":974,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["totalpages",{"_index":976,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["touch",{"_index":1696,"title":{},"body":{"index.html":{}}}],["track",{"_index":1537,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["transaction",{"_index":1525,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["transactions",{"_index":1516,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["transfer",{"_index":1114,"title":{},"body":{"controllers/PostsController.html":{}}}],["transform",{"_index":844,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["transformer",{"_index":475,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["trim",{"_index":1394,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["true",{"_index":100,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/FileUploadController.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@exclude",{"_index":1420,"title":{},"body":{"entities/User.html":{}}}],["true})@jointable",{"_index":1067,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":469,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":1701,"title":{},"body":{"index.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1714,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"entities/User.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm.forfeature",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":956,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([postentity",{"_index":1192,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":1323,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([upload",{"_index":757,"title":{},"body":{"modules/FileUploadModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1555,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":397,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Upload.html":{},"dependencies.html":{}}}],["types/multer",{"_index":1631,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":619,"title":{},"body":{"classes/CreateTagDto.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":871,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception(`${error.message",{"_index":899,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["undefined",{"_index":463,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Upload.html":{},"miscellaneous/variables.html":{}}}],["undefined'])@apioperation({summary",{"_index":719,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["undefined})@get(':userid",{"_index":1127,"title":{},"body":{"controllers/PostsController.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":468,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":526,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":1062,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1675,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1713,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1036,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["update",{"_index":1028,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["update(undefined",{"_index":1204,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":1140,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["updatedat",{"_index":1357,"title":{},"body":{"entities/Upload.html":{}}}],["updatedatecolumn",{"_index":930,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["updateddate",{"_index":917,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedpost",{"_index":1176,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost",{"_index":1101,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":1174,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(updatepostdto",{"_index":1138,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost.content",{"_index":1247,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.featuredimageurl",{"_index":1251,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.id",{"_index":1236,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.posttype",{"_index":1241,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.publishedon",{"_index":1253,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.schema",{"_index":1249,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.slug",{"_index":1243,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.status",{"_index":1245,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.tags",{"_index":1234,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.title",{"_index":1239,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1147,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":1139,"title":{},"body":{"controllers/PostsController.html":{}}}],["upload",{"_index":714,"title":{"entities/Upload.html":{}},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["upload.controller",{"_index":751,"title":{},"body":{"modules/FileUploadModule.html":{}}}],["upload.controller.ts",{"_index":713,"title":{},"body":{"controllers/FileUploadController.html":{},"coverage.html":{}}}],["upload.controller.ts:36",{"_index":721,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["upload.module",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["upload.module.ts",{"_index":750,"title":{},"body":{"modules/FileUploadModule.html":{}}}],["upload.service",{"_index":730,"title":{},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{}}}],["upload.service.ts",{"_index":758,"title":{},"body":{"injectables/FileUploadService.html":{},"coverage.html":{}}}],["upload.service.ts:15",{"_index":762,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["upload.service.ts:28",{"_index":764,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["upload/entity/upload.entity.ts",{"_index":1355,"title":{},"body":{"entities/Upload.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["upload/entity/upload.entity.ts:20",{"_index":1360,"title":{},"body":{"entities/Upload.html":{}}}],["upload/entity/upload.entity.ts:27",{"_index":1359,"title":{},"body":{"entities/Upload.html":{}}}],["upload/entity/upload.entity.ts:34",{"_index":1363,"title":{},"body":{"entities/Upload.html":{}}}],["upload/entity/upload.entity.ts:42",{"_index":1365,"title":{},"body":{"entities/Upload.html":{}}}],["upload/entity/upload.entity.ts:49",{"_index":1362,"title":{},"body":{"entities/Upload.html":{}}}],["upload/entity/upload.entity.ts:56",{"_index":1364,"title":{},"body":{"entities/Upload.html":{}}}],["upload/entity/upload.entity.ts:59",{"_index":1358,"title":{},"body":{"entities/Upload.html":{}}}],["upload/entity/upload.entity.ts:62",{"_index":1366,"title":{},"body":{"entities/Upload.html":{}}}],["upload/file",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"coverage.html":{}}}],["upload/providers/upload",{"_index":1373,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["uploaded",{"_index":785,"title":{},"body":{"injectables/FileUploadService.html":{},"entities/Upload.html":{}}}],["uploadedfile",{"_index":722,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["uploadfile",{"_index":715,"title":{},"body":{"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{}}}],["uploadfile(@uploadedfile",{"_index":745,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["uploadfile(file",{"_index":716,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["uploadfile(undefined",{"_index":763,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["uploadrepository",{"_index":760,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["uploadresult",{"_index":1411,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploadresult.key",{"_index":1413,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploadtoawsprovider",{"_index":749,"title":{"injectables/UploadToAwsProvider.html":{}},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{},"coverage.html":{},"overview.html":{}}}],["url",{"_index":519,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PaginationService.html":{}}}],["url(this.request.url",{"_index":1012,"title":{},"body":{"injectables/PaginationService.html":{}}}],["us,en;q=0.8",{"_index":741,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["use",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{}}}],["useclass",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["used",{"_index":1081,"title":{},"body":{"entities/Post.html":{}}}],["usefactory",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["useguards",{"_index":1466,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(accesstokenguard",{"_index":1500,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors",{"_index":723,"title":{},"body":{"controllers/FileUploadController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":1498,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":744,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["user",{"_index":53,"title":{"entities/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiresponse({status",{"_index":1126,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.'})@apiresponse({status",{"_index":1105,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.controller",{"_index":1549,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator",{"_index":1160,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.decorator.ts",{"_index":1604,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":474,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":458,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":632,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":636,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":630,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":470,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["user.dto.ts:38",{"_index":647,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:42",{"_index":634,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":672,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{}}}],["user.googleid",{"_index":667,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.id",{"_index":819,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["user.password",{"_index":668,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.posts",{"_index":1046,"title":{},"body":{"entities/Post.html":{}}}],["user.provider",{"_index":1552,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.provider.ts",{"_index":654,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:16",{"_index":658,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:27",{"_index":661,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.service",{"_index":1470,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.sub",{"_index":1173,"title":{},"body":{"controllers/PostsController.html":{}}}],["user/user.module",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["user[field",{"_index":1724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usercontroller",{"_index":1436,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercreatemany",{"_index":1507,"title":{"injectables/UserCreateMany.html":{}},"body":{"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":810,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["usermodule",{"_index":140,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["userparamsdto",{"_index":1495,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userpayload",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":659,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["users",{"_index":459,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["users'})@auth(authtype.bearer)@post('/create",{"_index":1443,"title":{},"body":{"controllers/UserController.html":{}}}],["users.users",{"_index":1530,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["users/1223",{"_index":1482,"title":{},"body":{"controllers/UserController.html":{}}}],["users/id?limit=10&page=1",{"_index":1478,"title":{},"body":{"controllers/UserController.html":{}}}],["users?limit=10&page=2",{"_index":1485,"title":{},"body":{"controllers/UserController.html":{}}}],["userscreatemany",{"_index":1568,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":345,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservices",{"_index":1198,"title":{},"body":{"injectables/PostsService.html":{}}}],["using",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"injectables/BcryptProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"entities/User.html":{}}}],["uuid",{"_index":1387,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["uuid4",{"_index":1386,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["v4",{"_index":1385,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["valid",{"_index":1225,"title":{},"body":{"injectables/PostsService.html":{}}}],["validate",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":472,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":1465,"title":{},"body":{"controllers/UserController.html":{}}}],["validationschema",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":473,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{}}}],["value",{"_index":499,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["varchar",{"_index":1050,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["variable",{"_index":1600,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":200,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["verify",{"_index":882,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["version",{"_index":436,"title":{},"body":{"injectables/BcryptProvider.html":{},"controllers/UserController.html":{},"properties.html":{}}}],["video",{"_index":1367,"title":{},"body":{"entities/Upload.html":{},"miscellaneous/enumerations.html":{}}}],["void",{"_index":868,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["want",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["watch",{"_index":1671,"title":{},"body":{"index.html":{}}}],["website",{"_index":1699,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":513,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["well",{"_index":873,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["whether",{"_index":439,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["whos",{"_index":1483,"title":{},"body":{"controllers/UserController.html":{}}}],["whose",{"_index":1136,"title":{},"body":{"controllers/PostsController.html":{}}}],["work",{"_index":1087,"title":{},"body":{"entities/Post.html":{}}}],["works",{"_index":1038,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["world",{"_index":267,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["x",{"_index":735,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["xmlhttprequest",{"_index":737,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["yarn",{"_index":1666,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1691,"title":{},"body":{"index.html":{}}}],["your.env",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["z0",{"_index":554,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":640,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":639,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":638,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport { Observable } from 'rxjs';\nimport jwtConfig from 'src/config/jwt.config';\n\nexport const REQUEST_USER_KEY = 'user';\n\nexport type UserPayload = {\n  sub: number;\n  email: string;\n  iat: number;\n  exp: number;\n  aud: string;\n  iss: string;\n};\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    // injecting necessary services here\n\n    // injecting jwt service\n    private jwtService: JwtService,\n\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n  ) {}\n\n  private extractRequestFromHeader({ request }: { request: Request }) {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n\n  async canActivate(context: ExecutionContext): Promise {\n    // get the request object from the execution context\n    const request = context.switchToHttp().getRequest();\n\n    // extract the token from the request (header)\n    const token = this.extractRequestFromHeader({ request });\n    // console.log('inside canActivate', token);\n\n    // validate the token\n    if (!token) {\n      throw new HttpException('No token passed', HttpStatus.UNAUTHORIZED);\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: this.jwtConfiguration.jwtSecret,\n        // audience: this.jwtConfiguration.jwtTokenAudience,\n        // issuer: this.jwtConfiguration.jwtTokenIssuer,\n        // ignoreExpiration: true\n      });\n      request[REQUEST_USER_KEY] = payload as UserPayload;\n    } catch (error: any) {\n      throw new HttpException(`${error.message}`, HttpStatus.UNAUTHORIZED, {\n        cause: error.message,\n        description: error,\n      });\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nFileUploadModule\n\nFileUploadModule\n\nAppModule -->\n\nFileUploadModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nAppModule -->\n\nPaginationService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PaginationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            PostsController\n                        \n                        \n                            MetaOptionsController\n                        \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            FileUploadModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { PostsController } from './posts/posts.controller';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOptionsController } from './meta-options/meta-options.controller';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsController } from './tags/tags.controller';\nimport { TagsModule } from './tags/tags.module';\nimport { ConfigModule, ConfigService, ConfigType } from '@nestjs/config';\nimport { PaginationService } from './global/pagination/pagination.service';\nimport { PaginationModule } from './global/pagination/pagination.module';\nimport appConfig from './config/index.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport { DataResponseInterceptor } from './global/interceptors/data-response/data-response.interceptor';\nimport { FileUploadModule } from './file-upload/file-upload.module';\nimport awsConfig from './config/aws.config';\n\nexport const ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    // env configs\n    ConfigModule.forRoot({\n      isGlobal: true, // make sure this is set to true to load environment variables from.env file\n      // envFilePath: ['.env.development.local'], // specify the path to your.env file\n      envFilePath: !ENV ? '.env' : `.env.${ENV}.local`,\n      load: [appConfig, databaseConfig, awsConfig],\n      validationSchema: environmentValidation,\n    }), // to use environment variables\n    // env configs\n\n    UserModule,\n    PostsModule,\n    AuthModule,\n    MetaOptionsModule,\n\n    // database configs\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // specify any additional imports here, e.g., TypeORM migrations or custom repositories\n      inject: [ConfigService], // inject\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DATABASE_HOST'),\n        port: +configService.get('database.port'),\n        // port: +configService.get('DATABASE_PORT'),\n        username: configService.get('DATABASE_USERNAME'),\n        password: configService.get('DATABASE_PASSWORD'),\n        database: configService.get('DATABASE_NAME'),\n        entities: ['dist/**/*.entity.js'],\n        synchronize: configService.get('database.synchronize'), // set to false in production\n        // autoLoadEntities: true, // using this would require us to create a module (controller and module file) for every entity we want to add, exporting it and using the TypeORM.forFeature([]) function\n      }),\n    }),\n    // database configs\n\n    // jwt configuration\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync({\n      imports: [ConfigModule.forFeature(jwtConfig)],\n      useFactory: async (jwtConfiguration: ConfigType) => ({\n        secret: jwtConfiguration.jwtSecret,\n        signOptions: {\n          audience: jwtConfiguration.jwtTokenAudience,\n          issuer: jwtConfiguration.jwtTokenIssuer,\n          expiresIn: jwtConfiguration.jwtTokenExpiration,\n        },\n      }),\n      inject: [jwtConfig.KEY],\n    }),\n    // jwt configuration\n\n    TagsModule,\n    PaginationModule,\n    FileUploadModule,\n  ],\n  controllers: [\n    AppController,\n    PostsController,\n    MetaOptionsController,\n    TagsController,\n  ],\n  providers: [\n    AppService,\n    PaginationService,\n    AccessTokenGuard, // because authentication guard has a dependency injection of AccessTokenGuard\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n      // useClass: AccessTokenGuard,\n    }, // applying global guard\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: DataResponseInterceptor,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginBody: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.NONE)@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginBody\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(token: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.BEARER)@Post('refresh-token')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Post,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { Auth, AuthType } from './decorators/auth.decorator';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Auth(AuthType.NONE)\n  @Post('login')\n  @HttpCode(HttpStatus.OK) // this force and assign the default success response with status code 200\n  login(@Body() loginBody: SignInDto) {\n    return this.authService.login({ body: loginBody });\n  }\n\n  @Auth(AuthType.BEARER)\n  @Post('refresh-token')\n  @HttpCode(HttpStatus.OK)\n  refreshToken(@Body() token: RefreshTokenDto) {\n    return this.authService.refreshTokens({ token });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokenProvider\n\nGenerateTokenProvider\n\nAuthModule -->\n\nGenerateTokenProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokenProvider\n\nRefreshTokenProvider\n\nAuthModule -->\n\nRefreshTokenProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokenProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokenProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from 'src/user/user.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { ConfigModule, ConfigType } from '@nestjs/config';\nimport jwtConfig from 'src/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { GenerateTokenProvider } from './providers/generate-token.provider';\nimport { RefreshTokenProvider } from './providers/refresh-token.provider';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\nimport { GoogleAuthenticationService } from './social/google-authentication.service';\nimport googleConfig from 'src/config/google.config';\n\n@Module({\n  imports: [\n    forwardRef(() => UserModule), // for dependency injection (circular dependency injection)\n    ConfigModule.forFeature(googleConfig),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync({\n      imports: [ConfigModule.forFeature(jwtConfig)],\n      useFactory: async (jwtConfiguration: ConfigType) => ({\n        secret: jwtConfiguration.jwtSecret,\n        signOptions: {\n          audience: jwtConfiguration.jwtTokenAudience,\n          issuer: jwtConfiguration.jwtTokenIssuer,\n          expiresIn: jwtConfiguration.jwtTokenExpiration,\n        },\n      }),\n      inject: [jwtConfig.KEY],\n    }),\n  ],\n  exports: [AuthService, HashingProvider],\n  controllers: [AuthController, GoogleAuthenticationController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider,\n      useClass: BcryptProvider,\n    },\n    GenerateTokenProvider,\n    RefreshTokenProvider,\n    GoogleAuthenticationService,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accessTokenProvider\n                            \n                            \n                                    Public\n                                refreshTokenProvider\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, hashingProvider: HashingProvider, jwtService: JwtService, jwtConfiguration: ConfigType<>, accessTokenProvider: GenerateTokenProvider, refreshTokenProvider: RefreshTokenProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenProvider\n                                                  \n                                                        \n                                                                        RefreshTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        accessTokenProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GenerateTokenProvider\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        refreshTokenProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RefreshTokenProvider\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:40\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Inject,\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from 'src/config/jwt.config';\nimport { UserPayload } from './guards/access-token/access-token.guard';\nimport { GenerateTokenProvider } from './providers/generate-token.provider';\nimport { RefreshTokenProvider } from './providers/refresh-token.provider';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n\n    // injecting hashing provider\n    @Inject(forwardRef(() => HashingProvider)) // doing this because this is a circular dependency\n    private hashingProvider: HashingProvider,\n\n    // injecting jwt service dependency\n    private jwtService: JwtService,\n\n    // injecting jwtConfig (environment values)\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n\n    public accessTokenProvider: GenerateTokenProvider,\n\n    public refreshTokenProvider: RefreshTokenProvider,\n  ) {}\n\n  public async login({ body }: { body: SignInDto }) {\n    const { email, password } = body;\n\n    const existingUser = await this.userService.findUserByEmail({ email });\n\n    let isPasswordCorrect: boolean;\n\n    try {\n      isPasswordCorrect = await this.hashingProvider.comparePasswords({\n        hashedPassword: existingUser.password,\n        password,\n      });\n    } catch (error: any) {\n      throw new RequestTimeoutException(error.message, {\n        cause: error,\n        description: 'Request timeout. Could not compare passwords',\n      });\n    }\n\n    if (!isPasswordCorrect) {\n      throw new HttpException('Invalid credentials', HttpStatus.UNAUTHORIZED);\n    }\n\n    const { accessToken, refreshToken } =\n      await this.accessTokenProvider.generateTokens({\n        user: existingUser,\n      });\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  public async refreshTokens({ token }: { token: RefreshTokenDto }) {\n    const { accessToken, refreshToken } =\n      await this.refreshTokenProvider.getRefreshToken({ token });\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  public isAuthenticated() {\n    return true; // replace with actual authentication logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AUTH_TYPE_KEY, AuthType } from 'src/auth/decorators/auth.decorator';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  constructor(\n    // injecting necessary services here\n\n    // injecting reflector\n    private reflector: Reflector,\n\n    private accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  private static defaultAuthType: AuthType = AuthType.BEARER;\n\n  private authTypeGuardMap: Record = {\n    [AuthType.BEARER]: this.accessTokenGuard,\n    [AuthType.NONE]: {\n      canActivate: () => true,\n    },\n  };\n\n  async canActivate(context: ExecutionContext): Promise {\n    // get all auth types from the reflector (metadata)\n    // getting the auth decorator passed\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY, // decorator that needs checking\n      [context.getHandler(), context.getClass()], // get keys for all type auth\n    ) ?? [AuthenticationGuard.defaultAuthType];\n\n    // console.log({ authTypes });\n\n    // getting the right guard for the right auth type decorator\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n\n    // console.log('Guards:', JSON.stringify(guards, null, 2));\n\n    // array of guards\n    // loop guards canActivate\n    // loop through all the guards and fire the canActivate (returns a boolean)\n    for (const instance of guards) {\n      // console.log({ instance });\n      const canActivate = await Promise.resolve(instance.canActivate(context))\n        .then((canActivate) => {\n          // console.log('canActivate', canActivate);\n          return canActivate;\n        })\n        .catch((error: any) => {\n          throw new HttpException(`${error.message}`, HttpStatus.UNAUTHORIZED, {\n            cause: error.message,\n            description: error,\n          });\n        });\n\n      if (!canActivate) {\n        throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\n      }\n      return true;\n    }\n\n    // throw exception if no canActivate\n    throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                comparePasswords\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \ncomparePasswords(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:34\n                        \n                    \n\n\n            \n                \n                        Compares a given password with its hashed version.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to a boolean indicating whether the password matches the hashed password.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:15\n                        \n                    \n\n\n            \n                \n                        Hashes a given password using bcrypt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                [object Object]\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe password to be hashed. Can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to the hashed password as a string.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  /**\n   * Hashes a given password using bcrypt.\n   *\n   * @param options - The options for hashing the password.\n   * @param options.password - The password to be hashed. Can be a string or a Buffer.\n   *\n   * @returns A Promise that resolves to the hashed password as a string.\n   */\n  public async hashPassword({\n    password,\n  }: {\n    password: string | Buffer;\n  }): Promise {\n    const salt = await bcrypt.genSalt();\n    const hashed = bcrypt.hash(password, salt);\n\n    return hashed;\n  }\n\n  /**\n   * Compares a given password with its hashed version.\n   *\n   * @param password - The password to compare. It can be a string or a Buffer.\n   * @param hashedPassword - The hashed version of the password to compare against.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the password matches the hashed password.\n   */\n  comparePasswords({\n    password,\n    hashedPassword,\n  }: {\n    password: string | Buffer;\n    hashedPassword: string;\n  }): Promise {\n    const compare = bcrypt.compare(password, hashedPassword);\n    return compare;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-many-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Array of users to be created', type: undefined, required: true, isArray: true, items: undefined, example: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-many-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entity/user.entity';\n\nexport class CreateManyUsersDto {\n  @ApiProperty({\n    description: 'Array of users to be created',\n    type: [CreateUserDto],\n    required: true,\n    isArray: true,\n    items: {\n      type: 'User',\n    },\n    example: [\n      {\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john@doe.com',\n        password: 'nestjsIS6@awesome',\n      },\n      {\n        firstName: 'Jane',\n        lastName: 'Doe',\n        email: 'jane@doe.com',\n        password: 'nestjsIS6@awesome',\n      },\n    ],\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMetaOptionsDto.html":{"url":"classes/CreateMetaOptionsDto.html","title":"class - CreateMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-meta-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from \"class-validator\";\n\nexport class CreateMetaOptionsDto {\n    // @ApiProperty()\n    // @IsString()\n    // @MinLength(4)\n    // @IsNotEmpty()\n    // key: string;\n  \n    // @ApiProperty()\n    // @IsNotEmpty()\n    // value: any;\n  \n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the additional options for the post', example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}', type: 'string', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostTypes, description: 'Possible tags for a post, range: ['post', 'page', 'story', 'series']', type: 'string'})@IsString()@IsEnum(PostTypes)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the date when the post was published', example: '2024-03-16T12:00:00+0000', format: 'date-time', type: 'string'})@IsDate()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the excerpt of the post. Serialize your json content or else there will be an error', example: '{\n \"@context\": \"https://schema.org\", \n \"@type\": \"Person\"\n}', format: 'json', type: 'string'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(255)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']', type: 'string'})@IsString()@IsNotEmpty()@IsEnum(PostStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined, type: 'array', required: false})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is a title of the post', example: 'Hello World', type: 'string'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { CreateMetaOptionsDto } from 'src/meta-options/dtos/create-meta-options.dto';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is a title of the post',\n    example: 'Hello World',\n    type: 'string',\n\n    // default: \"Hello World\"\n  }) // this adds the value to the post documentation\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostTypes,\n    description:\n      \"Possible tags for a post, range: ['post', 'page', 'story', 'series']\",\n    type: 'string',\n  })\n  @IsString()\n  //   @IsEnum(['post', 'page', 'story', 'series'])\n  @IsEnum(PostTypes)\n  @IsNotEmpty()\n  postType: PostTypes;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description:\n      \"Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']\",\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'This is the excerpt of the post. Serialize your json content or else there will be an error',\n    example:\n      '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\", \\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}',\n    format: 'json',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'This is the date when the post was published',\n    example: '2024-03-16T12:00:00+0000',\n    format: 'date-time',\n    type: 'string',\n  })\n  @IsDate()\n  @IsNotEmpty()\n  publishedOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1, 4],\n    type: 'array',\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true }) // validate each item in the array as a string\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    description: 'This is the additional options for the post',\n    example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n    type: 'string',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'The meta value is a json object',\n          example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n        },\n      },\n      required: ['key', 'value'],\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreateMetaOptionsDto)\n  metaOptions?: CreateMetaOptionsDto | null;\n\n  // @ApiProperty({\n  //   description: 'This is the id of the author of the post',\n  //   example: 123,\n  //   type: 'integer',\n  //   required: true,\n  // })\n  // @IsInt()\n  // @IsNotEmpty()\n  // authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Tag Description', example: 'A modern programming language', type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)@Matches(/^https?:\\/\\/[^\\s]+$/, {message: 'Invalid URL format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the tag', example: 'TypeScript', type: 'string'})@IsNotEmpty()@IsString()@MinLength(3)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(512)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty({\n    description: 'Name of the tag',\n    example: 'TypeScript',\n    type: 'string',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(255)\n  name: string;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(512)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiPropertyOptional({\n    description: 'Tag Description',\n    example: 'A modern programming language',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional({})\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  @Matches(/^https?:\\/\\/[^\\s]+$/, {\n    message: 'Invalid URL format',\n  })\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  // @IsNotEmpty()\n  @IsOptional()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password?: string;\n\n  @IsString()\n  @IsOptional()\n  googleId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/provider/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/user/provider/create-user.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/provider/create-user.provider.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../entity/user.entity';\nimport { Repository } from 'typeorm';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    // injecting user service repository dependency\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    // injecting hashing provider\n    @Inject(forwardRef(() => HashingProvider)) // doing this because this is a circular dependency\n    private hashingProvider: HashingProvider,\n  ) {}\n\n  public async createUser({ user }: { user: CreateUserDto }): Promise {\n    // check user\n    let existingUser = undefined;\n\n    if (!user.googleId && !user.password) {\n      throw new HttpException(\n        'Provide a googleId or a password',\n        HttpStatus.UNAUTHORIZED,\n        {\n          cause: 'either googleId or password was provided',\n          description:\n            'in other to create a user either googleId or password is required and none was provided',\n        },\n      );\n    }\n\n    try {\n      existingUser = await this.userRepository.findOne({\n        where: { email: user.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException('Request timeout', {\n        cause: error,\n        description: 'Request timeout',\n      });\n    }\n\n    // handle exception\n    if (existingUser) {\n      throw new HttpException('Email already exists', HttpStatus.CONFLICT);\n    }\n\n    if (user.password) {\n      const hashedPassword = await this.hashingProvider.hashPassword({\n        password: user.password,\n      });\n\n      user.password = hashedPassword;\n    }\n\n    if (user.googleId) {\n      user.googleId = user.googleId;\n    }\n\n    // create a new user\n    const newUser = await this.userRepository.create(user);\n    await this.userRepository.save(newUser);\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/global/interceptors/data-response/data-response.interceptor.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/global/interceptors/data-response/data-response.interceptor.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { Observable, tap, map } from 'rxjs';\nimport appConfig from 'src/config/index.config';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  constructor(\n    // injecting config\n\n    @Inject(appConfig.KEY)\n    private appConfiguration: ConfigType,\n  ) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    // executed before method execution\n    console.log('before ...', {});\n    console.log({ context });\n\n    // executed before method execution\n\n    return next.handle().pipe(\n      map((data) => {\n        // executed after method execution\n\n        console.log('after ...', {});\n        console.log({ data });\n        // do something here after the request is handled\n\n        return {\n          apiVersion: this.appConfiguration.apiVersion,\n          data: data,\n        };\n      }),\n\n      // executed after method execution\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileUploadController.html":{"url":"controllers/FileUploadController.html","title":"controller - FileUploadController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileUploadController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file-upload/file-upload.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                file-upload\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiHeaders(['undefined', 'undefined'])@ApiOperation({summary: 'Upload a file', description: 'Upload a file to the server'})@UseInterceptors(undefined)@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/file-upload/file-upload.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiHeader, ApiHeaders, ApiOperation } from '@nestjs/swagger';\nimport { Express } from 'express';\nimport { FileUploadService } from './file-upload.service';\n\n@Controller('file-upload')\nexport class FileUploadController {\n  constructor(\n    private readonly fileUploadService: FileUploadService, // inject your FileUploadService here\n  ) {}\n\n  // @ApiHeader({ name: 'Content-Type', description: 'multipart/form-data', required: true })\n  @ApiHeaders([\n    { name: 'Authorization', description: 'Bearer token', required: true },\n    {\n      name: 'Content-Type',\n      description: 'multipart/form-data',\n      required: true,\n    },\n    // { name: 'X-Requested-With', description: 'XMLHttpRequest', required: true },\n    // { name: 'Accept', description: 'application/json', required: true },\n    // { name: 'Accept-Language', description: 'en-US,en;q=0.8', required: true },\n  ])\n  @ApiOperation({\n    summary: 'Upload a file',\n    description: 'Upload a file to the server',\n  })\n  @UseInterceptors(FileInterceptor('file', {}))\n  @Post('')\n  uploadFile(@UploadedFile() file: Express.Multer.File) {\n    return this.fileUploadService.uploadFile({ file });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FileUploadModule.html":{"url":"modules/FileUploadModule.html","title":"module - FileUploadModule","body":"\n                   \n\n\n\n\n    Modules\n    FileUploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FileUploadModule\n\n\n\ncluster_FileUploadModule_providers\n\n\n\n\nFileUploadService\n\nFileUploadService\n\n\n\nFileUploadModule\n\nFileUploadModule\n\nFileUploadModule -->\n\nFileUploadService->FileUploadModule\n\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\nFileUploadModule -->\n\nUploadToAwsProvider->FileUploadModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/file-upload/file-upload.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FileUploadService\n                        \n                        \n                            UploadToAwsProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FileUploadController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileUploadService } from './file-upload.service';\nimport { FileUploadController } from './file-upload.controller';\nimport { UploadToAwsProvider } from './providers/upload-to-aws.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport awsConfig from 'src/config/aws.config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Upload } from './entity/upload.entity';\n\n@Module({\n  imports: [\n    ConfigModule.forFeature(awsConfig),\n    TypeOrmModule.forFeature([Upload]),\n  ],\n  providers: [FileUploadService, UploadToAwsProvider],\n  controllers: [FileUploadController],\n})\nexport class FileUploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileUploadService.html":{"url":"injectables/FileUploadService.html","title":"injectable - FileUploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileUploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file-upload/file-upload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadToAwsProvider: UploadToAwsProvider, uploadRepository: Repository, awsConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/file-upload/file-upload.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadToAwsProvider\n                                                  \n                                                        \n                                                                        UploadToAwsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        awsConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file-upload/file-upload.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { UploadToAwsProvider } from './providers/upload-to-aws.provider';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FileTypes, Upload } from './entity/upload.entity';\nimport { Repository } from 'typeorm';\nimport awsConfig from 'src/config/aws.config';\nimport { ConfigType } from '@nestjs/config';\n\n@Injectable()\nexport class FileUploadService {\n  constructor(\n    // provider\n    private uploadToAwsProvider: UploadToAwsProvider,\n\n    // upload repository injection\n    @InjectRepository(Upload)\n    private uploadRepository: Repository,\n\n    @Inject(awsConfig.KEY)\n    private awsConfiguration: ConfigType,\n  ) {}\n\n  public async uploadFile({ file }: { file: Express.Multer.File }) {\n    try {\n      const allowedMimeTypes = [\n        'image/jpeg',\n        'image/gif',\n        'image/png',\n        'image/jpg',\n      ];\n      if (!allowedMimeTypes.includes(file.mimetype)) {\n        throw new BadRequestException(\n          'Upload a file of type jpg, jpeg, gif, or png',\n        );\n      }\n\n      // upload the file to aws (any server of our choice)\n      const awsKey = await this.uploadToAwsProvider.awsFileUpload({ file });\n      console.log('File uploaded to AWS:', awsKey);\n\n      // save the file info to database\n      const upload = this.uploadRepository.create({\n        filename: awsKey,\n        path: `${this.awsConfiguration.awsCloudfrontUrl}/${awsKey}`,\n        type: FileTypes.IMAGE,\n        mime: file.mimetype,\n        size: file.size,\n      });\n\n      // generate to a new entry in database\n      return await this.uploadRepository.save(upload);\n    } catch (error: any) {\n      throw new ConflictException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokenProvider.html":{"url":"injectables/GenerateTokenProvider.html","title":"injectable - GenerateTokenProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokenProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-token.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createToken\n                            \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-token.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    createToken(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-token.provider.ts:19\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-token.provider.ts:48\n                        \n                    \n\n\n            \n                \n                        generateTokens\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from 'src/config/jwt.config';\nimport { UserPayload } from '../guards/access-token/access-token.guard';\nimport { User } from 'src/user/entity/user.entity';\n\n@Injectable()\nexport class GenerateTokenProvider {\n  constructor(\n    // injecting jwt service dependency\n    private jwtService: JwtService,\n\n    // injecting jwtConfig (environment values)\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n  ) {}\n\n  private async createToken({\n    userId,\n    expiresIn,\n    payload,\n  }: {\n    userId: number;\n    expiresIn: number;\n    payload?: T;\n  }) {\n    // generate jwt(refresh) token for authenticated user\n    const signToken = await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        expiresIn: expiresIn,\n        secret: this.jwtConfiguration.jwtSecret,\n        audience: this.jwtConfiguration.jwtTokenAudience,\n        issuer: this.jwtConfiguration.jwtTokenIssuer,\n      },\n    );\n\n    return signToken;\n  }\n\n  /**\n   * generateTokens\n   */\n  public async generateTokens({\n    user,\n  }: {\n    // user: Omit;\n    user: User;\n  }) {\n    const [accessToken, refreshToken] = await Promise.all([\n      await this.createToken({\n        expiresIn: this.jwtConfiguration.jwtTokenExpiration,\n        userId: user.id,\n        payload: {\n          email: user.email,\n        },\n      }),\n\n      await this.createToken({\n        expiresIn: this.jwtConfiguration.jwtRefreshTokenExpiration,\n        userId: user.id,\n      }),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto.html":{"url":"classes/GetPostsBaseDto.html","title":"class - GetPostsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger'; // importing from swagger so i get automatic documentation\nimport { PaginationQueryDto } from 'src/global/pagination/dto/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsQueryDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsQueryDto.html":{"url":"classes/GetPostsQueryDto.html","title":"class - GetPostsQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger'; // importing from swagger so i get automatic documentation\nimport { PaginationQueryDto } from 'src/global/pagination/dto/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsQueryDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 123, type: Number})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/get-users-param.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 123,\n    type: Number,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number) // transform string to number if provided\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                googleAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        googleAuthentication\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleAuthentication(body: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.NONE)@HttpCode(HttpStatus.OK)@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\nimport { Auth, AuthType } from '../decorators/auth.decorator';\nimport { GoogleAuthenticationService } from './google-authentication.service';\n\n@Controller('google-authentication')\nexport class GoogleAuthenticationController {\n  constructor(\n    private googleAuthenticationService: GoogleAuthenticationService,\n  ) {}\n\n  @Auth(AuthType.NONE)\n  @HttpCode(HttpStatus.OK)\n  @Post('')\n  googleAuthentication(@Body() body: GoogleTokenDto) {\n    return this.googleAuthenticationService.authenticate({ token: body });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(googleConfiguration: ConfigType<>, userService: UserService, generateToken: GenerateTokenProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/google-authentication.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        googleConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateToken\n                                                  \n                                                        \n                                                                        GenerateTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/google-authentication.service.ts:29\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  OnModuleInit,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { OAuth2Client } from 'google-auth-library';\nimport googleConfig from 'src/config/google.config';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\nimport { UserService } from 'src/user/user.service';\nimport { GenerateTokenProvider } from '../providers/generate-token.provider';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n  constructor(\n    // injecting google-config as well as jwt configuration\n\n    @Inject(googleConfig.KEY)\n    private googleConfiguration: ConfigType,\n\n    @Inject(forwardRef(() => UserService)) // circular dependency injection\n    private userService: UserService,\n\n    private generateToken: GenerateTokenProvider,\n  ) {}\n\n  private oauthClient: OAuth2Client;\n\n  onModuleInit() {\n    const clientId = this.googleConfiguration.googleClientId;\n    const clientSecret = this.googleConfiguration.googleClientSecret;\n\n    this.oauthClient = new OAuth2Client({\n      clientId,\n      clientSecret,\n      redirectUri: this.googleConfiguration.googleRedirectUri,\n    });\n  }\n\n  public async authenticate({ token }: { token: GoogleTokenDto }) {\n    try {\n      // verify token\n      const loginTicket = await this.oauthClient.verifyIdToken({\n        idToken: token.access_token,\n      });\n\n      // extract payload from token\n      const payload = loginTicket.getPayload();\n      const { sub: googleId, email, given_name, family_name } = payload;\n\n      // find the user in the db (if user exists just return assess token and refresh token)\n      const user = await this.userService.findUserByGoogleId({\n        googleId: googleId,\n      });\n\n      if (user) {\n        return this.generateToken.generateTokens({ user });\n      }\n\n      // ... otherwise create a new user and then generate tokens\n      const newUser = await this.userService.createUser({\n        user: {\n          email: email,\n          firstName: given_name,\n          lastName: family_name,\n          googleId: googleId,\n        },\n      });\n\n      return this.generateToken.generateTokens({ user: newUser });\n    } catch (error: any) {\n      throw new UnauthorizedException(`${error.message}`, {\n        cause: error.message,\n        description: error,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                access_token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class GoogleTokenDto {\n  @IsNotEmpty()\n  access_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePasswords\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:19\n                        \n                    \n\n\n            \n                \n                        Compares a plain text password with a hashed password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                [object Object]\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text password to compare. Can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to a boolean indicating whether the passwords match.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n  abstract hashPassword({\n    password,\n  }: {\n    password: string | Buffer;\n  }): Promise;\n\n  /**\n   * Compares a plain text password with a hashed password.\n   * \n   * @param options - The options for password comparison.\n   * @param options.password - The plain text password to compare. Can be a string or a Buffer.\n   * @param options.hashedPassword - The hashed password to compare against.\n   * @returns A promise that resolves to a boolean indicating whether the passwords match.\n   */\n  abstract comparePasswords({\n    password,\n    hashedPassword,\n  }: {\n    password: string | Buffer;\n    hashedPassword: string;\n  }): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/entity/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  }) // creating bi-directional relationship\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOptions(createMetaOptionsDto: CreateMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionsDto\n                                            \n                                                            CreateMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private metaOptionsService: MetaOptionsService) {}\n\n  @Post()\n  createMetaOptions(@Body() createMetaOptionsDto: CreateMetaOptionsDto) {\n    const metaOptions = this.metaOptionsService.create({\n      metaOptions: createMetaOptionsDto,\n    });\n\n    return metaOptions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './entity/meta-option.entity';\nimport { MetaOptionsController } from './meta-options.controller';\n\n@Module({\n  providers: [MetaOptionsService],\n  controllers: [MetaOptionsController],\n  exports: [MetaOptionsService],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/meta-options.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\nimport { MetaOption as MetaOptionsRepository } from './entity/meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    // injecting meta options service repository dependency\n    @InjectRepository(MetaOptionsRepository)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create({ metaOptions }: { metaOptions: CreateMetaOptionsDto }) {\n    const createdMetaOption =\n      await this.metaOptionsRepository.create(metaOptions);\n    await this.metaOptionsRepository.save(createdMetaOption);\n\n    return createdMetaOption;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/interface/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[]; // replace with your actual entity type... it would be generic\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    prev: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationService \n\nPaginationService \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationService  -->\n\nPaginationModule->PaginationService \n\n\n\n\n\nPaginationService\n\nPaginationService\n\nPaginationModule -->\n\nPaginationService->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/global/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationService } from './pagination.service';\n\n@Module({\n  providers: [PaginationService],\n  exports: [PaginationService],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/dto/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of items to fetch', example: 10, type: Number, default: 10, minimum: 1})@IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/global/pagination/dto/pagination-query.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of page to fetch', example: 10, type: Number, default: 10, minimum: 1})@IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/global/pagination/dto/pagination-query.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsOptional, IsPositive } from 'class-validator';\n\nexport class PaginationQueryDto {\n  @ApiPropertyOptional({\n    description: 'Number of items to fetch',\n    example: 10,\n    type: Number,\n    default: 10,\n    minimum: 1,\n  })\n  @IsOptional()\n  @IsPositive()\n  limit?: number = 10;\n\n  @ApiPropertyOptional({\n    description: 'Number of page to fetch',\n    example: 10,\n    type: Number,\n    default: 10,\n    minimum: 1,\n  })\n  @IsOptional()\n  @IsPositive()\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationService.html":{"url":"injectables/PaginationService.html","title":"injectable - PaginationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/pagination.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/global/pagination/pagination.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/global/pagination/pagination.service.ts:16\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PaginationQueryDto } from './dto/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport { Paginated } from './interface/paginated.interface';\n\n@Injectable()\nexport class PaginationService {\n  constructor(\n    // injecting the request object\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  public async paginateQuery({\n    paginationQuery,\n    repository,\n  }: {\n    paginationQuery: PaginationQueryDto;\n    repository: Repository;\n  }): Promise> {\n    const { limit, page } = paginationQuery;\n\n    const query = await repository.find({\n      skip: (page - 1) * limit,\n      take: limit,\n    });\n\n    // creating url\n\n    const baseUrl =\n      this.request.protocol + '://' + this.request.headers.host + '/';\n\n    const newUrl = new URL(this.request.url, baseUrl);\n\n    const totalItems = await repository.count({});\n    const totalPages = Math.ceil(totalItems / limit);\n    const nextPage = totalPages === page ? page : page + 1;\n    const prevPage = page === 1 ? page : page - 1;\n\n    const finalResponse: Paginated = {\n      data: query,\n      meta: {\n        itemsPerPage: limit,\n        totalItems,\n        currentPage: page,\n        totalPages,\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?page=1&limit=${limit}}`,\n        last: `${newUrl.pathname}?page=${totalPages}&limit=${limit}`,\n        current: `${newUrl.pathname}?page=${page}&limit=${limit}`,\n        next: `${newUrl.pathname}?page=${nextPage}&limit=${limit}`,\n        prev: `${newUrl.pathname}?page=${prevPage}&limit=${limit}`,\n      },\n    };\n\n    console.log({ baseUrl, requestUrl: this.request.url, newUrl });\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Update post with a specific id', example: 123, type: 'number'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n// import { PartialType } from '@nestjs/mapped-types'; \n// we are using the import from swagger so it shows up in our documentation, it still works likes expected as the import from @nestjs/mapped-types\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'Update post with a specific id',\n    example: 123,\n    type: 'number',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entity/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostTypes, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tags => tags.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { MetaOption } from '../../meta-options/entity/meta-option.entity';\nimport { User } from 'src/user/entity/user.entity';\nimport { Tag } from 'src/tags/entity/tags.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostTypes,\n    default: PostTypes.POST,\n  })\n  postType: PostTypes;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: false,\n  })\n  publishedOn: Date;\n\n  @ManyToMany(() => Tag, (tags) => tags.posts, {\n    eager: true,\n  })\n  @JoinTable() // this must be on the owning side of the relationship and join table is used for M2M relationships, it also creates a new table for the relationship\n  tags?: Tag[];\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    // cascade: ['remove'] // setting cascade to work for a few methods\n    cascade: true, // this enables us create data in the metaoption table by just passing the value\n    eager: true, // loading the metaOptions eagerly instead of lazy loading it\n  })\n  // @JoinColumn()\n  metaOptions?: MetaOption;\n\n  // metaOptions?: CreatePostDtoWithMeta[];\n\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                deletePost\n                            \n                            \n                                    \n                                    \n                                    \n                                getAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: UserPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post', description: 'Creates a new post for a signed in user.'})@ApiResponse({status: undefined, description: 'Created post', type: CreatePostDto})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\nThis function handles the creation of a new post by processing the provided CreatePostDto.\nIt logs the received data and returns a confirmation message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the details of the post to be created.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            UserPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the post request was received.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post'})@ApiResponse({status: undefined, description: 'Deleted post'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(userId: number, postQuery: GetPostsQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Retrieves all posts for a specific user'})@ApiResponse({status: undefined, description: 'All posts', type: undefined})@Get(':userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\nThis function handles GET requests to fetch all posts associated with a given user ID.\nIt logs the user ID for which posts are being retrieved and then calls the post service\nto fetch the posts.\nExample :                                representing all posts for the specified user.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user whose posts are to be retrieved.\n\n\n                                            \n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CreatePostDto objects,\nrepresenting all posts for the specified user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(updatePostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates a post'})@ApiResponse({status: undefined, description: 'Updated post', type: CreatePostDto})@Patch('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\nThis function handles PATCH requests to update an existing post using the provided data.\nIt logs the update data received and processes the partial post update through the\nPatchPostDto data transfer object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the fields to be updated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the patch request was received.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  Req,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsQueryDto } from './dtos/get-posts.dto';\nimport { Auth, AuthType } from 'src/auth/decorators/auth.decorator';\nimport { ActiveUser } from 'src/auth/decorators/active-user.decorator';\nimport { UserPayload } from 'src/auth/guards/access-token/access-token.guard';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   *\n   * This function handles GET requests to fetch all posts associated with a given user ID.\n   * It logs the user ID for which posts are being retrieved and then calls the post service\n   * to fetch the posts.\n   *\n   * @param {number} userId - The ID of the user whose posts are to be retrieved.\n   * @returns {Promise} A promise that resolves to an array of CreatePostDto objects,\n   *                                     representing all posts for the specified user.\n   */\n\n  @ApiOperation({\n    summary: 'Retrieves all posts for a specific user',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'All posts',\n    type: [CreatePostDto],\n  })\n  @Get(':userId?')\n  getAllPosts(\n    @Param('userId') userId: number,\n    @Query() postQuery: GetPostsQueryDto,\n  ) {\n    console.log({ postQuery });\n\n    return this.postService.getAllPosts({ userId, queryParams: postQuery });\n  }\n\n  /**\n   * Creates a new post.\n   *\n   * This function handles the creation of a new post by processing the provided CreatePostDto.\n   * It logs the received data and returns a confirmation message.\n   *\n   * @param {CreatePostDto} createPostDto - The data transfer object containing the details of the post to be created.\n   * @returns {string} A confirmation message indicating that the post request was received.\n   */\n  @ApiOperation({\n    summary: 'Creates a new post',\n    description: 'Creates a new post for a signed in user.',\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Created post',\n    type: CreatePostDto,\n  })\n  @Post('')\n  createPost(\n    @Body() createPostDto: CreatePostDto,\n    @ActiveUser() user: UserPayload,\n  ) {\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.UNAUTHORIZED);\n    }\n\n    const createdPost = this.postService.create({\n      createPost: createPostDto,\n      authorId: user.sub as number,\n    });\n    return createdPost;\n  }\n\n  /**\n   * Updates an existing post.\n   *\n   * This function handles PATCH requests to update an existing post using the provided data.\n   * It logs the update data received and processes the partial post update through the\n   * PatchPostDto data transfer object.\n   *\n   * @param {PatchPostDto} updatePostDto - The data transfer object containing the fields to be updated.\n   * @returns {string} A confirmation message indicating that the patch request was received.\n   */\n  @ApiOperation({\n    summary: 'Updates a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Updated post',\n    type: CreatePostDto,\n  })\n  @Patch('')\n  updatePost(@Body() updatePostDto: PatchPostDto) {\n    // console.log({updatePostDto})\n    const updatedPost = this.postService.update({ updatePost: updatePostDto });\n    return updatedPost;\n  }\n\n  @ApiOperation({\n    summary: 'Deletes a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Deleted post',\n  })\n  @Delete('')\n  deletePost(@Query('id', ParseIntPipe) id: number) {\n    if (!id) {\n      throw new HttpException('No ID Provided', HttpStatus.BAD_REQUEST);\n    }\n\n    const deleteRequest = this.postService.delete({ id });\n\n    return deleteRequest;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_exports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { UserModule } from 'src/user/user.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post as PostEntity } from './entity/post.entity';\nimport { MetaOption } from 'src/meta-options/entity/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/global/pagination/pagination.module';\n\n@Module({\n  imports: [\n    UserModule,\n    TagsModule,\n    PaginationModule,\n    TypeOrmModule.forFeature([PostEntity, MetaOption]),\n  ],\n  controllers: [PostsController],\n  providers: [PostsService],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userServices: UserService, tagsService: TagsService, postRepository: Repository, metaOptionsRepository: Repository, paginationService: PaginationService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userServices\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:155\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption as MetaOptionRepository } from 'src/meta-options/entity/meta-option.entity';\nimport { Post, Post as PostRepository } from './entity/post.entity';\nimport { TagsService } from 'src/tags/tags.service';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsQueryDto } from './dtos/get-posts.dto';\nimport { PaginationService } from 'src/global/pagination/pagination.service';\nimport { Paginated } from 'src/global/pagination/interface/paginated.interface';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /**\n     * Repositories Injections\n     */\n\n    // injecting user service (making user of another service (a single dependency injection))\n    private userServices: UserService,\n\n    private tagsService: TagsService,\n\n    /**\n     * Repositories Injections\n     */\n    @InjectRepository(PostRepository)\n    private postRepository: Repository,\n\n    @InjectRepository(MetaOptionRepository)\n    private metaOptionsRepository: Repository,\n\n    // injecting pagination service\n    private paginationService: PaginationService,\n  ) {}\n\n  public async create({\n    createPost,\n    authorId,\n  }: {\n    createPost: CreatePostDto;\n    authorId: number;\n  }) {\n    const author = await this.userServices.findOneById({\n      id: authorId,\n    });\n\n    if (!author) {\n      throw new HttpException('Author not found', HttpStatus.NOT_FOUND);\n    }\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: createPost.tags,\n    });\n\n    if (!tags.length || tags.length === 0) {\n      throw new HttpException('Tags not found', HttpStatus.NOT_FOUND, {\n        cause: 'Tags not found',\n        description: 'Provide a valid tags to create',\n      });\n    }\n\n    const normalizedSlug = createPost.slug.toLowerCase();\n    const existingSlug = await this.postRepository.findOne({\n      where: {\n        slug: normalizedSlug,\n      },\n    });\n\n    if (existingSlug) {\n      throw new HttpException('Slug already exists', HttpStatus.CONFLICT);\n    }\n\n    try {\n      const post = await this.postRepository.create({\n        ...createPost,\n        author: author,\n        tags: tags,\n        slug: normalizedSlug,\n      });\n\n      await this.postRepository.save(post);\n\n      return post;\n    } catch (error: any) {\n      throw new HttpException(\n        `Error while creating post`,\n        HttpStatus.BAD_REQUEST,\n        {\n          cause: error.message,\n          description: String(error),\n        },\n      );\n    }\n  }\n\n  public async update({ updatePost }: { updatePost: PatchPostDto }) {\n    // find the tags\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: updatePost.tags,\n    });\n\n    if (!(tags.length > 0)) {\n      throw new HttpException('Tags not found', HttpStatus.NOT_FOUND, {\n        cause: 'Tags not found',\n        description: 'Provide a valid tags to update',\n      });\n    }\n\n    const post = await this.postRepository.findOneBy({ id: updatePost.id });\n\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    }\n\n    post.title = updatePost.title ?? post.title;\n    post.postType = updatePost.postType ?? post.postType;\n    post.slug = updatePost.slug ?? post.slug;\n    post.status = updatePost.status ?? post.status;\n    post.content = updatePost.content ?? post.content;\n    post.schema = updatePost.schema ?? post.schema;\n    post.featuredImageUrl =\n      updatePost.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishedOn = updatePost.publishedOn ?? post.publishedOn;\n    post.tags = updatePost.tags ? tags : post.tags;\n\n    const updatedPost = await this.postRepository.save(post);\n\n    return updatedPost;\n  }\n\n  public async getAllPosts({\n    userId,\n    queryParams,\n  }: {\n    userId: number;\n    queryParams: GetPostsQueryDto;\n  }): Promise> {\n    const { endDate, limit, page, startDate } = queryParams;\n\n    const posts = await this.paginationService.paginateQuery({\n      paginationQuery: {\n        limit,\n        page,\n      },\n      repository: this.postRepository,\n    });\n\n    return posts;\n  }\n\n  public async delete({ id }: { id: number }) {\n    // const post = await this.postRepository.findOneBy({ id });\n\n    // if (!post) {\n    //   throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    // }\n\n    await this.postRepository.delete({ id });\n\n    // await this.metaOptionsRepository.delete({ id: post.metaOptions.id });\n\n    return { message: 'Post deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @IsString()\n  @IsNotEmpty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenProvider.html":{"url":"injectables/RefreshTokenProvider.html","title":"injectable - RefreshTokenProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-token.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokenProvider, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-token.provider.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRefreshToken(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-token.provider.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from 'src/config/jwt.config';\nimport { GenerateTokenProvider } from './generate-token.provider';\nimport { UserService } from 'src/user/user.service';\nimport { UserPayload } from '../guards/access-token/access-token.guard';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\n\n@Injectable()\nexport class RefreshTokenProvider {\n  constructor(\n    // injecting jwt service dependency\n    private jwtService: JwtService,\n\n    // injecting jwtConfig (environment values)\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n\n    private generateTokenProvider: GenerateTokenProvider,\n\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n  ) {}\n\n  public async getRefreshToken({ token }: { token: RefreshTokenDto }) {\n    try {\n      // verify the refresh token sent\n      const { sub } = await this.jwtService.verifyAsync\n      >(token.refreshToken, {\n        secret: this.jwtConfiguration.jwtSecret,\n        audience: this.jwtConfiguration.jwtTokenAudience,\n        issuer: this.jwtConfiguration.jwtTokenIssuer,\n      });\n      // fetch the user\n      const user = await this.userService.findOneById({ id: sub });\n\n      // generate new access and refresh tokens\n      const { accessToken, refreshToken } =\n        await this.generateTokenProvider.generateTokens({\n          user,\n        });\n\n      return { accessToken, refreshToken };\n    } catch (error: any) {\n      throw new HttpException(\n        `Invalid refresh token ${error.message}`,\n        HttpStatus.UNAUTHORIZED,\n        {\n          cause: error.message,\n          description: error,\n        },\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\"\n\nexport class SignInDto {\n    @IsNotEmpty()\n    @IsEmail()\n    email: string\n\n    @IsNotEmpty()\n    @IsString()\n    password: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/entity/tags.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                deletedDate\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'json',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n    length: 1024,\n  })\n  featuredImageUrl?: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @DeleteDateColumn({})\n  deletedDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteTag\n                            \n                            \n                                    \n                                    \n                                    Async\n                                softDeleteTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createTag: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a tag'})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTag\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a tag by id'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        softDeleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDeleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Soft Delete a tag by id'})@Delete('/soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { ApiOperation } from '@nestjs/swagger';\nimport { TagsService } from './tags.service';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(private tagsService: TagsService) {}\n\n  @ApiOperation({ summary: 'Create a tag' })\n  @Post('')\n  createPost(@Body() createTag: CreateTagDto) {\n    const createdTags = this.tagsService.createTag({ tag: createTag });\n    return createdTags;\n  }\n\n  @ApiOperation({ summary: 'Delete a tag by id' })\n  @Delete('')\n  async deleteTag(@Query('id', ParseIntPipe) id: number) {\n    return await this.tagsService.delete({ id });\n  }\n\n  @ApiOperation({ summary: 'Soft Delete a tag by id' })\n  @Delete('/soft-delete')\n  async softDeleteTag(@Query('id', ParseIntPipe) id: number) {\n    return await this.tagsService.softDelete({ id });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsService } from './tags.service';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './entity/tags.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Tag])],\n  controllers: [TagsController],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTags\n                            \n                            \n                                    Public\n                                    Async\n                                getTagById\n                            \n                            \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTags()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getTagById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTagById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { In, Repository } from 'typeorm';\nimport { Tag as TagRepository } from './entity/tags.entity';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    @InjectRepository(TagRepository)\n    private tagsRepository: Repository,\n  ) {}\n\n  public async createTag({ tag }: { tag: CreateTagDto }) {\n    const existingTags = await this.tagsRepository.findOne({\n      where: { name: tag.name },\n    });\n\n    if (existingTags) {\n      throw new HttpException('Tag already exists', HttpStatus.CONFLICT);\n    }\n\n    const createdTags = await this.tagsRepository.create(tag);\n\n    await this.tagsRepository.save(createdTags);\n\n    return createdTags;\n  }\n\n  public async getAllTags() {\n    const tags = await this.tagsRepository.find({});\n\n    return tags;\n  }\n\n  public async getTagById({ id }: { id: number }) {\n    const tag = await this.tagsRepository.findOneBy({ id });\n\n    if (!tag) {\n      throw new HttpException('Tag not found', HttpStatus.NOT_FOUND);\n    }\n\n    return tag;\n  }\n\n  public async findMultipleTags({ tags }: { tags: number[] }) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags),\n      },\n    });\n\n    return results;\n  }\n\n  public async delete({ id }: { id: number }) {\n    await this.tagsRepository.delete({ id });\n\n    return { message: 'Tag deleted successfully', status: 'success', id };\n  }\n\n  public async softDelete({ id }: { id: number }) {\n    await this.tagsRepository.softDelete({ id });\n\n    return { message: 'Tag soft deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Upload.html":{"url":"entities/Upload.html","title":"entity - Upload","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file-upload/entity/upload.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                filename\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                mime\n                            \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                size\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        mime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 128, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: FileTypes, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport enum FileTypes {\n  IMAGE = 'image',\n  VIDEO = 'video',\n  AUDIO = 'audio',\n  DOCUMENT = 'document',\n  OTHER = 'other',\n}\n\n@Entity()\nexport class Upload {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n  })\n  filename: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  path: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: FileTypes,\n    default: FileTypes.IMAGE,\n  })\n  type: FileTypes;\n\n  @Column({\n    type: 'varchar',\n    length: 128,\n    nullable: false,\n  })\n  mime: string; // media types that can be uploaded (.aac or .mp4)\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  size: number;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadToAwsProvider.html":{"url":"injectables/UploadToAwsProvider.html","title":"injectable - UploadToAwsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadToAwsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file-upload/providers/upload-to-aws.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                awsFileUpload\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(awsConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/file-upload/providers/upload-to-aws.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        awsConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        awsFileUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    awsFileUpload(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file-upload/providers/upload-to-aws.provider.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file-upload/providers/upload-to-aws.provider.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { S3 } from 'aws-sdk';\nimport awsConfig from 'src/config/aws.config';\nimport * as path from 'path';\nimport { v4 as uuid4 } from 'uuid';\n\n@Injectable()\nexport class UploadToAwsProvider {\n  constructor(\n    @Inject(awsConfig.KEY)\n    private awsConfiguration: ConfigType,\n  ) {}\n\n  private generateFileName({ file }: { file: Express.Multer.File }) {\n    const id = uuid4();\n    const filename = file.originalname;\n    const extension = path.extname(filename);\n    const fileNameWithoutSpace = filename\n      .split('.')[0]\n      .replace(/\\s/g, '')\n      .trim();\n    const timestamp = new Date().toISOString().replace(/:/g, '-').trim();\n\n    return `${id}-${fileNameWithoutSpace}-${timestamp}${extension}`;\n  }\n\n  public async awsFileUpload({ file }: { file: Express.Multer.File }) {\n    // this.configService.get('appConfig.awsBucketName')\n\n    const s3 = new S3({\n      accessKeyId: this.awsConfiguration.awsAccessKey,\n      secretAccessKey: this.awsConfiguration.awsSecretAccessKey,\n      region: this.awsConfiguration.awsRegion,\n    });\n\n    const params: S3.Types.PutObjectRequest = {\n      Bucket: this.awsConfiguration.awsBucketName,\n      Key: this.generateFileName({ file }),\n      Body: file.buffer,\n      ContentType: file.mimetype,\n    };\n\n    try {\n      const uploadResult = await s3.upload(params).promise();\n      console.log({ uploadResult });\n\n      return uploadResult.Key;\n    } catch (error: any) {\n      throw new HttpException(\n        `Failed to upload image: ${error.message}`,\n        HttpStatus.BAD_REQUEST,\n        {\n          cause: error.message,\n          description: error.stack,\n        },\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 60, nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, posts => posts.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Post } from 'src/posts/entity/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    unique: true,\n    nullable: false,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 60,\n    nullable: true, // this is done because we are using google auth\n  })\n  @Exclude()\n  password?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n  })\n@Exclude()\n  googleId?: string;\n\n  @OneToMany(() => Post, (posts) => posts.author) // first argument is the one we want to setup a relationship with, second argument is the what references the relationship\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create users', description: 'Create multiple users'})@Auth(AuthType.BEARER)@Post('/create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new user', description: 'Create a new user for the application'})@HttpCode(HttpStatus.CREATED)@Auth(AuthType.NONE)@UseInterceptors(ClassSerializerInterceptor)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all users', description: 'Get all users with optional pagination'})@ApiResponse({status: 200, description: 'All users', type: CreateUserDto})@ApiQuery({name: 'limit', type: Number, required: false, description: 'Limit the number of returned results', example: 10})@ApiQuery({name: 'page', type: Number, required: false, description: 'The position of the number that you want the api to return', example: 1})@Get('/:id?')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n  UseGuards,\n  SetMetadata,\n  HttpCode,\n  HttpStatus,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-user.dto';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { Auth, AuthType } from 'src/auth/decorators/auth.decorator';\n\n@Controller('users')\n@ApiTags('Users') // with the updated version of @nestjs/swagger there is no need to use @ApiTags\nexport class UserController {\n  /**\n   * Final Endpoint - /users/id?limit=10&page=1\n   * Parama id - optional, convert to integer, cannot have a default value\n   * Query limit - integer, default 10\n   * Query page - integer, default value 1\n   * ==> USE CASES\n   * /users/ -> return all users with default pagination\n   * /users/1223 -> returns one user whos id is 1234\n   * /users?limit=10&page=2 -> return page 2 with limit of pagination 10\n   */\n\n  constructor(private readonly userService: UserService) {}\n\n  @ApiOperation({\n    summary: 'Get all users',\n    description: 'Get all users with optional pagination',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'All users',\n    type: CreateUserDto,\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: Number,\n    required: false,\n    description: 'Limit the number of returned results',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    required: false,\n    description: 'The position of the number that you want the api to return',\n    example: 1,\n  })\n  @Get('/:id?')\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    // console.log(getUserParamDto);\n    // console.log(`Limit: ${limit}, Page: ${page}`);\n\n    const findAll = this.userService.findAll({\n      page,\n      limit,\n      userParamsDTO: getUserParamDto,\n    });\n\n    return findAll;\n  }\n\n  @ApiOperation({\n    summary: 'Create a new user',\n    description: 'Create a new user for the application',\n  })\n  @HttpCode(HttpStatus.CREATED)\n  @Auth(AuthType.NONE)\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    const createUser = this.userService.createUser({ user: createUserDto });\n    return createUser;\n  }\n\n  @ApiOperation({\n    summary: 'Create users',\n    description: 'Create multiple users',\n  })\n  // @UseGuards(AccessTokenGuard)\n  @Auth(AuthType.BEARER)\n  @Post('/create-many')\n  public createManyUsers(@Body() createUsersDto: CreateManyUsersDto) {\n    console.log('hitting it');\n    // const createUsers = this.userService.createMany({ users: createUsersDto });\n    // return createUsers;\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n    // return 'You sent a patch request to users endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCreateMany.html":{"url":"injectables/UserCreateMany.html","title":"injectable - UserCreateMany","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCreateMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-create-many.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-create-many.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user-create-many.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { DataSource } from 'typeorm';\nimport { User } from './entity/user.entity';\nimport { CreateManyUsersDto } from './dtos/create-many-user.dto';\n\n@Injectable()\nexport class UserCreateMany {\n  constructor(\n    // injecting datasource for typeorm transactions\n    private dataSource: DataSource,\n  ) {}\n\n  public async createMany({ users }: { users: CreateManyUsersDto }) {\n    // create query runner instance\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    // connect query runner to datasource\n    try {\n      await queryRunner.connect();\n    } catch (error: any) {\n      throw new HttpException(\n        'Database connection failed',\n        HttpStatus.REQUEST_TIMEOUT,\n        {\n          cause: error.message,\n          description: String(error),\n        },\n      );\n    }\n\n    // start transaction\n    try {\n      await queryRunner.startTransaction();\n    } catch (error: any) {\n      throw new HttpException(\n        'Failed to start QueryRunner Transaction',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n        {\n          cause: error.message,\n          description: String(error),\n        },\n      );\n    }\n\n    let newUser: User[] = [];\n    try {\n      // if successful commit the transaction\n      for (let user of users.users) {\n        const newUserInstance = queryRunner.manager.create(User, user); // entity and object\n        const savedNewUserInstance =\n          await queryRunner.manager.save(newUserInstance); // save entity to the database\n\n        newUser.push(savedNewUserInstance); // keeping track of the users we have created\n      }\n\n      await queryRunner.commitTransaction();\n    } catch (error: any) {\n      // if failed rollback transaction\n      await queryRunner.rollbackTransaction();\n\n      throw new HttpException('Transaction Failed', HttpStatus.BAD_REQUEST, {\n        cause: error.message,\n        description: String(error),\n      });\n    } finally {\n      // release connection\n      try {\n        await queryRunner.release();\n      } catch (error: any) {\n        throw new HttpException(\n          'Failed to release QueryRunner connection',\n          HttpStatus.INTERNAL_SERVER_ERROR,\n          {\n            cause: error.message,\n            description: String(error),\n          },\n        );\n      }\n    }\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nUserCreateMany\n\nUserCreateMany\n\nUserModule -->\n\nUserCreateMany->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            UserCreateMany\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entity/user.entity';\nimport { ConfigModule, ConfigType } from '@nestjs/config';\nimport { UserCreateMany } from './user-create-many';\nimport { CreateUserProvider } from './provider/create-user.provider';\nimport profileConfig from './config/profile.config';\nimport jwtConfig from 'src/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { APP_GUARD } from '@nestjs/core';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule), // for dependency injection (circular dependency injection)\n    TypeOrmModule.forFeature([User]), // for repository (entity) injection\n    ConfigModule.forFeature(profileConfig),\n    // ConfigModule.forFeature(jwtConfig),\n    // JwtModule.registerAsync({\n    //   imports: [ConfigModule.forFeature(jwtConfig)],\n    //   useFactory: async (jwtConfiguration: ConfigType) => ({\n    //     secret: jwtConfiguration.jwtSecret,\n    //     signOptions: {\n    //       audience: jwtConfiguration.jwtTokenAudience,\n    //       issuer: jwtConfiguration.jwtTokenIssuer,\n    //       expiresIn: jwtConfiguration.jwtTokenExpiration,\n    //     },\n    //   }),\n    //   inject: [jwtConfig.KEY],\n    // }),\n  ],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    UserCreateMany,\n    CreateUserProvider,\n    // {\n    //   provide: APP_GUARD,\n    //   useClass: AccessTokenGuard\n    // }, // setting a guard globally (this protect the entire application, everywhere the userModule is been imported)\n  ],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    Public\n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findUserByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository, configService: ConfigService, profileConfiguration: ConfigType<>, usersCreateMany: UserCreateMany, createUserProvider: CreateUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateMany\n                                                  \n                                                        \n                                                                        UserCreateMany\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByGoogleId(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/auth.service';\nimport { DataSource, Repository } from 'typeorm';\nimport { User } from './entity/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from './config/profile.config';\nimport { UserCreateMany } from './user-create-many';\nimport { CreateManyUsersDto } from './dtos/create-many-user.dto';\nimport { CreateUserProvider } from './provider/create-user.provider';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => AuthService))\n    private authService: AuthService,\n\n    // injecting user service repository dependency\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    // injecting environment variables\n    private configService: ConfigService,\n\n    // injecting module specific configuration dependencies (environment variables)\n    @Inject(profileConfig.KEY)\n    private profileConfiguration: ConfigType,\n\n    private usersCreateMany: UserCreateMany,\n\n    private createUserProvider: CreateUserProvider,\n  ) {}\n\n  public async createUser({ user }: { user: CreateUserDto }): Promise {\n    return await this.createUserProvider.createUser({ user });\n  }\n\n  public findAll({\n    userParamsDTO,\n    limit,\n    page,\n  }: {\n    userParamsDTO: GetUsersParamDto;\n    limit: number;\n    page: number;\n  }) {\n    const environment = this.configService.get('S3_BUCKET');\n    console.log(`Environment: ${environment}`);\n\n    console.log('NODE_ENV: ', process.env.NODE_ENV);\n\n    console.log('Profile: ', this.profileConfiguration);\n\n    throw new HttpException(\n      'Api endpoint does not exist',\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        description: 'Occurred because the API endpoint was deprecated',\n        cause: 'Api endpoint does not exist',\n      },\n    );\n  }\n\n  public async findOneById({ id }: { id: number }) {\n    const user = await this.userRepository.findOneBy({ id });\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    return user;\n  }\n\n  public async findUserByEmail({ email }: { email: string }) {\n    try {\n      const user = await this.userRepository.findOneBy({ email });\n\n      if (!user) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n\n      return user;\n    } catch (error: any) {\n      throw new RequestTimeoutException(`Timeout occurred: ${error.message}`);\n    }\n  }\n\n  public async findUserByGoogleId({ googleId }: { googleId: string }) {\n    try {\n      const user = await this.userRepository.findOneBy({ googleId });\n\n      if (!user) {\n        // throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n        return null; // return null if user not found, instead of throwing an exception\n      }\n\n      return user;\n    } catch (error: any) {\n      throw new RequestTimeoutException(`Timeout occurred: ${error.message}`);\n    }\n  }\n\n  public async createMany({ users }: { users: CreateManyUsersDto }) {\n    return await this.usersCreateMany.createMany({ users });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/auth/decorators/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/guards/access-token/access-token.guard.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/guards/access-token/access-token.guard.ts\n            \n            type alias\n            UserPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-token.provider.ts\n            \n            injectable\n            GenerateTokenProvider\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-token.provider.ts\n            \n            injectable\n            RefreshTokenProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/file-upload/entity/upload.entity.ts\n            \n            entity\n            Upload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/file-upload/file-upload.controller.ts\n            \n            controller\n            FileUploadController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/file-upload/file-upload.service.ts\n            \n            injectable\n            FileUploadService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/file-upload/providers/upload-to-aws.provider.ts\n            \n            injectable\n            UploadToAwsProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/global/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/global/pagination/dto/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/global/pagination/interface/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/global/pagination/pagination.service.ts\n            \n            injectable\n            PaginationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-meta-options.dto.ts\n            \n            class\n            CreateMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/entity/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsQueryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/entity/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/entity/tags.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tags/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/dtos/create-many-user.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/provider/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user-create-many.ts\n            \n            injectable\n            UserCreateMany\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.4.15\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/multer : ^1.4.12\n        \n            aws-sdk : 2.1643.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            google-auth-library : ^9.15.0\n        \n            joi : ^17.13.3\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^11.0.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth.decorator.ts)\n                        \n                        \n                            FileTypes   (src/.../upload.entity.ts)\n                        \n                        \n                            PostStatus   (src/.../posts.enums.ts)\n                        \n                        \n                            PostTypes   (src/.../posts.enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 BEARER\n                            \n                        \n                        \n                            \n                                Value : bearer\n                            \n                        \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n            \n        \n\n    src/file-upload/entity/upload.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        FileTypes\n                    \n                \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : image\n                            \n                        \n                        \n                            \n                                 VIDEO\n                            \n                        \n                        \n                            \n                                Value : video\n                            \n                        \n                        \n                            \n                                 AUDIO\n                            \n                        \n                        \n                            \n                                Value : audio\n                            \n                        \n                        \n                            \n                                 DOCUMENT\n                            \n                        \n                        \n                            \n                                Value : document\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n            \n        \n\n    src/posts/enums/posts.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PostTypes\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FileUploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_FileUploadModule\n\n\n\ncluster_FileUploadModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nFileUploadModule\n\nFileUploadModule\n\nAppModule -->\n\nFileUploadModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationService \n\nPaginationService \n\nPaginationService  -->\n\nPaginationModule->PaginationService \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nPaginationModule -->\n\nPaginationService->PaginationModule\n\n\n\nAppModule -->\n\nPaginationService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokenProvider\n\nGenerateTokenProvider\n\nAuthModule -->\n\nGenerateTokenProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokenProvider\n\nRefreshTokenProvider\n\nAuthModule -->\n\nRefreshTokenProvider->AuthModule\n\n\n\n\n\nFileUploadService\n\nFileUploadService\n\nFileUploadModule -->\n\nFileUploadService->FileUploadModule\n\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\nFileUploadModule -->\n\nUploadToAwsProvider->FileUploadModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nUserCreateMany\n\nUserCreateMany\n\nUserModule -->\n\nUserCreateMany->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    17 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserPayload   (src/.../access-token.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/guards/access-token/access-token.guard.ts\n    \n    \n        \n            \n                \n                    \n                    UserPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.decorator.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../access-token.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof UserPayload | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: UserPayload = request[REQUEST_USER_KEY];\n\n    if (field) {\n      return user[field];\n    } else {\n      return user;\n    }\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) => SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/auth/guards/access-token/access-token.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
