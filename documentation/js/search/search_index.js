var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.335,1,2.018]],["body/guards/AccessTokenGuard.html",[1,2.471,2,2.394,3,0.189,4,0.169,5,0.169,6,3.965,7,3.378,8,2.688,9,0.296,10,1.212,11,1.922,12,5.188,13,2.765,14,5.239,15,2.05,16,3.135,17,5.397,18,3.339,19,3.378,20,0.698,21,3.135,22,1.647,23,0.02,24,1.489,25,0.708,26,1.041,27,3.846,28,4.903,29,3.135,30,3.425,31,1.275,32,2.175,33,3.135,34,1.832,35,3.135,36,0.421,37,1.617,38,1.52,39,1.617,40,0.939,41,0.59,42,1.727,43,1.852,44,3.987,45,2.394,46,2.688,47,2.394,48,1.998,49,2.174,50,0.189,51,0.038,52,2.394,53,2.175,54,2.688,55,2.688,56,2.174,57,2.394,58,1.727,59,2.688,60,1.892,61,3.135,62,6.629,63,3.135,64,1.341,65,1.727,66,3.135,67,3.135,68,3.135,69,3.135,70,3.135,71,3.135,72,2.688,73,2.315,74,1.832,75,2.688,76,3.135,77,3.846,78,1.998,79,4.486,80,1.353,81,3.135,82,1.998,83,2.688,84,1.998,85,2.688,86,1.998,87,2.688,88,3.135,89,2.175,90,3.135,91,2.174,92,1.998,93,2.65,94,3.135,95,1.852,96,2.688,97,0.891,98,0.012,99,0.012]],["title/controllers/AppController.html",[100,1.344,101,2.541]],["body/controllers/AppController.html",[3,0.304,4,0.272,5,0.272,9,0.476,10,1.662,20,0.671,23,0.02,31,1.432,36,0.411,41,0.949,50,0.304,51,0.061,64,1.507,98,0.016,99,0.016,100,2.256,101,4.264,102,1.95,103,4.321,104,5.924,105,1.362,106,5.04,107,1.838,108,3.92,109,4.321,110,2.978,111,3.495,112,5.04]],["title/modules/AppModule.html",[113,1.212,114,2.541]],["body/modules/AppModule.html",[0,1.51,1,2.745,3,0.143,4,0.128,5,0.269,7,1.4,11,0.869,18,1.51,19,2.152,23,0.02,25,0.277,36,0.478,39,2.29,41,0.446,42,1.305,43,1.4,48,1.51,50,0.22,51,0.029,56,1.643,57,2.782,60,0.784,82,1.51,84,1.51,86,1.51,89,2.152,98,0.009,99,0.009,100,0.869,101,3.078,102,1.409,108,3.356,109,2.031,113,1.78,114,4.897,115,1.083,116,1.022,117,1.222,118,1.222,119,1.083,120,2.29,121,1.222,122,2.031,123,2.031,124,2.031,125,3.356,126,3.62,127,3.356,128,3.62,129,3.356,130,3.129,131,3.129,132,1.88,133,1.222,134,1.222,135,1.809,136,2.829,137,2.829,138,2.829,139,3.178,140,2.369,141,2.369,142,2.369,143,2.369,144,2.369,145,1.51,146,1.022,147,1.665,148,2.322,149,2.031,150,2.369,151,2.369,152,2.369,153,2.782,154,4.273,155,2.369,156,2.369,157,3.643,158,2.369,159,3.643,160,2.369,161,3.643,162,2.369,163,3.124,164,1.51,165,2.369,166,1.643,167,2.369,168,1.809,169,2.526,170,2.369,171,4.107,172,1.809,173,4.983,174,2.369,175,2.369,176,2.369,177,2.369,178,3.643,179,3.643,180,2.782,181,2.526,182,2.369,183,3.643,184,2.369,185,3.643,186,2.369,187,2.369,188,2.369,189,2.369,190,2.031,191,3.806,192,2.369,193,2.031,194,2.369,195,0.916,196,2.369,197,2.369,198,2.031,199,2.782,200,2.369,201,2.369,202,2.369,203,3.643,204,2.369,205,2.369,206,2.369,207,2.369,208,1.149,209,2.369,210,2.369,211,1.4,212,2.369,213,2.369,214,2.369,215,1.305,216,2.031,217,2.369,218,2.526,219,2.369,220,0.869,221,0.916,222,1.809,223,2.369,224,2.369,225,2.369,226,1.809,227,3.124,228,2.782,229,1.809,230,1.809,231,1.809,232,1.809,233,1.809,234,1.643,235,1.809,236,1.809,237,2.031,238,1.222,239,1.4,240,1.643,241,2.782]],["title/injectables/AppService.html",[40,0.767,108,2.165]],["body/injectables/AppService.html",[3,0.315,4,0.282,5,0.282,9,0.493,10,1.699,20,0.696,23,0.019,31,1.486,36,0.349,40,1.316,41,0.984,50,0.315,51,0.063,64,1.562,98,0.016,99,0.016,104,5.998,107,1.879,108,3.714,242,2.134,243,4.481,244,5.227,245,4.481,246,4.481]],["title/controllers/AuthController.html",[100,1.344,247,2.541]],["body/controllers/AuthController.html",[3,0.282,4,0.252,5,0.252,9,0.441,10,1.586,20,0.623,22,1.47,23,0.02,24,1.329,25,0.547,26,0.929,31,1.329,36,0.429,38,2.267,41,0.88,50,0.282,51,0.056,64,1.398,98,0.015,99,0.015,100,1.715,102,1.809,105,1.264,110,2.762,247,4.07,248,4.009,249,2.98,250,2.98,251,5.033,252,4.675,253,4.289,254,4.675,255,4.675,256,6.416,257,3.468,258,4.675,259,1.47,260,3.534,261,4.009,262,4.009,263,4.675,264,4.675,265,4.675,266,4.675,267,4.675]],["title/modules/AuthModule.html",[113,1.212,125,2.165]],["body/modules/AuthModule.html",[3,0.227,4,0.203,5,0.203,11,1.382,18,2.401,19,3.012,23,0.02,36,0.47,39,1.943,41,0.709,42,2.075,43,2.225,48,2.401,49,2.612,50,0.227,51,0.046,82,2.401,84,2.401,86,2.401,98,0.013,99,0.013,102,1.972,113,1.912,115,1.721,116,1.626,117,1.943,118,1.943,119,1.721,120,2.981,121,2.981,125,4.098,130,2.808,132,2.63,133,1.943,134,1.943,139,3.012,153,2.876,168,2.876,199,2.876,228,3.892,229,2.876,230,2.876,231,2.876,232,2.876,233,2.876,234,2.612,235,2.876,236,2.876,238,2.63,239,3.012,240,2.612,241,2.876,247,4.007,260,3.98,261,3.23,268,3.23,269,3.23,270,3.23,271,3.579,272,3.767,273,3.25,274,3.767,275,3.23,276,3.23,277,3.535,278,3.767,279,2.401]],["title/injectables/AuthService.html",[40,0.767,260,2.018]],["body/injectables/AuthService.html",[3,0.181,4,0.162,5,0.162,9,0.284,10,1.177,11,1.878,13,2.563,15,1.99,17,5.488,18,3.262,19,3.314,20,0.682,22,1.369,23,0.02,24,1.237,25,0.657,26,0.865,31,1.237,34,1.778,36,0.428,37,1.552,38,1.458,39,1.552,40,0.912,41,0.566,42,1.657,43,1.777,44,1.777,48,2.775,49,2.085,50,0.181,51,0.036,53,2.72,57,2.296,58,2.398,59,2.579,60,1.693,64,1.301,73,2.246,74,1.778,77,2.579,78,1.917,80,2.209,82,1.917,83,2.579,84,1.917,85,2.579,86,1.917,87,2.579,89,1.458,92,1.917,93,2.572,95,1.777,97,0.855,98,0.011,99,0.011,180,2.296,208,2.111,234,2.085,237,2.579,238,2.894,239,1.777,242,1.228,251,4.388,253,2.775,257,3.023,260,2.398,262,2.579,271,3.382,273,1.917,276,2.579,279,2.775,280,2.579,281,2.836,282,5.61,283,3.007,284,3.303,285,3.007,286,3.007,287,3.019,288,3.007,289,3.007,290,1.657,291,2.296,292,2.579,293,3.324,294,2.296,295,2.579,296,2.579,297,3.007,298,2.819,299,2.579,300,3.007,301,5.118,302,3.007,303,2.085,304,3.007,305,3.007,306,2.579,307,2.296,308,2.579,309,3.007,310,3.007,311,4.354,312,3.007,313,3.007,314,3.007,315,3.007,316,3.007,317,2.579,318,2.579,319,3.007]],["title/guards/AuthenticationGuard.html",[0,2.335,169,2.541]],["body/guards/AuthenticationGuard.html",[1,3.682,2,4.811,3,0.211,4,0.189,5,0.189,7,2.065,9,0.33,10,1.309,12,5.732,13,2.979,15,2.213,20,0.645,22,1.523,23,0.02,24,1.377,25,0.651,26,0.962,27,2.997,28,5.145,30,3.698,31,1.377,32,2.349,36,0.421,40,1.014,41,0.658,46,4.765,47,2.669,50,0.211,51,0.042,52,2.669,53,2.349,54,2.997,55,2.997,56,2.424,60,1.602,64,1.045,89,2.349,91,3.358,98,0.013,99,0.013,164,2.228,166,2.424,169,3.358,250,3.087,287,3.854,320,2.997,321,1.045,322,4.843,323,4.843,324,4.843,325,3.495,326,6.814,327,3.495,328,3.495,329,3.495,330,3.698,331,3.358,332,2.997,333,4.843,334,3.495,335,3.495,336,3.495,337,2.424,338,2.997,339,4.153,340,3.495,341,3.495,342,3.495,343,3.495,344,3.495,345,3.495,346,3.495,347,2.424,348,3.495,349,2.997,350,3.495]],["title/injectables/BcryptProvider.html",[40,0.767,277,2.541]],["body/injectables/BcryptProvider.html",[3,0.197,4,0.176,5,0.176,9,0.308,10,1.247,11,1.964,20,0.615,22,1.45,23,0.02,24,1.311,25,0.746,26,0.916,31,1.654,32,3.247,34,2.377,36,0.358,40,0.966,41,0.614,50,0.197,51,0.039,52,2.489,60,1.771,64,1.379,65,2.541,80,1.407,97,0.927,98,0.012,99,0.012,107,2.002,208,3.57,218,3.199,242,1.331,271,2.38,277,3.199,281,2.446,287,3.199,294,2.489,303,4.036,307,4.444,351,2.795,352,4.59,353,4.59,354,2.795,355,3.26,356,3.955,357,4.99,358,5.988,359,4.087,360,4.444,361,3.522,362,3.955,363,3.199,364,2.795,365,3.26,366,4.613,367,4.99,368,5.266,369,3.26,370,4.036,371,2.94,372,2.795,373,4.613,374,3.26,375,3.26,376,2.795,377,3.26]],["title/classes/CreateManyUsersDto.html",[51,0.044,378,2.165]],["body/classes/CreateManyUsersDto.html",[3,0.243,4,0.218,5,0.218,9,0.381,20,0.537,23,0.02,25,0.796,36,0.442,50,0.243,51,0.072,89,3.209,97,1.146,98,0.014,99,0.014,105,1.09,208,2.587,220,1.479,298,2.939,321,1.595,347,3.699,378,3.152,379,1.559,380,4.073,381,3.152,382,2.795,383,3.91,384,3.415,385,2.795,386,4.073,387,3.4,388,4.073,389,5.456,390,4.073,391,2.587,392,4.031,393,3.456,394,4.031,395,2.939,396,4.574,397,1.646,398,2.382,399,2.57,400,3.4,401,1.646,402,2.064,403,2.57,404,4.073,405,4.031,406,4.073,407,5.335,408,4.031,409,5.335,410,4.031,411,4.031,412,3.456]],["title/classes/CreateMetaOptionsDto.html",[51,0.044,413,2.165]],["body/classes/CreateMetaOptionsDto.html",[3,0.293,4,0.262,5,0.262,9,0.458,20,0.646,23,0.02,25,0.568,36,0.324,50,0.293,51,0.073,98,0.016,99,0.016,105,1.311,107,1.95,147,2.745,321,1.795,379,1.876,395,3.756,397,1.981,400,3.828,413,3.548,414,2.912,415,4.586,416,4.159,417,4.981,418,4.851,419,4.851,420,4.586,421,3.092,422,4.159,423,4.159,424,2.672]],["title/classes/CreatePostDto.html",[51,0.044,425,2.165]],["body/classes/CreatePostDto.html",[3,0.109,4,0.097,5,0.097,9,0.17,20,0.804,23,0.019,25,0.849,26,1.171,30,2.242,36,0.315,50,0.109,51,0.045,65,1.617,72,1.547,89,2.859,93,1.735,97,1.806,98,0.008,99,0.008,105,1.631,107,2.031,147,1.342,193,2.518,215,2.045,245,3.184,246,3.184,259,2.162,321,1.11,347,3.266,363,1.251,371,1.872,379,0.698,385,2.967,387,1.15,388,4.063,389,2.518,390,2.242,391,3.294,393,1.547,395,2.932,396,2.518,397,0.737,399,1.15,400,3.392,401,0.737,412,3.184,413,2.528,414,0.875,415,1.377,417,1.377,420,2.242,421,3.218,422,1.547,423,1.547,424,2.045,425,1.735,426,5.278,427,1.377,428,3.713,429,4.38,430,2.575,431,2.575,432,3.184,433,3.184,434,2.575,435,3.266,436,2.782,437,3.392,438,4.038,439,1.416,440,1.136,441,1.872,442,2.242,443,2.518,444,1.804,445,1.804,446,3.266,447,3.669,448,3.669,449,1.804,450,1.804,451,2.518,452,2.518,453,3.267,454,2.518,455,4.329,456,1.804,457,1.804,458,2.936,459,3.713,460,3.713,461,1.804,462,1.804,463,3.596,464,2.936,465,4.279,466,4.279,467,2.045,468,3.184,469,3.184,470,1.804,471,1.804,472,2.983,473,3.669,474,2.936,475,2.936,476,2.936,477,2.936,478,1.804,479,1.804,480,2.936,481,2.936,482,3.855,483,1.804,484,1.804,485,1.804,486,1.804,487,2.518,488,1.804,489,3.669,490,3.669,491,1.735,492,2.518,493,2.518,494,2.518,495,2.242,496,2.518,497,1.872,498,1.804,499,3.596,500,2.518,501,2.518,502,2.518,503,1.804,504,1.804,505,2.936,506,1.804,507,1.804,508,1.804,509,1.804,510,1.377,511,1.804,512,3.184,513,2.936,514,2.781,515,2.518,516,1.377,517,1.377,518,1.547,519,3.501,520,1.377,521,1.15,522,1.804,523,1.15,524,1.547,525,2.518,526,1.804,527,1.804,528,1.547,529,1.547,530,1.804,531,2.936,532,1.804,533,1.804,534,1.547,535,1.15,536,1.547,537,1.804]],["title/classes/CreateTagDto.html",[51,0.044,538,2.335]],["body/classes/CreateTagDto.html",[3,0.188,4,0.168,5,0.168,9,0.294,20,0.804,23,0.019,24,1.716,25,0.826,26,1.248,36,0.298,50,0.188,51,0.054,97,1.915,98,0.012,99,0.012,105,1.632,107,2.124,259,1.793,321,1.335,363,2.161,379,1.205,385,3.097,391,3.316,395,2.876,397,1.272,400,3.328,401,1.272,420,3.41,421,3.635,429,3.41,430,3.62,434,3.62,435,4.186,446,3.097,447,3.83,448,3.83,451,3.83,452,3.83,453,4.796,454,3.83,455,4.89,487,3.83,489,4.89,490,4.89,491,3.369,492,3.83,493,3.83,494,3.83,495,3.41,496,3.83,497,2.847,514,3.141,515,3.83,516,2.379,517,2.379,519,3.954,524,2.672,528,2.672,529,2.672,534,2.672,538,2.847,539,5.386,540,2.672,541,2.942,542,4.467,543,4.467,544,4.467,545,3.116,546,3.116,547,3.116,548,4.467,549,3.116,550,3.83,551,3.116,552,3.116,553,3.116,554,3.116,555,3.116,556,3.116,557,2.672,558,3.116]],["title/classes/CreateUserDto.html",[51,0.044,384,1.89]],["body/classes/CreateUserDto.html",[3,0.239,4,0.214,5,0.214,9,0.375,20,0.843,23,0.019,25,0.74,26,1.049,36,0.265,50,0.239,51,0.064,98,0.014,99,0.014,105,1.709,107,2.098,208,2.877,298,3.268,321,1.578,363,2.752,379,1.536,380,5.028,382,2.752,384,2.724,395,3.484,397,1.621,404,4.53,406,4.53,421,4.031,439,1.747,491,3.12,495,4.032,514,2.909,516,3.031,517,3.031,557,4.527,559,3.969,560,3.969,561,3.969,562,3.969,563,3.969,564,3.969,565,3.969,566,6.324,567,5.28,568,5.28,569,4.527,570,5.28,571,5.17,572,5.28,573,5.28,574,5.28,575,3.969,576,4.527,577,6.324,578,3.969,579,3.969]],["title/injectables/CreateUserProvider.html",[40,0.767,580,2.165]],["body/injectables/CreateUserProvider.html",[3,0.203,4,0.182,5,0.182,9,0.318,10,1.275,11,1.999,13,2.156,15,2.156,20,0.629,22,1.483,23,0.02,24,1.341,25,0.691,26,0.937,31,0.957,32,2.288,34,1.926,36,0.431,37,1.737,38,1.632,39,1.737,40,0.988,41,0.634,44,1.989,50,0.203,51,0.041,53,2.288,58,1.854,60,1.561,64,1.006,73,2.434,74,2.224,78,2.146,80,2.548,92,2.146,93,2.787,95,1.989,97,0.957,98,0.012,99,0.012,146,1.453,195,1.302,208,1.632,220,1.235,238,2.434,242,1.375,271,3.483,273,2.146,279,2.146,281,2.489,291,2.57,293,2.57,294,2.57,295,2.886,296,2.886,298,1.854,299,4.671,303,3.272,306,4.045,384,2.434,387,2.146,398,1.989,402,2.492,403,2.146,580,2.787,581,4.671,582,2.886,583,4.159,584,3.366,585,3.207,586,3.366,587,4.045,588,2.886,589,3.366,590,1.538,591,2.146,592,3.366,593,2.886,594,3.366,595,3.366,596,3.366,597,3.366,598,3.366,599,3.366,600,3.366,601,2.886,602,2.886,603,2.886,604,3.366,605,4.718,606,4.045,607,3.366,608,3.366]],["title/classes/GetPostsBaseDto.html",[51,0.044,609,2.541]],["body/classes/GetPostsBaseDto.html",[3,0.274,4,0.245,5,0.245,9,0.428,20,0.767,23,0.02,25,0.674,26,1.322,36,0.423,50,0.274,51,0.076,98,0.015,99,0.015,105,1.557,321,1.722,379,1.756,397,1.853,401,1.853,472,3.933,510,4.832,514,3.486,523,2.893,609,4.388,610,4.832,611,3.465,612,4.832,613,4.832,614,5.761,615,4.538,616,4.538,617,4.939,618,3.891,619,3.465,620,3.891,621,3.403,622,3.147,623,3.465,624,2.681,625,3.147]],["title/classes/GetPostsQueryDto.html",[51,0.044,624,2.165]],["body/classes/GetPostsQueryDto.html",[3,0.295,4,0.264,5,0.264,23,0.02,36,0.437,50,0.295,51,0.079,98,0.016,99,0.016,379,1.888,397,1.993,401,1.993,472,3.562,510,4.995,514,3.604,523,3.111,609,4.537,610,3.727,611,3.727,612,3.727,613,3.727,617,5.61,618,4.185,619,3.727,620,4.185,621,3.865,622,3.385,623,3.727,624,3.562,625,4.181]],["title/classes/GetUsersParamDto.html",[51,0.044,626,2.335]],["body/classes/GetUsersParamDto.html",[3,0.276,4,0.247,5,0.247,9,0.432,20,0.61,23,0.02,25,0.806,26,1.151,36,0.425,50,0.276,51,0.077,97,1.301,98,0.015,99,0.015,105,1.237,107,1.369,321,1.732,379,1.771,383,3.422,391,2.809,397,1.87,399,2.918,401,1.87,402,2.241,439,2.279,440,2.665,442,4.423,446,3.175,512,4.967,514,3.191,519,4.017,626,3.693,627,4.967,628,3.926,629,4.017,630,4.579,631,4.579,632,4.579,633,3.926]],["title/injectables/HashingProvider.html",[40,0.767,271,1.89]],["body/injectables/HashingProvider.html",[3,0.229,4,0.205,5,0.205,9,0.358,10,1.385,20,0.683,22,1.611,23,0.02,24,1.456,25,0.782,26,1.018,31,1.649,32,3.241,34,2.536,36,0.254,40,1.073,41,0.715,50,0.229,51,0.046,65,2.822,97,1.079,98,0.013,99,0.013,107,1.939,208,3.508,242,1.549,271,2.643,287,3.552,303,3.552,307,4.429,308,4.393,352,4.973,353,4.973,354,3.254,356,4.393,358,4.973,360,3.912,361,3.912,362,4.393,364,3.254,368,5.325,370,4.022,371,3.266,372,3.254,376,3.254,634,3.254,635,6.832,636,3.794,637,6.21,638,4.742,639,5.123,640,3.794,641,3.794,642,3.794]],["title/entities/MetaOption.html",[221,1.417,643,1.89]],["body/entities/MetaOption.html",[3,0.235,4,0.211,5,0.211,9,0.368,20,0.872,23,0.02,25,0.789,36,0.349,50,0.235,51,0.047,98,0.014,99,0.014,105,1.769,107,1.56,195,1.508,211,2.304,215,2.874,221,2.019,259,2.226,321,1.56,414,3.267,417,4.49,439,1.726,440,2.275,472,3.71,482,3.984,643,2.692,644,4.294,645,3.344,646,5.042,647,5.042,648,5.042,649,3.899,650,4.078,651,3.899,652,2.704,653,3.618,654,3.899,655,3.344,656,5.218,657,4.474,658,3.899,659,3.899,660,5.042,661,3.899,662,2.977,663,3.618,664,4.474,665,4.474,666,2.977,667,3.344,668,3.899,669,3.899,670,2.977]],["title/controllers/MetaOptionsController.html",[100,1.344,137,2.335]],["body/controllers/MetaOptionsController.html",[3,0.274,4,0.245,5,0.245,9,0.428,10,1.557,20,0.605,22,1.427,23,0.02,24,1.29,25,0.531,26,0.902,31,1.29,36,0.423,41,0.855,50,0.274,51,0.055,60,1.502,64,1.357,98,0.015,99,0.015,100,1.665,102,1.756,105,1.227,110,2.681,137,3.672,147,2.892,148,3.672,249,2.893,257,2.681,259,1.99,371,3.672,413,4.214,414,2.793,431,4.388,520,3.465,590,2.074,671,3.891,672,5.761,673,4.538,674,4.538,675,3.739,676,3.891,677,4.538,678,4.538,679,4.538]],["title/modules/MetaOptionsModule.html",[113,1.212,126,2.335]],["body/modules/MetaOptionsModule.html",[3,0.271,4,0.242,5,0.242,23,0.02,36,0.458,41,0.845,50,0.271,51,0.054,98,0.015,99,0.015,102,2.212,113,2.083,115,2.05,116,1.936,117,2.314,118,2.314,119,2.05,120,3.248,121,3.248,126,4.535,132,2.95,133,2.314,134,2.314,137,4.012,139,2.65,145,2.859,146,1.936,147,2.613,148,2.859,149,3.846,414,2.175,643,2.314,675,4.381,676,3.846,680,3.846,681,3.846,682,3.846,683,4.486,684,3.846,685,2.859,686,4.486]],["title/injectables/MetaOptionsService.html",[40,0.767,675,2.165]],["body/injectables/MetaOptionsService.html",[3,0.247,4,0.221,5,0.221,9,0.387,10,1.457,11,2.211,13,1.871,15,2.463,20,0.718,22,1.695,23,0.02,24,1.532,25,0.749,26,1.071,31,1.164,34,2.201,36,0.445,40,1.129,41,0.771,50,0.247,51,0.049,53,1.986,58,2.256,60,1.355,64,1.224,80,2.326,98,0.014,99,0.014,146,1.767,147,2.463,148,3.841,195,1.584,220,2.211,238,2.113,242,1.672,281,2.754,290,2.256,371,2.61,413,3.185,414,2.922,431,3.738,520,3.127,585,3.432,590,1.871,591,2.61,643,2.113,675,3.185,684,3.511,685,2.61,687,3.511,688,4.095,689,4.095,690,5.167,691,3.511,692,4.095,693,4.095,694,5.39,695,4.095,696,4.095]],["title/interfaces/Paginated.html",[697,2.541,698,2.335]],["body/interfaces/Paginated.html",[3,0.281,4,0.252,5,0.252,9,0.44,23,0.019,25,0.849,34,2.745,50,0.281,98,0.015,99,0.015,107,2.07,147,3.072,221,1.803,317,3.997,318,3.997,321,1.751,439,2.224,497,2.971,697,3.232,698,3.734,699,4.661,700,3.997,701,4.661,702,5.764,703,5.494,704,4.661,705,3.997,706,3.997,707,3.997,708,3.997,709,3.997,710,3.997,711,3.997,712,3.997]],["title/modules/PaginationModule.html",[113,1.212,127,2.165]],["body/modules/PaginationModule.html",[3,0.293,4,0.262,5,0.262,23,0.019,36,0.401,41,0.913,50,0.293,51,0.059,98,0.016,99,0.016,113,2.158,115,2.217,116,2.093,117,2.503,118,2.503,119,2.217,120,3.366,121,3.366,127,4.276,131,4.128,132,3.099,133,2.503,134,2.503,713,4.159,714,4.851,715,4.159,716,4.851,717,4.851]],["title/classes/PaginationQueryDto.html",[51,0.044,621,2.165]],["body/classes/PaginationQueryDto.html",[3,0.239,4,0.214,5,0.214,9,0.375,20,0.703,23,0.02,25,0.809,26,1.256,36,0.397,50,0.239,51,0.072,97,1.501,98,0.014,99,0.014,105,1.427,321,1.578,379,1.536,390,4.032,391,3.067,397,1.621,399,2.53,401,1.621,424,2.909,439,2.41,446,3.661,467,3.627,514,3.268,519,4.114,521,4.316,535,4.031,569,5.423,621,3.12,622,4.114,718,3.403,719,3.782,720,6.153,721,5.423,722,5.28,723,3.969,724,3.969,725,5.933]],["title/injectables/PaginationService.html",[40,0.767,131,2.018]],["body/injectables/PaginationService.html",[3,0.193,4,0.173,5,0.173,9,0.302,10,1.23,11,1.944,13,1.462,15,2.08,20,0.606,22,1.666,23,0.02,24,1.294,25,0.714,26,0.904,31,0.909,32,2.207,34,1.859,36,0.424,39,1.651,40,0.953,41,0.602,44,3.937,45,2.443,50,0.193,51,0.039,53,1.551,60,2.243,64,0.956,65,1.763,74,1.306,80,1.965,91,2.219,98,0.012,99,0.012,111,2.219,131,2.507,147,1.462,164,2.039,195,1.238,242,1.306,281,2.421,453,2.443,467,3.735,497,2.039,535,3.679,585,2.978,621,2.689,623,2.443,667,2.743,698,2.901,701,2.219,702,2.743,703,2.743,705,2.743,706,3.903,707,2.743,708,4.543,709,2.743,710,2.743,711,2.743,712,2.743,719,3.887,726,2.743,727,5.298,728,3.2,729,3.2,730,3.2,731,3.2,732,3.2,733,3.2,734,3.2,735,3.2,736,4.543,737,2.901,738,3.2,739,3.2,740,3.2,741,5.298,742,3.2,743,3.2,744,4.552,745,3.2,746,3.2,747,3.2,748,3.2,749,3.2,750,4.552,751,3.2,752,3.2,753,3.2,754,3.2,755,3.2,756,3.2,757,3.2]],["title/classes/PatchPostDto.html",[51,0.044,758,2.335]],["body/classes/PatchPostDto.html",[3,0.264,4,0.236,5,0.236,9,0.413,20,0.582,23,0.02,25,0.728,36,0.465,50,0.264,51,0.068,97,1.243,98,0.015,99,0.015,105,1.182,218,3.032,220,1.604,259,1.769,321,1.681,337,3.9,379,1.691,385,3.032,391,2.728,395,3.099,397,1.785,400,3.585,401,1.785,425,2.583,427,3.338,439,2.057,440,2.628,442,4.295,523,2.787,619,3.338,625,3.9,629,3.9,758,3.585,759,4.823,760,5.625,761,4.295,762,4.372,763,4.372,764,4.823,765,3.338,766,5.625,767,4.295,768,4.372,769,4.372,770,4.372,771,4.372,772,4.372,773,4.372]],["title/classes/PatchUserDto.html",[51,0.044,774,2.541]],["body/classes/PatchUserDto.html",[3,0.324,4,0.29,5,0.29,23,0.019,36,0.427,50,0.324,51,0.065,98,0.017,99,0.017,220,1.971,337,3.725,379,2.078,382,3.725,384,2.771,398,3.173,625,4.431,764,4.606,767,4.101,774,4.431,775,4.606,776,6.389]],["title/entities/Post.html",[221,1.417,259,1.152]],["body/entities/Post.html",[3,0.141,4,0.126,5,0.126,9,0.221,10,0.633,20,0.877,23,0.02,25,0.825,26,1.266,36,0.357,50,0.141,51,0.028,74,0.956,89,3.302,98,0.009,99,0.009,105,1.78,107,1.905,147,1.069,195,0.905,211,1.383,215,3.511,220,0.859,221,1.396,259,1.135,321,1.079,387,2.301,402,2.187,424,1.289,429,3.364,430,3.055,431,4.085,432,3.777,433,3.777,434,3.055,435,3.055,436,2.603,437,3.41,438,3.777,439,1.194,440,1.704,441,2.808,463,4.085,472,2.132,499,4.085,518,2.007,521,3.156,525,5.216,541,2.555,638,3.781,643,2.76,644,1.492,650,3.055,652,4.218,653,4.762,655,2.007,663,4.328,664,3.095,665,3.095,666,3.781,670,2.756,685,1.492,701,1.623,777,2.007,778,2.34,779,3.609,780,5.652,781,2.34,782,2.34,783,4.316,784,4.316,785,3.095,786,2.34,787,2.34,788,3.609,789,2.34,790,2.34,791,3.609,792,2.34,793,2.34,794,2.756,795,2.756,796,2.34,797,2.34,798,2.007,799,3.609,800,2.34,801,2.34,802,3.095,803,2.34,804,3.095,805,3.095,806,3.609,807,2.34,808,2.34,809,2.34,810,2.34,811,2.34,812,2.007,813,2.007,814,3.777,815,2.34,816,2.34,817,2.34,818,2.007,819,2.34,820,2.007,821,2.34,822,2.34,823,2.34,824,2.34,825,3.609,826,2.34,827,2.34,828,2.34,829,2.34]],["title/controllers/PostsController.html",[100,1.344,136,2.335]],["body/controllers/PostsController.html",[3,0.113,4,0.101,5,0.101,9,0.176,10,0.815,20,0.581,22,1.372,23,0.02,24,1.24,25,0.698,26,0.867,31,1.649,32,1.842,36,0.343,37,0.962,38,0.904,41,0.351,44,2.578,50,0.113,51,0.023,58,1.661,60,1.256,64,1.304,65,2.824,73,0.962,74,2.203,75,1.599,91,1.293,97,1.732,98,0.008,99,0.008,100,0.684,102,0.721,105,1.179,107,0.902,110,1.102,111,1.293,136,1.923,218,2.091,226,3.914,249,1.189,257,1.102,259,2.205,347,2.091,349,2.586,357,2.586,360,2.303,361,3.331,370,3.025,386,3.331,387,2.781,391,0.904,401,0.761,402,2.403,425,3.876,436,2.578,439,1.785,440,2.358,491,3.029,590,0.852,624,2.578,629,3.025,633,4.108,701,4.308,721,3.741,737,1.923,758,3.439,761,3.914,765,2.303,818,3.741,830,1.599,831,4.636,832,2.9,833,3.016,834,3.256,835,3.256,836,1.865,837,3.331,838,3.798,839,1.865,840,1.865,841,5.126,842,3.016,843,3.016,844,5.126,845,5.617,846,5.126,847,5.126,848,4.363,849,3.016,850,1.865,851,3.016,852,2.303,853,1.865,854,1.865,855,1.865,856,4.791,857,4.363,858,1.865,859,1.865,860,1.865,861,4.363,862,3.016,863,3.016,864,4.363,865,3.016,866,3.798,867,3.798,868,3.741,869,3.016,870,3.016,871,1.865,872,4.363,873,3.741,874,1.865,875,1.865,876,4.363,877,4.395,878,3.016,879,3.016,880,4.363,881,3.016,882,1.923,883,2.303,884,1.782,885,1.599,886,3.658,887,4.108,888,1.424,889,1.293,890,1.599,891,1.865,892,1.865,893,3.331,894,3.798,895,1.865,896,1.865,897,1.865,898,1.599,899,1.865,900,1.599,901,3.016,902,1.865,903,1.865,904,1.865,905,2.586,906,1.865,907,1.865,908,1.599,909,3.016,910,1.865]],["title/modules/PostsModule.html",[113,1.212,128,2.335]],["body/modules/PostsModule.html",[3,0.238,4,0.213,5,0.213,23,0.02,36,0.474,41,0.744,50,0.238,51,0.048,98,0.014,99,0.014,102,2.036,113,1.958,115,1.805,116,1.704,117,2.037,118,2.037,119,1.805,120,3.053,121,3.053,127,3.994,128,4.668,129,3.994,130,3.724,132,2.715,133,2.037,134,2.037,136,3.772,139,3.109,145,2.517,146,1.704,259,1.242,275,3.386,414,1.915,643,2.715,644,2.517,685,2.517,884,4.301,885,3.386,911,3.386,912,3.386,913,3.949,914,3.386,915,3.949,916,3.949,917,3.949,918,3.386,919,3.949,920,3.949,921,3.949]],["title/injectables/PostsService.html",[40,0.767,884,2.165]],["body/injectables/PostsService.html",[3,0.125,4,0.112,5,0.112,9,0.196,10,0.889,11,2.346,13,2.311,15,1.502,20,0.674,22,1.59,23,0.02,24,1.437,25,0.759,26,1.004,31,1.319,32,1.594,34,2.385,36,0.427,37,1.072,38,1.007,40,0.688,41,0.391,50,0.125,51,0.025,53,1.594,58,2.248,60,1.99,64,1.387,73,2.105,74,1.666,80,2.713,95,1.227,97,0.59,98,0.009,99,0.009,131,3.103,146,0.896,195,0.803,198,2.819,220,1.497,238,1.072,239,1.227,240,1.44,242,0.848,259,1.891,281,2.922,284,2.394,290,2.248,292,1.781,402,1.272,414,1.007,425,1.942,436,1.227,437,3.927,439,1.088,440,2.26,441,2.601,467,1.811,491,1.227,585,3.014,590,0.949,591,1.324,612,1.586,613,1.586,624,1.942,643,1.072,644,1.324,685,1.324,690,3.499,691,1.781,698,1.324,719,2.096,736,1.781,758,2.096,761,3.543,765,2.51,831,2.28,832,3.116,834,3.499,835,2.819,852,1.586,868,2.819,882,2.601,884,1.942,888,1.586,889,1.44,890,1.781,898,3.499,905,2.819,918,1.781,922,1.781,923,2.077,924,3.103,925,4.64,926,2.077,927,3.288,928,2.077,929,1.781,930,2.077,931,2.077,932,2.077,933,2.077,934,2.077,935,2.077,936,2.077,937,2.077,938,2.077,939,3.288,940,2.077,941,2.077,942,2.077,943,2.077,944,2.077,945,1.781,946,2.077,947,2.077,948,3.288,949,2.077,950,2.077,951,3.288,952,2.077,953,3.288,954,2.077,955,1.781,956,2.077,957,3.543,958,3.116,959,2.077,960,3.288,961,2.077,962,3.288,963,3.288,964,2.077,965,3.288,966,2.077,967,3.288,968,2.077,969,3.288,970,2.077,971,3.288,972,2.077,973,3.288,974,2.077,975,3.288,976,2.077,977,3.288,978,2.077,979,2.819,980,2.077,981,2.077,982,2.077,983,2.077,984,2.077,985,1.781,986,1.781]],["title/classes/SignInDto.html",[51,0.044,253,2.335]],["body/classes/SignInDto.html",[3,0.3,4,0.269,5,0.269,9,0.47,20,0.813,23,0.019,25,0.714,36,0.332,50,0.3,51,0.074,98,0.016,99,0.016,105,1.649,107,2.056,208,3.199,253,3.889,298,3.635,321,1.824,379,1.925,395,3.635,397,2.031,421,3.889,576,5.231,987,4.266,988,4.975,989,4.975,990,4.975,991,4.975]],["title/entities/Tag.html",[221,1.417,541,1.89]],["body/entities/Tag.html",[3,0.186,4,0.166,5,0.166,9,0.291,20,0.909,23,0.02,24,1.474,25,0.836,26,1.243,36,0.296,50,0.186,51,0.037,89,3.307,97,1.474,98,0.011,99,0.011,105,1.843,107,2.039,195,1.191,211,1.819,215,3.124,221,1.713,259,1.967,321,1.324,430,3.596,434,3.596,435,3.596,439,1.465,440,2.006,472,3.696,482,3.381,541,2.285,638,3.381,646,4.447,647,4.447,648,4.447,650,3.596,652,4.166,653,4.729,657,3.797,660,4.447,662,2.351,663,4.338,666,3.381,783,4.777,784,4.777,785,3.797,794,3.381,795,4.33,798,2.64,802,3.797,804,2.64,805,3.797,831,3.596,979,3.797,992,2.64,993,5.186,994,3.079,995,5.186,996,3.079,997,3.079,998,3.079,999,3.079,1000,3.079,1001,3.079,1002,3.079,1003,3.079,1004,3.079]],["title/controllers/TagsController.html",[100,1.344,138,2.335]],["body/controllers/TagsController.html",[3,0.213,4,0.191,5,0.191,9,0.334,10,1.319,11,2.4,20,0.745,22,1.758,23,0.02,24,1.589,25,0.654,26,1.111,31,1.589,36,0.403,41,0.666,50,0.213,51,0.043,60,1.17,64,1.671,80,2.107,98,0.013,99,0.013,100,1.297,102,1.368,105,1.511,110,2.089,138,3.111,220,1.791,249,2.253,257,2.089,259,1.535,290,2.689,401,1.443,437,2.253,439,2.165,440,2.643,538,3.843,541,3.376,590,1.615,737,2.253,832,3.727,837,4.269,882,4.356,883,4.269,886,4.604,893,4.269,900,3.031,924,3.08,1005,3.031,1006,4.881,1007,4.881,1008,3.535,1009,3.535,1010,3.535,1011,4.794,1012,3.535,1013,3.535,1014,3.535,1015,3.535,1016,4.185,1017,3.535,1018,3.535,1019,3.031,1020,3.031,1021,3.535,1022,4.185,1023,3.535,1024,3.535,1025,3.535,1026,3.535,1027,3.535,1028,3.535]],["title/modules/TagsModule.html",[113,1.212,129,2.165]],["body/modules/TagsModule.html",[3,0.275,4,0.246,5,0.246,23,0.02,36,0.46,41,0.857,50,0.275,51,0.055,98,0.015,99,0.015,102,2.233,113,2.097,115,2.08,116,1.964,117,2.348,118,2.348,119,2.08,120,3.27,121,3.27,129,4.217,132,2.978,133,2.348,134,2.348,138,4.04,139,2.689,145,2.901,146,1.964,541,2.348,924,4.093,1020,3.903,1029,3.903,1030,3.903,1031,3.903,1032,4.552,1033,4.552,1034,3.903,1035,4.552]],["title/injectables/TagsService.html",[40,0.767,924,2.018]],["body/injectables/TagsService.html",[3,0.157,4,0.141,5,0.141,9,0.246,10,1.059,11,2.6,13,1.192,15,1.791,20,0.815,22,1.854,23,0.02,24,1.738,25,0.819,26,1.171,31,1.676,34,2.677,36,0.375,37,1.345,38,1.265,40,0.821,41,0.491,50,0.157,51,0.032,60,1.857,64,1.762,73,2.022,74,1.6,80,2.716,98,0.014,99,0.01,146,1.126,195,1.009,242,1.065,281,3.239,290,3.248,436,2.315,437,3.337,439,1.732,440,2.61,491,2.315,538,2.498,541,3.247,585,2.701,590,1.192,591,1.662,601,2.236,602,2.236,603,2.236,852,2.993,882,3.001,924,2.159,929,2.236,957,1.991,958,1.991,985,3.36,986,3.36,1011,4.037,1016,2.236,1019,2.236,1022,3.36,1034,2.236,1036,2.236,1037,4.708,1038,5.236,1039,4.708,1040,4.708,1041,2.608,1042,2.608,1043,3.919,1044,2.608,1045,2.608,1046,2.608,1047,2.608,1048,2.608,1049,2.608,1050,2.608,1051,2.608,1052,2.608,1053,2.608,1054,2.608,1055,2.608,1056,3.919,1057,2.608,1058,2.608,1059,3.919,1060,2.608,1061,2.608,1062,3.919,1063,2.608,1064,2.608,1065,2.608,1066,2.608]],["title/entities/User.html",[221,1.417,402,1.417]],["body/entities/User.html",[3,0.212,4,0.19,5,0.19,9,0.332,20,0.87,23,0.02,25,0.821,26,0.967,36,0.325,50,0.212,51,0.043,89,2.918,98,0.013,99,0.013,105,1.766,107,2.04,195,1.361,208,2.705,211,2.079,215,3.599,221,1.882,222,2.687,259,1.892,298,3.073,321,1.455,402,1.882,404,4.259,406,4.259,439,1.61,440,2.158,497,2.243,571,2.687,650,3.868,652,4.173,653,4.733,662,2.687,663,4.38,670,3.715,783,5.212,784,5.212,794,3.715,795,3.715,831,4.38,1067,3.017,1068,3.519,1069,6.018,1070,3.519,1071,3.519,1072,3.519,1073,4.172,1074,3.519,1075,3.519,1076,4.866,1077,3.519,1078,4.866,1079,4.866,1080,3.519,1081,3.519,1082,3.519]],["title/controllers/UserController.html",[100,1.344,1083,2.541]],["body/controllers/UserController.html",[1,1.187,3,0.13,4,0.116,5,0.116,6,1.494,7,1.273,9,0.203,10,0.915,20,0.631,22,1.489,23,0.02,24,1.553,25,0.729,26,1.135,31,1.463,36,0.407,41,0.406,44,1.273,50,0.13,51,0.026,60,1.383,64,1.819,74,2.231,97,1.834,98,0.012,99,0.009,100,0.791,102,0.834,105,1.28,110,1.273,111,1.494,166,1.494,190,2.902,215,2.609,220,2.171,222,2.584,249,1.374,250,1.374,257,1.273,259,1.064,281,2.949,284,2.157,331,1.494,332,1.848,359,1.645,370,2.347,378,2.798,381,2.469,383,3.957,384,3.053,388,3.616,391,2.297,398,2.469,401,1.382,402,2.113,424,1.865,436,1.273,439,2.192,440,1.309,443,3.584,467,3.431,521,3.019,535,2.157,571,1.645,583,3.616,590,1.547,626,3.019,719,4.047,720,3.584,737,2.664,774,4.103,837,3.191,873,1.848,877,4.061,882,1.374,883,3.191,886,3.616,887,2.902,888,1.645,889,1.494,893,3.191,945,3.584,1083,2.347,1084,1.848,1085,3.385,1086,4.18,1087,3.385,1088,2.155,1089,3.385,1090,2.155,1091,2.155,1092,4.18,1093,1.848,1094,2.155,1095,2.155,1096,2.155,1097,2.155,1098,2.155,1099,3.385,1100,2.155,1101,3.385,1102,2.155,1103,3.385,1104,2.902,1105,2.155,1106,2.155,1107,4.18,1108,2.155,1109,2.155,1110,2.155,1111,2.155,1112,2.155,1113,2.155,1114,2.155,1115,2.155,1116,2.155,1117,1.848,1118,1.848,1119,4.18,1120,3.385,1121,2.155,1122,2.155,1123,2.155,1124,2.155,1125,2.902,1126,2.155,1127,2.155,1128,2.155,1129,2.155,1130,2.155,1131,2.155,1132,2.155,1133,2.155,1134,1.848,1135,2.155,1136,2.155,1137,2.155,1138,2.155,1139,2.155,1140,2.155,1141,2.155,1142,2.902,1143,2.155,1144,1.848,1145,1.848,1146,2.155,1147,2.155,1148,2.155,1149,2.155,1150,2.155,1151,2.155,1152,2.155,1153,3.385,1154,2.155,1155,2.155,1156,2.155]],["title/injectables/UserCreateMany.html",[40,0.767,1157,2.165]],["body/injectables/UserCreateMany.html",[3,0.18,4,0.161,5,0.161,9,0.282,10,1.172,11,1.872,13,1.366,15,1.981,20,0.578,22,1.363,23,0.02,24,1.232,25,0.655,26,0.861,31,0.85,34,1.77,36,0.374,37,2.886,38,1.45,40,0.908,41,0.563,50,0.18,51,0.036,53,1.45,60,1.688,64,0.894,65,1.647,73,2.886,74,2.284,78,3.566,80,2.673,92,3.566,93,3.305,95,3.305,96,4.797,97,1.59,98,0.011,99,0.011,191,3.717,195,1.677,220,2.053,221,1.677,242,1.221,281,2.331,290,1.647,378,2.561,381,1.766,383,3.014,386,2.283,398,1.766,402,2.164,403,1.906,590,1.366,606,3.717,737,2.764,908,2.564,1157,2.561,1158,4.374,1159,2.564,1160,4.374,1161,2.99,1162,5.612,1163,2.99,1164,2.564,1165,2.99,1166,2.99,1167,4.335,1168,2.99,1169,5.101,1170,2.99,1171,2.99,1172,2.99,1173,5.101,1174,5.939,1175,2.99,1176,5.594,1177,3.717,1178,5.594,1179,2.99,1180,4.335,1181,2.99,1182,2.99,1183,2.99,1184,2.99,1185,2.99,1186,2.99,1187,2.99,1188,2.99,1189,2.99,1190,2.99,1191,2.99,1192,2.99,1193,2.99,1194,2.99,1195,2.99,1196,2.99,1197,4.335,1198,2.99]],["title/modules/UserModule.html",[113,1.212,130,2.018]],["body/modules/UserModule.html",[0,2.056,1,2.522,3,0.195,4,0.174,5,0.174,6,2.237,7,1.906,11,1.184,18,2.056,19,2.705,23,0.02,36,0.478,39,1.665,41,0.608,42,1.777,43,1.906,48,2.056,49,2.237,50,0.195,51,0.039,82,2.056,84,2.056,86,2.056,98,0.012,99,0.012,102,1.771,113,1.761,115,1.474,116,1.392,117,1.665,118,1.665,119,1.474,120,2.746,121,2.746,125,2.705,130,3.877,132,2.362,133,1.665,134,1.665,139,2.705,145,2.056,146,1.392,153,2.463,163,3.926,164,2.056,166,2.237,168,2.463,199,2.463,220,1.184,221,1.248,228,3.496,229,2.463,230,2.463,231,2.463,232,2.463,233,2.463,234,2.237,235,2.463,236,2.463,238,2.362,239,3.145,240,2.237,241,2.463,273,2.919,279,2.056,284,3.631,381,1.906,402,1.771,403,2.056,580,3.754,585,1.665,820,2.766,1083,3.691,1118,2.766,1145,2.766,1157,3.754,1199,2.766,1200,2.766,1201,2.766,1202,3.226,1203,3.226,1204,3.226,1205,2.766,1206,2.766,1207,2.766,1208,2.766,1209,3.226,1210,3.226,1211,3.226,1212,3.226,1213,3.226,1214,3.226,1215,3.226]],["title/injectables/UserService.html",[40,0.767,284,1.89]],["body/injectables/UserService.html",[3,0.137,4,0.123,5,0.123,9,0.214,10,0.953,11,2.399,13,2.552,15,1.612,19,2.879,20,0.744,22,1.756,23,0.02,24,1.587,25,0.799,26,1.109,31,1.5,32,1.71,34,2.581,36,0.437,37,1.82,38,1.102,39,1.172,40,0.738,41,0.428,42,1.251,50,0.137,51,0.027,53,2.363,58,1.943,60,1.43,64,1.457,73,2.515,74,1.99,78,1.448,80,2.103,92,1.448,93,1.342,95,1.342,97,0.646,98,0.009,99,0.009,107,0.679,113,0.752,116,0.98,146,0.98,154,4.997,172,1.735,180,3.721,181,2.446,195,0.879,220,0.833,227,1.948,238,2.231,239,1.342,242,0.928,260,3.21,273,1.448,279,1.448,281,3.093,284,1.82,290,2.382,291,1.735,293,1.735,298,2.382,378,2.084,381,2.084,383,2.879,384,1.82,398,2.084,402,2.529,403,1.448,439,1.43,440,1.673,467,1.943,580,3.443,583,3.301,585,2.722,587,3.707,588,1.948,590,1.612,591,1.448,593,1.948,626,2.248,629,1.575,719,2.248,889,1.575,957,2.693,958,2.693,1093,1.948,1104,3.707,1117,1.948,1125,3.707,1142,3.707,1144,3.024,1157,2.879,1160,3.707,1162,1.948,1164,1.948,1205,1.948,1206,1.948,1207,1.948,1208,1.948,1216,1.948,1217,4.323,1218,4.323,1219,2.272,1220,4.323,1221,4.323,1222,2.272,1223,2.272,1224,2.272,1225,2.272,1226,2.272,1227,2.272,1228,2.272,1229,2.272,1230,2.272,1231,2.272,1232,2.272,1233,2.272,1234,2.272,1235,2.272,1236,2.272,1237,2.272,1238,2.272,1239,3.527,1240,2.272,1241,3.527,1242,2.272,1243,3.527,1244,3.527,1245,2.272,1246,2.272]],["title/coverage.html",[1247,3.82]],["body/coverage.html",[0,2.696,1,1.592,5,0.156,6,2.004,7,1.707,8,2.478,23,0.02,25,0.338,40,1.427,51,0.083,74,1.18,98,0.011,99,0.011,100,2.246,101,2.004,103,2.478,108,1.707,119,1.32,131,1.592,135,2.206,136,1.842,137,1.842,138,1.842,147,1.32,148,2.696,169,2.004,171,2.206,220,1.06,221,2.13,226,2.206,243,2.478,247,2.004,248,2.478,250,1.842,253,1.842,259,0.909,260,1.592,271,1.491,277,2.004,280,2.478,284,1.491,320,2.478,330,2.206,351,2.478,378,1.707,380,3.229,381,1.707,382,3.469,383,1.707,384,1.491,402,1.118,413,1.707,414,2.669,415,2.206,416,2.478,425,1.707,426,2.478,427,3.229,523,1.842,538,1.842,539,2.478,540,2.478,541,1.491,580,1.707,581,2.478,582,2.478,609,2.004,610,3.229,611,3.229,621,1.707,622,2.004,624,1.707,626,1.842,627,2.478,628,2.478,634,2.478,643,1.491,644,1.842,645,2.478,671,2.478,675,1.707,687,2.478,697,2.004,698,1.842,700,2.478,718,2.478,726,2.478,758,1.842,759,2.478,774,2.004,775,2.478,777,2.478,814,2.478,830,2.478,884,1.707,922,2.478,924,1.592,955,6.458,987,2.478,992,2.478,1005,2.478,1036,2.478,1067,2.478,1073,2.478,1083,2.004,1084,2.478,1157,1.707,1158,2.478,1159,2.478,1216,2.478,1247,2.206,1248,2.89,1249,2.89,1250,6.483,1251,5.002,1252,6.722,1253,5.505,1254,3.229,1255,6.323,1256,5.002,1257,2.89,1258,2.89,1259,2.89,1260,2.89,1261,2.478,1262,2.89,1263,2.89,1264,4.229,1265,2.89,1266,2.89,1267,2.89]],["title/dependencies.html",[116,1.902,1268,2.622]],["body/dependencies.html",[23,0.02,41,0.916,42,2.68,43,2.875,45,3.715,47,3.715,51,0.073,98,0.016,99,0.016,116,2.1,146,2.1,164,3.102,195,1.882,337,3.374,338,4.172,367,4.172,397,1.987,399,3.102,401,1.987,767,3.715,1269,4.866,1270,4.866,1271,6.533,1272,4.866,1273,4.866,1274,4.866,1275,4.866,1276,4.866,1277,4.866,1278,4.866,1279,4.866,1280,4.866,1281,4.866,1282,4.866,1283,4.866,1284,4.866,1285,4.866,1286,4.866,1287,4.866,1288,4.866]],["title/miscellaneous/enumerations.html",[1289,1.807,1290,3.779]],["body/miscellaneous/enumerations.html",[9,0.464,23,0.019,98,0.016,99,0.016,259,1.903,331,4.197,424,4.095,463,4.622,467,3.334,468,5.19,469,5.19,473,5.19,499,4.622,500,5.19,501,5.19,502,5.19,1254,3.751,1289,2.902,1290,4.212,1291,4.212,1292,6.053,1293,6.053,1294,6.053,1295,4.912]],["title/miscellaneous/functions.html",[1289,1.807,1296,3.779]],["body/miscellaneous/functions.html",[9,0.543,23,0.017,98,0.017,99,0.017,119,3.206,1261,4.93,1289,3.397,1296,4.93,1297,5.75]],["title/index.html",[9,0.289,1298,3.058,1299,3.058]],["body/index.html",[4,0.235,23,0.019,56,3.015,97,1.236,98,0.015,99,0.015,216,3.728,391,3.007,441,2.771,550,3.728,585,2.243,812,3.728,813,3.728,1177,3.728,1247,3.32,1300,4.348,1301,4.348,1302,5.604,1303,4.348,1304,4.348,1305,4.348,1306,4.348,1307,4.348,1308,6.202,1309,4.348,1310,4.348,1311,7.063,1312,4.348,1313,4.348,1314,4.348,1315,6.943,1316,4.348,1317,5.604,1318,4.348,1319,4.348,1320,4.348,1321,5.604,1322,5.604,1323,4.348,1324,4.348,1325,4.348,1326,5.604,1327,5.604,1328,4.348,1329,4.348,1330,4.348,1331,4.348,1332,4.348,1333,3.728,1334,4.348,1335,4.348,1336,4.348,1337,4.348,1338,4.348,1339,4.348,1340,4.348,1341,4.348,1342,4.348,1343,4.348,1344,4.348,1345,4.348,1346,4.348,1347,4.348,1348,3.728]],["title/modules.html",[115,2.286]],["body/modules.html",[23,0.016,98,0.016,99,0.016,114,3.612,115,2.38,125,3.078,126,3.32,127,3.078,128,3.32,129,3.078,130,2.87,1333,6.298,1349,7.345,1350,7.345,1351,7.345]],["title/overview.html",[1352,4.29]],["body/overview.html",[2,2.587,23,0.02,98,0.012,99,0.012,102,1.311,108,3.23,113,1.121,114,5.091,115,1.548,116,1.462,117,1.748,118,1.748,119,1.548,120,1.748,121,1.748,122,2.905,123,2.905,124,2.905,125,3.916,126,4.115,127,3.916,128,4.525,129,3.916,130,3.876,131,3.725,132,2.445,133,1.748,134,1.748,211,2.002,242,1.384,260,3.651,268,2.905,269,2.905,270,2.905,271,3.054,284,3.419,379,1.311,535,2.16,536,2.905,580,3.23,675,3.916,680,2.905,681,2.905,682,2.905,697,2.35,713,2.905,715,2.905,884,3.916,911,2.905,912,2.905,914,2.905,924,3.651,1029,2.905,1030,2.905,1031,2.905,1134,2.905,1157,3.23,1199,2.905,1200,2.905,1201,2.905,1352,2.905,1353,3.388,1354,3.388,1355,3.388,1356,3.388]],["title/properties.html",[321,1.317,1268,2.622]],["body/properties.html",[23,0.019,97,1.616,98,0.017,99,0.017,321,1.7,359,4.342,441,3.625,1348,4.876,1357,5.686,1358,5.686]],["title/miscellaneous/variables.html",[181,3.056,1289,1.807]],["body/miscellaneous/variables.html",[9,0.497,23,0.019,25,0.616,98,0.016,99,0.016,107,1.573,135,4.018,171,4.819,172,4.018,181,3.649,250,4.023,330,4.819,331,4.377,339,5.412,424,3.724,521,4.31,1254,4.018,1289,3.109,1291,5.412,1359,5.262,1360,5.262]],["title/routes.html",[1361,4.29]],["body/routes.html",[23,0.018,98,0.018,99,0.018,1361,5.061]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":955,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1357,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1286,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1288,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1252,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1262,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1250,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1255,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1253,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1256,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1264,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1266,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1265,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":475,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":535,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["1.1.26",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1260,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":720,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{}}}],["10.0.0",{"_index":1271,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1277,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":785,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":1102,"title":{},"body":{"controllers/UserController.html":{}}}],["11",{"_index":1355,"title":{},"body":{"overview.html":{}}}],["12",{"_index":1356,"title":{},"body":{"overview.html":{}}}],["123",{"_index":442,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["1234",{"_index":1132,"title":{},"body":{"controllers/UserController.html":{}}}],["16t12:00:00+0000",{"_index":476,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.13.3",{"_index":1282,"title":{},"body":{"dependencies.html":{}}}],["1})@get('/:id",{"_index":1105,"title":{},"body":{"controllers/UserController.html":{}}}],["1})@isoptional()@ispositive",{"_index":722,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["2",{"_index":1134,"title":{},"body":{"controllers/UserController.html":{},"overview.html":{}}}],["2.0.6",{"_index":1274,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":1258,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1099,"title":{},"body":{"controllers/UserController.html":{}}}],["2024",{"_index":474,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["255",{"_index":794,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["3.3.0",{"_index":1272,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":1263,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1259,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":536,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["5.1.1",{"_index":1278,"title":{},"body":{"dependencies.html":{}}}],["512",{"_index":802,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6",{"_index":1354,"title":{},"body":{"overview.html":{}}}],["60",{"_index":1073,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["66",{"_index":1257,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1353,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":1287,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":1284,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":490,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":1069,"title":{},"body":{"entities/User.html":{}}}],["_",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["abstract",{"_index":635,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["access",{"_index":329,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["accesstoken",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["actual",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Paginated.html":{}}}],["add",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["additional",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{}}}],["adds",{"_index":522,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["against",{"_index":376,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["alphanumeric",{"_index":494,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["already",{"_index":601,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/TagsService.html":{}}}],["amazing",{"_index":1334,"title":{},"body":{"index.html":{}}}],["another",{"_index":941,"title":{},"body":{"injectables/PostsService.html":{}}}],["api",{"_index":1104,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["apioperation",{"_index":886,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":837,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":400,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":385,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":464,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":519,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({description",{"_index":446,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({})@isjson()@isoptional",{"_index":553,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiquery",{"_index":1119,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":887,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":1120,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":1122,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":1313,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["appconfig",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":101,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1145,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["application'})@post",{"_index":1095,"title":{},"body":{"controllers/UserController.html":{}}}],["applications",{"_index":1307,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":114,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":108,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":1079,"title":{},"body":{"entities/User.html":{}}}],["array",{"_index":347,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["associated",{"_index":862,"title":{},"body":{"controllers/PostsController.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["audience",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["auth",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.bearer",{"_index":1149,"title":{},"body":{"controllers/UserController.html":{}}}],["auth.controller",{"_index":274,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/access",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":330,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":247,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["authenticationguard",{"_index":169,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":344,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":125,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":441,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":428,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":260,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":331,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":333,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":336,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":322,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":339,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":345,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":620,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["await",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":1335,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":741,"title":{},"body":{"injectables/PaginationService.html":{}}}],["bcrypt",{"_index":367,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":377,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":374,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(password",{"_index":375,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":277,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1293,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["being",{"_index":863,"title":{},"body":{"controllers/PostsController.html":{}}}],["bi",{"_index":668,"title":{},"body":{"entities/MetaOption.html":{}}}],["blog",{"_index":448,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["body",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["bootstrap",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1351,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1349,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":368,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1303,"title":{},"body":{"index.html":{}}}],["calls",{"_index":865,"title":{},"body":{"controllers/PostsController.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["cascade",{"_index":666,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":658,"title":{},"body":{"entities/MetaOption.html":{}}}],["cases",{"_index":1129,"title":{},"body":{"controllers/UserController.html":{}}}],["catch",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["cause",{"_index":95,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["character",{"_index":574,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":495,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["check",{"_index":594,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["circular",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["class",{"_index":51,"title":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/SignInDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":379,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/SignInDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":680,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_exports",{"_index":682,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":681,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":713,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":715,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":714,"title":{},"body":{"modules/PaginationModule.html":{}}}],["cluster_postsmodule",{"_index":911,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":914,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":913,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":912,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1029,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1030,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1031,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1199,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1200,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1201,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":663,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":652,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["commit",{"_index":1182,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["compare",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords",{"_index":352,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords(undefined",{"_index":354,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["compares",{"_index":356,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparison",{"_index":641,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["compodoc/compodoc",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["composed",{"_index":492,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["config/database.config",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["config/index.config",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":1208,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["configmodule",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1210,"title":{},"body":{"modules/UserModule.html":{}}}],["configmodule.forroot",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["configservice.get('database.port",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_host",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_name",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_password",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_port",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_username",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["configuration",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["confirmation",{"_index":846,"title":{},"body":{"controllers/PostsController.html":{}}}],["connect",{"_index":1171,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["connection",{"_index":1173,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["console.log",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{}}}],["console.log('hitting",{"_index":1152,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log('inside",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["console.log('node_env",{"_index":1236,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('profile",{"_index":1237,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`environment",{"_index":1235,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`limit",{"_index":1141,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(getuserparamdto",{"_index":1140,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log({updatepostdto",{"_index":904,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":1219,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(datasource",{"_index":1161,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["constructor(metaoptionsrepository",{"_index":688,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":110,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":325,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(request",{"_index":728,"title":{},"body":{"injectables/PaginationService.html":{}}}],["constructor(tagsrepository",{"_index":1041,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userrepository",{"_index":584,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["constructor(userservice",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(userservices",{"_index":923,"title":{},"body":{"injectables/PostsService.html":{}}}],["containing",{"_index":848,"title":{},"body":{"controllers/PostsController.html":{}}}],["content",{"_index":429,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{}}}],["context.getclass",{"_index":342,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":341,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":100,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":677,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":891,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":1021,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":1121,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":102,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convert",{"_index":1128,"title":{},"body":{"controllers/UserController.html":{}}}],["coverage",{"_index":1247,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["create(undefined",{"_index":691,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["created",{"_index":386,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/PostsController.html":{},"injectables/UserCreateMany.html":{}}}],["createdatecolumn",{"_index":648,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createddate",{"_index":646,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdmetaoption",{"_index":694,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createdpost",{"_index":901,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdtags",{"_index":1022,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createmany",{"_index":1160,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["createmany(undefined",{"_index":1164,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["createmanyusers",{"_index":1085,"title":{},"body":{"controllers/UserController.html":{}}}],["createmanyusers(@body",{"_index":1151,"title":{},"body":{"controllers/UserController.html":{}}}],["createmanyusers(createusersdto",{"_index":1088,"title":{},"body":{"controllers/UserController.html":{}}}],["createmanyusersdto",{"_index":378,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createmetaoptions",{"_index":672,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(@body",{"_index":678,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(createmetaoptionsdto",{"_index":673,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptionsdto",{"_index":413,"title":{"classes/CreateMetaOptionsDto.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createpost",{"_index":832,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["createpost(@body",{"_index":900,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["createpost(createpostdto",{"_index":836,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createtag",{"_index":1008,"title":{},"body":{"controllers/TagsController.html":{}}}],["createpost.authorid",{"_index":947,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost.tags",{"_index":949,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":425,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdtowithmeta",{"_index":829,"title":{},"body":{"entities/Post.html":{}}}],["createpostdto})@patch",{"_index":874,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto})@post",{"_index":839,"title":{},"body":{"controllers/PostsController.html":{}}}],["creates",{"_index":818,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{}}}],["createtag",{"_index":1011,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtag(undefined",{"_index":1044,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtagdto",{"_index":538,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":583,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(@body",{"_index":1146,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(createuserdto",{"_index":1094,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(undefined",{"_index":588,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":384,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto})@apiquery({name",{"_index":1100,"title":{},"body":{"controllers/UserController.html":{}}}],["createuserprovider",{"_index":580,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":1153,"title":{},"body":{"controllers/UserController.html":{}}}],["createusersdto",{"_index":1092,"title":{},"body":{"controllers/UserController.html":{}}}],["creating",{"_index":667,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PaginationService.html":{}}}],["creation",{"_index":842,"title":{},"body":{"controllers/PostsController.html":{}}}],["credentials",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["current",{"_index":710,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["currentpage",{"_index":707,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["custom",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["data",{"_index":701,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["database",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserCreateMany.html":{}}}],["databaseconfig",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":1162,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["date",{"_index":472,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":521,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":324,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaultvaluepipe",{"_index":1113,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":1139,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(10",{"_index":1137,"title":{},"body":{"controllers/UserController.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":882,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["delete('/soft",{"_index":1026,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(undefined",{"_index":929,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":852,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedatecolumn",{"_index":995,"title":{},"body":{"entities/Tag.html":{}}}],["deleteddate",{"_index":993,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":833,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":907,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":850,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleterequest",{"_index":909,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletes",{"_index":851,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletetag",{"_index":1006,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(@query('id",{"_index":1024,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(id",{"_index":1012,"title":{},"body":{"controllers/TagsController.html":{}}}],["dependencies",{"_index":116,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["deprecated",{"_index":1242,"title":{},"body":{"injectables/UserService.html":{}}}],["description",{"_index":97,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":849,"title":{},"body":{"controllers/PostsController.html":{}}}],["development",{"_index":1314,"title":{},"body":{"index.html":{}}}],["directional",{"_index":669,"title":{},"body":{"entities/MetaOption.html":{}}}],["dist/**/*.entity.js",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":523,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["doe",{"_index":407,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["doing",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["draft",{"_index":500,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto/pagination",{"_index":732,"title":{},"body":{"injectables/PaginationService.html":{}}}],["dtos/create",{"_index":590,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["dtos/get",{"_index":889,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/patch",{"_index":888,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["dtos/signin.dto",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["e.g",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["e2e",{"_index":1323,"title":{},"body":{"index.html":{}}}],["each",{"_index":412,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":780,"title":{},"body":{"entities/Post.html":{}}}],["eagerly",{"_index":826,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1304,"title":{},"body":{"index.html":{}}}],["eight",{"_index":570,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["enables",{"_index":823,"title":{},"body":{"entities/Post.html":{}}}],["enddate",{"_index":612,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PostsService.html":{}}}],["endpoint",{"_index":1125,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entire",{"_index":1213,"title":{},"body":{"modules/UserModule.html":{}}}],["entities",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":221,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["entity/meta",{"_index":684,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["entity/post.entity",{"_index":918,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entity/tags.entity",{"_index":1034,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["entity/user.entity",{"_index":403,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["enum",{"_index":525,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":1290,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posts.enums",{"_index":518,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env}.local",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development.local",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["environmentvalidation",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":93,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["error.message",{"_index":96,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/UserCreateMany.html":{}}}],["everywhere",{"_index":1214,"title":{},"body":{"modules/UserModule.html":{}}}],["example",{"_index":391,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["exception",{"_index":599,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["excerpt",{"_index":480,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["execution",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["exist",{"_index":1239,"title":{},"body":{"injectables/UserService.html":{}}}],["existing",{"_index":876,"title":{},"body":{"controllers/PostsController.html":{}}}],["existingtags",{"_index":1056,"title":{},"body":{"injectables/TagsService.html":{}}}],["existinguser",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["existinguser.email",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguser.id",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguser.password",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":602,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/TagsService.html":{}}}],["expected",{"_index":773,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["expiresin",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["export",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exporting",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["exports",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationService.html":{},"dependencies.html":{}}}],["extends",{"_index":625,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["extract",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(undefined",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["failed",{"_index":1174,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["false",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["false})@isoptional()@isarray()@isint({each",{"_index":506,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featured",{"_index":451,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["featuredimageurl",{"_index":430,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["fetch",{"_index":721,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/PostsController.html":{}}}],["few",{"_index":822,"title":{},"body":{"entities/Post.html":{}}}],["fields",{"_index":881,"title":{},"body":{"controllers/PostsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["final",{"_index":1124,"title":{},"body":{"controllers/UserController.html":{}}}],["finally",{"_index":1196,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["finalresponse",{"_index":750,"title":{},"body":{"injectables/PaginationService.html":{}}}],["find",{"_index":952,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":1142,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(undefined",{"_index":1225,"title":{},"body":{"injectables/UserService.html":{}}}],["findmultipletags",{"_index":1037,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(undefined",{"_index":1047,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":1217,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(undefined",{"_index":1227,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyemail",{"_index":1218,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyemail(undefined",{"_index":1229,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":350,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["first",{"_index":497,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"entities/User.html":{}}}],["firstname",{"_index":404,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["footerenabled",{"_index":460,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["format",{"_index":455,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["forwardref",{"_index":273,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["found",{"_index":957,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":1302,"title":{},"body":{"index.html":{}}}],["from.env",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["function",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["functions",{"_index":1296,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generic",{"_index":704,"title":{},"body":{"interfaces/Paginated.html":{}}}],["get('/:id",{"_index":1135,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':userid",{"_index":895,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts",{"_index":834,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallposts(undefined",{"_index":931,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(userid",{"_index":855,"title":{},"body":{"controllers/PostsController.html":{}}}],["getalltags",{"_index":1038,"title":{},"body":{"injectables/TagsService.html":{}}}],["gethello",{"_index":104,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpostsbasedto",{"_index":609,"title":{"classes/GetPostsBaseDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["getpostsquerydto",{"_index":624,"title":{"classes/GetPostsQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["gettagbyid",{"_index":1039,"title":{},"body":{"injectables/TagsService.html":{}}}],["gettagbyid(undefined",{"_index":1050,"title":{},"body":{"injectables/TagsService.html":{}}}],["getting",{"_index":1298,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":1107,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers",{"_index":1086,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":1097,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersparamdto",{"_index":626,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["given",{"_index":357,"title":{},"body":{"injectables/BcryptProvider.html":{},"controllers/PostsController.html":{}}}],["global/pagination/pagination.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["global/pagination/pagination.service",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["globally",{"_index":1211,"title":{},"body":{"modules/UserModule.html":{}}}],["grow",{"_index":1330,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["handle",{"_index":598,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["handles",{"_index":841,"title":{},"body":{"controllers/PostsController.html":{}}}],["hashed",{"_index":358,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashedpassword",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashes",{"_index":366,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashing",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{}}}],["hashing.provider",{"_index":369,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashingprovider",{"_index":271,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":353,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(undefined",{"_index":364,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["headers",{"_index":1111,"title":{},"body":{"controllers/UserController.html":{}}}],["hello",{"_index":245,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["here",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"index.html":{}}}],["host",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["httpcode",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["httpexception('email",{"_index":600,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["httpexception('invalid",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('no",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/PostsController.html":{}}}],["httpexception('post",{"_index":962,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('tag",{"_index":1059,"title":{},"body":{"injectables/TagsService.html":{}}}],["httpexception('tags",{"_index":956,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('transaction",{"_index":1195,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["httpexception('user",{"_index":1244,"title":{},"body":{"injectables/UserService.html":{}}}],["httpexception(`${error.message",{"_index":94,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["https://example.com/image.jpg",{"_index":454,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["https://nestjs.com",{"_index":1345,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":483,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org",{"_index":532,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":908,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserCreateMany.html":{}}}],["httpstatus.conflict",{"_index":603,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/TagsService.html":{}}}],["httpstatus.created",{"_index":899,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.internal_server_error",{"_index":1180,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["httpstatus.moved_permanently",{"_index":1240,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":958,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.ok",{"_index":894,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.request_timeout",{"_index":1175,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["httpstatus.unauthorized",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{}}}],["hyphens",{"_index":496,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["id",{"_index":440,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id'})@delete",{"_index":1013,"title":{},"body":{"controllers/TagsController.html":{}}}],["id'})@delete('/soft",{"_index":1017,"title":{},"body":{"controllers/TagsController.html":{}}}],["identifier",{"_index":1248,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":505,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ignoreexpiration",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["image",{"_index":452,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["implements",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{}}}],["import",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imported",{"_index":1215,"title":{},"body":{"modules/UserModule.html":{}}}],["importing",{"_index":618,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["imports",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["in(tags",{"_index":1064,"title":{},"body":{"injectables/TagsService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":361,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/PostsController.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["inject(jwtconfig.key",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{}}}],["inject(profileconfig.key",{"_index":1232,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(request",{"_index":735,"title":{},"body":{"injectables/PaginationService.html":{}}}],["injectable",{"_index":40,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":242,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["injection",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injections",{"_index":939,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository",{"_index":591,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoptionrepository",{"_index":944,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(metaoptionsrepository",{"_index":693,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["injectrepository(postrepository",{"_index":943,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tagrepository",{"_index":1055,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":593,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["installation",{"_index":1310,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1312,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1168,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["instead",{"_index":827,"title":{},"body":{"entities/Post.html":{}}}],["integer",{"_index":443,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["interface",{"_index":697,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"coverage.html":{},"overview.html":{}}}],["interface/paginated.interface",{"_index":734,"title":{},"body":{"injectables/PaginationService.html":{}}}],["interfaces",{"_index":699,"title":{},"body":{"interfaces/Paginated.html":{}}}],["intersectiontype",{"_index":617,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["invalid",{"_index":548,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["ip",{"_index":1112,"title":{},"body":{"controllers/UserController.html":{}}}],["isarray",{"_index":389,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isauthenticated",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":510,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["isdate()@isoptional",{"_index":614,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["isemail",{"_index":576,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":559,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":511,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(['post",{"_index":526,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":530,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypes",{"_index":527,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":512,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isiso8601",{"_index":513,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":420,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":395,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isemail",{"_index":988,"title":{},"body":{"classes/SignInDto.html":{}}}],["isnotempty()@isjson",{"_index":418,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["isnotempty()@isstring",{"_index":990,"title":{},"body":{"classes/SignInDto.html":{}}}],["isnumber",{"_index":766,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":514,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["ispasswordcorrect",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispositive",{"_index":725,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":421,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":561,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":565,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":563,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issuer",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["isurl",{"_index":515,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["item",{"_index":537,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":390,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{}}}],["itemsperpage",{"_index":705,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["jane",{"_index":410,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["jane@doe.com",{"_index":411,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["john",{"_index":405,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["john@doe.com",{"_index":408,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["joi",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":813,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["joincolumn",{"_index":664,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":804,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["json",{"_index":482,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["jwt",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["jwtconfig",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["jwtconfig.key",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwtsecret",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwttokenaudience",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwttokenexpiration",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwttokenissuer",{"_index":233,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtmodule",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtmodule.registerasync",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{}}}],["kamil",{"_index":1342,"title":{},"body":{"index.html":{}}}],["keeping",{"_index":1190,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["key",{"_index":423,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["keys",{"_index":343,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["language",{"_index":544,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["last",{"_index":709,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["lastname",{"_index":406,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lazy",{"_index":828,"title":{},"body":{"entities/Post.html":{}}}],["legend",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":784,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":572,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1348,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1327,"title":{},"body":{"index.html":{}}}],["likes",{"_index":772,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["limit",{"_index":719,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["links",{"_index":702,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["literal",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["load",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["loading",{"_index":825,"title":{},"body":{"entities/Post.html":{}}}],["logic",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginbody",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginbody",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["logs",{"_index":844,"title":{},"body":{"controllers/PostsController.html":{}}}],["loop",{"_index":348,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["lowercase",{"_index":493,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["m2m",{"_index":816,"title":{},"body":{"entities/Post.html":{}}}],["main",{"_index":487,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["make",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["making",{"_index":940,"title":{},"body":{"injectables/PostsService.html":{}}}],["many",{"_index":381,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["many.ts",{"_index":1159,"title":{},"body":{"injectables/UserCreateMany.html":{},"coverage.html":{}}}],["many.ts:13",{"_index":1165,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["many.ts:7",{"_index":1163,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["manytomany",{"_index":805,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":798,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":806,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":778,"title":{},"body":{"entities/Post.html":{}}}],["match",{"_index":639,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["matches",{"_index":363,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":579,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":529,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matches(/^https?:\\/\\/[^\\s",{"_index":558,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["matching",{"_index":99,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["math.ceil(totalitems",{"_index":747,"title":{},"body":{"injectables/PaginationService.html":{}}}],["maxlength",{"_index":516,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":534,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(255",{"_index":528,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":524,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":577,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":491,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["meta",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":338,"title":{},"body":{"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["metaoption",{"_index":643,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":935,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptions",{"_index":431,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["metaoptions.post",{"_index":788,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":137,"title":{"controllers/MetaOptionsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":126,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":690,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":675,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":417,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["migrations",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":569,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginationQueryDto.html":{}}}],["minlength",{"_index":517,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":557,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":422,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":578,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1289,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1326,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1317,"title":{},"body":{"index.html":{}}}],["modern",{"_index":542,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["module",{"_index":113,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["modules",{"_index":115,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1339,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":1089,"title":{},"body":{"controllers/UserController.html":{}}}],["myśliwiec",{"_index":1343,"title":{},"body":{"index.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["necessary",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["need",{"_index":1123,"title":{},"body":{"controllers/UserController.html":{}}}],["nest",{"_index":1308,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1347,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":767,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":401,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjsis6@awesome",{"_index":409,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["new",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newurl",{"_index":744,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.origin}${newurl.pathname}?page=1&limit=${limit",{"_index":751,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${nextpage}&limit=${limit",{"_index":754,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${page}&limit=${limit",{"_index":753,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${prevpage}&limit=${limit",{"_index":755,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${totalpages}&limit=${limit",{"_index":752,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newuser",{"_index":606,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserCreateMany.html":{}}}],["newuser.push(savednewuserinstance",{"_index":1189,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["newuserinstance",{"_index":1184,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["next",{"_index":711,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["nextpage",{"_index":748,"title":{},"body":{"injectables/PaginationService.html":{}}}],["node.js",{"_index":1301,"title":{},"body":{"index.html":{}}}],["none",{"_index":1294,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["null",{"_index":458,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":653,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":439,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number'})@isnumber()@isnotempty",{"_index":762,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["number})@isoptional()@isint()@type(undefined",{"_index":630,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["object",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/UserCreateMany.html":{}}}],["objectliteral",{"_index":733,"title":{},"body":{"injectables/PaginationService.html":{}}}],["objects",{"_index":870,"title":{},"body":{"controllers/PostsController.html":{}}}],["observable",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["occurred",{"_index":1241,"title":{},"body":{"injectables/UserService.html":{}}}],["ondelete",{"_index":657,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":571,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["onetomany",{"_index":1078,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1075,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":665,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":655,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1328,"title":{},"body":{"index.html":{}}}],["option.entity",{"_index":685,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":645,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":651,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":654,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":649,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":661,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:33",{"_index":659,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["options",{"_index":371,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.controller",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":671,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:10",{"_index":674,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":520,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":416,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:16",{"_index":419,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["options.hashedpassword",{"_index":642,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["options.module",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":683,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.password",{"_index":372,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["options.service",{"_index":676,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":687,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:15",{"_index":692,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":689,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":415,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["options/entity/meta",{"_index":644,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/meta",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1352,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owning",{"_index":811,"title":{},"body":{"entities/Post.html":{}}}],["package",{"_index":1268,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":467,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":698,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":727,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginatequery(undefined",{"_index":730,"title":{},"body":{"injectables/PaginationService.html":{}}}],["pagination",{"_index":945,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["pagination'})@apiresponse({status",{"_index":1098,"title":{},"body":{"controllers/UserController.html":{}}}],["pagination.service",{"_index":717,"title":{},"body":{"modules/PaginationModule.html":{}}}],["paginationmodule",{"_index":127,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationquery",{"_index":736,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/PostsService.html":{}}}],["paginationquerydto",{"_index":621,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginationservice",{"_index":131,"title":{"injectables/PaginationService.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["param",{"_index":370,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["param('userid",{"_index":896,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":1117,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param.dto.ts",{"_index":628,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:16",{"_index":631,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parama",{"_index":1127,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["parseintpipe",{"_index":883,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["partial",{"_index":879,"title":{},"body":{"controllers/PostsController.html":{}}}],["partialtype",{"_index":764,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":760,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":776,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["passing",{"_index":824,"title":{},"body":{"entities/Post.html":{}}}],["password",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"classes/SignInDto.html":{},"entities/User.html":{}}}],["passwords",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashingProvider.html":{}}}],["patch",{"_index":877,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["patchpostdto",{"_index":758,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchuser",{"_index":1087,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(@body",{"_index":1155,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(patchuserdto",{"_index":1108,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuserdto",{"_index":774,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["path",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["person",{"_index":484,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":533,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1283,"title":{},"body":{"dependencies.html":{}}}],["plain",{"_index":637,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["please",{"_index":1337,"title":{},"body":{"index.html":{}}}],["port",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":1103,"title":{},"body":{"controllers/UserController.html":{}}}],["possible",{"_index":465,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":259,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":838,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@delete",{"_index":853,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('/create",{"_index":1150,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@httpcode(httpstatus.ok",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.content",{"_index":971,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":765,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":427,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:103",{"_index":457,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:113",{"_index":479,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:124",{"_index":507,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:146",{"_index":462,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:15",{"_index":763,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:156",{"_index":445,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:34",{"_index":509,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:46",{"_index":471,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:60",{"_index":498,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:71",{"_index":504,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:80",{"_index":450,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:92",{"_index":486,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.featuredimageurl",{"_index":975,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":656,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.metaoptions.id",{"_index":984,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.posttype",{"_index":965,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishedon",{"_index":977,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.schema",{"_index":973,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":967,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":969,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":979,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":963,"title":{},"body":{"injectables/PostsService.html":{}}}],["postentity",{"_index":917,"title":{},"body":{"modules/PostsModule.html":{}}}],["postgres",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["postquery",{"_index":856,"title":{},"body":{"controllers/PostsController.html":{}}}],["postrepository",{"_index":925,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":831,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.author",{"_index":1076,"title":{},"body":{"entities/User.html":{}}}],["posts.controller",{"_index":916,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.dto",{"_index":890,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.dto.ts",{"_index":611,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["posts.dto.ts:12",{"_index":615,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.dto.ts:8",{"_index":616,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.service",{"_index":885,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.controller",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":136,"title":{"controllers/PostsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":892,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":128,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":884,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":499,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":810,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":432,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["posttypes",{"_index":463,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttypes.post",{"_index":809,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["prev",{"_index":712,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["prevpage",{"_index":749,"title":{},"body":{"injectables/PaginationService.html":{}}}],["primarygeneratedcolumn",{"_index":650,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["processes",{"_index":878,"title":{},"body":{"controllers/PostsController.html":{}}}],["processing",{"_index":843,"title":{},"body":{"controllers/PostsController.html":{}}}],["production",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["profileconfig",{"_index":1207,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["profileconfiguration",{"_index":1220,"title":{},"body":{"injectables/UserService.html":{}}}],["programming",{"_index":543,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["progressive",{"_index":1300,"title":{},"body":{"index.html":{}}}],["project",{"_index":1329,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":321,"title":{"properties.html":{}},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["protect",{"_index":1212,"title":{},"body":{"modules/UserModule.html":{}}}],["provide",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{}}}],["provided",{"_index":633,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{}}}],["provider",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["provider/create",{"_index":1205,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["providers",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/bcrypt.provider",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/hashing.provider",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["public",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["published",{"_index":473,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":433,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["put",{"_index":1110,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":737,"title":{},"body":{"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{}}}],["query('limit",{"_index":1136,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":1138,"title":{},"body":{"controllers/UserController.html":{}}}],["query.dto",{"_index":623,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PaginationService.html":{}}}],["query.dto.ts",{"_index":718,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:15",{"_index":723,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:26",{"_index":724,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryparams",{"_index":898,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["queryrunner",{"_index":1169,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.committransaction",{"_index":1192,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.connect",{"_index":1172,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.manager.create(user",{"_index":1185,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.manager.save(newuserinstance",{"_index":1187,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.release",{"_index":1198,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1194,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.starttransaction",{"_index":1179,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["r\\n",{"_index":531,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["range",{"_index":466,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1338,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["received",{"_index":845,"title":{},"body":{"controllers/PostsController.html":{}}}],["record",{"_index":334,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["references",{"_index":1082,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":1285,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":326,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["relationship",{"_index":670,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["relationships",{"_index":817,"title":{},"body":{"entities/Post.html":{}}}],["release",{"_index":1197,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["remove",{"_index":819,"title":{},"body":{"entities/Post.html":{}}}],["replace",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Paginated.html":{}}}],["repositories",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{}}}],["repository",{"_index":585,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":746,"title":{},"body":{"injectables/PaginationService.html":{}}}],["repository.find",{"_index":738,"title":{},"body":{"injectables/PaginationService.html":{}}}],["representing",{"_index":866,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["request.headers.authorization?.split",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request.user",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["requests",{"_index":861,"title":{},"body":{"controllers/PostsController.html":{}}}],["requesttimeoutexception",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception('request",{"_index":597,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["requesttimeoutexception('timeout",{"_index":1245,"title":{},"body":{"injectables/UserService.html":{}}}],["requesttimeoutexception(error.message",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["requesturl",{"_index":756,"title":{},"body":{"injectables/PaginationService.html":{}}}],["require",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["required",{"_index":388,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":360,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/PostsController.html":{}}}],["results",{"_index":98,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["retrieved",{"_index":864,"title":{},"body":{"controllers/PostsController.html":{}}}],["retrieves",{"_index":857,"title":{},"body":{"controllers/PostsController.html":{}}}],["return",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["returned",{"_index":1101,"title":{},"body":{"controllers/UserController.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["review",{"_index":502,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":1193,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["routes",{"_index":1361,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":1315,"title":{},"body":{"index.html":{}}}],["runner",{"_index":1167,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["rxjs",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":373,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["save",{"_index":1188,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["savednewuserinstance",{"_index":1186,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["scalable",{"_index":1305,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":501,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":434,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["second",{"_index":1081,"title":{},"body":{"entities/User.html":{}}}],["secret",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["sent",{"_index":1156,"title":{},"body":{"controllers/UserController.html":{}}}],["serialize",{"_index":481,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":469,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":1306,"title":{},"body":{"index.html":{}}}],["service",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["services",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["set",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["setmetadata",{"_index":1116,"title":{},"body":{"controllers/UserController.html":{}}}],["setmetadata(auth_type_key",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":820,"title":{},"body":{"entities/Post.html":{},"modules/UserModule.html":{}}}],["setup",{"_index":1080,"title":{},"body":{"entities/User.html":{}}}],["shows",{"_index":768,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["side",{"_index":812,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["sidebarenabled",{"_index":459,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["signindto",{"_index":253,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signoptions",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["single",{"_index":942,"title":{},"body":{"injectables/PostsService.html":{}}}],["skip",{"_index":739,"title":{},"body":{"injectables/PaginationService.html":{}}}],["slug",{"_index":435,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["soft",{"_index":1016,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":1040,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdelete(undefined",{"_index":1052,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdeletetag",{"_index":1007,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(@query('id",{"_index":1027,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(id",{"_index":1015,"title":{},"body":{"controllers/TagsController.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["special",{"_index":573,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":629,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["specified",{"_index":867,"title":{},"body":{"controllers/PostsController.html":{}}}],["specify",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["sponsors",{"_index":1332,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1291,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1297,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posts.enums.ts",{"_index":1292,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":103,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":106,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":243,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":244,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1204,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":1231,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:17",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:35",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:76",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":332,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/UserController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1254,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/signin.dto.ts",{"_index":987,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts:10",{"_index":991,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/signin.dto.ts:6",{"_index":989,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":320,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:27",{"_index":328,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:8",{"_index":327,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":351,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:15",{"_index":365,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:34",{"_index":355,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/hashing.provider",{"_index":592,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":634,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:19",{"_index":636,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:5",{"_index":640,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/config/jwt.config",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["src/global/pagination/dto/pagination",{"_index":622,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/global/pagination/interface/paginated.interface",{"_index":938,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/global/pagination/interface/paginated.interface.ts",{"_index":700,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/global/pagination/pagination.module",{"_index":920,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/global/pagination/pagination.module.ts",{"_index":716,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/global/pagination/pagination.service",{"_index":937,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/global/pagination/pagination.service.ts",{"_index":726,"title":{},"body":{"injectables/PaginationService.html":{},"coverage.html":{}}}],["src/global/pagination/pagination.service.ts:16",{"_index":731,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/global/pagination/pagination.service.ts:9",{"_index":729,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/main.ts",{"_index":1261,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":414,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":426,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/get",{"_index":610,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":759,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity",{"_index":662,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/entity/post.entity.ts",{"_index":777,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity.ts:19",{"_index":787,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:26",{"_index":803,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:34",{"_index":790,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:42",{"_index":796,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:50",{"_index":797,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:56",{"_index":782,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:62",{"_index":793,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:69",{"_index":786,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:75",{"_index":792,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:81",{"_index":801,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:89",{"_index":789,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:96",{"_index":781,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/enums/posts.enums.ts",{"_index":1295,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":830,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:110",{"_index":854,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:45",{"_index":860,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:72",{"_index":840,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:96",{"_index":875,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":915,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":922,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:115",{"_index":930,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:15",{"_index":926,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:39",{"_index":928,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:59",{"_index":934,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:95",{"_index":932,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":539,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity",{"_index":808,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/entity/tags.entity.ts",{"_index":992,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity.ts:16",{"_index":999,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:24",{"_index":1000,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:32",{"_index":1003,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:38",{"_index":997,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:44",{"_index":1002,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:51",{"_index":998,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:56",{"_index":1001,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:59",{"_index":994,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:62",{"_index":1004,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:65",{"_index":996,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":1005,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:19",{"_index":1010,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:26",{"_index":1014,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:32",{"_index":1018,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":919,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":1032,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/tags/tags.service",{"_index":936,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/tags.service.ts",{"_index":1036,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/tags.service.ts:14",{"_index":1045,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:30",{"_index":1049,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:36",{"_index":1051,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:46",{"_index":1048,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:56",{"_index":1046,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:62",{"_index":1053,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:8",{"_index":1042,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/user/dtos/create",{"_index":380,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/get",{"_index":627,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/user/dtos/patch",{"_index":775,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/user/entity/user.entity",{"_index":807,"title":{},"body":{"entities/Post.html":{}}}],["src/user/entity/user.entity.ts",{"_index":1067,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entity/user.entity.ts:14",{"_index":1070,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:21",{"_index":1072,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:29",{"_index":1068,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:36",{"_index":1074,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:39",{"_index":1077,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:7",{"_index":1071,"title":{},"body":{"entities/User.html":{}}}],["src/user/provider/create",{"_index":581,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/user/user",{"_index":1158,"title":{},"body":{"injectables/UserCreateMany.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":1084,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:102",{"_index":1091,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:109",{"_index":1109,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:68",{"_index":1106,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:90",{"_index":1096,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/user/user.module.ts",{"_index":1202,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/user/user.service.ts",{"_index":1216,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:102",{"_index":1223,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:22",{"_index":1222,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:44",{"_index":1224,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:52",{"_index":1226,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:78",{"_index":1228,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:88",{"_index":1230,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":1177,"title":{},"body":{"injectables/UserCreateMany.html":{},"index.html":{}}}],["start:dev",{"_index":1318,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1319,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":613,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PostsService.html":{}}}],["started",{"_index":1299,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1309,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1249,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":323,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":436,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["stay",{"_index":1340,"title":{},"body":{"index.html":{}}}],["still",{"_index":770,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["story",{"_index":468,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":107,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string'})@isiso8601()@isnotempty",{"_index":478,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isnotempty()@isstring()@minlength(3)@maxlength(255",{"_index":551,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isjson",{"_index":485,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isstring",{"_index":545,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024",{"_index":456,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024)@matches(/^https?:\\/\\/[^\\s",{"_index":547,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isenum(posttypes)@isnotempty",{"_index":470,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@isenum(poststatus",{"_index":503,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(255)@matches(/^[a",{"_index":488,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(512)@matches(/^[a",{"_index":555,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isoptional",{"_index":449,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":508,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string(error",{"_index":1176,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["sub",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["success",{"_index":986,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["successful",{"_index":1181,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["successfully",{"_index":985,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["summary",{"_index":893,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":1333,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["svg",{"_index":1350,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":619,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{}}}],["synchronize",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":703,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["table",{"_index":814,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1267,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":541,"title":{"entities/Tag.html":{}},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag'})@post",{"_index":1009,"title":{},"body":{"controllers/TagsController.html":{}}}],["tag.dto",{"_index":1019,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":540,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:23",{"_index":552,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:37",{"_index":556,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:46",{"_index":546,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:51",{"_index":554,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:65",{"_index":549,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.name",{"_index":1058,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagrepository",{"_index":1054,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags",{"_index":437,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":1033,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":954,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags.posts",{"_index":799,"title":{},"body":{"entities/Post.html":{}}}],["tags.service",{"_index":1020,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["tags/tags.controller",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":138,"title":{"controllers/TagsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":129,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":1043,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":924,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":740,"title":{},"body":{"injectables/PaginationService.html":{}}}],["test",{"_index":1322,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1325,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1324,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1321,"title":{},"body":{"index.html":{}}}],["text",{"_index":638,"title":{},"body":{"injectables/HashingProvider.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1331,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":335,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.appservice.gethello",{"_index":112,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":346,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.configservice.get('s3_bucket",{"_index":1234,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserprovider.createuser",{"_index":1233,"title":{},"body":{"injectables/UserService.html":{}}}],["this.datasource.createqueryrunner",{"_index":1170,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["this.extractrequestfromheader",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.hashingprovider.comparepasswords",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashingprovider.hashpassword",{"_index":604,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration.jwtsecret",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{}}}],["this.jwtconfiguration.jwttokenaudience",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{}}}],["this.jwtconfiguration.jwttokenexpiration",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtconfiguration.jwttokenissuer",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.metaoptionsrepository.create(metaoptions",{"_index":695,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.delete",{"_index":983,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.save(createdmetaoption",{"_index":696,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create",{"_index":679,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.paginationservice.paginatequery",{"_index":980,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository",{"_index":981,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.create",{"_index":950,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.delete",{"_index":982,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findoneby",{"_index":960,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(post",{"_index":951,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postservice.create",{"_index":902,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.delete",{"_index":910,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.getallposts",{"_index":897,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.update",{"_index":906,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.profileconfiguration",{"_index":1238,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflector.getallandoverride",{"_index":340,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.request.headers.host",{"_index":743,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.request.protocol",{"_index":742,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.request.url",{"_index":757,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.tagsrepository.create(tag",{"_index":1060,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete",{"_index":1065,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":1062,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":1057,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findoneby",{"_index":1063,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(createdtags",{"_index":1061,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete",{"_index":1066,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtag",{"_index":1023,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete",{"_index":1025,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags",{"_index":948,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softdelete",{"_index":1028,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userrepository.create(user",{"_index":607,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findone",{"_index":595,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":1243,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":608,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userscreatemany.createmany",{"_index":1246,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createmany",{"_index":1154,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.createuser",{"_index":1147,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":1143,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.finduserbyemail",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservices.findonebyid",{"_index":946,"title":{},"body":{"injectables/PostsService.html":{}}}],["through",{"_index":349,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/PostsController.html":{}}}],["throw",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["time",{"_index":477,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["timeout",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["timestamp",{"_index":791,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":438,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:16",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:27",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:32",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["totalitems",{"_index":706,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["totalpages",{"_index":708,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["touch",{"_index":1341,"title":{},"body":{"index.html":{}}}],["track",{"_index":1191,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["transaction",{"_index":1178,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["transactions",{"_index":1166,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["transfer",{"_index":847,"title":{},"body":{"controllers/PostsController.html":{}}}],["transform",{"_index":632,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["transformer",{"_index":399,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"dependencies.html":{}}}],["true",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@isint()@isnotempty",{"_index":444,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@jointable",{"_index":800,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":393,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":1346,"title":{},"body":{"index.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm.forfeature",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":686,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([postentity",{"_index":921,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":1035,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1209,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":337,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":550,"title":{},"body":{"classes/CreateTagDto.html":{},"index.html":{}}}],["undefined",{"_index":387,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["undefined})@get(':userid",{"_index":859,"title":{},"body":{"controllers/PostsController.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":392,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":461,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":795,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1320,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1358,"title":{},"body":{"properties.html":{}}}],["up",{"_index":769,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["update",{"_index":761,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["update(undefined",{"_index":933,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":873,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["updatedatecolumn",{"_index":660,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updateddate",{"_index":647,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedpost",{"_index":905,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost",{"_index":835,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":903,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(updatepostdto",{"_index":871,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost.content",{"_index":972,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.featuredimageurl",{"_index":976,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.id",{"_index":961,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.posttype",{"_index":966,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.publishedon",{"_index":978,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.schema",{"_index":974,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.slug",{"_index":968,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.status",{"_index":970,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.tags",{"_index":953,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.title",{"_index":964,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":880,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":872,"title":{},"body":{"controllers/PostsController.html":{}}}],["url",{"_index":453,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PaginationService.html":{}}}],["url(this.request.url",{"_index":745,"title":{},"body":{"injectables/PaginationService.html":{}}}],["use",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{}}}],["useclass",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["used",{"_index":815,"title":{},"body":{"entities/Post.html":{}}}],["usefactory",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["useguards",{"_index":1115,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(accesstokenguard",{"_index":1148,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":402,"title":{"entities/User.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetUsersParamDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user'})@apiresponse({status",{"_index":858,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.controller",{"_index":1203,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":398,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":382,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":562,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":564,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":560,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":394,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["user.dto.ts:37",{"_index":575,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":596,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.password",{"_index":605,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.posts",{"_index":779,"title":{},"body":{"entities/Post.html":{}}}],["user.provider",{"_index":1206,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.provider.ts",{"_index":582,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:16",{"_index":586,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:27",{"_index":589,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.service",{"_index":1118,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":1083,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercreatemany",{"_index":1157,"title":{"injectables/UserCreateMany.html":{}},"body":{"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":868,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["usermodule",{"_index":130,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["userparamsdto",{"_index":1144,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":587,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["users",{"_index":383,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["users'})@auth(authtype.bearer)@post('/create",{"_index":1090,"title":{},"body":{"controllers/UserController.html":{}}}],["users.users",{"_index":1183,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["users/1223",{"_index":1130,"title":{},"body":{"controllers/UserController.html":{}}}],["users/id?limit=10&page=1",{"_index":1126,"title":{},"body":{"controllers/UserController.html":{}}}],["users?limit=10&page=2",{"_index":1133,"title":{},"body":{"controllers/UserController.html":{}}}],["userscreatemany",{"_index":1221,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":284,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservices",{"_index":927,"title":{},"body":{"injectables/PostsService.html":{}}}],["using",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"injectables/BcryptProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["valid",{"_index":959,"title":{},"body":{"injectables/PostsService.html":{}}}],["validate",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":396,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":1114,"title":{},"body":{"controllers/UserController.html":{}}}],["validationschema",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":397,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{}}}],["value",{"_index":424,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["varchar",{"_index":783,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":1251,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":181,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":359,"title":{},"body":{"injectables/BcryptProvider.html":{},"controllers/UserController.html":{},"properties.html":{}}}],["void",{"_index":1093,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["want",{"_index":222,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["watch",{"_index":1316,"title":{},"body":{"index.html":{}}}],["website",{"_index":1344,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":447,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["whether",{"_index":362,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["whos",{"_index":1131,"title":{},"body":{"controllers/UserController.html":{}}}],["whose",{"_index":869,"title":{},"body":{"controllers/PostsController.html":{}}}],["work",{"_index":821,"title":{},"body":{"entities/Post.html":{}}}],["works",{"_index":771,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["world",{"_index":246,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["yarn",{"_index":1311,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1336,"title":{},"body":{"index.html":{}}}],["your.env",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["z0",{"_index":489,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":568,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":567,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":566,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport { Observable } from 'rxjs';\nimport jwtConfig from 'src/config/jwt.config';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    // injecting necessary services here\n\n    // injecting jwt service\n    private jwtService: JwtService,\n\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n  ) {}\n\n  private extractRequestFromHeader({ request }: { request: Request }) {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n\n  async canActivate(context: ExecutionContext): Promise {\n    // get the request object from the execution context\n    const request = context.switchToHttp().getRequest();\n\n    // extract the token from the request (header)\n    const token = this.extractRequestFromHeader({ request });\n    console.log('inside canActivate', token);\n\n    // validate the token\n    if (!token) {\n      throw new HttpException('No token passed', HttpStatus.UNAUTHORIZED);\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: this.jwtConfiguration.jwtSecret,\n        // audience: this.jwtConfiguration.jwtTokenAudience,\n        // issuer: this.jwtConfiguration.jwtTokenIssuer,\n        // ignoreExpiration: true\n      });\n      request.user = payload;\n\n      console.log({ request });\n    } catch (error: any) {\n      throw new HttpException(`${error.message}`, HttpStatus.UNAUTHORIZED, {\n        cause: error.message,\n        description: error,\n      });\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nAppModule -->\n\nPaginationService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PaginationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            PostsController\n                        \n                        \n                            MetaOptionsController\n                        \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { PostsController } from './posts/posts.controller';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOptionsController } from './meta-options/meta-options.controller';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsController } from './tags/tags.controller';\nimport { TagsModule } from './tags/tags.module';\nimport { ConfigModule, ConfigService, ConfigType } from '@nestjs/config';\nimport { PaginationService } from './global/pagination/pagination.service';\nimport { PaginationModule } from './global/pagination/pagination.module';\nimport appConfig from './config/index.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\n\nexport const ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    // env configs\n    ConfigModule.forRoot({\n      isGlobal: true, // make sure this is set to true to load environment variables from.env file\n      // envFilePath: ['.env.development.local'], // specify the path to your.env file\n      envFilePath: !ENV ? '.env' : `.env.${ENV}.local`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }), // to use environment variables\n    // env configs\n\n    UserModule,\n    PostsModule,\n    AuthModule,\n    MetaOptionsModule,\n\n    // database configs\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // specify any additional imports here, e.g., TypeORM migrations or custom repositories\n      inject: [ConfigService], // inject\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DATABASE_HOST'),\n        port: +configService.get('database.port'),\n        // port: +configService.get('DATABASE_PORT'),\n        username: configService.get('DATABASE_USERNAME'),\n        password: configService.get('DATABASE_PASSWORD'),\n        database: configService.get('DATABASE_NAME'),\n        entities: ['dist/**/*.entity.js'],\n        synchronize: configService.get('database.synchronize'), // set to false in production\n        // autoLoadEntities: true, // using this would require us to create a module (controller and module file) for every entity we want to add, exporting it and using the TypeORM.forFeature([]) function\n      }),\n    }),\n    // database configs\n\n    // jwt configuration\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync({\n      imports: [ConfigModule.forFeature(jwtConfig)],\n      useFactory: async (jwtConfiguration: ConfigType) => ({\n        secret: jwtConfiguration.jwtSecret,\n        signOptions: {\n          audience: jwtConfiguration.jwtTokenAudience,\n          issuer: jwtConfiguration.jwtTokenIssuer,\n          expiresIn: jwtConfiguration.jwtTokenExpiration,\n        },\n      }),\n      inject: [jwtConfig.KEY],\n    }),\n    // jwt configuration\n\n    TagsModule,\n    PaginationModule,\n  ],\n  controllers: [\n    AppController,\n    PostsController,\n    MetaOptionsController,\n    TagsController,\n  ],\n  providers: [\n    AppService,\n    PaginationService,\n    AccessTokenGuard, // because authentication guard has a dependency injection of AccessTokenGuard\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n      // useClass: AccessTokenGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginBody: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginBody\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { SignInDto } from './dtos/signin.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  login(@Body() loginBody: SignInDto) {\n    return this.authService.login({ body: loginBody });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from 'src/user/user.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { ConfigModule, ConfigType } from '@nestjs/config';\nimport jwtConfig from 'src/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    forwardRef(() => UserModule), // for dependency injection (circular dependency injection)\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync({\n      imports: [ConfigModule.forFeature(jwtConfig)],\n      useFactory: async (jwtConfiguration: ConfigType) => ({\n        secret: jwtConfiguration.jwtSecret,\n        signOptions: {\n          audience: jwtConfiguration.jwtTokenAudience,\n          issuer: jwtConfiguration.jwtTokenIssuer,\n          expiresIn: jwtConfiguration.jwtTokenExpiration,\n        },\n      }),\n      inject: [jwtConfig.KEY],\n    }),\n  ],\n  exports: [AuthService, HashingProvider],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider,\n      useClass: BcryptProvider,\n    },\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, hashingProvider: HashingProvider, jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Inject,\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from 'src/config/jwt.config';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n\n    // injecting hashing provider\n    @Inject(forwardRef(() => HashingProvider)) // doing this because this is a circular dependency\n    private hashingProvider: HashingProvider,\n\n    // injecting jwt service dependency\n    private jwtService: JwtService,\n\n    // injecting jwtConfig (environment values)\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n  ) {}\n\n  public async login({ body }: { body: SignInDto }) {\n    const { email, password } = body;\n\n    const existingUser = await this.userService.findUserByEmail({ email });\n\n    let isPasswordCorrect: boolean;\n\n    try {\n      isPasswordCorrect = await this.hashingProvider.comparePasswords({\n        hashedPassword: existingUser.password,\n        password,\n      });\n    } catch (error: any) {\n      throw new RequestTimeoutException(error.message, {\n        cause: error,\n        description: 'Request timeout. Could not compare passwords',\n      });\n    }\n\n    if (!isPasswordCorrect) {\n      throw new HttpException('Invalid credentials', HttpStatus.UNAUTHORIZED);\n    }\n\n    const accessToken = await this.jwtService.signAsync(\n      {\n        sub: existingUser.id,\n        email: existingUser.email,\n      },\n      {\n        expiresIn: this.jwtConfiguration.jwtTokenExpiration,\n        secret: this.jwtConfiguration.jwtSecret,\n        audience: this.jwtConfiguration.jwtTokenAudience,\n        issuer: this.jwtConfiguration.jwtTokenIssuer,\n      },\n    );\n\n    return {\n      accessToken,\n    };\n  }\n\n  public isAuthenticated() {\n    return true; // replace with actual authentication logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AUTH_TYPE_KEY, AuthType } from 'src/auth/decorators/auth.decorator';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  constructor(\n    // injecting necessary services here\n\n    // injecting reflector\n    private reflector: Reflector,\n\n    private accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  private static defaultAuthType: AuthType = AuthType.BEARER;\n\n  private authTypeGuardMap: Record = {\n    [AuthType.BEARER]: this.accessTokenGuard,\n    [AuthType.NONE]: {\n      canActivate: () => true,\n    },\n  };\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    // get all auth types from the reflector (metadata)\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY,\n      [context.getHandler(), context.getClass()], // get keys for all type auth\n    ) ?? [AuthenticationGuard.defaultAuthType];\n\n    console.log({ authTypes });\n\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n\n    console.log({ guards });\n\n    // array of guards\n\n    // loop through all the guards and fire the canActivate (returns a boolean)\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                comparePasswords\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \ncomparePasswords(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:34\n                        \n                    \n\n\n            \n                \n                        Compares a given password with its hashed version.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to a boolean indicating whether the password matches the hashed password.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:15\n                        \n                    \n\n\n            \n                \n                        Hashes a given password using bcrypt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                [object Object]\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe password to be hashed. Can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to the hashed password as a string.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  /**\n   * Hashes a given password using bcrypt.\n   *\n   * @param options - The options for hashing the password.\n   * @param options.password - The password to be hashed. Can be a string or a Buffer.\n   *\n   * @returns A Promise that resolves to the hashed password as a string.\n   */\n  public async hashPassword({\n    password,\n  }: {\n    password: string | Buffer;\n  }): Promise {\n    const salt = await bcrypt.genSalt();\n    const hashed = bcrypt.hash(password, salt);\n\n    return hashed;\n  }\n\n  /**\n   * Compares a given password with its hashed version.\n   *\n   * @param password - The password to compare. It can be a string or a Buffer.\n   * @param hashedPassword - The hashed version of the password to compare against.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the password matches the hashed password.\n   */\n  comparePasswords({\n    password,\n    hashedPassword,\n  }: {\n    password: string | Buffer;\n    hashedPassword: string;\n  }): Promise {\n    const compare = bcrypt.compare(password, hashedPassword);\n    return compare;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-many-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Array of users to be created', type: undefined, required: true, isArray: true, items: undefined, example: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-many-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entity/user.entity';\n\nexport class CreateManyUsersDto {\n  @ApiProperty({\n    description: 'Array of users to be created',\n    type: [CreateUserDto],\n    required: true,\n    isArray: true,\n    items: {\n      type: 'User',\n    },\n    example: [\n      {\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john@doe.com',\n        password: 'nestjsIS6@awesome',\n      },\n      {\n        firstName: 'Jane',\n        lastName: 'Doe',\n        email: 'jane@doe.com',\n        password: 'nestjsIS6@awesome',\n      },\n    ],\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMetaOptionsDto.html":{"url":"classes/CreateMetaOptionsDto.html","title":"class - CreateMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-meta-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from \"class-validator\";\n\nexport class CreateMetaOptionsDto {\n    // @ApiProperty()\n    // @IsString()\n    // @MinLength(4)\n    // @IsNotEmpty()\n    // key: string;\n  \n    // @ApiProperty()\n    // @IsNotEmpty()\n    // value: any;\n  \n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the id of the author of the post', example: 123, type: 'integer', required: true})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the additional options for the post', example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}', type: 'string', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostTypes, description: 'Possible tags for a post, range: ['post', 'page', 'story', 'series']', type: 'string'})@IsString()@IsEnum(PostTypes)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the date when the post was published', example: '2024-03-16T12:00:00+0000', format: 'date-time', type: 'string'})@IsISO8601()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the excerpt of the post. Serialize your json content or else there will be an error', example: '{\n \"@context\": \"https://schema.org\", \n \"@type\": \"Person\"\n}', format: 'json', type: 'string'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(255)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']', type: 'string'})@IsString()@IsNotEmpty()@IsEnum(PostStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined, type: 'array', required: false})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is a title of the post', example: 'Hello World', type: 'string'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { CreateMetaOptionsDto } from 'src/meta-options/dtos/create-meta-options.dto';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is a title of the post',\n    example: 'Hello World',\n    type: 'string',\n\n    // default: \"Hello World\"\n  }) // this adds the value to the post documentation\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostTypes,\n    description:\n      \"Possible tags for a post, range: ['post', 'page', 'story', 'series']\",\n    type: 'string',\n  })\n  @IsString()\n  //   @IsEnum(['post', 'page', 'story', 'series'])\n  @IsEnum(PostTypes)\n  @IsNotEmpty()\n  postType: PostTypes;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description:\n      \"Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']\",\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'This is the excerpt of the post. Serialize your json content or else there will be an error',\n    example:\n      '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\", \\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}',\n    format: 'json',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'This is the date when the post was published',\n    example: '2024-03-16T12:00:00+0000',\n    format: 'date-time',\n    type: 'string',\n  })\n  @IsISO8601()\n  @IsNotEmpty()\n  publishedOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1, 4],\n    type: 'array',\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true }) // validate each item in the array as a string\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    description: 'This is the additional options for the post',\n    example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n    type: 'string',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'The meta value is a json object',\n          example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n        },\n      },\n      required: ['key', 'value'],\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreateMetaOptionsDto)\n  metaOptions?: CreateMetaOptionsDto | null;\n\n  @ApiProperty({\n    description: 'This is the id of the author of the post',\n    example: 123,\n    type: 'integer',\n    required: true,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Tag Description', example: 'A modern programming language', type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)@Matches(/^https?:\\/\\/[^\\s]+$/, {message: 'Invalid URL format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the tag', example: 'TypeScript', type: 'string'})@IsNotEmpty()@IsString()@MinLength(3)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(512)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty({\n    description: 'Name of the tag',\n    example: 'TypeScript',\n    type: 'string',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(255)\n  name: string;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(512)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiPropertyOptional({\n    description: 'Tag Description',\n    example: 'A modern programming language',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional({})\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  @Matches(/^https?:\\/\\/[^\\s]+$/, {\n    message: 'Invalid URL format',\n  })\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/provider/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/user/provider/create-user.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/provider/create-user.provider.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../entity/user.entity';\nimport { Repository } from 'typeorm';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    // injecting user service repository dependency\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    // injecting hashing provider\n    @Inject(forwardRef(() => HashingProvider)) // doing this because this is a circular dependency\n    private hashingProvider: HashingProvider,\n  ) {}\n\n  public async createUser({\n    user,\n  }: {\n    user: CreateUserDto;\n  }): Promise {\n    // check user\n    let existingUser = undefined;\n\n    try {\n      existingUser = await this.userRepository.findOne({\n        where: { email: user.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException('Request timeout', {\n        cause: error,\n        description: 'Request timeout',\n      });\n    }\n\n    // handle exception\n    if (existingUser) {\n      throw new HttpException('Email already exists', HttpStatus.CONFLICT);\n    }\n\n    const hashedPassword = await this.hashingProvider.hashPassword({\n      password: user.password,\n    });\n\n    user.password = hashedPassword\n\n    // create a new user\n    const newUser = await this.userRepository.create(user);\n    await this.userRepository.save(newUser);\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto.html":{"url":"classes/GetPostsBaseDto.html","title":"class - GetPostsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger'; // importing from swagger so i get automatic documentation\nimport { PaginationQueryDto } from 'src/global/pagination/dto/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsQueryDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsQueryDto.html":{"url":"classes/GetPostsQueryDto.html","title":"class - GetPostsQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger'; // importing from swagger so i get automatic documentation\nimport { PaginationQueryDto } from 'src/global/pagination/dto/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsQueryDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 123, type: Number})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/get-users-param.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 123,\n    type: Number,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number) // transform string to number if provided\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePasswords\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:19\n                        \n                    \n\n\n            \n                \n                        Compares a plain text password with a hashed password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                [object Object]\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text password to compare. Can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to a boolean indicating whether the passwords match.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n  abstract hashPassword({\n    password,\n  }: {\n    password: string | Buffer;\n  }): Promise;\n\n  /**\n   * Compares a plain text password with a hashed password.\n   * \n   * @param options - The options for password comparison.\n   * @param options.password - The plain text password to compare. Can be a string or a Buffer.\n   * @param options.hashedPassword - The hashed password to compare against.\n   * @returns A promise that resolves to a boolean indicating whether the passwords match.\n   */\n  abstract comparePasswords({\n    password,\n    hashedPassword,\n  }: {\n    password: string | Buffer;\n    hashedPassword: string;\n  }): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/entity/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  }) // creating bi-directional relationship\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOptions(createMetaOptionsDto: CreateMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionsDto\n                                            \n                                                            CreateMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private metaOptionsService: MetaOptionsService) {}\n\n  @Post()\n  createMetaOptions(@Body() createMetaOptionsDto: CreateMetaOptionsDto) {\n    const metaOptions = this.metaOptionsService.create({\n      metaOptions: createMetaOptionsDto,\n    });\n\n    return metaOptions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './entity/meta-option.entity';\nimport { MetaOptionsController } from './meta-options.controller';\n\n@Module({\n  providers: [MetaOptionsService],\n  controllers: [MetaOptionsController],\n  exports: [MetaOptionsService],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/meta-options.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\nimport { MetaOption as MetaOptionsRepository } from './entity/meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    // injecting meta options service repository dependency\n    @InjectRepository(MetaOptionsRepository)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create({ metaOptions }: { metaOptions: CreateMetaOptionsDto }) {\n    const createdMetaOption =\n      await this.metaOptionsRepository.create(metaOptions);\n    await this.metaOptionsRepository.save(createdMetaOption);\n\n    return createdMetaOption;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/interface/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[]; // replace with your actual entity type... it would be generic\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    prev: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaginationModule_exports\n\n\n\n\nPaginationService \n\nPaginationService \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationService  -->\n\nPaginationModule->PaginationService \n\n\n\n\n\nPaginationService\n\nPaginationService\n\nPaginationModule -->\n\nPaginationService->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/global/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationService } from './pagination.service';\n\n@Module({\n  providers: [PaginationService],\n  exports: [PaginationService],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/dto/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of items to fetch', example: 10, type: Number, default: 10, minimum: 1})@IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/global/pagination/dto/pagination-query.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of page to fetch', example: 10, type: Number, default: 10, minimum: 1})@IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/global/pagination/dto/pagination-query.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsOptional, IsPositive } from 'class-validator';\n\nexport class PaginationQueryDto {\n  @ApiPropertyOptional({\n    description: 'Number of items to fetch',\n    example: 10,\n    type: Number,\n    default: 10,\n    minimum: 1,\n  })\n  @IsOptional()\n  @IsPositive()\n  limit?: number = 10;\n\n  @ApiPropertyOptional({\n    description: 'Number of page to fetch',\n    example: 10,\n    type: Number,\n    default: 10,\n    minimum: 1,\n  })\n  @IsOptional()\n  @IsPositive()\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationService.html":{"url":"injectables/PaginationService.html","title":"injectable - PaginationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/pagination.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/global/pagination/pagination.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/global/pagination/pagination.service.ts:16\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PaginationQueryDto } from './dto/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport { Paginated } from './interface/paginated.interface';\n\n@Injectable()\nexport class PaginationService {\n  constructor(\n    // injecting the request object\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  public async paginateQuery({\n    paginationQuery,\n    repository,\n  }: {\n    paginationQuery: PaginationQueryDto;\n    repository: Repository;\n  }): Promise> {\n    const { limit, page } = paginationQuery;\n\n    const query = await repository.find({\n      skip: (page - 1) * limit,\n      take: limit,\n    });\n\n    // creating url\n\n    const baseUrl =\n      this.request.protocol + '://' + this.request.headers.host + '/';\n\n    const newUrl = new URL(this.request.url, baseUrl);\n\n    const totalItems = await repository.count({});\n    const totalPages = Math.ceil(totalItems / limit);\n    const nextPage = totalPages === page ? page : page + 1;\n    const prevPage = page === 1 ? page : page - 1;\n\n    const finalResponse: Paginated = {\n      data: query,\n      meta: {\n        itemsPerPage: limit,\n        totalItems,\n        currentPage: page,\n        totalPages,\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?page=1&limit=${limit}}`,\n        last: `${newUrl.pathname}?page=${totalPages}&limit=${limit}`,\n        current: `${newUrl.pathname}?page=${page}&limit=${limit}`,\n        next: `${newUrl.pathname}?page=${nextPage}&limit=${limit}`,\n        prev: `${newUrl.pathname}?page=${prevPage}&limit=${limit}`,\n      },\n    };\n\n    console.log({ baseUrl, requestUrl: this.request.url, newUrl });\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Update post with a specific id', example: 123, type: 'number'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n// import { PartialType } from '@nestjs/mapped-types'; \n// we are using the import from swagger so it shows up in our documentation, it still works likes expected as the import from @nestjs/mapped-types\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'Update post with a specific id',\n    example: 123,\n    type: 'number',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entity/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostTypes, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tags => tags.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { MetaOption } from '../../meta-options/entity/meta-option.entity';\nimport { User } from 'src/user/entity/user.entity';\nimport { Tag } from 'src/tags/entity/tags.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostTypes,\n    default: PostTypes.POST,\n  })\n  postType: PostTypes;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: false,\n  })\n  publishedOn: Date;\n\n  @ManyToMany(() => Tag, (tags) => tags.posts, {\n    eager: true,\n  })\n  @JoinTable() // this must be on the owning side of the relationship and join table is used for M2M relationships, it also creates a new table for the relationship\n  tags?: Tag[];\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    // cascade: ['remove'] // setting cascade to work for a few methods\n    cascade: true, // this enables us create data in the metaoption table by just passing the value\n    eager: true, // loading the metaOptions eagerly instead of lazy loading it\n  })\n  // @JoinColumn()\n  metaOptions?: MetaOption;\n\n  // metaOptions?: CreatePostDtoWithMeta[];\n\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                deletePost\n                            \n                            \n                                    \n                                    \n                                    \n                                getAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post'})@ApiResponse({status: undefined, description: 'Created post', type: CreatePostDto})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:72\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\nThis function handles the creation of a new post by processing the provided CreatePostDto.\nIt logs the received data and returns a confirmation message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the details of the post to be created.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the post request was received.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post'})@ApiResponse({status: undefined, description: 'Deleted post'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(userId: number, postQuery: GetPostsQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Retrieves all posts for a specific user'})@ApiResponse({status: undefined, description: 'All posts', type: undefined})@Get(':userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\nThis function handles GET requests to fetch all posts associated with a given user ID.\nIt logs the user ID for which posts are being retrieved and then calls the post service\nto fetch the posts.\nExample :                                representing all posts for the specified user.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user whose posts are to be retrieved.\n\n\n                                            \n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CreatePostDto objects,\nrepresenting all posts for the specified user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(updatePostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates a post'})@ApiResponse({status: undefined, description: 'Updated post', type: CreatePostDto})@Patch('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:96\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\nThis function handles PATCH requests to update an existing post using the provided data.\nIt logs the update data received and processes the partial post update through the\nPatchPostDto data transfer object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the fields to be updated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the patch request was received.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsQueryDto } from './dtos/get-posts.dto';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   *\n   * This function handles GET requests to fetch all posts associated with a given user ID.\n   * It logs the user ID for which posts are being retrieved and then calls the post service\n   * to fetch the posts.\n   *\n   * @param {number} userId - The ID of the user whose posts are to be retrieved.\n   * @returns {Promise} A promise that resolves to an array of CreatePostDto objects,\n   *                                     representing all posts for the specified user.\n   */\n\n  @ApiOperation({\n    summary: 'Retrieves all posts for a specific user',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'All posts',\n    type: [CreatePostDto],\n  })\n  @Get(':userId?')\n  getAllPosts(\n    @Param('userId') userId: number,\n    @Query() postQuery: GetPostsQueryDto,\n  ) {\n    console.log({ postQuery });\n\n    return this.postService.getAllPosts({ userId, queryParams: postQuery});\n  }\n\n  /**\n   * Creates a new post.\n   *\n   * This function handles the creation of a new post by processing the provided CreatePostDto.\n   * It logs the received data and returns a confirmation message.\n   *\n   * @param {CreatePostDto} createPostDto - The data transfer object containing the details of the post to be created.\n   * @returns {string} A confirmation message indicating that the post request was received.\n   */\n  @ApiOperation({\n    summary: 'Creates a new post',\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Created post',\n    type: CreatePostDto,\n  })\n  @Post('')\n  createPost(@Body() createPostDto: CreatePostDto) {\n    const createdPost = this.postService.create({ createPost: createPostDto });\n    return createdPost;\n  }\n\n  /**\n   * Updates an existing post.\n   *\n   * This function handles PATCH requests to update an existing post using the provided data.\n   * It logs the update data received and processes the partial post update through the\n   * PatchPostDto data transfer object.\n   *\n   * @param {PatchPostDto} updatePostDto - The data transfer object containing the fields to be updated.\n   * @returns {string} A confirmation message indicating that the patch request was received.\n   */\n  @ApiOperation({\n    summary: 'Updates a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Updated post',\n    type: CreatePostDto,\n  })\n  @Patch('')\n  updatePost(@Body() updatePostDto: PatchPostDto) {\n    // console.log({updatePostDto})\n    const updatedPost = this.postService.update({ updatePost: updatePostDto });\n    return updatedPost;\n  }\n\n  @ApiOperation({\n    summary: 'Deletes a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Deleted post',\n  })\n  @Delete('')\n  deletePost(@Query('id', ParseIntPipe) id: number) {\n    if (!id) {\n      throw new HttpException('No ID Provided', HttpStatus.BAD_REQUEST);\n    }\n\n    const deleteRequest = this.postService.delete({ id });\n\n    return deleteRequest;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_exports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { UserModule } from 'src/user/user.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post as PostEntity } from './entity/post.entity';\nimport { MetaOption } from 'src/meta-options/entity/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/global/pagination/pagination.module';\n\n@Module({\n  imports: [\n    UserModule,\n    TagsModule,\n    PaginationModule,\n    TypeOrmModule.forFeature([PostEntity, MetaOption]),\n  ],\n  controllers: [PostsController],\n  providers: [PostsService],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userServices: UserService, tagsService: TagsService, postRepository: Repository, metaOptionsRepository: Repository, paginationService: PaginationService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userServices\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption as MetaOptionRepository } from 'src/meta-options/entity/meta-option.entity';\nimport { Post, Post as PostRepository } from './entity/post.entity';\nimport { TagsService } from 'src/tags/tags.service';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsQueryDto } from './dtos/get-posts.dto';\nimport { PaginationService } from 'src/global/pagination/pagination.service';\nimport { Paginated } from 'src/global/pagination/interface/paginated.interface';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /**\n     * Repositories Injections\n     */\n\n    // injecting user service (making user of another service (a single dependency injection))\n    private userServices: UserService,\n\n    private tagsService: TagsService,\n\n    /**\n     * Repositories Injections\n     */\n    @InjectRepository(PostRepository)\n    private postRepository: Repository,\n\n    @InjectRepository(MetaOptionRepository)\n    private metaOptionsRepository: Repository,\n\n    // injecting pagination service\n    private paginationService: PaginationService,\n  ) {}\n\n  public async create({ createPost }: { createPost: CreatePostDto }) {\n    const author = await this.userServices.findOneById({\n      id: createPost.authorId,\n    });\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: createPost.tags,\n    });\n\n    const post = await this.postRepository.create({\n      ...createPost,\n      author: author,\n      tags: tags,\n    });\n\n    await this.postRepository.save(post);\n\n    return post;\n  }\n\n  public async update({ updatePost }: { updatePost: PatchPostDto }) {\n    // find the tags\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: updatePost.tags,\n    });\n\n    if (!(tags.length > 0)) {\n      throw new HttpException('Tags not found', HttpStatus.NOT_FOUND, {\n        cause: 'Tags not found',\n        description: 'Provide a valid tags to update',\n      });\n    }\n\n    const post = await this.postRepository.findOneBy({ id: updatePost.id });\n\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    }\n\n    post.title = updatePost.title ?? post.title;\n    post.postType = updatePost.postType ?? post.postType;\n    post.slug = updatePost.slug ?? post.slug;\n    post.status = updatePost.status ?? post.status;\n    post.content = updatePost.content ?? post.content;\n    post.schema = updatePost.schema ?? post.schema;\n    post.featuredImageUrl =\n      updatePost.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishedOn = updatePost.publishedOn ?? post.publishedOn;\n    post.tags = updatePost.tags ? tags : post.tags;\n\n    const updatedPost = await this.postRepository.save(post);\n\n    return updatedPost;\n  }\n\n  public async getAllPosts({\n    userId,\n    queryParams,\n  }: {\n    userId: number;\n    queryParams: GetPostsQueryDto;\n  }): Promise> {\n    const { endDate, limit, page, startDate } = queryParams;\n\n    const posts = await this.paginationService.paginateQuery({\n      paginationQuery: {\n        limit,\n        page,\n      },\n      repository: this.postRepository,\n    });\n\n    return posts;\n  }\n\n  public async delete({ id }: { id: number }) {\n    // const post = await this.postRepository.findOneBy({ id });\n\n    // if (!post) {\n    //   throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    // }\n\n    await this.postRepository.delete({ id });\n\n    // await this.metaOptionsRepository.delete({ id: post.metaOptions.id });\n\n    return { message: 'Post deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\"\n\nexport class SignInDto {\n    @IsNotEmpty()\n    @IsEmail()\n    email: string\n\n    @IsNotEmpty()\n    @IsString()\n    password: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/entity/tags.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                deletedDate\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'json',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n    length: 1024,\n  })\n  featuredImageUrl?: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @DeleteDateColumn({})\n  deletedDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteTag\n                            \n                            \n                                    \n                                    \n                                    Async\n                                softDeleteTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createTag: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a tag'})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTag\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a tag by id'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        softDeleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDeleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Soft Delete a tag by id'})@Delete('/soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { ApiOperation } from '@nestjs/swagger';\nimport { TagsService } from './tags.service';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(private tagsService: TagsService) {}\n\n  @ApiOperation({ summary: 'Create a tag' })\n  @Post('')\n  createPost(@Body() createTag: CreateTagDto) {\n    const createdTags = this.tagsService.createTag({ tag: createTag });\n    return createdTags;\n  }\n\n  @ApiOperation({ summary: 'Delete a tag by id' })\n  @Delete('')\n  async deleteTag(@Query('id', ParseIntPipe) id: number) {\n    return await this.tagsService.delete({ id });\n  }\n\n  @ApiOperation({ summary: 'Soft Delete a tag by id' })\n  @Delete('/soft-delete')\n  async softDeleteTag(@Query('id', ParseIntPipe) id: number) {\n    return await this.tagsService.softDelete({ id });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsService } from './tags.service';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './entity/tags.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Tag])],\n  controllers: [TagsController],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTags\n                            \n                            \n                                    Public\n                                    Async\n                                getTagById\n                            \n                            \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTags()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getTagById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTagById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { In, Repository } from 'typeorm';\nimport { Tag as TagRepository } from './entity/tags.entity';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    @InjectRepository(TagRepository)\n    private tagsRepository: Repository,\n  ) {}\n\n  public async createTag({ tag }: { tag: CreateTagDto }) {\n    const existingTags = await this.tagsRepository.findOne({\n      where: { name: tag.name },\n    });\n\n    if (existingTags) {\n      throw new HttpException('Tag already exists', HttpStatus.CONFLICT);\n    }\n\n    const createdTags = await this.tagsRepository.create(tag);\n\n    await this.tagsRepository.save(createdTags);\n\n    return createdTags;\n  }\n\n  public async getAllTags() {\n    const tags = await this.tagsRepository.find({});\n\n    return tags;\n  }\n\n  public async getTagById({ id }: { id: number }) {\n    const tag = await this.tagsRepository.findOneBy({ id });\n\n    if (!tag) {\n      throw new HttpException('Tag not found', HttpStatus.NOT_FOUND);\n    }\n\n    return tag;\n  }\n\n  public async findMultipleTags({ tags }: { tags: number[] }) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags),\n      },\n    });\n\n    return results;\n  }\n\n  public async delete({ id }: { id: number }) {\n    await this.tagsRepository.delete({ id });\n\n    return { message: 'Tag deleted successfully', status: 'success', id };\n  }\n\n  public async softDelete({ id }: { id: number }) {\n    await this.tagsRepository.softDelete({ id });\n\n    return { message: 'Tag soft deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 60, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, posts => posts.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    unique: true,\n    nullable: false,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 60,\n    nullable: false,\n  })\n  password: string;\n\n  @OneToMany(() => Post, (posts) => posts.author) // first argument is the one we want to setup a relationship with, second argument is the what references the relationship\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create users', description: 'Create multiple users'})@Auth(AuthType.BEARER)@Post('/create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new user', description: 'Create a new user for the application'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all users', description: 'Get all users with optional pagination'})@ApiResponse({status: 200, description: 'All users', type: CreateUserDto})@ApiQuery({name: 'limit', type: Number, required: false, description: 'Limit the number of returned results', example: 10})@ApiQuery({name: 'page', type: Number, required: false, description: 'The position of the number that you want the api to return', example: 1})@Get('/:id?')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n  UseGuards,\n  SetMetadata,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-user.dto';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { Auth, AuthType } from 'src/auth/decorators/auth.decorator';\n\n@Controller('users')\n@ApiTags('Users') // with the updated version of @nestjs/swagger there is no need to use @ApiTags\nexport class UserController {\n  /**\n   * Final Endpoint - /users/id?limit=10&page=1\n   * Parama id - optional, convert to integer, cannot have a default value\n   * Query limit - integer, default 10\n   * Query page - integer, default value 1\n   * ==> USE CASES\n   * /users/ -> return all users with default pagination\n   * /users/1223 -> returns one user whos id is 1234\n   * /users?limit=10&page=2 -> return page 2 with limit of pagination 10\n   */\n\n  constructor(private readonly userService: UserService) {}\n\n  @ApiOperation({\n    summary: 'Get all users',\n    description: 'Get all users with optional pagination',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'All users',\n    type: CreateUserDto,\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: Number,\n    required: false,\n    description: 'Limit the number of returned results',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    required: false,\n    description: 'The position of the number that you want the api to return',\n    example: 1,\n  })\n  @Get('/:id?')\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    // console.log(getUserParamDto);\n    // console.log(`Limit: ${limit}, Page: ${page}`);\n\n    const findAll = this.userService.findAll({\n      page,\n      limit,\n      userParamsDTO: getUserParamDto,\n    });\n\n    return findAll;\n  }\n\n  @ApiOperation({\n    summary: 'Create a new user',\n    description: 'Create a new user for the application',\n  })\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    const createUser = this.userService.createUser({ user: createUserDto });\n    return createUser;\n  }\n\n  @ApiOperation({\n    summary: 'Create users',\n    description: 'Create multiple users',\n  })\n  // @UseGuards(AccessTokenGuard)\n  @Auth(AuthType.BEARER)\n  @Post('/create-many')\n  public createManyUsers(@Body() createUsersDto: CreateManyUsersDto) {\n    console.log('hitting it')\n    // const createUsers = this.userService.createMany({ users: createUsersDto });\n    // return createUsers;\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n    // return 'You sent a patch request to users endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCreateMany.html":{"url":"injectables/UserCreateMany.html","title":"injectable - UserCreateMany","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCreateMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-create-many.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-create-many.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user-create-many.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { DataSource } from 'typeorm';\nimport { User } from './entity/user.entity';\nimport { CreateManyUsersDto } from './dtos/create-many-user.dto';\n\n@Injectable()\nexport class UserCreateMany {\n  constructor(\n    // injecting datasource for typeorm transactions\n    private dataSource: DataSource,\n  ) {}\n\n  public async createMany({ users }: { users: CreateManyUsersDto }) {\n    // create query runner instance\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    // connect query runner to datasource\n    try {\n      await queryRunner.connect();\n    } catch (error: any) {\n      throw new HttpException(\n        'Database connection failed',\n        HttpStatus.REQUEST_TIMEOUT,\n        {\n          cause: error.message,\n          description: String(error),\n        },\n      );\n    }\n\n    // start transaction\n    try {\n      await queryRunner.startTransaction();\n    } catch (error: any) {\n      throw new HttpException(\n        'Failed to start QueryRunner Transaction',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n        {\n          cause: error.message,\n          description: String(error),\n        },\n      );\n    }\n\n    let newUser: User[] = [];\n    try {\n      // if successful commit the transaction\n      for (let user of users.users) {\n        const newUserInstance = queryRunner.manager.create(User, user); // entity and object\n        const savedNewUserInstance =\n          await queryRunner.manager.save(newUserInstance); // save entity to the database\n\n        newUser.push(savedNewUserInstance); // keeping track of the users we have created\n      }\n\n      await queryRunner.commitTransaction();\n    } catch (error: any) {\n      // if failed rollback transaction\n      await queryRunner.rollbackTransaction();\n\n      throw new HttpException('Transaction Failed', HttpStatus.BAD_REQUEST, {\n        cause: error.message,\n        description: String(error),\n      });\n    } finally {\n      // release connection\n      try {\n        await queryRunner.release();\n      } catch (error: any) {\n        throw new HttpException(\n          'Failed to release QueryRunner connection',\n          HttpStatus.INTERNAL_SERVER_ERROR,\n          {\n            cause: error.message,\n            description: String(error),\n          },\n        );\n      }\n    }\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nUserCreateMany\n\nUserCreateMany\n\nUserModule -->\n\nUserCreateMany->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            UserCreateMany\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entity/user.entity';\nimport { ConfigModule, ConfigType } from '@nestjs/config';\nimport { UserCreateMany } from './user-create-many';\nimport { CreateUserProvider } from './provider/create-user.provider';\nimport profileConfig from './config/profile.config';\nimport jwtConfig from 'src/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { APP_GUARD } from '@nestjs/core';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule), // for dependency injection (circular dependency injection)\n    TypeOrmModule.forFeature([User]), // for repository (entity) injection\n    ConfigModule.forFeature(profileConfig),\n    // ConfigModule.forFeature(jwtConfig),\n    // JwtModule.registerAsync({\n    //   imports: [ConfigModule.forFeature(jwtConfig)],\n    //   useFactory: async (jwtConfiguration: ConfigType) => ({\n    //     secret: jwtConfiguration.jwtSecret,\n    //     signOptions: {\n    //       audience: jwtConfiguration.jwtTokenAudience,\n    //       issuer: jwtConfiguration.jwtTokenIssuer,\n    //       expiresIn: jwtConfiguration.jwtTokenExpiration,\n    //     },\n    //   }),\n    //   inject: [jwtConfig.KEY],\n    // }),\n  ],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    UserCreateMany,\n    CreateUserProvider,\n    // {\n    //   provide: APP_GUARD,\n    //   useClass: AccessTokenGuard\n    // }, // setting a guard globally (this protect the entire application, everywhere the userModule is been imported)\n  ],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    Public\n                                    Async\n                                findUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository, configService: ConfigService, profileConfiguration: ConfigType<>, usersCreateMany: UserCreateMany, createUserProvider: CreateUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateMany\n                                                  \n                                                        \n                                                                        UserCreateMany\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/auth.service';\nimport { DataSource, Repository } from 'typeorm';\nimport { User } from './entity/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from './config/profile.config';\nimport { UserCreateMany } from './user-create-many';\nimport { CreateManyUsersDto } from './dtos/create-many-user.dto';\nimport { CreateUserProvider } from './provider/create-user.provider';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => AuthService))\n    private authService: AuthService,\n\n    // injecting user service repository dependency\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    // injecting environment variables\n    private configService: ConfigService,\n\n    // injecting module specific configuration dependencies (environment variables)\n    @Inject(profileConfig.KEY)\n    private profileConfiguration: ConfigType,\n\n    private usersCreateMany: UserCreateMany,\n\n    private createUserProvider: CreateUserProvider,\n  ) {}\n\n  public async createUser({\n    user,\n  }: {\n    user: CreateUserDto;\n  }): Promise {\n    return await this.createUserProvider.createUser({ user });\n  }\n\n  public findAll({\n    userParamsDTO,\n    limit,\n    page,\n  }: {\n    userParamsDTO: GetUsersParamDto;\n    limit: number;\n    page: number;\n  }) {\n    const environment = this.configService.get('S3_BUCKET');\n    console.log(`Environment: ${environment}`);\n\n    console.log('NODE_ENV: ', process.env.NODE_ENV);\n\n    console.log('Profile: ', this.profileConfiguration);\n\n    throw new HttpException(\n      'Api endpoint does not exist',\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        description: 'Occurred because the API endpoint was deprecated',\n        cause: 'Api endpoint does not exist',\n      },\n    );\n  }\n\n  public async findOneById({ id }: { id: number }) {\n    const user = await this.userRepository.findOneBy({ id });\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    return user;\n  }\n\n  public async findUserByEmail({ email }: { email: string }) {\n    try {\n      const user = await this.userRepository.findOneBy({ email });\n\n      if (!user) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n\n      return user;\n    } catch (error: any) {\n      throw new RequestTimeoutException('Timeout occurred');\n    }\n  }\n\n  public async createMany({ users }: { users: CreateManyUsersDto }) {\n    return await this.usersCreateMany.createMany({ users });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/global/pagination/dto/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/global/pagination/interface/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/global/pagination/pagination.service.ts\n            \n            injectable\n            PaginationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-meta-options.dto.ts\n            \n            class\n            CreateMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/entity/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsQueryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/entity/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/entity/tags.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tags/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/dtos/create-many-user.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/provider/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user-create-many.ts\n            \n            injectable\n            UserCreateMany\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth.decorator.ts)\n                        \n                        \n                            PostStatus   (src/.../posts.enums.ts)\n                        \n                        \n                            PostTypes   (src/.../posts.enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 BEARER\n                            \n                        \n                        \n                            \n                                Value : bearer\n                            \n                        \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n            \n        \n\n    src/posts/enums/posts.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PostTypes\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationService \n\nPaginationService \n\nPaginationService  -->\n\nPaginationModule->PaginationService \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nPaginationModule -->\n\nPaginationService->PaginationModule\n\n\n\nAppModule -->\n\nPaginationService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nUserCreateMany\n\nUserCreateMany\n\nUserModule -->\n\nUserCreateMany->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.decorator.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) => SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
