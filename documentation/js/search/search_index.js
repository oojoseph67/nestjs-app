var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.045,1,2.251]],["body/controllers/AppController.html",[0,1.712,1,3.686,2,1.486,3,0.416,4,0.371,5,0.371,6,3.792,7,0.563,8,1.832,9,5.294,10,1.211,11,0.026,12,0.787,13,4.491,14,1.591,15,1.712,16,0.514,17,0.983,18,3.324,19,3.792,20,0.416,21,0.052,22,2.485,23,3.332,24,1.591,25,4.491,26,0.021,27,0.021]],["title/modules/AppModule.html",[28,1.119,29,2.251]],["body/modules/AppModule.html",[0,0.849,1,3.116,2,1.317,3,0.255,4,0.227,5,0.329,11,0.027,16,0.59,17,0.601,18,3.144,19,2.321,20,0.255,21,0.032,26,0.015,27,0.015,28,1.803,29,4.363,30,1.203,31,1.203,32,1.401,33,1.401,34,1.203,35,2.387,36,1.401,37,2.321,38,2.321,39,2.321,40,3.144,41,3.433,42,3.433,43,3.144,44,2.897,45,2.03,46,1.401,47,1.401,48,2.748,49,2.829,50,2.829,51,2.829,52,2.841,53,2.748,54,2.748,55,2.748,56,2.748,57,2.748,58,1.661,59,1.12,60,1.878,61,2.406,62,2.321,63,2.748,64,2.748,65,2.748,66,2.748,67,2.748,68,2.321,69,2.321,70,2.748,71,1.12,72,2.748,73,2.748,74,2.321,75,2.954,76,2.748,77,0.445,78,3.982,79,2.748,80,2.748,81,2.748,82,2.748,83,2.039,84,1.661,85,2.748,86,2.321,87,2.039,88,2.321,89,1.521,90,2.748,91,2.748,92,2.204,93,2.748,94,1.401,95,2.321,96,2.748,97,2.954,98,2.748,99,1.401,100,1.043,101,2.039,102,2.748,103,2.748,104,2.748,105,2.039]],["title/injectables/AppService.html",[18,1.872,106,1.119]],["body/injectables/AppService.html",[3,0.434,4,0.387,5,0.387,7,0.587,8,1.879,9,5.37,11,0.026,12,0.82,14,1.658,15,1.756,16,0.434,17,1.024,18,3.144,20,0.434,21,0.054,24,1.658,26,0.022,27,0.022,106,1.879,107,2.387,108,3.953,109,4.681,110,3.953,111,3.953]],["title/controllers/AuthController.html",[0,1.045,112,2.251]],["body/controllers/AuthController.html",[0,1.275,2,1.365,3,0.383,4,0.341,5,0.341,7,0.517,8,1.737,10,1.113,11,0.027,12,0.723,14,1.462,15,1.623,16,0.487,17,0.903,20,0.383,21,0.048,22,2.283,24,1.462,26,0.02,27,0.02,77,0.851,83,3.061,84,2.493,112,3.495,113,3.061,114,2.493,115,4.126,116,4.435,117,4.126,118,4.763,119,5.252,120,4.126,121,1.681,122,1.462,123,1.039,124,2.493,125,1.113,126,2.946,127,3.484,128,1.275,129,1.191,130,4.126,131,4.126,132,4.126]],["title/modules/AuthModule.html",[28,1.119,40,1.872]],["body/modules/AuthModule.html",[2,1.69,3,0.366,4,0.326,5,0.326,11,0.026,16,0.555,17,0.865,20,0.366,21,0.046,26,0.02,27,0.02,28,1.873,30,1.73,31,1.73,32,2.015,33,2.015,34,1.73,35,2.886,36,2.886,40,3.575,44,2.605,45,2.605,46,2.015,47,2.015,52,2.187,112,3.767,126,3.445,127,3.337,133,3.337,134,3.337,135,3.337,136,3.952,137,3.4,138,3.952,139,3.337,140,2.827,141,3.087,142,2.63]],["title/injectables/AuthService.html",[106,1.119,126,1.724]],["body/injectables/AuthService.html",[3,0.311,4,0.277,5,0.277,7,0.421,8,1.515,11,0.027,12,0.914,14,1.623,15,1.612,16,0.425,17,0.734,20,0.311,21,0.039,24,1.848,26,0.018,27,0.018,75,2.488,77,0.908,83,3.399,84,3.153,86,2.832,92,1.856,106,1.515,107,1.71,116,4.956,121,1.866,122,1.623,123,1.153,126,2.335,128,1.612,129,0.968,137,2.232,140,2.535,141,2.027,142,2.232,143,2.832,144,3.353,145,5.606,146,2.768,147,3.354,148,2.925,149,3.354,150,3.354,151,3.354,152,3.354,153,2.535,154,3.354,155,2.832,156,2.232,157,2.027,158,2.832,159,2.027,160,2.832,161,2.128,162,2.488,163,3.354,164,3.354,165,1.468,166,3.354,167,3.354,168,3.354,169,3.354,170,3.354,171,3.354,172,3.354]],["title/classes/CreateMetaOptionsDto.html",[21,0.039,173,1.872]],["body/classes/CreateMetaOptionsDto.html",[3,0.399,4,0.355,5,0.355,7,0.539,10,1.16,11,0.027,12,0.754,15,1.82,16,0.399,20,0.399,21,0.063,26,0.021,27,0.021,60,2.543,77,0.697,173,2.984,174,2.029,175,2.361,176,4,177,3.632,178,1.91,179,4.37,180,4.301,181,4.301,182,4,183,3.731,184,2.193,185,3.588,186,2.862,187,3.632,188,3.632,189,2.599]],["title/classes/CreatePostDto.html",[21,0.039,190,1.872]],["body/classes/CreatePostDto.html",[3,0.137,4,0.122,5,0.122,7,0.186,10,1.44,11,0.026,12,0.936,15,1.884,16,0.377,20,0.137,21,0.037,26,0.009,27,0.009,60,1.159,68,2.074,77,1.064,87,2.72,92,2.88,94,1.605,110,2.659,111,2.659,123,1.31,125,1.667,128,0.759,129,1.058,173,2.029,174,0.698,175,0.648,176,1.098,178,1.116,179,1.098,182,1.822,183,2.808,184,0.754,185,3.092,186,2.918,187,1.249,188,1.249,189,1.903,190,1.359,191,4.609,192,1.098,193,3.149,194,3.744,195,2.095,196,2.095,197,2.659,198,2.659,199,2.095,200,2.706,201,2.457,202,2.808,203,3.434,204,2.72,205,1.484,206,3.108,207,1.822,208,2.074,209,3.924,210,1.48,211,1.48,212,3.017,213,3.096,214,1.48,215,1.48,216,2.074,217,2.074,218,3.096,219,2.074,220,3.704,221,1.48,222,1.48,223,2.456,224,1.822,225,3.149,226,3.149,227,2.456,228,1.48,229,1.48,230,1.48,231,3.017,232,2.456,233,2.476,234,3.666,235,3.666,236,2.095,237,2.659,238,2.659,239,1.48,240,1.48,241,2.918,242,3.096,243,2.456,244,2.456,245,2.456,246,2.456,247,1.48,248,1.48,249,2.456,250,2.456,251,3.254,252,2.456,253,2.456,254,1.48,255,1.48,256,1.48,257,1.48,258,2.074,259,1.48,260,3.096,261,3.096,262,1.484,263,2.074,264,2.074,265,2.074,266,1.822,267,2.074,268,1.822,269,1.48,270,3.017,271,2.074,272,2.074,273,2.074,274,1.48,275,1.48,276,3.434,277,2.456,278,1.098,279,1.48,280,1.48,281,1.48,282,1.48,283,2.456,284,1.48,285,1.48,286,2.659,287,2.456,288,2.918,289,2.074,290,1.098,291,1.098,292,1.098,293,2.456,294,1.249,295,1.098,296,3.254,297,0.698,298,1.098,299,1.098,300,1.48,301,1.098,302,1.249,303,2.074,304,1.48,305,1.48,306,1.249,307,1.249,308,1.48,309,2.456,310,1.48,311,1.48,312,1.249,313,1.098,314,1.249,315,3.149,316,1.48,317,1.48,318,2.074]],["title/classes/CreateTagDto.html",[21,0.039,319,2.044]],["body/classes/CreateTagDto.html",[3,0.245,4,0.218,5,0.218,7,0.331,10,1.446,11,0.026,12,0.94,15,1.986,16,0.359,20,0.245,21,0.045,26,0.015,27,0.015,77,1.032,87,2.87,122,1.9,123,1.411,125,1.359,174,1.246,178,1.37,182,2.87,183,2.766,184,1.346,185,3.045,186,3.352,194,2.87,195,3.045,199,3.045,200,3.568,204,2.87,206,3.138,212,2.87,213,3.266,216,3.266,217,3.266,218,4.731,219,3.266,220,4.254,233,2.652,258,3.266,260,4.254,261,4.254,262,3.044,263,3.266,264,3.266,265,3.266,266,2.87,267,3.266,268,2.87,288,3.352,289,3.266,290,1.96,291,1.96,292,1.96,296,3.738,297,1.246,302,2.23,306,2.23,307,2.23,312,2.23,319,2.337,320,4.731,321,2.23,322,2.377,323,3.868,324,3.868,325,3.868,326,2.641,327,2.641,328,2.641,329,3.868,330,2.641,331,3.266,332,2.641,333,2.641,334,2.641,335,2.641,336,2.641,337,2.641,338,2.23,339,2.641]],["title/classes/CreateUserDto.html",[21,0.039,340,1.872]],["body/classes/CreateUserDto.html",[3,0.319,4,0.284,5,0.284,7,0.431,10,1.528,11,0.026,12,0.993,15,1.962,16,0.319,20,0.319,21,0.054,26,0.018,27,0.018,77,0.918,84,3.194,123,1.173,129,1.345,174,1.622,178,1.651,183,3.423,184,1.753,186,3.769,262,2.816,266,3.457,288,3.1,290,2.551,291,2.551,292,2.551,338,3.935,340,2.579,341,4.999,342,2.551,343,3.921,344,3.921,345,4.463,346,3.439,347,3.439,348,3.439,349,3.439,350,3.439,351,3.439,352,3.439,353,5.665,354,4.659,355,4.659,356,4.659,357,4.659,358,4.529,359,4.659,360,4.659,361,4.659,362,3.439,363,4.659,364,5.665,365,3.439,366,3.439]],["title/classes/GetUsersParamDto.html",[21,0.039,367,2.044]],["body/classes/GetUsersParamDto.html",[3,0.374,4,0.333,5,0.333,7,0.505,10,1.087,11,0.026,12,0.706,15,1.246,16,0.53,20,0.374,21,0.067,26,0.02,27,0.02,77,1.01,123,1.303,128,1.927,129,1.8,161,1.964,174,1.901,178,1.833,184,2.055,206,2.638,207,3.839,212,2.99,233,1.765,286,4.369,288,3.443,295,2.99,296,3.839,297,1.901,367,3.127,368,4.369,369,3.443,370,3.403,371,3.839,372,4.031,373,4.031,374,4.031,375,3.403]],["title/entities/MetaOption.html",[100,1.284,376,1.595]],["body/entities/MetaOption.html",[3,0.313,4,0.278,5,0.278,7,0.423,10,1.586,11,0.026,12,1.03,15,1.421,16,0.426,20,0.313,21,0.039,26,0.018,27,0.018,71,1.374,77,0.983,89,1.866,94,2.344,100,1.746,125,1.729,128,1.617,129,1.328,175,2.657,178,1.629,179,3.882,241,3.739,251,3.411,376,2.169,377,3.667,378,2.848,379,4.418,380,4.418,381,4.418,382,3.372,383,3.481,384,3.372,385,2.244,386,3.059,387,3.372,388,2.848,389,4.598,390,4.598,391,3.372,392,3.372,393,4.418,394,3.372,395,2.848,396,3.059,397,3.883,398,3.883,399,2.848,400,3.372,401,3.372,402,3.372,403,2.502]],["title/controllers/MetaOptionsController.html",[0,1.045,50,2.044]],["body/controllers/MetaOptionsController.html",[0,1.233,2,1.32,3,0.37,4,0.33,5,0.33,7,0.5,8,1.701,10,1.076,11,0.026,12,0.699,14,1.414,16,0.527,17,0.873,20,0.37,21,0.046,22,2.209,24,1.414,26,0.02,27,0.02,50,3.107,60,2.683,61,3.107,77,0.646,114,2.412,121,1.626,122,1.414,123,1.005,124,2.412,125,1.534,165,1.747,173,3.583,175,2.251,196,3.785,224,3.815,298,2.961,404,3.37,405,5.141,406,3.991,407,3.991,408,3.148,409,3.37,410,1.883,411,3.991,412,3.991,413,3.991]],["title/modules/MetaOptionsModule.html",[28,1.119,41,2.044]],["body/modules/MetaOptionsModule.html",[2,1.687,3,0.365,4,0.325,5,0.325,11,0.026,16,0.574,17,0.862,20,0.365,21,0.046,26,0.02,27,0.02,28,1.87,30,1.725,31,1.725,32,2.008,33,2.008,34,1.725,35,2.882,36,2.882,41,3.901,45,2.599,46,2.008,47,2.008,50,3.416,52,2.18,58,2.38,59,1.605,60,2.405,61,2.38,62,3.326,175,1.725,376,1.858,408,3.738,409,3.326,414,3.326,415,3.326,416,3.326,417,3.939,418,3.326,419,2.38,420,3.939]],["title/injectables/MetaOptionsService.html",[106,1.119,408,1.872]],["body/injectables/MetaOptionsService.html",[3,0.33,4,0.294,5,0.294,7,0.446,8,1.578,11,0.027,12,0.836,14,1.261,16,0.556,17,0.779,20,0.33,21,0.041,24,1.261,26,0.018,27,0.018,59,1.45,60,2.25,61,3.25,71,1.45,77,0.931,99,2.742,106,1.578,107,1.815,121,1.943,122,1.689,123,1.201,140,1.97,144,2.976,146,2.882,153,2.639,156,2.368,157,2.151,159,2.151,165,1.558,173,2.639,175,2.355,196,3.173,224,2.641,298,2.641,376,1.679,408,2.639,410,1.679,418,3.006,419,2.151,421,3.006,422,3.579,423,3.559,424,3.315,425,3.559,426,4.541,427,3.006,428,3.559,429,2.368,430,2.368,431,3.559,432,4.769,433,3.173,434,3.559,435,3.559]],["title/classes/PatchPostDto.html",[21,0.039,436,2.251]],["body/classes/PatchPostDto.html",[3,0.355,4,0.316,5,0.316,7,0.48,10,1.032,11,0.026,12,0.671,16,0.584,20,0.355,21,0.058,26,0.019,27,0.019,77,0.903,97,2.84,99,1.952,125,1.35,128,1.896,129,1.61,174,1.806,178,1.773,183,3.024,184,1.952,185,3.33,190,2.118,192,2.84,204,2.84,206,2.551,207,3.713,233,1.676,297,1.806,301,2.84,371,3.713,436,3.33,437,4.226,438,4.226,439,5.004,440,4.226,441,3.828,442,3.828,443,4.226,444,2.84,445,5.004,446,3.713,447,3.713,448,3.828,449,3.828,450,3.828,451,3.828,452,3.828,453,3.828,454,3.828]],["title/classes/PatchUserDto.html",[21,0.039,455,2.251]],["body/classes/PatchUserDto.html",[3,0.448,4,0.399,5,0.399,11,0.026,16,0.537,20,0.448,21,0.056,26,0.022,27,0.022,99,2.462,174,2.278,340,2.673,342,3.583,438,4.888,443,4.078,446,3.583,447,3.583,455,3.852,456,4.078,457,5.789,458,3.583]],["title/entities/Post.html",[100,1.284,125,0.912]],["body/entities/Post.html",[3,0.182,4,0.162,5,0.162,7,0.246,8,0.65,10,1.593,11,0.027,12,1.035,15,1.761,16,0.436,20,0.182,21,0.023,26,0.012,27,0.012,60,0.926,71,0.8,77,1.032,89,1.087,92,3.392,94,2.905,99,1.001,100,1.172,123,1.435,125,0.833,128,1.18,129,0.892,161,1.896,178,1.094,189,1.187,194,2.832,195,2.54,196,3.477,197,3.223,198,3.223,199,2.54,200,2.54,201,2.306,202,2.306,203,3.223,205,2.306,231,3.49,241,2.055,270,3.49,278,2.291,294,1.658,299,3.21,303,4.57,322,2.041,376,2.219,377,1.187,383,2.54,385,3.601,386,4.117,388,1.658,396,3.704,397,2.608,398,2.608,399,3.654,403,2.291,419,1.187,459,1.658,460,1.964,461,3.088,462,4.994,463,1.964,464,3.654,465,1.964,466,3.706,467,3.706,468,2.608,469,1.964,470,1.964,471,3.088,472,1.964,473,1.964,474,3.088,475,1.964,476,1.964,477,2.291,478,2.291,479,1.964,480,1.964,481,1.964,482,1.964,483,1.964,484,2.608,485,1.964,486,3.088,487,3.088,488,3.088,489,1.964,490,1.964,491,1.964,492,1.964,493,1.964,494,1.658,495,1.658,496,3.223,497,1.964,498,1.964,499,1.964,500,1.658,501,1.001,502,1.964,503,1.964,504,1.964,505,1.964,506,1.964,507,1.658,508,1.964,509,3.088,510,1.964,511,1.964,512,1.964,513,1.964]],["title/controllers/PostsController.html",[0,1.045,49,2.044]],["body/controllers/PostsController.html",[0,0.493,2,0.527,3,0.148,4,0.132,5,0.132,7,0.2,8,0.864,10,1.035,11,0.027,12,0.672,14,1.838,15,1.025,16,0.393,17,0.349,20,0.148,21,0.019,22,0.882,23,1.183,24,1.359,26,0.01,27,0.01,49,1.578,77,0.865,97,1.938,105,3.374,114,0.963,121,1.563,122,1.359,123,0.966,124,0.963,125,1.715,128,1.69,129,1.386,157,1.578,161,2.076,165,1.143,190,3.275,201,2.318,206,0.813,233,2.394,262,2.748,276,2.205,278,2.846,297,0.752,318,3.84,371,1.938,375,3.575,410,0.752,436,3.195,440,3.84,444,1.938,500,3.239,501,2.448,507,4.713,514,1.346,515,4.438,516,2.462,517,2.612,518,2.205,519,2.612,520,1.594,521,3.318,522,3.318,523,3.836,524,1.594,525,1.594,526,4.547,527,2.612,528,2.612,529,4.547,530,5.011,531,4.547,532,4.547,533,3.836,534,2.612,535,3.836,536,3.575,537,1.594,538,2.612,539,2.205,540,1.594,541,1.594,542,1.594,543,1.594,544,1.594,545,1.594,546,2.612,547,3.836,548,3.836,549,2.612,550,2.612,551,2.612,552,3.836,553,2.612,554,3.318,555,3.318,556,3.239,557,2.612,558,2.802,559,2.612,560,2.612,561,1.594,562,3.836,563,3.239,564,1.594,565,1.594,566,3.836,567,4.054,568,2.612,569,2.612,570,2.612,571,3.836,572,2.612,573,1.938,574,1.061,575,1.061,576,3.239,577,2.205,578,1.346,579,1.445,580,1.346,581,2.846,582,3.575,583,1.346,584,1.594,585,1.594,586,3.318,587,1.594,588,1.594,589,1.594,590,2.802,591,1.594,592,1.346,593,2.612,594,1.594,595,1.594,596,1.346,597,1.346,598,1.346,599,1.594,600,1.061,601,1.594,602,1.594,603,2.612,604,1.594]],["title/modules/PostsModule.html",[28,1.119,42,2.044]],["body/modules/PostsModule.html",[2,1.575,3,0.329,4,0.293,5,0.293,11,0.027,16,0.593,17,0.777,20,0.329,21,0.041,26,0.018,27,0.018,28,1.777,30,1.554,31,1.554,32,1.809,33,1.809,34,1.554,35,2.738,36,2.738,42,3.99,43,3.409,44,3.141,45,2.427,46,1.809,47,1.809,49,3.245,52,2.634,58,2.145,59,1.446,125,0.957,139,2.997,175,1.554,376,2.245,377,2.145,419,2.145,579,3.68,580,2.997,605,2.997,606,2.997,607,3.549,608,2.997,609,3.549,610,3.549,611,3.549,612,2.997,613,3.549,614,3.549]],["title/injectables/PostsService.html",[106,1.119,579,1.872]],["body/injectables/PostsService.html",[3,0.216,4,0.193,5,0.193,7,0.293,8,1.167,11,0.027,12,0.83,14,1.506,16,0.531,17,0.51,20,0.216,21,0.027,24,1.506,26,0.014,27,0.014,59,0.95,71,0.95,74,2.978,77,0.967,99,2.168,106,1.167,107,1.189,121,1.931,122,1.679,123,1.193,125,1.444,128,1.718,129,1.018,140,1.291,141,1.41,144,3.242,146,2.131,148,2.236,153,2.962,155,1.97,156,1.552,157,2.131,159,2.864,161,1.339,165,2.228,175,1.021,190,1.952,201,1.41,202,2.864,205,2.569,262,1.41,376,1.1,377,1.41,410,1.1,419,1.41,422,3.898,424,3.076,426,3.59,427,1.97,429,2.829,430,1.552,433,3.808,444,1.731,501,1.189,515,2.616,516,3.155,518,3.59,539,1.97,556,2.978,573,3.155,574,1.552,575,1.552,579,1.952,600,1.552,612,1.97,615,1.97,616,2.333,617,2.834,618,4.739,619,2.333,620,3.526,621,2.333,622,2.333,623,2.333,624,2.333,625,2.333,626,2.333,627,2.333,628,3.526,629,2.333,630,2.333,631,2.333,632,2.333,633,2.333,634,2.333,635,2.333,636,2.333,637,2.333,638,2.333,639,2.333,640,2.333,641,2.333,642,2.333,643,1.731,644,1.731,645,2.333,646,2.333,647,2.333,648,2.333,649,2.333]],["title/entities/Tag.html",[100,1.284,322,1.595]],["body/entities/Tag.html",[3,0.261,4,0.232,5,0.232,7,0.353,10,1.659,11,0.026,12,1.078,15,1.93,16,0.261,20,0.261,21,0.033,26,0.016,27,0.016,71,1.145,77,1.052,89,1.556,92,3.455,94,2.645,100,1.537,122,1.68,123,1.442,128,1.466,129,1.169,178,1.434,195,3.156,199,3.156,200,3.156,233,2.077,241,3.81,251,3.003,322,1.909,379,4.005,380,4.005,381,4.005,383,3.156,385,3.659,386,4.155,393,4.005,396,3.81,464,3.418,466,4.248,467,4.248,468,3.418,477,3.003,478,3.849,484,3.418,650,2.374,651,4.743,652,2.812,653,4.743,654,2.812,655,2.812,656,2.812,657,2.812,658,2.812,659,2.812,660,2.812,661,2.812]],["title/controllers/TagsController.html",[0,1.045,51,2.044]],["body/controllers/TagsController.html",[0,1.246,2,1.333,3,0.374,4,0.333,5,0.333,7,0.505,8,1.712,10,1.087,11,0.027,12,0.706,14,1.428,16,0.559,17,0.882,20,0.374,21,0.047,22,2.231,24,1.428,26,0.02,27,0.02,51,3.127,77,0.653,114,2.436,121,1.642,122,1.428,123,1.015,124,2.436,125,1.541,165,1.765,202,2.436,297,1.901,319,3.643,322,1.901,410,1.901,516,3.839,581,2.99,592,3.403,617,2.913,662,3.403,663,4.031,664,4.031,665,4.825,666,3.403,667,3.403,668,4.031,669,4.369,670,4.031]],["title/modules/TagsModule.html",[28,1.119,43,1.872]],["body/modules/TagsModule.html",[2,1.704,3,0.371,4,0.331,5,0.331,11,0.026,16,0.577,17,0.876,20,0.371,21,0.047,26,0.02,27,0.02,28,1.885,30,1.753,31,1.753,32,2.041,33,2.041,34,1.753,35,2.904,36,2.904,43,3.586,45,2.627,46,2.041,47,2.041,51,3.442,52,2.216,58,2.42,59,1.631,322,1.889,617,3.451,667,3.381,671,3.381,672,3.381,673,3.381,674,4.004,675,4.004,676,3.381,677,4.004]],["title/injectables/TagsService.html",[106,1.119,617,1.724]],["body/injectables/TagsService.html",[3,0.243,4,0.216,5,0.216,7,0.328,8,1.271,11,0.027,12,0.936,14,1.777,16,0.496,17,0.573,20,0.243,21,0.03,24,1.777,26,0.019,27,0.015,59,1.067,71,1.067,77,0.995,106,1.271,107,1.335,121,2.044,122,1.893,123,1.263,128,1.551,129,1.11,144,3.487,146,2.323,153,3.091,159,1.582,162,1.943,165,2.34,202,3.032,319,2.323,322,2.635,410,1.235,422,4.192,424,2.777,429,3.339,430,1.742,433,3.717,501,1.96,574,1.742,575,1.742,600,2.558,617,1.96,643,1.943,644,1.943,665,3.845,666,2.211,669,3.246,676,2.211,678,2.211,679,4.554,680,5.017,681,4.554,682,2.618,683,2.618,684,3.844,685,2.618,686,2.618,687,2.618,688,2.618,689,2.618,690,2.618,691,2.618,692,2.618,693,2.618,694,3.844,695,2.618,696,2.618,697,3.844,698,2.211,699,2.211,700,2.618,701,2.618,702,3.844,703,2.618,704,2.618]],["title/entities/User.html",[100,1.284,161,1.284]],["body/entities/User.html",[3,0.279,4,0.249,5,0.249,7,0.378,10,1.58,11,0.026,12,1.027,15,1.901,16,0.394,20,0.279,21,0.035,26,0.016,27,0.016,71,1.228,77,1.027,84,2.978,89,1.668,92,2.963,94,2.987,100,1.615,101,2.236,123,1.071,125,1.444,128,1.523,129,1.228,161,1.615,178,1.507,268,2.236,343,3.657,344,3.657,345,4.162,358,2.236,383,3.279,385,3.562,386,4.092,395,2.545,396,3.757,403,3.155,466,4.563,467,4.563,477,3.155,478,3.155,515,4.189,705,2.545,706,3.013,707,5.354,708,3.013,709,3.013,710,3.013,711,3.591,712,3.013,713,3.013,714,4.253,715,3.013,716,4.253,717,4.253,718,3.013,719,3.013,720,3.013]],["title/controllers/UserController.html",[0,1.045,721,2.251]],["body/controllers/UserController.html",[0,0.647,2,0.692,3,0.194,4,0.173,5,0.173,7,0.262,8,1.073,10,1.072,11,0.027,12,0.696,14,1.586,16,0.476,17,0.458,20,0.194,21,0.024,22,1.158,23,1.552,24,1.959,26,0.017,27,0.012,77,0.92,94,2.283,101,2.407,114,1.264,121,1.619,122,1.717,123,1.291,124,1.264,125,1.072,128,1.003,129,1.775,144,3.141,148,1.875,161,1.232,165,1.421,189,1.961,201,1.264,206,2.283,208,3.356,209,3.781,233,2.421,236,3.86,297,1.531,299,3.322,313,2.949,340,3.06,358,1.552,367,2.706,369,3.93,410,0.987,455,3.679,458,2.407,501,1.654,536,1.767,563,1.767,567,3.781,573,1.552,576,2.74,577,3.356,578,3.356,581,2.407,582,2.74,583,1.767,590,1.767,597,1.767,598,2.74,721,2.159,722,1.767,723,3.245,724,3.974,725,3.245,726,2.092,727,2.092,728,2.092,729,4.988,730,2.092,731,2.092,732,3.245,733,2.092,734,3.245,735,2.092,736,3.245,737,3.245,738,2.092,739,3.974,740,2.092,741,2.092,742,2.092,743,2.092,744,2.092,745,2.092,746,2.092,747,1.767,748,1.767,749,1.767,750,3.974,751,3.245,752,2.092,753,2.092,754,1.767,755,2.092,756,3.245,757,2.092,758,2.092,759,2.092,760,2.092,761,3.974,762,2.092,763,3.974,764,2.092,765,2.092,766,2.092,767,2.092,768,1.767,769,2.092,770,2.092,771,2.092,772,2.092,773,2.092,774,2.092,775,2.092,776,2.74,777,2.092,778,1.767,779,2.092,780,2.74,781,2.092,782,2.092]],["title/modules/UserModule.html",[28,1.119,44,1.724]],["body/modules/UserModule.html",[2,1.632,3,0.347,4,0.309,5,0.309,11,0.027,16,0.58,17,0.82,20,0.347,21,0.044,26,0.019,27,0.019,28,1.825,30,1.64,31,1.64,32,1.91,33,1.91,34,1.64,35,2.812,36,2.812,40,2.73,44,3.251,45,2.515,46,1.91,47,1.91,52,2.073,58,2.263,59,1.526,100,1.422,137,3.283,140,2.73,141,3.333,142,2.492,148,3.163,161,1.422,424,2.073,721,3.67,749,3.163,783,3.163,784,3.163,785,3.163,786,3.745,787,3.745,788,3.745,789,3.163,790,3.745]],["title/injectables/UserService.html",[106,1.119,148,1.595]],["body/injectables/UserService.html",[3,0.213,4,0.189,5,0.189,7,0.288,8,1.152,11,0.027,12,0.823,14,1.491,16,0.512,17,0.502,20,0.213,21,0.027,24,1.491,26,0.013,27,0.013,59,0.934,71,0.934,75,1.701,77,0.963,99,1.169,106,1.152,107,1.169,121,1.914,122,1.664,123,1.183,126,2.817,128,1.76,129,1.215,137,1.526,140,2.329,141,1.386,142,1.526,144,3.227,146,2.104,148,1.642,153,2.943,156,2.316,157,2.104,158,1.936,159,2.104,160,1.936,161,2.214,162,1.701,165,2.212,236,3.126,313,1.701,340,1.926,343,3.122,344,2.583,367,2.104,369,2.316,410,1.082,422,3.538,424,2.795,429,1.526,430,1.526,433,3.126,458,1.701,501,2.395,558,2.939,574,1.526,575,1.526,596,1.936,600,2.8,643,2.583,644,1.701,698,1.936,699,1.936,729,3.967,747,1.936,748,1.936,768,1.936,776,3.553,778,3.553,780,3.553,789,1.936,791,1.936,792,4.208,793,2.293,794,4.208,795,2.293,796,2.293,797,2.293,798,2.293,799,2.293,800,2.293,801,2.293,802,2.293,803,2.293,804,3.481,805,2.293,806,2.293,807,2.293,808,2.293,809,2.293,810,3.481,811,2.293,812,2.293,813,4.208,814,2.293,815,2.293,816,2.293,817,3.481,818,2.293,819,2.293,820,2.293,821,3.481,822,2.293,823,2.293,824,2.293,825,2.293]],["title/coverage.html",[826,3.418]],["body/coverage.html",[0,1.815,1,2.02,5,0.251,6,2.564,11,0.026,18,1.68,21,0.07,26,0.016,27,0.016,34,1.329,49,1.835,50,1.835,51,1.835,60,1.432,61,2.583,77,0.693,100,2.039,105,2.253,106,1.943,108,2.564,112,2.02,113,3.172,118,2.253,125,0.819,126,1.548,143,2.564,148,1.432,161,1.153,173,1.68,175,2.352,176,2.253,177,2.564,190,1.68,191,2.564,192,3.172,301,2.253,319,1.835,320,2.564,321,2.564,322,1.432,340,1.68,341,2.564,342,3.172,367,1.835,368,2.564,369,2.02,370,2.564,376,1.432,377,1.835,378,2.564,404,2.564,408,1.68,421,2.564,436,2.02,437,2.564,455,2.02,456,2.564,459,2.564,496,2.564,501,1.548,514,2.564,579,1.68,615,2.564,617,1.548,650,2.564,662,2.564,678,2.564,705,2.564,711,2.564,721,2.02,722,2.564,791,2.564,826,2.253,827,3.036,828,3.036,829,6.831,830,6.161,831,3.036,832,6.034,833,4.275,834,2.564,835,3.036,836,3.036,837,3.036,838,4.948,839,4.275,840,3.036]],["title/dependencies.html",[31,1.78,841,2.389]],["body/dependencies.html",[11,0.027,17,0.986,21,0.065,26,0.021,27,0.021,31,1.974,59,1.836,71,1.836,184,2.298,295,3.345,297,2.126,446,3.345,447,3.345,842,4.508,843,4.508,844,6.016,845,4.508,846,4.508,847,4.508,848,4.508,849,4.508,850,4.508,851,4.508,852,4.508,853,4.508,854,4.508,855,4.508,856,4.508,857,4.508,858,4.508,859,4.508,860,4.508]],["title/miscellaneous/enumerations.html",[861,1.565,862,3.433]],["body/miscellaneous/enumerations.html",[7,0.572,11,0.026,26,0.021,27,0.021,125,1.507,189,4.068,231,4.147,236,3.719,237,4.72,238,4.72,242,4.72,270,4.147,271,4.72,272,4.72,273,4.72,861,2.523,862,3.849,863,5.59,864,4.558]],["title/miscellaneous/functions.html",[861,1.565,865,3.433]],["body/miscellaneous/functions.html",[7,0.655,11,0.023,26,0.023,27,0.023,34,2.805,834,4.41,861,2.89,865,4.41,866,5.223]],["title/index.html",[7,0.355,867,2.829,868,2.829]],["body/index.html",[4,0.314,11,0.026,26,0.019,27,0.019,69,3.212,88,3.212,95,3.212,205,2.299,206,2.834,233,1.666,331,3.212,424,2.105,494,3.212,495,3.212,826,2.822,869,3.804,870,3.804,871,4.984,872,3.804,873,3.804,874,3.804,875,3.804,876,3.804,877,5.558,878,3.804,879,3.804,880,6.401,881,3.804,882,3.804,883,6.282,884,3.804,885,3.804,886,4.984,887,3.804,888,3.804,889,3.804,890,4.984,891,4.984,892,3.804,893,3.804,894,3.804,895,4.984,896,4.984,897,3.804,898,3.804,899,3.804,900,3.804,901,3.804,902,3.212,903,3.804,904,3.804,905,3.804,906,3.804,907,3.804,908,3.804,909,3.804,910,3.804,911,3.804,912,3.804,913,3.804,914,3.804,915,3.804,916,3.804,917,3.212]],["title/modules.html",[30,2.017]],["body/modules.html",[11,0.022,26,0.022,27,0.022,29,3.163,30,2.082,40,2.631,41,2.873,42,2.873,43,2.631,44,2.424,902,5.614,918,6.648,919,6.648,920,6.648]],["title/overview.html",[921,3.89]],["body/overview.html",[2,1.086,11,0.026,18,2.854,26,0.017,27,0.017,28,1.086,29,4.427,30,1.437,31,1.437,32,1.673,33,1.673,34,1.437,35,1.673,36,1.673,37,2.771,38,2.771,39,2.771,40,3.331,41,3.637,42,3.897,43,3.412,44,3.143,45,2.301,46,1.673,47,1.673,89,1.816,107,1.673,126,3.143,133,2.771,134,2.771,135,2.771,148,2.908,174,1.548,314,2.771,408,3.412,414,2.771,415,2.771,416,2.771,579,3.412,605,2.771,606,2.771,608,2.771,617,3.143,671,2.771,672,2.771,673,2.771,783,2.771,784,2.771,785,2.771,921,2.771,922,5.158,923,3.281]],["title/properties.html",[178,1.44,841,2.389]],["body/properties.html",[11,0.026,26,0.023,27,0.023,178,1.827,205,3.116,233,2.258,754,4.354,917,4.354,924,5.157,925,5.157]],["title/miscellaneous/typealiases.html",[861,1.565,926,4.065]],["body/miscellaneous/typealiases.html",[7,0.649,11,0.023,26,0.023,27,0.023,77,0.977,113,3.842,118,4.476,153,2.866,861,2.866,927,5.179,928,5.179]],["title/routes.html",[929,3.89]],["body/routes.html",[11,0.024,26,0.024,27,0.024,929,4.547]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"routes.html":{}}}],["0",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":924,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":832,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["1.1.26",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":761,"title":{},"body":{"controllers/UserController.html":{}}}],["10.0.0",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":468,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":735,"title":{},"body":{"controllers/UserController.html":{}}}],["123",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["1234",{"_index":766,"title":{},"body":{"controllers/UserController.html":{}}}],["16t12:00:00+0000",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":768,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["2.0.6",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":732,"title":{},"body":{"controllers/UserController.html":{}}}],["2024",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["255",{"_index":477,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["3/5",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["512",{"_index":484,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["5432",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":922,"title":{},"body":{"overview.html":{}}}],["60",{"_index":711,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["7",{"_index":923,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":707,"title":{},"body":{"entities/User.html":{}}}],["actual",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["additional",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{}}}],["adds",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alias",{"_index":831,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":927,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["already",{"_index":698,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["amazing",{"_index":903,"title":{},"body":{"index.html":{}}}],["another",{"_index":630,"title":{},"body":{"injectables/PostsService.html":{}}}],["api",{"_index":737,"title":{},"body":{"controllers/UserController.html":{}}}],["apioperation",{"_index":581,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":521,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":185,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({})@isjson()@isoptional",{"_index":334,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiquery",{"_index":750,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":582,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["apiresponse({status",{"_index":543,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags",{"_index":751,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":753,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app.controller",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":876,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":717,"title":{},"body":{"entities/User.html":{}}}],["array",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["associated",{"_index":549,"title":{},"body":{"controllers/PostsController.html":{}}}],["async",{"_index":422,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":112,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":816,"title":{},"body":{"injectables/UserService.html":{}}}],["authentication",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":126,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":433,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":904,"title":{},"body":{"index.html":{}}}],["being",{"_index":551,"title":{},"body":{"controllers/PostsController.html":{}}}],["bi",{"_index":401,"title":{},"body":{"entities/MetaOption.html":{}}}],["blog",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["body",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":920,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":918,"title":{},"body":{"modules.html":{}}}],["building",{"_index":872,"title":{},"body":{"index.html":{}}}],["calls",{"_index":553,"title":{},"body":{"controllers/PostsController.html":{}}}],["cascade",{"_index":399,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["cascade'})@joincolumn",{"_index":391,"title":{},"body":{"entities/MetaOption.html":{}}}],["cases",{"_index":762,"title":{},"body":{"controllers/UserController.html":{}}}],["character",{"_index":361,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["check",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["circular",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["class",{"_index":21,"title":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":174,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":414,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_exports",{"_index":415,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":416,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":605,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":606,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":607,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":608,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":671,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":672,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":673,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":783,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":785,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":784,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":396,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":385,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["compodoc/compodoc",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["composed",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["confirmation",{"_index":531,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log",{"_index":596,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["console.log(`limit",{"_index":775,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(`logging",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`user",{"_index":815,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(getuserparamdto",{"_index":774,"title":{},"body":{"controllers/UserController.html":{}}}],["const",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":793,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(metaoptionsrepository",{"_index":423,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["constructor(tagsrepository",{"_index":682,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userservice",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(userservices",{"_index":616,"title":{},"body":{"injectables/PostsService.html":{}}}],["containing",{"_index":533,"title":{},"body":{"controllers/PostsController.html":{}}}],["content",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{}}}],["context",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":411,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":584,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":668,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":752,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convert",{"_index":760,"title":{},"body":{"controllers/UserController.html":{}}}],["correct",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["coverage",{"_index":826,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["create(undefined",{"_index":427,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["created",{"_index":523,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdatecolumn",{"_index":381,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createddate",{"_index":379,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdmetaoption",{"_index":432,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createdpost",{"_index":593,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdtags",{"_index":669,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createmetaoptions",{"_index":405,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(@body",{"_index":412,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(createmetaoptionsdto",{"_index":406,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptionsdto",{"_index":173,"title":{"classes/CreateMetaOptionsDto.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createpost",{"_index":516,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["createpost(@body",{"_index":592,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["createpost(createpostdto",{"_index":520,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createtag",{"_index":663,"title":{},"body":{"controllers/TagsController.html":{}}}],["createpost.authorid",{"_index":635,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost.tags",{"_index":637,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":190,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdtowithmeta",{"_index":513,"title":{},"body":{"entities/Post.html":{}}}],["createpostdto})@patch",{"_index":564,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto})@post",{"_index":524,"title":{},"body":{"controllers/PostsController.html":{}}}],["creates",{"_index":500,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{}}}],["createtag",{"_index":665,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtag(undefined",{"_index":685,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtagdto",{"_index":319,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":780,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(undefined",{"_index":796,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":340,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto})@apiquery({name",{"_index":733,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers",{"_index":723,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(@body",{"_index":779,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(createuserdto",{"_index":726,"title":{},"body":{"controllers/UserController.html":{}}}],["creating",{"_index":400,"title":{},"body":{"entities/MetaOption.html":{}}}],["creation",{"_index":527,"title":{},"body":{"controllers/PostsController.html":{}}}],["custom",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["data",{"_index":507,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{}}}],["database",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["date",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{}}}],["defaultvaluepipe",{"_index":745,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":773,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(10",{"_index":771,"title":{},"body":{"controllers/UserController.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":573,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["delete(undefined",{"_index":622,"title":{},"body":{"injectables/PostsService.html":{}}}],["deleted",{"_index":539,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletedatecolumn",{"_index":653,"title":{},"body":{"entities/Tag.html":{}}}],["deleteddate",{"_index":651,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":517,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":599,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":537,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleterequest",{"_index":603,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletes",{"_index":538,"title":{},"body":{"controllers/PostsController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["description",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":534,"title":{},"body":{"controllers/PostsController.html":{}}}],["development",{"_index":882,"title":{},"body":{"index.html":{}}}],["directional",{"_index":402,"title":{},"body":{"entities/MetaOption.html":{}}}],["dist/**/*.entity.js",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["doe",{"_index":821,"title":{},"body":{"injectables/UserService.html":{}}}],["draft",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":410,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/get",{"_index":747,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/patch",{"_index":583,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["e.g",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["e2e",{"_index":892,"title":{},"body":{"index.html":{}}}],["each",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":462,"title":{},"body":{"entities/Post.html":{}}}],["eagerly",{"_index":510,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":873,"title":{},"body":{"index.html":{}}}],["eight",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["enables",{"_index":506,"title":{},"body":{"entities/Post.html":{}}}],["endpoint",{"_index":598,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["entities",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":100,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["entity/meta",{"_index":418,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["entity/post.entity",{"_index":612,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entity/tags.entity",{"_index":676,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["entity/user.entity",{"_index":789,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["enum",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":862,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posts.enums",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["error",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["exception",{"_index":808,"title":{},"body":{"injectables/UserService.html":{}}}],["excerpt",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["existing",{"_index":566,"title":{},"body":{"controllers/PostsController.html":{}}}],["existingtags",{"_index":694,"title":{},"body":{"injectables/TagsService.html":{}}}],["existinguser",{"_index":804,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["expected",{"_index":454,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exporting",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":438,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["false})@isoptional()@isarray()@isint({each",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featured",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["featuredimageurl",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["fetch",{"_index":548,"title":{},"body":{"controllers/PostsController.html":{}}}],["few",{"_index":505,"title":{},"body":{"entities/Post.html":{}}}],["fields",{"_index":572,"title":{},"body":{"controllers/PostsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["final",{"_index":757,"title":{},"body":{"controllers/UserController.html":{}}}],["find",{"_index":819,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":776,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(undefined",{"_index":798,"title":{},"body":{"injectables/UserService.html":{}}}],["findmultipletags",{"_index":679,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(undefined",{"_index":687,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":792,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(undefined",{"_index":800,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/User.html":{}}}],["firstname",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["footerenabled",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["format",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["forwardref",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["found",{"_index":643,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":871,"title":{},"body":{"index.html":{}}}],["function",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["functions",{"_index":865,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":769,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":730,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':userid",{"_index":587,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts",{"_index":518,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallposts(@param('userid",{"_index":588,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts(undefined",{"_index":624,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(userid",{"_index":542,"title":{},"body":{"controllers/PostsController.html":{}}}],["getalltags",{"_index":680,"title":{},"body":{"injectables/TagsService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gettagbyid",{"_index":681,"title":{},"body":{"injectables/TagsService.html":{}}}],["gettagbyid(undefined",{"_index":690,"title":{},"body":{"injectables/TagsService.html":{}}}],["getting",{"_index":867,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":739,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers",{"_index":724,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":728,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersparamdto",{"_index":367,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["given",{"_index":550,"title":{},"body":{"controllers/PostsController.html":{}}}],["grow",{"_index":899,"title":{},"body":{"index.html":{}}}],["handle",{"_index":807,"title":{},"body":{"injectables/UserService.html":{}}}],["handles",{"_index":526,"title":{},"body":{"controllers/PostsController.html":{}}}],["headers",{"_index":743,"title":{},"body":{"controllers/UserController.html":{}}}],["hello",{"_index":110,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["here",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["host",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["httpexception",{"_index":574,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpexception('email",{"_index":809,"title":{},"body":{"injectables/UserService.html":{}}}],["httpexception('no",{"_index":601,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpexception('post",{"_index":642,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('tag",{"_index":697,"title":{},"body":{"injectables/TagsService.html":{}}}],["httpexception('user",{"_index":817,"title":{},"body":{"injectables/UserService.html":{}}}],["https://example.com/image.jpg",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["https://nestjs.com",{"_index":914,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":575,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":602,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.conflict",{"_index":699,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.created",{"_index":591,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.forbidden",{"_index":818,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":644,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.ok",{"_index":586,"title":{},"body":{"controllers/PostsController.html":{}}}],["hyphens",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["id",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":827,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["in(tags",{"_index":704,"title":{},"body":{"injectables/TagsService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indicating",{"_index":535,"title":{},"body":{"controllers/PostsController.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":106,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":107,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["injection",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injections",{"_index":628,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository",{"_index":430,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoptionrepository",{"_index":633,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(metaoptionsrepository",{"_index":431,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["injectrepository(postrepository",{"_index":632,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tagrepository",{"_index":693,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":803,"title":{},"body":{"injectables/UserService.html":{}}}],["installation",{"_index":879,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":881,"title":{},"body":{"index.html":{}}}],["instead",{"_index":511,"title":{},"body":{"entities/Post.html":{}}}],["integer",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["invalid",{"_index":329,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["ip",{"_index":744,"title":{},"body":{"controllers/UserController.html":{}}}],["isarray",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":813,"title":{},"body":{"injectables/UserService.html":{}}}],["isauthenticated",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":363,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(['post",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypes",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isiso8601",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":182,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":183,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":180,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["isnumber",{"_index":445,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":186,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["item",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jane",{"_index":823,"title":{},"body":{"injectables/UserService.html":{}}}],["jane@doe.com",{"_index":824,"title":{},"body":{"injectables/UserService.html":{}}}],["john",{"_index":820,"title":{},"body":{"injectables/UserService.html":{}}}],["john@doe.com",{"_index":822,"title":{},"body":{"injectables/UserService.html":{}}}],["join",{"_index":495,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["joincolumn",{"_index":397,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":486,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["kamil",{"_index":911,"title":{},"body":{"index.html":{}}}],["key",{"_index":188,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["language",{"_index":325,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["lastname",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lazy",{"_index":512,"title":{},"body":{"entities/Post.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":467,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":917,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":896,"title":{},"body":{"index.html":{}}}],["likes",{"_index":453,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["limit",{"_index":729,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["literal",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["loading",{"_index":509,"title":{},"body":{"entities/Post.html":{}}}],["localhost",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginbody",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginbody",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["logs",{"_index":529,"title":{},"body":{"controllers/PostsController.html":{}}}],["lowercase",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["m2m",{"_index":498,"title":{},"body":{"entities/Post.html":{}}}],["main",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["making",{"_index":629,"title":{},"body":{"injectables/PostsService.html":{}}}],["manytomany",{"_index":487,"title":{},"body":{"entities/Post.html":{}}}],["manytomany(undefined",{"_index":481,"title":{},"body":{"entities/Post.html":{}}}],["manytoone",{"_index":488,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":460,"title":{},"body":{"entities/Post.html":{}}}],["matches",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":366,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matches(/^https?:\\/\\/[^\\s",{"_index":339,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"routes.html":{}}}],["maxlength",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(255",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":364,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["meta",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":376,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":626,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptions",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["metaoptions.post",{"_index":471,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":50,"title":{"controllers/MetaOptionsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":41,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":426,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":408,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":179,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["migrations",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":338,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":187,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":365,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":861,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":895,"title":{},"body":{"index.html":{}}}],["mode",{"_index":886,"title":{},"body":{"index.html":{}}}],["modern",{"_index":323,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":908,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":912,"title":{},"body":{"index.html":{}}}],["name",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["need",{"_index":755,"title":{},"body":{"controllers/UserController.html":{}}}],["nest",{"_index":877,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":916,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":446,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":501,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newuser",{"_index":810,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":870,"title":{},"body":{"index.html":{}}}],["null",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":386,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number'})@isnumber()@isnotempty",{"_index":441,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["number})@isoptional()@isint()@type(undefined",{"_index":372,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["object",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["objects",{"_index":560,"title":{},"body":{"controllers/PostsController.html":{}}}],["ondelete",{"_index":390,"title":{},"body":{"entities/MetaOption.html":{}}}],["one",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["onetomany",{"_index":716,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":713,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":398,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":388,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["oojoseph",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["open",{"_index":897,"title":{},"body":{"index.html":{}}}],["option.entity",{"_index":419,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":378,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":384,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":387,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":382,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":394,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:33",{"_index":392,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["options",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.controller",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":404,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:10",{"_index":407,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":177,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:16",{"_index":181,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["options.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":417,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":409,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":421,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:15",{"_index":428,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":425,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":176,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["options/entity/meta",{"_index":377,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/meta",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":921,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owning",{"_index":493,"title":{},"body":{"entities/Post.html":{}}}],["package",{"_index":841,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":763,"title":{},"body":{"controllers/UserController.html":{}}}],["pagination'})@apiresponse({status",{"_index":731,"title":{},"body":{"controllers/UserController.html":{}}}],["param",{"_index":576,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["param.dto",{"_index":748,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param.dto.ts",{"_index":370,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:16",{"_index":373,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parama",{"_index":759,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parseintpipe",{"_index":577,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["partial",{"_index":569,"title":{},"body":{"controllers/PostsController.html":{}}}],["partialtype",{"_index":443,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":439,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":457,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passing",{"_index":508,"title":{},"body":{"entities/Post.html":{}}}],["password",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":567,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["patchpostdto",{"_index":436,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":725,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(@body",{"_index":782,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(patchuserdto",{"_index":740,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuserdto",{"_index":455,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["person",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":906,"title":{},"body":{"index.html":{}}}],["port",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":736,"title":{},"body":{"controllers/UserController.html":{}}}],["possible",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":125,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":522,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@delete",{"_index":540,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('login",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.dto",{"_index":444,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:103",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:113",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:124",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:146",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:15",{"_index":442,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:156",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:34",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:46",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:60",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:71",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:80",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:92",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.metaoptions",{"_index":389,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.metaoptions.id",{"_index":647,"title":{},"body":{"injectables/PostsService.html":{}}}],["postentity",{"_index":611,"title":{},"body":{"modules/PostsModule.html":{}}}],["postgres",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["postrepository",{"_index":618,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":515,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{}}}],["posts.author",{"_index":714,"title":{},"body":{"entities/User.html":{}}}],["posts.controller",{"_index":610,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":580,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.controller",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":49,"title":{"controllers/PostsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":585,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":42,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":579,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":492,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["posttypes",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttypes.post",{"_index":491,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":383,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["processes",{"_index":568,"title":{},"body":{"controllers/PostsController.html":{}}}],["processing",{"_index":528,"title":{},"body":{"controllers/PostsController.html":{}}}],["production",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["programming",{"_index":324,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["progressive",{"_index":869,"title":{},"body":{"index.html":{}}}],["project",{"_index":898,"title":{},"body":{"index.html":{}}}],["promise",{"_index":558,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":178,"title":{"properties.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provided",{"_index":375,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["published",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["put",{"_index":742,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":578,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["query('limit",{"_index":770,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":772,"title":{},"body":{"controllers/UserController.html":{}}}],["r\\n",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["range",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":907,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["received",{"_index":530,"title":{},"body":{"controllers/PostsController.html":{}}}],["references",{"_index":720,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["relationship",{"_index":403,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["relationships",{"_index":499,"title":{},"body":{"entities/Post.html":{}}}],["remove",{"_index":502,"title":{},"body":{"entities/Post.html":{}}}],["replace",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["repositories",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{}}}],["repository",{"_index":424,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["representing",{"_index":554,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":536,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["requests",{"_index":547,"title":{},"body":{"controllers/PostsController.html":{}}}],["require",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["required",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":559,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"routes.html":{}}}],["retrieved",{"_index":552,"title":{},"body":{"controllers/PostsController.html":{}}}],["retrieves",{"_index":546,"title":{},"body":{"controllers/PostsController.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returned",{"_index":734,"title":{},"body":{"controllers/UserController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["review",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["routes",{"_index":929,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":883,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":874,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["second",{"_index":719,"title":{},"body":{"entities/User.html":{}}}],["sent",{"_index":597,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["serialize",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":875,"title":{},"body":{"index.html":{}}}],["service",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["set",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["setting",{"_index":503,"title":{},"body":{"entities/Post.html":{}}}],["setup",{"_index":718,"title":{},"body":{"entities/User.html":{}}}],["shows",{"_index":449,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["side",{"_index":494,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["sidebarenabled",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["single",{"_index":631,"title":{},"body":{"injectables/PostsService.html":{}}}],["slug",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["special",{"_index":360,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":371,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["specified",{"_index":555,"title":{},"body":{"controllers/PostsController.html":{}}}],["specify",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["sponsors",{"_index":901,"title":{},"body":{"index.html":{}}}],["src/.../auth.controller.ts",{"_index":928,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":866,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posts.enums.ts",{"_index":863,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":108,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":109,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":788,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":802,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:5",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":834,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":175,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":437,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity",{"_index":395,"title":{},"body":{"entities/MetaOption.html":{},"entities/User.html":{}}}],["src/posts/entity/post.entity.ts",{"_index":459,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity.ts:19",{"_index":470,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:26",{"_index":485,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:34",{"_index":473,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:42",{"_index":479,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:50",{"_index":480,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:56",{"_index":465,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:62",{"_index":476,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:69",{"_index":469,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:75",{"_index":475,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:81",{"_index":483,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:89",{"_index":472,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:96",{"_index":463,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/enums/posts.enums.ts",{"_index":864,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":514,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:100",{"_index":541,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:40",{"_index":545,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:62",{"_index":525,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:86",{"_index":565,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":609,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":615,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:11",{"_index":619,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:32",{"_index":621,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:52",{"_index":625,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:58",{"_index":623,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":320,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity",{"_index":490,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/entity/tags.entity.ts",{"_index":650,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity.ts:13",{"_index":657,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:21",{"_index":658,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:29",{"_index":660,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:35",{"_index":655,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:41",{"_index":659,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:48",{"_index":656,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:51",{"_index":652,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:54",{"_index":661,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:57",{"_index":654,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":662,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:11",{"_index":664,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":613,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":674,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/tags/tags.service",{"_index":627,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/tags.service.ts",{"_index":678,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/tags.service.ts:14",{"_index":686,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:30",{"_index":689,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:36",{"_index":691,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:46",{"_index":688,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:8",{"_index":683,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/user/dtos/create",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/get",{"_index":368,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/user/dtos/patch",{"_index":456,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/user/entity/user.entity",{"_index":489,"title":{},"body":{"entities/Post.html":{}}}],["src/user/entity/user.entity.ts",{"_index":705,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entity/user.entity.ts:14",{"_index":708,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:21",{"_index":710,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:29",{"_index":706,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:36",{"_index":712,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:39",{"_index":715,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:7",{"_index":709,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":722,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:63",{"_index":738,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:81",{"_index":727,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:87",{"_index":741,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/user/user.module.ts",{"_index":786,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/user/user.service.ts",{"_index":791,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:16",{"_index":795,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:27",{"_index":797,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:49",{"_index":799,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:77",{"_index":801,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":884,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":887,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":888,"title":{},"body":{"index.html":{}}}],["started",{"_index":868,"title":{"index.html":{}},"body":{}}],["starter",{"_index":878,"title":{},"body":{"index.html":{}}}],["statements",{"_index":828,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["stay",{"_index":909,"title":{},"body":{"index.html":{}}}],["still",{"_index":451,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["story",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["string'})@isiso8601()@isnotempty",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isnotempty()@isstring()@minlength(3)@maxlength(255",{"_index":332,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isjson",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isstring",{"_index":326,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024)@matches(/^https?:\\/\\/[^\\s",{"_index":328,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isenum(posttypes)@isnotempty",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@isenum(poststatus",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(255)@matches(/^[a",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(512)@matches(/^[a",{"_index":336,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isoptional",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["success",{"_index":649,"title":{},"body":{"injectables/PostsService.html":{}}}],["successfully",{"_index":648,"title":{},"body":{"injectables/PostsService.html":{}}}],["summary",{"_index":590,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":902,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":919,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":448,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["synchronize",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":496,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":840,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":322,"title":{"entities/Tag.html":{}},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":666,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":321,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:23",{"_index":333,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:37",{"_index":337,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:46",{"_index":327,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:51",{"_index":335,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:65",{"_index":330,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.name",{"_index":696,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagrepository",{"_index":692,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":675,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.service",{"_index":667,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["tags/tags.controller",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":51,"title":{"controllers/TagsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":43,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":684,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":617,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":891,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":894,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":893,"title":{},"body":{"index.html":{}}}],["tests",{"_index":890,"title":{},"body":{"index.html":{}}}],["text",{"_index":464,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":900,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauthenticated",{"_index":814,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.login(loginbody",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.metaoptionsrepository.create(metaoptions",{"_index":434,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.delete",{"_index":646,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.save(createdmetaoption",{"_index":435,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create",{"_index":413,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postrepository.create",{"_index":638,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.delete",{"_index":645,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.find",{"_index":640,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findoneby",{"_index":641,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(post",{"_index":639,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postservice.create",{"_index":594,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.delete",{"_index":604,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.getallposts",{"_index":589,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.tagsrepository.create(tag",{"_index":700,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":702,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":695,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findoneby",{"_index":703,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(createdtags",{"_index":701,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtag",{"_index":670,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags",{"_index":636,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.userrepository.create(user",{"_index":811,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":805,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":825,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":812,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser",{"_index":781,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":777,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyid",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservices.findonebyid",{"_index":634,"title":{},"body":{"injectables/PostsService.html":{}}}],["through",{"_index":570,"title":{},"body":{"controllers/PostsController.html":{}}}],["throw",{"_index":600,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["time",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["timestamp",{"_index":474,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":910,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":532,"title":{},"body":{"controllers/PostsController.html":{}}}],["transform",{"_index":374,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["transformer",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@isint()@isnotempty",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@jointable",{"_index":482,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":915,"title":{},"body":{"index.html":{}}}],["type",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":926,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm.forfeature",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":420,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([postentity",{"_index":614,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":677,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":790,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":447,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":331,"title":{},"body":{"classes/CreateTagDto.html":{},"index.html":{}}}],["undefined",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["undefined})@get(':userid",{"_index":544,"title":{},"body":{"controllers/PostsController.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":478,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":889,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":429,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":925,"title":{},"body":{"properties.html":{}}}],["up",{"_index":450,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["update",{"_index":440,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated",{"_index":563,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["updatedatecolumn",{"_index":393,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updateddate",{"_index":380,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":519,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":595,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(updatepostdto",{"_index":561,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepostdto",{"_index":571,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":562,"title":{},"body":{"controllers/PostsController.html":{}}}],["url",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["use",{"_index":756,"title":{},"body":{"controllers/UserController.html":{}}}],["used",{"_index":497,"title":{},"body":{"entities/Post.html":{}}}],["usefactory",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":161,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":787,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":458,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":362,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":806,"title":{},"body":{"injectables/UserService.html":{}}}],["user.firstname",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.posts",{"_index":461,"title":{},"body":{"entities/Post.html":{}}}],["user.service",{"_index":749,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":721,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":556,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["usermodule",{"_index":44,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userparamsdto",{"_index":778,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":794,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":369,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["users/1223",{"_index":764,"title":{},"body":{"controllers/UserController.html":{}}}],["users/id?limit=10&page=1",{"_index":758,"title":{},"body":{"controllers/UserController.html":{}}}],["users?limit=10&page=2",{"_index":767,"title":{},"body":{"controllers/UserController.html":{}}}],["userservice",{"_index":148,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservices",{"_index":620,"title":{},"body":{"injectables/PostsService.html":{}}}],["using",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["validate",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":746,"title":{},"body":{"controllers/UserController.html":{}}}],["validator",{"_index":184,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":189,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{}}}],["varchar",{"_index":466,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["version",{"_index":754,"title":{},"body":{"controllers/UserController.html":{},"properties.html":{}}}],["want",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["watch",{"_index":885,"title":{},"body":{"index.html":{}}}],["website",{"_index":913,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["whos",{"_index":765,"title":{},"body":{"controllers/UserController.html":{}}}],["whose",{"_index":557,"title":{},"body":{"controllers/PostsController.html":{}}}],["work",{"_index":504,"title":{},"body":{"entities/Post.html":{}}}],["works",{"_index":452,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["world",{"_index":111,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["yarn",{"_index":880,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":905,"title":{},"body":{"index.html":{}}}],["z0",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            PostsController\n                        \n                        \n                            MetaOptionsController\n                        \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { PostsController } from './posts/posts.controller';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOptionsController } from './meta-options/meta-options.controller';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsController } from './tags/tags.controller';\nimport { TagsModule } from './tags/tags.module';\n\n@Module({\n  imports: [\n    UserModule,\n    PostsModule,\n    AuthModule,\n    MetaOptionsModule,\n    TypeOrmModule.forRootAsync({\n      imports: [], // specify any additional imports here, e.g., TypeORM migrations or custom repositories\n      inject: [], // inject\n      useFactory: () => ({\n        type: 'postgres',\n        host: 'localhost',\n        port: 5432,\n        username: 'postgres',\n        password: 'oojoseph',\n        database: 'blog-app',\n        entities: ['dist/**/*.entity.js'],\n        synchronize: true, // set to false in production\n        // autoLoadEntities: true, // using this would require us to create a module (controller and module file) for every entity we want to add, exporting it and using the TypeORM.forFeature([]) function\n      }),\n    }),\n    TagsModule,\n  ],\n  controllers: [AppController, PostsController, MetaOptionsController, TagsController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginBody: LoginBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginBody\n                                            \n                                                            LoginBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\ntype LoginBody = {\n  id: number;\n  username: string;\n  password: string;\n};\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  login(@Body() loginBody: LoginBody) {\n    return this.authService.login(loginBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from 'src/user/user.module';\n\n@Module({\n  imports: [forwardRef(() => UserModule)], // for dependency injection (circular dependency injection)\n  exports: [AuthService],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n  ) {}\n\n  public login({\n    id,\n    username,\n    password,\n  }: {\n    id: number;\n    username: string;\n    password: string;\n  }) {\n    // check user exists in the database and if the password is correct\n    // login\n    // token\n\n    // const user = this.userService.findOneById({ id });\n    // console.log(`Logging in user ${user.firstName}`);\n\n    // return user;\n\n    return 'login';\n  }\n\n  public isAuthenticated() {\n    return true; // replace with actual authentication logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMetaOptionsDto.html":{"url":"classes/CreateMetaOptionsDto.html","title":"class - CreateMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-meta-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from \"class-validator\";\n\nexport class CreateMetaOptionsDto {\n    // @ApiProperty()\n    // @IsString()\n    // @MinLength(4)\n    // @IsNotEmpty()\n    // key: string;\n  \n    // @ApiProperty()\n    // @IsNotEmpty()\n    // value: any;\n  \n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the id of the author of the post', example: 123, type: 'integer', required: true})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the additional options for the post', example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}', type: 'string', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostTypes, description: 'Possible tags for a post, range: ['post', 'page', 'story', 'series']', type: 'string'})@IsString()@IsEnum(PostTypes)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the date when the post was published', example: '2024-03-16T12:00:00+0000', format: 'date-time', type: 'string'})@IsISO8601()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the excerpt of the post. Serialize your json content or else there will be an error', example: '{\n \"@context\": \"https://schema.org\", \n \"@type\": \"Person\"\n}', format: 'json', type: 'string'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(255)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']', type: 'string'})@IsString()@IsNotEmpty()@IsEnum(PostStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined, type: 'array', required: false})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is a title of the post', example: 'Hello World', type: 'string'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { CreateMetaOptionsDto } from 'src/meta-options/dtos/create-meta-options.dto';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is a title of the post',\n    example: 'Hello World',\n    type: 'string',\n\n    // default: \"Hello World\"\n  }) // this adds the value to the post documentation\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostTypes,\n    description:\n      \"Possible tags for a post, range: ['post', 'page', 'story', 'series']\",\n    type: 'string',\n  })\n  @IsString()\n  //   @IsEnum(['post', 'page', 'story', 'series'])\n  @IsEnum(PostTypes)\n  @IsNotEmpty()\n  postType: PostTypes;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description:\n      \"Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']\",\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'This is the excerpt of the post. Serialize your json content or else there will be an error',\n    example:\n      '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\", \\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}',\n    format: 'json',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'This is the date when the post was published',\n    example: '2024-03-16T12:00:00+0000',\n    format: 'date-time',\n    type: 'string',\n  })\n  @IsISO8601()\n  @IsNotEmpty()\n  publishedOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1, 4],\n    type: 'array',\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true }) // validate each item in the array as a string\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    description: 'This is the additional options for the post',\n    example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n    type: 'string',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'The meta value is a json object',\n          example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n        },\n      },\n      required: ['key', 'value'],\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreateMetaOptionsDto)\n  metaOptions?: CreateMetaOptionsDto | null;\n\n  @ApiProperty({\n    description: 'This is the id of the author of the post',\n    example: 123,\n    type: 'integer',\n    required: true,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Tag Description', example: 'A modern programming language', type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)@Matches(/^https?:\\/\\/[^\\s]+$/, {message: 'Invalid URL format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the tag', example: 'TypeScript', type: 'string'})@IsNotEmpty()@IsString()@MinLength(3)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(512)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty({\n    description: 'Name of the tag',\n    example: 'TypeScript',\n    type: 'string',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(255)\n  name: string;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(512)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiPropertyOptional({\n    description: 'Tag Description',\n    example: 'A modern programming language',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional({})\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  @Matches(/^https?:\\/\\/[^\\s]+$/, {\n    message: 'Invalid URL format',\n  })\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 123, type: Number})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/get-users-param.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 123,\n    type: Number,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number) // transform string to number if provided\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/entity/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  }) // creating bi-directional relationship\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOptions(createMetaOptionsDto: CreateMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionsDto\n                                            \n                                                            CreateMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private metaOptionsService: MetaOptionsService) {}\n\n  @Post()\n  createMetaOptions(@Body() createMetaOptionsDto: CreateMetaOptionsDto) {\n    const metaOptions = this.metaOptionsService.create({\n      metaOptions: createMetaOptionsDto,\n    });\n\n    return metaOptions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './entity/meta-option.entity';\nimport { MetaOptionsController } from './meta-options.controller';\n\n@Module({\n  providers: [MetaOptionsService],\n  controllers: [MetaOptionsController],\n  exports: [MetaOptionsService],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/meta-options.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\nimport { MetaOption as MetaOptionsRepository } from './entity/meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    // injecting meta options service repository dependency\n    @InjectRepository(MetaOptionsRepository)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create({ metaOptions }: { metaOptions: CreateMetaOptionsDto }) {\n    const createdMetaOption =\n      await this.metaOptionsRepository.create(metaOptions);\n    await this.metaOptionsRepository.save(createdMetaOption);\n\n    return createdMetaOption;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Update post with a specific id', example: 123, type: 'number'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n// import { PartialType } from '@nestjs/mapped-types'; \n// we are using the import from swagger so it shows up in our documentation, it still works likes expected as the import from @nestjs/mapped-types\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'Update post with a specific id',\n    example: 123,\n    type: 'number',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entity/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostTypes, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { MetaOption } from '../../meta-options/entity/meta-option.entity';\nimport { User } from 'src/user/entity/user.entity';\nimport { Tag } from 'src/tags/entity/tags.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostTypes,\n    default: PostTypes.POST,\n  })\n  postType: PostTypes;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: false,\n  })\n  publishedOn: Date;\n\n  @ManyToMany(() => Tag, {\n    eager: true,\n  })\n  @JoinTable() // this must be on the owning side of the relationship and join table is used for M2M relationships, it also creates a new table for the relationship\n  tags?: Tag[];\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    // cascade: ['remove'] // setting cascade to work for a few methods\n    cascade: true, // this enables us create data in the metaoption table by just passing the value\n    eager: true, // loading the metaOptions eagerly instead of lazy loading it\n  })\n  // @JoinColumn()\n  metaOptions?: MetaOption;\n\n  // metaOptions?: CreatePostDtoWithMeta[];\n\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                deletePost\n                            \n                            \n                                    \n                                    \n                                getAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post'})@ApiResponse({status: undefined, description: 'Created post', type: CreatePostDto})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:62\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\nThis function handles the creation of a new post by processing the provided CreatePostDto.\nIt logs the received data and returns a confirmation message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the details of the post to be created.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the post request was received.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post'})@ApiResponse({status: undefined, description: 'Deleted post'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: undefined, description: 'All posts', type: undefined})@Get(':userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\nThis function handles GET requests to fetch all posts associated with a given user ID.\nIt logs the user ID for which posts are being retrieved and then calls the post service\nto fetch the posts.\nExample :                                representing all posts for the specified user.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user whose posts are to be retrieved.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CreatePostDto objects,\nrepresenting all posts for the specified user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(updatePostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates a post'})@ApiResponse({status: undefined, description: 'Updated post', type: CreatePostDto})@Patch('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:86\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\nThis function handles PATCH requests to update an existing post using the provided data.\nIt logs the update data received and processes the partial post update through the\nPatchPostDto data transfer object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the fields to be updated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A confirmation message indicating that the patch request was received.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   *\n   * This function handles GET requests to fetch all posts associated with a given user ID.\n   * It logs the user ID for which posts are being retrieved and then calls the post service\n   * to fetch the posts.\n   *\n   * @param {number} userId - The ID of the user whose posts are to be retrieved.\n   * @returns {Promise} A promise that resolves to an array of CreatePostDto objects,\n   *                                     representing all posts for the specified user.\n   */\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'All posts',\n    type: [CreatePostDto],\n  })\n  @Get(':userId?')\n  getAllPosts(@Param('userId') userId: number) {\n    return this.postService.getAllPosts({ userId });\n  }\n\n  /**\n   * Creates a new post.\n   *\n   * This function handles the creation of a new post by processing the provided CreatePostDto.\n   * It logs the received data and returns a confirmation message.\n   *\n   * @param {CreatePostDto} createPostDto - The data transfer object containing the details of the post to be created.\n   * @returns {string} A confirmation message indicating that the post request was received.\n   */\n  @ApiOperation({\n    summary: 'Creates a new post',\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Created post',\n    type: CreatePostDto,\n  })\n  @Post('')\n  createPost(@Body() createPostDto: CreatePostDto) {\n    const createdPost = this.postService.create({ createPost: createPostDto });\n    return createdPost;\n  }\n\n  /**\n   * Updates an existing post.\n   *\n   * This function handles PATCH requests to update an existing post using the provided data.\n   * It logs the update data received and processes the partial post update through the\n   * PatchPostDto data transfer object.\n   *\n   * @param {PatchPostDto} updatePostDto - The data transfer object containing the fields to be updated.\n   * @returns {string} A confirmation message indicating that the patch request was received.\n   */\n  @ApiOperation({\n    summary: 'Updates a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Updated post',\n    type: CreatePostDto,\n  })\n  @Patch('')\n  updatePost(@Body() updatePostDto: PatchPostDto) {\n    console.log({ updatePostDto });\n\n    return 'You sent a patch request to posts endpoint';\n  }\n\n  @ApiOperation({\n    summary: 'Deletes a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Deleted post',\n  })\n  @Delete('')\n  deletePost(@Query('id', ParseIntPipe) id: number) {\n    if (!id) {\n      throw new HttpException('No ID Provided', HttpStatus.BAD_REQUEST);\n    }\n\n    const deleteRequest = this.postService.delete({ id });\n\n    return deleteRequest;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { UserModule } from 'src/user/user.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post as PostEntity } from './entity/post.entity';\nimport { MetaOption } from 'src/meta-options/entity/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\n\n@Module({\n  imports: [\n    UserModule,\n    TagsModule,\n    TypeOrmModule.forFeature([PostEntity, MetaOption]),\n  ],\n  controllers: [PostsController],\n  providers: [PostsService],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAllPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userServices: UserService, tagsService: TagsService, postRepository: Repository, metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userServices\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption as MetaOptionRepository } from 'src/meta-options/entity/meta-option.entity';\nimport { Post as PostRepository } from './entity/post.entity';\nimport { TagsService } from 'src/tags/tags.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /**\n     * Repositories Injections\n     */\n\n    // injecting user service (making user of another service (a single dependency injection))\n    private userServices: UserService,\n\n    private tagsService: TagsService,\n\n    /**\n     * Repositories Injections\n     */\n    @InjectRepository(PostRepository)\n    private postRepository: Repository,\n\n    @InjectRepository(MetaOptionRepository)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create({ createPost }: { createPost: CreatePostDto }) {\n    const author = await this.userServices.findOneById({\n      id: createPost.authorId,\n    });\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: createPost.tags,\n    });\n\n    const post = await this.postRepository.create({\n      ...createPost,\n      author: author,\n      tags: tags,\n    });\n\n    await this.postRepository.save(post);\n\n    return post;\n  }\n\n  public async getAllPosts({ userId }: { userId: number }) {\n    const posts = await this.postRepository.find({});\n\n    return posts;\n  }\n\n  public async delete({ id }: { id: number }) {\n    // const post = await this.postRepository.findOneBy({ id });\n\n    // if (!post) {\n    //   throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    // }\n\n    await this.postRepository.delete({ id });\n\n    // await this.metaOptionsRepository.delete({ id: post.metaOptions.id });\n\n    return { message: 'Post deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/entity/tags.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                deletedDate\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:54\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'json',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n    length: 1024,\n  })\n  featuredImageUrl?: string;\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @DeleteDateColumn({})\n  deletedDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createTag: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTag\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { ApiOperation } from '@nestjs/swagger';\nimport { TagsService } from './tags.service';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(private tagsService: TagsService) {}\n\n  @Post('')\n  createPost(@Body() createTag: CreateTagDto) {\n    const createdTags = this.tagsService.createTag({ tag: createTag });\n\n    return createdTags;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsService } from './tags.service';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './entity/tags.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Tag])],\n  controllers: [TagsController],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTags\n                            \n                            \n                                    Public\n                                    Async\n                                getTagById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTags()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getTagById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTagById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { In, Repository } from 'typeorm';\nimport { Tag as TagRepository } from './entity/tags.entity';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    @InjectRepository(TagRepository)\n    private tagsRepository: Repository,\n  ) {}\n\n  public async createTag({ tag }: { tag: CreateTagDto }) {\n    const existingTags = await this.tagsRepository.findOne({\n      where: { name: tag.name },\n    });\n\n    if (existingTags) {\n      throw new HttpException('Tag already exists', HttpStatus.CONFLICT);\n    }\n\n    const createdTags = await this.tagsRepository.create(tag);\n\n    await this.tagsRepository.save(createdTags);\n\n    return createdTags;\n  }\n\n  public async getAllTags() {\n    const tags = await this.tagsRepository.find({});\n\n    return tags;\n  }\n\n  public async getTagById({ id }: { id: number }) {\n    const tag = await this.tagsRepository.findOneBy({ id });\n\n    if (!tag) {\n      throw new HttpException('Tag not found', HttpStatus.NOT_FOUND);\n    }\n\n    return tag;\n  }\n\n  public async findMultipleTags({ tags }: { tags: number[] }) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags),\n      },\n    });\n\n    return results;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 60, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, posts => posts.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    unique: true,\n    nullable: false,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 60,\n    nullable: false,\n  })\n  password: string;\n\n  @OneToMany(() => Post, (posts) => posts.author) // first argument is the one we want to setup a relationship with, second argument is the what references the relationship\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Get all users', description: 'Get all users with optional pagination'})@ApiResponse({status: 200, description: 'All users', type: CreateUserDto})@ApiQuery({name: 'limit', type: Number, required: false, description: 'Limit the number of returned results', example: 10})@ApiQuery({name: 'page', type: Number, required: false, description: 'The position of the number that you want the api to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users') // with the updated version of @nestjs/swagger there is no need to use @ApiTags\nexport class UserController {\n  /**\n   * Final Endpoint - /users/id?limit=10&page=1\n   * Parama id - optional, convert to integer, cannot have a default value\n   * Query limit - integer, default 10\n   * Query page - integer, default value 1\n   * ==> USE CASES\n   * /users/ -> return all users with default pagination\n   * /users/1223 -> returns one user whos id is 1234\n   * /users?limit=10&page=2 -> return page 2 with limit of pagination 10\n   */\n\n  constructor(private readonly userService: UserService) {}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Get all users',\n    description: 'Get all users with optional pagination',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'All users',\n    type: CreateUserDto,\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: Number,\n    required: false,\n    description: 'Limit the number of returned results',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    required: false,\n    description: 'The position of the number that you want the api to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    // console.log(getUserParamDto);\n    // console.log(`Limit: ${limit}, Page: ${page}`);\n\n    const findAll = this.userService.findAll({\n      page,\n      limit,\n      userParamsDTO: getUserParamDto,\n    });\n\n    return findAll;\n  }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    const createUser = this.userService.createUser({ user: createUserDto });\n    return createUser;\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n    // return 'You sent a patch request to users endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entity/user.entity';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule), // for dependency injection (circular dependency injection)\n    TypeOrmModule.forFeature([User]), // for repository (entity) injection\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/auth.service';\nimport { Repository } from 'typeorm';\nimport { User } from './entity/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from './dtos/create-user.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => AuthService))\n    private authService: AuthService,\n\n    // injecting user service repository dependency\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) {}\n\n  public async createUser({\n    user,\n  }: {\n    user: CreateUserDto;\n  }): Promise {\n    // check user\n    const existingUser = await this.userRepository.findOne({\n      where: { email: user.email },\n    });\n\n    // handle exception\n    if (existingUser) {\n      throw new HttpException('Email already exists', HttpStatus.CONFLICT);\n    }\n\n    // create a new user\n    const newUser = await this.userRepository.create(user);\n    await this.userRepository.save(newUser);\n\n    return newUser;\n  }\n\n  public findAll({\n    userParamsDTO,\n    limit,\n    page,\n  }: {\n    userParamsDTO: GetUsersParamDto;\n    limit: number;\n    page: number;\n  }) {\n    const { id } = userParamsDTO;\n\n    const isAuth = this.authService.isAuthenticated();\n    console.log(`User authenticated: ${isAuth}`);\n\n    if (!isAuth) {\n      throw new HttpException('User not found', HttpStatus.FORBIDDEN);\n    }\n\n    console.log(\n      `Find all users with id: ${id}, limit: ${limit}, page: ${page}`,\n    );\n\n    return [\n      { id: 1, firstName: 'John Doe', email: 'john@doe.com' },\n      { id: 2, firstName: 'Jane Doe', email: 'jane@doe.com' },\n    ];\n  }\n\n  public async findOneById({ id }: { id: number }) {\n    const user = await this.userRepository.findOneBy({ id });\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/auth.controller.ts\n            \n            type alias\n            LoginBody\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-meta-options.dto.ts\n            \n            class\n            CreateMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/entity/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/entity/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/entity/tags.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tags/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../posts.enums.ts)\n                        \n                        \n                            PostTypes   (src/.../posts.enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/posts.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PostTypes\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LoginBody   (src/.../auth.controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.controller.ts\n    \n    \n        \n            \n                \n                    \n                    LoginBody\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
