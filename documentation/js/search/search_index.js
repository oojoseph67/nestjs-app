var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.252,1,2.456]],["body/controllers/AppController.html",[0,2.071,1,4.061,2,1.787,3,0.371,4,0.334,5,0.334,6,4.125,7,0.527,8,1.958,9,5.708,10,1.277,11,0.022,12,0.801,13,4.833,14,1.688,15,1.958,16,0.501,17,1.079,18,3.717,19,4.125,20,0.371,21,0.014,22,2.8,23,3.31,24,1.688,25,4.833,26,0.017,27,0.017]],["title/modules/AppModule.html",[28,1.12,29,2.456]],["body/modules/AppModule.html",[0,0.888,1,3.141,2,1.412,3,0.195,4,0.176,5,0.353,11,0.022,16,0.583,17,0.568,18,3.326,19,2.17,20,0.195,21,0.007,26,0.011,27,0.011,28,1.706,29,4.772,30,1.123,31,1.057,32,1.277,33,1.277,34,1.123,35,2.305,36,1.277,37,2.17,38,2.17,39,2.17,40,3.326,41,3.601,42,3.326,43,3.601,44,3.326,45,3.09,46,3.09,47,1.919,48,1.277,49,1.277,50,1.925,51,2.877,52,2.877,53,2.877,54,2.954,55,2.542,56,2.542,57,2.542,58,2.542,59,2.542,60,1.595,61,1.123,62,1.687,63,2.396,64,2.17,65,2.542,66,2.542,67,2.542,68,3.259,69,4.352,70,1.741,71,2.542,72,2.542,73,3.819,74,2.542,75,3.819,76,2.542,77,3.819,78,2.542,79,0.996,80,3.472,81,1.925,82,2.542,83,2.542,84,2.469,85,2.542,86,2.542,87,3.819,88,3.819,89,3.259,90,2.616,91,2.542,92,3.819,93,2.542,94,3.819,95,2.542,96,2.542,97,2.542,98,2.542,99,2.17,100,2.542,101,2.17,102,2.17,103,2.542,104,0.996,105,2.542,106,2.542,107,2.17,108,2.616,109,2.542,110,0.37,111,2.542,112,2.542,113,2.542,114,3.819,115,2.542,116,2.542,117,1.925,118,2.542,119,1.473,120,2.542,121,1.925,122,2.542,123,1.473,124,2.542,125,2.542,126,2.542,127,1.369,128,2.17,129,2.542,130,2.891,131,2.542,132,0.94,133,0.94,134,1.925,135,2.542,136,2.542,137,2.542,138,1.925]],["title/injectables/AppService.html",[18,2.078,139,1.059]],["body/injectables/AppService.html",[3,0.386,4,0.348,5,0.348,7,0.548,8,2.005,9,5.785,11,0.021,12,0.833,14,1.755,15,2.005,16,0.424,17,1.122,18,3.518,20,0.386,21,0.014,24,1.755,26,0.018,27,0.018,139,1.793,140,2.365,141,4.289,142,5.025,143,4.289,144,4.289]],["title/controllers/AuthController.html",[0,1.252,145,2.456]],["body/controllers/AuthController.html",[0,1.558,2,1.649,3,0.342,4,0.309,5,0.309,7,0.487,8,1.862,10,1.179,11,0.022,12,0.739,14,1.558,15,1.862,16,0.476,17,0.996,20,0.342,21,0.013,22,2.584,24,1.558,26,0.017,27,0.017,110,0.821,117,3.376,119,2.584,145,3.863,146,3.376,147,2.798,148,4.461,149,4.814,150,4.461,151,5.184,152,5.641,153,4.461,154,1.748,155,1.558,156,1.054,157,2.798,158,1.317,159,3.33,160,3.807,161,1.473,162,1.246,163,4.461,164,4.461,165,4.461]],["title/modules/AuthModule.html",[28,1.12,40,2.078]],["body/modules/AuthModule.html",[2,2.032,3,0.329,4,0.296,5,0.296,11,0.022,16,0.541,17,0.956,20,0.329,21,0.012,26,0.016,27,0.016,28,1.895,30,1.892,31,1.78,32,2.151,33,2.151,34,1.892,35,3.05,36,3.05,40,3.993,45,2.959,47,2.761,48,2.151,49,2.151,54,2.481,145,4.157,159,3.874,160,3.654,166,3.654,167,3.654,168,3.654,169,4.282,170,3.764,171,4.282,172,3.654,173,3.184,174,3.448,175,2.933]],["title/injectables/AuthService.html",[139,1.059,159,1.931]],["body/injectables/AuthService.html",[3,0.281,4,0.253,5,0.253,7,0.399,8,1.636,11,0.022,12,0.931,14,1.731,15,1.855,16,0.419,17,0.817,20,0.281,21,0.011,24,1.963,26,0.015,27,0.015,79,1.435,84,1.971,108,2.508,110,0.876,117,3.752,119,3.256,121,2.771,139,1.464,140,1.723,149,5.37,154,1.942,155,1.731,156,1.171,159,2.668,161,1.855,162,1.023,170,2.508,173,2.872,174,2.297,175,2.508,176,3.125,177,3.259,178,6.022,179,2.668,180,3.661,181,3.333,182,3.661,183,3.661,184,3.661,185,3.661,186,2.332,187,3.661,188,3.125,189,2.121,190,2.297,191,3.125,192,1.971,193,3.125,194,2.227,195,2.771,196,3.661,197,3.661,198,3.661,199,3.661,200,3.661,201,3.125,202,3.125,203,3.661,204,3.661]],["title/classes/CreateManyUsersDto.html",[21,0.01,205,2.078]],["body/classes/CreateManyUsersDto.html",[3,0.292,4,0.264,5,0.264,7,0.416,10,1.007,11,0.022,12,0.632,16,0.539,20,0.292,21,0.017,26,0.015,27,0.015,84,3.434,110,0.955,119,2.951,132,1.41,194,1.883,205,2.951,206,1.494,207,3.855,208,2.951,209,2.611,210,1.59,211,3.696,212,3.434,213,2.611,214,3.855,215,3.855,216,3.195,217,3.855,218,5.224,219,3.855,220,2.396,221,3.812,222,3.253,223,3.812,224,2.951,225,4.347,226,1.585,227,2.391,228,2.391,229,3.195,230,1.494,231,2.611,232,1.331,233,3.855,234,3.812,235,3.855,236,5.093,237,3.488,238,3.812,239,5.093,240,3.812,241,3.812,242,3.253]],["title/classes/CreateMetaOptionsDto.html",[21,0.01,243,2.078]],["body/classes/CreateMetaOptionsDto.html",[3,0.356,4,0.321,5,0.321,7,0.506,10,1.226,11,0.022,12,0.769,15,2.079,16,0.392,20,0.356,21,0.017,26,0.017,27,0.017,62,2.555,110,0.675,206,1.818,210,1.805,224,3.82,226,1.929,229,3.627,243,3.35,244,2.721,245,4.376,246,3.959,247,4.768,248,4.639,249,4.639,250,4.376,251,3.177,252,3.959,253,3.959,254,2.498]],["title/classes/CreatePostDto.html",[21,0.01,255,2.078]],["body/classes/CreatePostDto.html",[3,0.127,4,0.114,5,0.114,7,0.181,10,1.524,11,0.021,12,0.955,15,2.159,16,0.375,20,0.127,21,0.01,26,0.008,27,0.008,62,1.203,84,3.029,101,2.324,110,1.021,127,1.867,143,2.96,144,2.96,156,1.329,158,1.956,161,0.899,162,1.123,206,0.649,210,1.083,213,2.752,214,3.362,216,1.038,217,3.822,218,2.324,219,2.061,220,3.077,222,1.413,224,2.925,225,2.324,226,0.688,228,1.038,229,3.167,230,0.649,232,2.127,242,2.96,243,2.329,244,0.779,245,1.253,247,1.253,250,2.061,251,3.272,252,1.413,253,1.413,254,1.867,255,1.578,256,5.025,257,1.253,258,3.468,259,4.136,260,2.375,261,2.375,262,2.96,263,2.96,264,2.375,265,3.042,266,2.574,267,3.167,268,3.791,269,1.708,270,2.061,271,2.324,272,1.655,273,1.655,274,3.042,275,3.43,276,3.43,277,1.655,278,1.655,279,2.324,280,2.324,281,3.042,282,2.324,283,4.077,284,1.655,285,1.655,286,2.723,287,2.061,288,3.468,289,3.468,290,1.655,291,1.655,292,3.362,293,2.723,294,4.019,295,4.019,296,1.867,297,2.96,298,2.96,299,1.655,300,1.655,301,2.768,302,3.43,303,2.723,304,2.723,305,2.723,306,2.723,307,1.655,308,1.655,309,2.723,310,2.723,311,3.616,312,2.061,313,2.723,314,1.655,315,1.655,316,1.655,317,1.655,318,2.324,319,1.655,320,3.43,321,3.43,322,1.578,323,2.324,324,2.324,325,2.324,326,2.061,327,2.324,328,1.708,329,1.655,330,3.362,331,2.324,332,2.324,333,2.324,334,1.655,335,1.655,336,2.723,337,1.655,338,1.655,339,1.655,340,1.655,341,1.253,342,1.655,343,2.96,344,2.723,345,2.572,346,2.324,347,1.253,348,1.253,349,1.253,350,1.413,351,3.272,352,1.253,353,1.038,354,1.655,355,1.038,356,1.413,357,2.324,358,1.655,359,1.655,360,1.413,361,1.413,362,1.655,363,2.723,364,1.655,365,1.655,366,1.413,367,1.038,368,1.413,369,1.655,370,1.655,371,1.865]],["title/classes/CreateTagDto.html",[21,0.01,372,2.25]],["body/classes/CreateTagDto.html",[3,0.223,4,0.201,5,0.201,7,0.317,10,1.527,11,0.021,12,0.958,15,2.267,16,0.356,20,0.223,21,0.012,26,0.012,27,0.012,110,0.992,155,2.018,156,1.424,158,1.608,206,1.14,210,1.317,213,2.89,220,3.102,224,2.876,226,1.21,229,3.114,230,1.14,232,2.267,250,3.194,251,3.728,259,3.194,260,3.399,264,3.399,265,3.958,274,2.89,275,3.601,276,3.601,279,3.601,280,3.601,281,4.562,282,3.601,283,4.646,318,3.601,320,4.646,321,4.646,322,3.154,323,3.601,324,3.601,325,3.601,326,3.194,327,3.601,328,2.647,345,2.931,346,3.601,347,2.203,348,2.203,349,2.203,351,3.728,356,2.484,360,2.484,361,2.484,366,2.484,372,2.647,373,5.144,374,2.484,375,2.735,376,4.219,377,4.219,378,4.219,379,2.91,380,2.91,381,2.91,382,4.219,383,2.91,384,3.601,385,2.91,386,2.91,387,2.91,388,2.91,389,2.91,390,2.91,391,2.484,392,2.91]],["title/classes/CreateUserDto.html",[21,0.01,212,1.931]],["body/classes/CreateUserDto.html",[3,0.288,4,0.259,5,0.259,7,0.409,10,1.607,11,0.021,12,1.008,15,2.24,16,0.317,20,0.288,21,0.015,26,0.015,27,0.015,110,0.885,119,3.296,156,1.19,162,1.407,206,1.469,207,4.802,209,2.568,210,1.573,212,2.712,224,3.523,226,1.559,233,4.306,235,4.306,237,3.896,251,4.165,322,2.919,326,3.813,345,2.712,347,2.839,348,2.839,349,2.839,391,4.299,393,3.75,394,3.75,395,3.75,396,3.75,397,3.75,398,3.75,399,3.75,400,6.081,401,5.037,402,5.037,403,4.299,404,5.037,405,4.945,406,5.037,407,5.037,408,5.037,409,3.75,410,5.037,411,6.081,412,3.75,413,3.75]],["title/classes/GetPostsBaseDto.html",[21,0.01,414,2.456]],["body/classes/GetPostsBaseDto.html",[3,0.332,4,0.299,5,0.299,7,0.471,10,1.461,11,0.022,12,0.916,16,0.515,20,0.332,21,0.018,26,0.016,27,0.016,110,0.805,156,1.518,206,1.693,210,1.726,226,1.797,230,1.693,301,3.723,341,4.614,345,3.282,355,2.711,414,4.175,415,4.614,416,3.271,417,4.614,418,4.614,419,5.528,420,4.322,421,4.322,422,4.718,423,3.689,424,3.271,425,3.689,426,3.203,427,2.96,428,3.271,429,2.504,430,2.96]],["title/classes/GetPostsQueryDto.html",[21,0.01,429,2.078]],["body/classes/GetPostsQueryDto.html",[3,0.358,4,0.323,5,0.323,11,0.022,16,0.534,20,0.358,21,0.018,26,0.017,27,0.017,206,1.83,226,1.942,230,1.83,301,3.364,341,4.782,345,3.401,355,2.93,414,4.327,415,3.535,416,3.535,417,3.535,418,3.535,422,5.392,423,3.986,424,3.535,425,3.986,426,3.66,427,3.199,428,3.535,429,3.364,430,3.976]],["title/classes/GetUsersParamDto.html",[21,0.01,431,2.25]],["body/classes/GetUsersParamDto.html",[3,0.335,4,0.302,5,0.302,7,0.476,10,1.153,11,0.021,12,0.723,15,1.44,16,0.517,20,0.335,21,0.018,26,0.016,27,0.016,110,0.969,156,1.314,161,2.199,162,1.861,194,2.057,206,1.709,210,1.736,211,3.222,220,2.617,226,1.814,228,2.737,230,1.709,232,1.524,270,4.21,274,2.988,343,4.747,345,2.994,351,3.809,431,3.489,432,4.747,433,3.723,434,3.809,435,4.362,436,4.362,437,4.362,438,3.723]],["title/entities/MetaOption.html",[133,1.326,439,1.802]],["body/entities/MetaOption.html",[3,0.282,4,0.255,5,0.255,7,0.401,10,1.666,11,0.022,12,1.044,15,1.642,16,0.42,20,0.282,21,0.011,26,0.015,27,0.015,104,1.442,110,0.946,123,2.133,127,2.678,133,1.839,158,2.022,161,1.86,162,1.39,210,1.553,244,3.057,247,4.265,301,3.497,311,3.765,439,2.499,440,4.075,441,3.141,442,4.809,443,4.809,444,4.809,445,3.681,446,3.859,447,3.681,448,2.521,449,3.407,450,3.681,451,3.141,452,4.974,453,4.245,454,3.681,455,3.681,456,4.809,457,3.681,458,2.786,459,3.407,460,4.245,461,4.245,462,2.786,463,3.141,464,3.681,465,3.681,466,2.786]],["title/controllers/MetaOptionsController.html",[0,1.252,52,2.25]],["body/controllers/MetaOptionsController.html",[0,1.509,2,1.598,3,0.332,4,0.299,5,0.299,7,0.471,8,1.825,10,1.142,11,0.022,12,0.716,14,1.509,16,0.515,17,0.965,20,0.332,21,0.012,22,2.504,24,1.509,26,0.016,27,0.016,52,3.468,62,2.693,63,3.468,79,1.693,110,0.629,147,2.711,154,1.693,155,1.509,156,1.021,157,2.711,158,1.8,243,4.001,244,2.601,261,4.175,287,4.185,352,3.271,467,3.689,468,5.528,469,4.322,470,4.322,471,3.532,472,3.689,473,2.034,474,4.322,475,4.322,476,4.322]],["title/modules/MetaOptionsModule.html",[28,1.12,41,2.25]],["body/modules/MetaOptionsModule.html",[2,2.028,3,0.328,4,0.295,5,0.295,11,0.021,16,0.559,17,0.953,20,0.328,21,0.012,26,0.016,27,0.016,28,1.892,30,1.886,31,1.775,32,2.145,33,2.145,34,1.886,35,3.045,36,3.045,41,4.32,47,2.756,48,2.145,49,2.145,52,3.802,54,2.473,60,2.678,61,1.886,62,2.423,63,2.678,64,3.643,244,2.009,439,2.145,471,4.167,472,3.643,477,3.643,478,3.643,479,3.643,480,4.269,481,3.643,482,2.678,483,4.269]],["title/injectables/MetaOptionsService.html",[139,1.059,471,2.078]],["body/injectables/MetaOptionsService.html",[3,0.297,4,0.268,5,0.268,7,0.423,8,1.7,11,0.022,12,0.853,14,1.354,16,0.542,17,0.865,20,0.297,21,0.011,24,1.354,26,0.015,27,0.015,61,1.712,62,2.275,63,3.628,79,1.519,104,1.519,110,0.897,132,2.138,139,1.521,140,1.824,154,2.018,155,1.799,156,1.217,173,2.246,177,2.906,179,2.772,186,2.423,189,2.246,190,2.431,192,2.087,243,2.984,244,2.721,261,3.527,287,2.934,352,2.934,439,1.947,471,2.984,473,1.824,481,3.308,482,2.431,484,3.308,485,3.113,486,3.876,487,3.453,488,3.876,489,4.936,490,3.308,491,3.876,492,2.246,493,2.654,494,3.876,495,5.149,496,2.772,497,3.876,498,3.876]],["title/interfaces/Paginated.html",[499,2.456,500,2.25]],["body/interfaces/Paginated.html",[3,0.341,4,0.308,5,0.308,7,0.485,11,0.021,15,2.211,20,0.341,26,0.017,27,0.017,62,2.869,110,1.024,133,1.644,162,1.814,186,3.055,201,3.795,202,3.795,210,1.757,328,2.789,499,3.045,500,3.531,501,4.446,502,3.795,503,4.447,504,5.542,505,5.272,506,4.446,507,3.795,508,3.795,509,3.795,510,3.795,511,3.795,512,3.795,513,3.795,514,3.795]],["title/modules/PaginationModule.html",[28,1.12,42,2.078]],["body/modules/PaginationModule.html",[3,0.356,4,0.321,5,0.321,11,0.021,16,0.488,17,1.036,20,0.356,21,0.013,26,0.017,27,0.017,28,1.966,30,2.05,31,1.929,32,2.331,33,2.331,34,2.05,35,3.165,36,3.165,42,4.065,46,3.916,47,2.905,48,2.331,49,2.331,515,3.959,516,3.959,517,4.639,518,4.639,519,4.639]],["title/classes/PaginationQueryDto.html",[21,0.01,426,2.078]],["body/classes/PaginationQueryDto.html",[3,0.288,4,0.259,5,0.259,7,0.409,10,1.331,11,0.021,12,0.835,16,0.481,20,0.288,21,0.016,26,0.015,27,0.015,110,0.971,156,1.437,162,1.971,206,1.469,210,1.573,219,3.813,220,2.861,226,1.559,228,2.353,230,1.469,232,1.759,254,2.712,274,3.45,296,3.415,345,3.062,351,3.896,353,4.098,367,3.815,403,5.19,426,2.919,427,3.896,520,3.201,521,3.568,522,5.927,523,5.19,524,5.037,525,3.75,526,3.75,527,5.688]],["title/injectables/PaginationService.html",[46,1.931,139,1.059]],["body/injectables/PaginationService.html",[3,0.229,4,0.207,5,0.207,7,0.326,8,1.421,11,0.022,12,0.713,14,1.045,16,0.514,17,0.668,20,0.229,21,0.009,23,2.049,24,1.045,26,0.013,27,0.013,46,2.317,62,1.322,79,2.56,104,1.172,108,2.049,110,0.85,139,1.271,140,1.408,154,1.975,155,1.503,156,1.017,177,2.533,179,2.317,186,2.025,189,1.733,192,1.61,281,2.264,296,3.518,328,1.877,367,3.459,371,2.049,426,2.494,428,2.264,463,2.553,485,2.714,487,2.968,496,2.317,500,2.7,503,2.049,504,2.553,505,2.553,507,2.553,508,3.673,509,2.553,510,4.303,511,2.553,512,2.553,513,2.553,514,2.553,521,3.665,528,2.553,529,5.042,530,2.991,531,4.394,532,2.991,533,2.991,534,2.991,535,2.948,536,2.991,537,2.991,538,2.553,539,2.553,540,2.991,541,2.991,542,4.303,543,2.7,544,2.991,545,2.991,546,2.991,547,5.042,548,2.991,549,2.991,550,4.304,551,1.408,552,2.991,553,2.991,554,2.991,555,2.991,556,2.991,557,4.304,558,2.991,559,2.991,560,2.991,561,2.991,562,2.991,563,2.553,564,2.991,565,2.991]],["title/classes/PatchPostDto.html",[21,0.01,566,2.25]],["body/classes/PatchPostDto.html",[3,0.319,4,0.287,5,0.287,7,0.453,10,1.098,11,0.021,12,0.688,16,0.568,20,0.319,21,0.016,26,0.016,27,0.016,110,0.871,130,3.144,132,1.536,158,1.592,161,2.166,162,1.671,206,1.628,210,1.683,213,2.845,220,2.536,224,3.122,226,1.727,229,3.381,230,1.628,232,1.451,255,2.407,257,3.144,270,4.079,355,2.606,424,3.144,430,3.691,434,3.691,566,3.381,567,4.599,568,5.389,569,4.079,570,4.154,571,4.154,572,4.599,573,3.144,574,5.389,575,4.079,576,4.079,577,4.154,578,4.154,579,4.154,580,4.154,581,4.154,582,4.154]],["title/classes/PatchUserDto.html",[21,0.01,583,2.456]],["body/classes/PatchUserDto.html",[3,0.397,4,0.358,5,0.358,11,0.021,16,0.522,20,0.397,21,0.015,26,0.018,27,0.018,132,1.913,206,2.028,209,3.544,212,2.786,227,3.246,430,4.233,572,4.417,575,3.917,576,3.917,583,4.233,584,4.417,585,6.18]],["title/entities/Post.html",[133,1.326,158,1.059]],["body/entities/Post.html",[3,0.166,4,0.15,5,0.15,7,0.236,8,0.714,10,1.672,11,0.022,12,1.048,15,2.018,16,0.429,20,0.166,21,0.006,26,0.01,27,0.01,62,0.956,84,3.53,104,0.847,110,0.99,123,1.253,127,3.291,132,0.8,133,1.248,156,1.444,158,0.996,161,1.37,162,0.943,194,1.991,210,1.053,216,2.117,254,1.164,259,3.14,260,2.841,261,3.852,262,3.541,263,3.541,264,2.841,265,2.841,266,2.404,267,3.188,268,3.541,269,2.602,292,3.847,301,1.955,330,3.847,350,1.846,353,2.94,357,4.965,375,2.355,439,2.553,440,1.357,446,2.841,448,3.985,449,4.532,451,1.846,459,4.094,460,2.88,461,2.88,462,3.547,466,2.554,482,1.357,503,1.481,551,1.018,586,1.846,587,2.163,588,3.374,589,5.385,590,2.163,591,4,592,2.163,593,4.076,594,4.076,595,2.88,596,2.163,597,2.163,598,3.374,599,2.163,600,2.163,601,3.374,602,2.163,603,2.163,604,2.554,605,2.554,606,2.163,607,2.163,608,1.846,609,3.374,610,2.163,611,2.163,612,2.88,613,2.163,614,2.88,615,2.88,616,3.374,617,2.163,618,2.163,619,2.163,620,2.163,621,2.163,622,1.846,623,1.846,624,3.541,625,2.163,626,2.163,627,2.163,628,1.846,629,2.163,630,2.163,631,2.163,632,2.163,633,2.163,634,2.163,635,3.374,636,2.163,637,2.163,638,2.163,639,2.163]],["title/controllers/PostsController.html",[0,1.252,51,2.25]],["body/controllers/PostsController.html",[0,0.598,2,0.633,3,0.131,4,0.118,5,0.118,7,0.187,8,0.924,10,1.084,11,0.022,12,0.68,14,1.932,15,0.924,16,0.41,17,0.382,20,0.131,21,0.005,22,0.992,23,1.173,24,1.433,26,0.008,27,0.008,51,1.756,79,1.391,110,0.828,130,2.119,138,3.675,147,1.074,154,1.607,155,1.433,156,0.969,157,1.074,158,1.998,161,1.924,162,1.431,190,1.756,194,2.199,214,2.119,215,3.105,216,2.573,220,0.806,230,0.671,232,2.035,255,3.65,266,2.377,322,2.813,371,3.325,429,2.377,434,2.809,438,3.86,473,0.806,503,4.072,523,3.501,531,2.809,535,2.432,543,1.756,551,2.411,563,1.461,566,3.214,569,3.675,573,2.119,628,3.501,640,1.461,641,4.402,642,2.688,643,2.799,644,3.031,645,3.031,646,1.712,647,3.105,648,3.551,649,1.712,650,1.712,651,4.855,652,2.799,653,2.799,654,4.855,655,5.345,656,4.855,657,4.855,658,4.102,659,2.799,660,4.102,661,1.712,662,2.799,663,2.119,664,1.712,665,1.712,666,1.712,667,4.523,668,4.102,669,1.712,670,1.712,671,1.712,672,4.102,673,2.799,674,2.799,675,2.799,676,4.102,677,2.799,678,3.551,679,3.551,680,3.501,681,2.799,682,2.799,683,2.799,684,1.712,685,4.102,686,3.501,687,1.712,688,1.712,689,4.102,690,4.143,691,2.799,692,2.799,693,2.799,694,4.102,695,2.799,696,1.756,697,1.074,698,1.074,699,3.501,700,2.119,701,1.622,702,1.461,703,3.423,704,3.86,705,1.296,706,1.173,707,1.461,708,1.712,709,1.712,710,3.105,711,3.551,712,1.712,713,1.712,714,1.712,715,1.461,716,1.712,717,1.461,718,2.799,719,1.712,720,1.712,721,1.712,722,2.389,723,1.712,724,1.712,725,1.074,726,1.712,727,1.461,728,2.799,729,1.712]],["title/modules/PostsModule.html",[28,1.12,43,2.25]],["body/modules/PostsModule.html",[2,1.856,3,0.286,4,0.258,5,0.258,11,0.022,16,0.58,17,0.833,20,0.286,21,0.011,26,0.015,27,0.015,28,1.771,30,1.648,31,1.551,32,1.874,33,1.874,34,1.648,35,2.85,36,2.85,42,3.779,43,4.45,44,3.779,45,3.511,47,2.522,48,1.874,49,1.874,51,3.559,54,2.908,60,2.34,61,1.648,158,1.102,172,3.184,244,1.755,439,2.522,440,2.34,482,2.34,701,4.085,702,3.184,730,3.184,731,3.184,732,3.73,733,3.184,734,3.73,735,3.73,736,3.73,737,3.184,738,3.73,739,3.73,740,3.73]],["title/injectables/PostsService.html",[139,1.059,701,2.078]],["body/injectables/PostsService.html",[3,0.147,4,0.132,5,0.132,7,0.209,8,1.011,11,0.022,12,0.793,14,1.529,16,0.518,17,0.427,20,0.147,21,0.006,24,1.529,26,0.009,27,0.009,46,2.887,61,0.845,79,2.252,104,0.749,107,2.613,110,0.906,132,1.416,139,0.904,140,0.9,154,1.876,155,1.672,156,1.131,158,1.697,161,1.84,162,0.855,173,1.108,174,1.2,177,3.081,179,1.648,181,2.199,186,2.622,188,1.632,189,1.774,190,2.402,192,2.577,194,1.132,232,0.668,244,0.9,255,1.774,266,1.108,267,3.698,269,2.402,296,1.648,322,1.108,417,1.448,418,1.448,429,1.774,439,0.961,440,1.2,473,0.9,482,1.2,485,3.301,487,3,489,3.267,490,1.632,492,2.218,493,1.31,496,3.242,500,1.2,521,1.921,535,2.097,542,1.632,551,1.801,566,1.921,569,3.313,573,2.318,641,2.097,642,2.898,644,3.267,645,2.613,663,1.448,680,2.613,696,2.402,697,1.2,698,1.2,701,1.774,705,1.448,706,1.31,707,1.632,715,3.267,722,2.613,725,2.402,737,1.632,741,1.632,742,1.913,743,2.887,744,4.376,745,1.913,746,3.062,747,1.913,748,1.632,749,1.913,750,1.913,751,1.913,752,1.913,753,1.913,754,1.913,755,1.913,756,1.913,757,1.913,758,3.062,759,1.913,760,1.913,761,1.913,762,1.913,763,1.913,764,1.632,765,1.913,766,1.913,767,3.062,768,1.913,769,1.913,770,3.062,771,1.913,772,3.062,773,1.913,774,1.632,775,1.913,776,3.313,777,2.898,778,1.448,779,1.913,780,1.913,781,3.062,782,1.913,783,3.062,784,3.062,785,1.913,786,3.062,787,1.913,788,3.062,789,1.913,790,3.062,791,1.913,792,3.062,793,1.913,794,3.062,795,1.913,796,3.062,797,1.913,798,3.062,799,1.913,800,2.613,801,1.913,802,1.913,803,1.913,804,1.913,805,1.913,806,1.632,807,1.632]],["title/entities/Tag.html",[133,1.326,375,1.802]],["body/entities/Tag.html",[3,0.22,4,0.199,5,0.199,7,0.313,10,1.737,11,0.022,12,1.089,15,2.17,16,0.353,20,0.22,21,0.008,26,0.012,27,0.012,84,3.539,104,1.126,110,1.005,123,1.665,127,2.914,133,1.546,155,1.721,156,1.418,158,1.772,161,1.627,162,1.168,210,1.305,232,1.721,260,3.375,264,3.375,265,3.375,301,3.477,311,3.165,375,2.101,442,4.206,443,4.206,444,4.206,446,3.375,448,3.938,449,4.502,453,3.568,456,4.206,458,2.175,459,4.11,462,3.165,591,3.568,593,4.542,594,4.542,595,3.568,604,3.165,605,4.097,608,2.453,612,3.568,614,2.453,615,3.568,641,3.375,800,3.568,808,2.453,809,4.928,810,2.874,811,4.928,812,2.874,813,2.874,814,2.874,815,2.874,816,2.874,817,2.874,818,2.874,819,2.874,820,2.874]],["title/controllers/TagsController.html",[0,1.252,53,2.25]],["body/controllers/TagsController.html",[0,1.16,2,1.228,3,0.255,4,0.23,5,0.23,7,0.362,8,1.53,10,1.411,11,0.022,12,0.885,14,1.865,16,0.488,17,0.741,20,0.255,21,0.01,22,1.924,24,1.865,26,0.014,27,0.014,53,2.907,79,1.301,110,0.777,132,1.714,147,2.083,154,2.092,155,1.865,156,1.261,157,2.083,158,1.369,161,2.176,162,1.759,230,1.301,267,2.083,372,3.624,375,3.163,473,1.562,485,3.389,492,2.685,496,2.495,543,2.083,642,3.508,647,4.041,696,4.134,700,4.041,703,4.373,710,4.041,717,2.834,743,2.874,821,2.834,822,4.634,823,4.634,824,3.32,825,3.32,826,3.32,827,4.556,828,3.32,829,3.32,830,3.32,831,3.32,832,3.955,833,3.32,834,3.32,835,2.834,836,2.834,837,3.32,838,3.955,839,3.32,840,3.32,841,3.32,842,3.32,843,3.32,844,3.32]],["title/modules/TagsModule.html",[28,1.12,44,2.078]],["body/modules/TagsModule.html",[2,2.048,3,0.333,4,0.3,5,0.3,11,0.022,16,0.562,17,0.968,20,0.333,21,0.012,26,0.016,27,0.016,28,1.906,30,1.916,31,1.802,32,2.178,33,2.178,34,1.916,35,3.067,36,3.067,44,4.004,47,2.783,48,2.178,49,2.178,53,3.83,54,2.512,60,2.72,61,1.916,375,2.178,743,3.88,836,3.7,845,3.7,846,3.7,847,3.7,848,4.335,849,4.335,850,3.7,851,4.335]],["title/injectables/TagsService.html",[139,1.059,743,1.931]],["body/injectables/TagsService.html",[3,0.186,4,0.167,5,0.167,7,0.264,8,1.214,11,0.022,12,0.97,14,1.967,16,0.452,17,0.54,20,0.186,21,0.007,24,1.967,26,0.015,27,0.011,61,1.069,79,2.095,104,0.948,110,0.983,139,1.086,140,1.138,154,2.207,155,2.045,156,1.331,161,2.144,162,1.389,177,3.439,179,1.98,186,2.965,192,1.302,195,1.831,266,2.131,267,3.119,322,2.131,372,2.307,375,3.031,473,1.138,485,3.685,487,2.676,492,3.263,493,1.656,496,3.248,551,1.73,663,2.784,696,2.791,697,1.517,698,1.517,725,2.307,743,1.98,748,2.064,776,1.831,777,1.831,806,3.139,807,3.139,827,3.798,832,2.064,835,2.064,838,3.139,850,2.064,852,2.064,853,4.45,854,4.971,855,4.45,856,4.45,857,2.419,858,2.419,859,3.678,860,2.419,861,2.419,862,2.419,863,2.419,864,2.419,865,2.419,866,2.419,867,2.419,868,2.419,869,2.419,870,2.419,871,2.419,872,3.678,873,2.419,874,2.419,875,3.678,876,2.064,877,2.064,878,2.419,879,2.419,880,3.678,881,2.419,882,2.419,883,2.419,884,2.419]],["title/entities/User.html",[133,1.326,194,1.326]],["body/entities/User.html",[3,0.254,4,0.229,5,0.229,7,0.36,10,1.661,11,0.022,12,1.041,15,2.173,16,0.39,20,0.254,21,0.01,26,0.014,27,0.014,84,3.104,104,1.295,110,0.986,119,3.085,123,1.915,127,3.384,133,1.708,134,2.501,156,1.091,158,1.703,161,1.758,162,1.29,194,1.708,210,1.442,233,4.031,235,4.031,237,3.647,328,2.073,405,2.501,446,3.647,448,3.949,449,4.508,458,2.501,459,4.155,466,3.496,593,4.983,594,4.983,604,3.496,605,3.496,641,4.155,885,2.82,886,3.304,887,5.766,888,3.304,889,3.304,890,3.304,891,3.942,892,3.304,893,3.304,894,4.619,895,3.304,896,4.619,897,4.619,898,3.304,899,3.304,900,3.304]],["title/controllers/UserController.html",[0,1.252,901,2.456]],["body/controllers/UserController.html",[0,0.737,2,0.78,3,0.162,4,0.146,5,0.146,7,0.23,8,1.093,10,1.222,11,0.022,12,0.766,14,1.754,16,0.471,17,0.471,20,0.162,21,0.006,22,1.223,23,1.445,24,2.072,26,0.014,27,0.01,79,1.6,99,2.825,110,0.884,127,2.489,132,1.71,134,2.505,147,1.324,154,1.812,155,1.861,156,1.317,157,1.324,158,1.206,161,1.093,162,1.803,177,3.16,181,2.052,194,1.224,205,2.679,208,2.366,211,3.78,212,3.106,217,3.5,220,2.176,227,2.562,230,1.297,232,2.12,254,1.782,266,1.223,271,3.485,296,3.268,353,2.901,367,2.076,405,1.597,431,2.901,473,1.557,521,3.882,522,3.485,531,1.445,543,2.562,551,1.557,583,3.952,647,2.505,686,1.801,690,3.946,696,1.324,699,2.825,700,3.091,703,3.091,704,2.825,705,1.597,706,1.445,710,2.505,764,3.485,901,2.267,902,1.801,903,3.31,904,3.946,905,4.083,906,3.31,907,2.11,908,3.31,909,2.11,910,2.11,911,4.083,912,2.11,913,2.11,914,2.11,915,2.11,916,3.31,917,2.11,918,3.31,919,2.11,920,3.31,921,2.825,922,2.11,923,2.11,924,4.083,925,2.11,926,2.11,927,2.11,928,2.11,929,2.11,930,2.11,931,2.11,932,1.801,933,1.801,934,4.083,935,3.31,936,2.11,937,2.11,938,1.801,939,2.11,940,2.11,941,2.825,942,2.11,943,2.11,944,2.11,945,2.11,946,2.11,947,2.11,948,2.11,949,2.11,950,2.11,951,2.11,952,2.11,953,2.11,954,2.11,955,2.11,956,2.11,957,2.11,958,2.825,959,2.11,960,1.801,961,2.11,962,2.11,963,2.11,964,2.11,965,3.31,966,2.11,967,2.11,968,2.11]],["title/injectables/UserCreateMany.html",[139,1.059,969,2.078]],["body/injectables/UserCreateMany.html",[3,0.214,4,0.193,5,0.193,7,0.304,8,1.35,11,0.022,12,0.677,14,0.974,16,0.451,17,0.622,20,0.214,21,0.008,24,0.974,26,0.012,27,0.012,79,1.897,104,1.602,110,0.776,121,3.095,132,1.972,133,1.512,139,1.208,140,1.312,154,1.602,155,1.428,156,0.966,177,2.433,179,2.201,186,1.924,189,1.615,192,1.501,194,1.972,205,2.369,208,1.615,211,2.806,215,2.11,227,1.749,231,1.909,232,1.863,312,4.038,371,1.909,473,1.312,485,2.607,492,1.615,496,3.196,543,2.565,551,2.51,697,3.346,698,1.749,725,3.346,727,2.379,778,4.038,969,2.369,970,4.133,971,2.379,972,4.133,973,2.787,974,5.37,975,2.787,976,2.379,977,2.787,978,2.379,979,4.089,980,2.787,981,4.842,982,2.787,983,2.787,984,4.552,985,2.787,986,4.552,987,4.842,988,5.68,989,2.787,990,5.334,991,5.334,992,3.49,993,5.334,994,2.787,995,4.089,996,3.49,997,2.787,998,2.787,999,2.787,1000,2.787,1001,2.787,1002,2.787,1003,2.787,1004,2.787,1005,2.787,1006,2.787,1007,2.787,1008,2.787,1009,2.787,1010,2.787,1011,2.787,1012,2.787,1013,4.089,1014,2.787]],["title/modules/UserModule.html",[28,1.12,45,1.931]],["body/modules/UserModule.html",[2,1.88,3,0.292,4,0.263,5,0.263,11,0.022,16,0.582,17,0.849,20,0.292,21,0.011,26,0.015,27,0.015,28,1.788,30,1.68,31,1.581,32,1.91,33,1.91,34,1.68,35,2.878,36,2.878,40,2.945,45,3.71,47,2.554,48,1.91,49,1.91,54,2.203,60,2.385,61,1.68,68,3.245,70,2.604,132,1.406,133,1.406,170,3.482,173,2.945,174,3.593,175,2.604,181,3.553,194,1.88,208,2.203,231,2.604,487,2.047,901,3.923,933,3.245,969,3.8,1015,3.245,1016,3.245,1017,3.245,1018,3.802,1019,3.802,1020,3.802,1021,3.245,1022,3.245,1023,3.802,1024,3.802]],["title/injectables/UserService.html",[139,1.059,181,1.802]],["body/injectables/UserService.html",[3,0.163,4,0.147,5,0.147,7,0.232,8,1.098,11,0.022,12,0.835,14,1.62,16,0.524,17,0.474,20,0.163,21,0.006,24,1.432,26,0.01,27,0.01,28,0.663,31,0.883,61,0.938,69,4.767,70,1.454,79,1.606,81,1.607,89,3.96,90,2.278,104,1.303,108,1.454,110,0.93,132,1.23,139,0.982,140,0.999,154,1.974,155,1.759,156,1.19,159,3.007,161,1.353,162,1.145,170,1.454,173,2.375,174,1.332,175,1.454,177,3.165,179,1.79,181,1.671,186,2.721,189,2.919,190,2.086,191,1.812,192,2.877,193,1.812,194,2.249,195,1.607,205,1.927,208,1.927,211,2.688,212,1.79,216,1.332,227,2.086,231,1.454,232,1.161,237,1.454,296,1.79,312,2.517,431,2.086,434,1.454,473,1.565,485,3.2,487,2.712,492,1.927,493,1.454,496,2.712,521,2.086,531,1.454,535,2.278,551,2.37,697,2.086,698,1.332,706,1.454,725,2.91,776,1.607,777,1.607,778,2.517,876,1.812,877,1.812,904,3.499,921,3.499,932,1.812,941,3.499,958,3.499,960,2.838,969,2.688,972,3.499,974,4.934,976,1.812,978,1.812,984,1.812,986,1.812,996,2.838,1021,1.812,1022,1.812,1025,1.812,1026,4.099,1027,2.123,1028,4.099,1029,4.099,1030,4.639,1031,4.099,1032,2.123,1033,2.123,1034,2.123,1035,2.123,1036,2.123,1037,2.123,1038,2.123,1039,2.123,1040,2.123,1041,2.123,1042,2.123,1043,2.123,1044,2.123,1045,2.123,1046,4.099,1047,2.123,1048,2.123,1049,2.123,1050,3.325,1051,2.123,1052,2.123,1053,2.123,1054,2.123,1055,2.123,1056,2.123,1057,2.123,1058,2.123,1059,2.123,1060,2.123,1061,3.325,1062,2.123,1063,2.123,1064,2.123,1065,2.123,1066,2.123,1067,2.123]],["title/coverage.html",[1068,3.699]],["body/coverage.html",[0,2.113,1,2.014,5,0.203,6,2.51,11,0.022,18,1.704,21,0.019,26,0.013,27,0.013,34,1.299,46,1.583,50,2.226,51,1.845,52,1.845,53,1.845,62,1.299,63,2.667,80,2.226,110,0.619,132,1.087,133,2.023,138,2.226,139,1.886,141,2.51,145,2.014,146,3.218,151,2.226,158,0.868,159,1.583,176,2.51,181,1.478,194,1.087,205,1.704,207,3.218,208,1.704,209,3.42,211,1.704,212,1.583,243,1.704,244,2.574,245,2.226,246,2.51,255,1.704,256,2.51,257,3.218,355,1.845,372,1.845,373,2.51,374,2.51,375,1.478,414,2.014,415,3.218,416,3.218,426,1.704,427,2.014,429,1.704,431,1.845,432,2.51,433,2.51,439,1.478,440,1.845,441,2.51,467,2.51,471,1.704,484,2.51,499,2.014,500,1.845,502,2.51,520,2.51,528,2.51,551,1.384,566,1.845,567,2.51,583,2.014,584,2.51,586,2.51,624,2.51,640,2.51,701,1.704,741,2.51,743,1.583,774,6.233,808,2.51,821,2.51,852,2.51,885,2.51,891,2.51,901,2.014,902,2.51,969,1.704,970,2.51,971,2.51,1025,2.51,1068,2.226,1069,2.941,1070,2.941,1071,6.386,1072,2.941,1073,6.507,1074,2.941,1075,4.993,1076,5.803,1077,2.51,1078,2.941,1079,2.941,1080,4.993,1081,2.941,1082,4.251,1083,2.941]],["title/dependencies.html",[31,1.792,1084,2.559]],["body/dependencies.html",[11,0.022,17,1.06,21,0.017,26,0.017,27,0.017,31,1.975,61,2.099,70,3.253,104,1.861,226,1.975,228,2.98,230,1.861,538,4.054,539,4.054,575,3.596,576,3.596,1085,4.75,1086,4.75,1087,6.366,1088,4.75,1089,4.75,1090,4.75,1091,4.75,1092,4.75,1093,4.75,1094,4.75,1095,4.75,1096,4.75,1097,4.75,1098,4.75,1099,4.75,1100,4.75,1101,4.75,1102,4.75,1103,4.75,1104,4.75]],["title/miscellaneous/enumerations.html",[1105,1.506,1106,3.679]],["body/miscellaneous/enumerations.html",[7,0.535,11,0.021,26,0.018,27,0.018,158,1.766,254,3.857,292,4.527,296,3.22,297,5.104,298,5.104,302,5.104,330,4.527,331,5.104,332,5.104,333,5.104,1105,2.463,1106,4.183,1107,5.981,1108,4.901]],["title/miscellaneous/functions.html",[1105,1.506,1109,3.679]],["body/miscellaneous/functions.html",[7,0.607,11,0.019,26,0.019,27,0.019,34,3.01,1077,4.753,1105,2.798,1109,4.753,1110,5.569]],["title/index.html",[7,0.327,1111,2.998,1112,2.998]],["body/index.html",[4,0.286,11,0.021,26,0.016,27,0.016,102,3.524,128,3.524,220,2.807,232,1.442,269,2.59,384,3.524,487,2.223,622,3.524,623,3.524,992,3.524,1068,3.126,1113,4.129,1114,4.129,1115,5.368,1116,4.129,1117,4.129,1118,4.129,1119,4.129,1120,4.129,1121,5.965,1122,4.129,1123,4.129,1124,6.833,1125,4.129,1126,4.129,1127,4.129,1128,6.711,1129,4.129,1130,5.368,1131,4.129,1132,4.129,1133,4.129,1134,5.368,1135,5.368,1136,4.129,1137,4.129,1138,4.129,1139,5.368,1140,5.368,1141,4.129,1142,4.129,1143,4.129,1144,4.129,1145,4.129,1146,3.524,1147,4.129,1148,4.129,1149,4.129,1150,4.129,1151,4.129,1152,4.129,1153,4.129,1154,4.129,1155,4.129,1156,4.129,1157,4.129,1158,4.129,1159,4.129,1160,4.129,1161,3.524]],["title/modules.html",[30,2.159]],["body/modules.html",[11,0.018,26,0.018,27,0.018,29,3.429,30,2.212,40,2.901,41,3.141,42,2.901,43,3.141,44,2.901,45,2.696,1146,6.084,1162,7.128,1163,7.128,1164,7.128]],["title/overview.html",[1165,4.171]],["body/overview.html",[2,1.213,11,0.021,18,3.073,26,0.014,27,0.014,28,1.024,29,4.89,30,1.45,31,1.364,32,1.649,33,1.649,34,1.45,35,1.649,36,1.649,37,2.8,38,2.8,39,2.8,40,3.634,41,3.934,42,3.731,43,4.329,44,3.731,45,3.595,46,3.538,47,2.309,48,1.649,49,1.649,123,1.901,140,1.544,159,3.467,166,2.8,167,2.8,168,2.8,181,3.236,206,1.286,367,2.058,368,2.8,471,3.731,477,2.8,478,2.8,479,2.8,499,2.247,515,2.8,516,2.8,701,3.731,730,2.8,731,2.8,733,2.8,743,3.467,845,2.8,846,2.8,847,2.8,969,3.073,1015,2.8,1016,2.8,1017,2.8,1165,2.8,1166,3.281,1167,3.281,1168,3.281,1169,3.281]],["title/properties.html",[210,1.346,1084,2.559]],["body/properties.html",[11,0.021,26,0.019,27,0.019,210,1.718,232,1.922,269,3.452,938,4.696,1161,4.696,1170,5.503,1171,5.503]],["title/miscellaneous/typealiases.html",[1105,1.506,1172,4.311]],["body/miscellaneous/typealiases.html",[7,0.603,11,0.019,26,0.019,27,0.019,110,0.935,146,4.182,151,4.862,186,2.6,1105,2.776,1173,5.525,1174,5.525]],["title/miscellaneous/variables.html",[90,2.953,1105,1.506]],["body/miscellaneous/variables.html",[7,0.6,11,0.02,26,0.019,27,0.019,50,4.165,80,4.851,81,4.165,90,3.769,254,2.962,353,3.452,1105,2.765,1175,5.503]],["title/routes.html",[1176,4.171]],["body/routes.html",[11,0.019,26,0.019,27,0.019,1176,4.89]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":774,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1170,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1094,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1101,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1104,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1093,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1073,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1078,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1071,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1076,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1075,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1082,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1080,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1081,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":367,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["1.1.26",{"_index":1086,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":522,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{}}}],["10.0.0",{"_index":1087,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1092,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":595,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":919,"title":{},"body":{"controllers/UserController.html":{}}}],["11",{"_index":1169,"title":{},"body":{"overview.html":{}}}],["123",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["1234",{"_index":948,"title":{},"body":{"controllers/UserController.html":{}}}],["16t12:00:00+0000",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.13.3",{"_index":1096,"title":{},"body":{"dependencies.html":{}}}],["1})@get('/:id",{"_index":922,"title":{},"body":{"controllers/UserController.html":{}}}],["1})@isoptional()@ispositive",{"_index":524,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["2",{"_index":950,"title":{},"body":{"controllers/UserController.html":{}}}],["2.0.6",{"_index":1089,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":916,"title":{},"body":{"controllers/UserController.html":{}}}],["2024",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["255",{"_index":604,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["3.3.0",{"_index":1088,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":1079,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":368,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["512",{"_index":612,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6",{"_index":1167,"title":{},"body":{"overview.html":{}}}],["60",{"_index":891,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["7",{"_index":1166,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":1103,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1168,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":1091,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":1098,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":887,"title":{},"body":{"entities/User.html":{}}}],["actual",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Paginated.html":{}}}],["add",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["additional",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{}}}],["adds",{"_index":354,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alias",{"_index":1074,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1173,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["already",{"_index":876,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["amazing",{"_index":1147,"title":{},"body":{"index.html":{}}}],["another",{"_index":760,"title":{},"body":{"injectables/PostsService.html":{}}}],["api",{"_index":921,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["apioperation",{"_index":703,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":647,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":229,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":213,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":351,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({description",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({})@isjson()@isoptional",{"_index":387,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiquery",{"_index":934,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":704,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":935,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":937,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":1126,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1120,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":897,"title":{},"body":{"entities/User.html":{}}}],["array",{"_index":214,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["associated",{"_index":673,"title":{},"body":{"controllers/PostsController.html":{}}}],["async",{"_index":485,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":145,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":159,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":425,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["await",{"_index":496,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":1148,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":547,"title":{},"body":{"injectables/PaginationService.html":{}}}],["being",{"_index":675,"title":{},"body":{"controllers/PostsController.html":{}}}],["bi",{"_index":464,"title":{},"body":{"entities/MetaOption.html":{}}}],["blog",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["body",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1164,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1162,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1116,"title":{},"body":{"index.html":{}}}],["calls",{"_index":677,"title":{},"body":{"controllers/PostsController.html":{}}}],["cascade",{"_index":462,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":454,"title":{},"body":{"entities/MetaOption.html":{}}}],["cases",{"_index":945,"title":{},"body":{"controllers/UserController.html":{}}}],["catch",{"_index":986,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["cause",{"_index":778,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["character",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["check",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["circular",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["class",{"_index":21,"title":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":206,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":477,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_exports",{"_index":479,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":478,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":515,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":516,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":517,"title":{},"body":{"modules/PaginationModule.html":{}}}],["cluster_postsmodule",{"_index":730,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":733,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":732,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":731,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":845,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":846,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":847,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1015,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1016,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1017,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":459,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":448,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["commit",{"_index":998,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["compodoc/compodoc",{"_index":1085,"title":{},"body":{"dependencies.html":{}}}],["composed",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["config/database.config",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["config/index.config",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":1022,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["configmodule",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1024,"title":{},"body":{"modules/UserModule.html":{}}}],["configmodule.forroot",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["configservice.get('database.port",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_host",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_name",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_password",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_port",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_username",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":1030,"title":{},"body":{"injectables/UserService.html":{}}}],["configuration",{"_index":1044,"title":{},"body":{"injectables/UserService.html":{}}}],["confirmation",{"_index":656,"title":{},"body":{"controllers/PostsController.html":{}}}],["connect",{"_index":983,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["connection",{"_index":987,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["console.log",{"_index":563,"title":{},"body":{"injectables/PaginationService.html":{},"controllers/PostsController.html":{}}}],["console.log('node_env",{"_index":1058,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('profile",{"_index":1059,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`environment",{"_index":1057,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`limit",{"_index":957,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(`logging",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(getuserparamdto",{"_index":956,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log({updatepostdto",{"_index":721,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":1027,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(datasource",{"_index":973,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["constructor(metaoptionsrepository",{"_index":486,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["constructor(request",{"_index":530,"title":{},"body":{"injectables/PaginationService.html":{}}}],["constructor(tagsrepository",{"_index":857,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userservice",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(userservices",{"_index":742,"title":{},"body":{"injectables/PostsService.html":{}}}],["containing",{"_index":658,"title":{},"body":{"controllers/PostsController.html":{}}}],["content",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{}}}],["context",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":474,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":708,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":837,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":936,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convert",{"_index":944,"title":{},"body":{"controllers/UserController.html":{}}}],["correct",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["coverage",{"_index":1068,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateManyUsersDto.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["create(undefined",{"_index":490,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["created",{"_index":215,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/PostsController.html":{},"injectables/UserCreateMany.html":{}}}],["createdatecolumn",{"_index":444,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createddate",{"_index":442,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdmetaoption",{"_index":495,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createdpost",{"_index":718,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdtags",{"_index":838,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createmany",{"_index":972,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["createmany(undefined",{"_index":976,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["createmanyusers",{"_index":903,"title":{},"body":{"controllers/UserController.html":{}}}],["createmanyusers(@body",{"_index":964,"title":{},"body":{"controllers/UserController.html":{}}}],["createmanyusers(createusersdto",{"_index":907,"title":{},"body":{"controllers/UserController.html":{}}}],["createmanyusersdto",{"_index":205,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createmetaoptions",{"_index":468,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(@body",{"_index":475,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(createmetaoptionsdto",{"_index":469,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptionsdto",{"_index":243,"title":{"classes/CreateMetaOptionsDto.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createpost",{"_index":642,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["createpost(@body",{"_index":717,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["createpost(createpostdto",{"_index":646,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createtag",{"_index":824,"title":{},"body":{"controllers/TagsController.html":{}}}],["createpost.authorid",{"_index":766,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost.tags",{"_index":768,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":255,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdtowithmeta",{"_index":639,"title":{},"body":{"entities/Post.html":{}}}],["createpostdto})@patch",{"_index":687,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto})@post",{"_index":649,"title":{},"body":{"controllers/PostsController.html":{}}}],["creates",{"_index":628,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{}}}],["createtag",{"_index":827,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtag(undefined",{"_index":860,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtagdto",{"_index":372,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":904,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(@body",{"_index":961,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(createuserdto",{"_index":912,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(undefined",{"_index":1034,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":212,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto})@apiquery({name",{"_index":917,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers",{"_index":965,"title":{},"body":{"controllers/UserController.html":{}}}],["createusersdto",{"_index":911,"title":{},"body":{"controllers/UserController.html":{}}}],["creating",{"_index":463,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PaginationService.html":{}}}],["creation",{"_index":652,"title":{},"body":{"controllers/PostsController.html":{}}}],["current",{"_index":512,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["currentpage",{"_index":509,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["custom",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["data",{"_index":503,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["database",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UserCreateMany.html":{}}}],["databaseconfig",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":974,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["date",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":353,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":930,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":955,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(10",{"_index":953,"title":{},"body":{"controllers/UserController.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":696,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["delete('/soft",{"_index":842,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(undefined",{"_index":748,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":663,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedatecolumn",{"_index":811,"title":{},"body":{"entities/Tag.html":{}}}],["deleteddate",{"_index":809,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":643,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":724,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":661,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleterequest",{"_index":728,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletes",{"_index":662,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletetag",{"_index":822,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(@query('id",{"_index":840,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(id",{"_index":828,"title":{},"body":{"controllers/TagsController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["deprecated",{"_index":1064,"title":{},"body":{"injectables/UserService.html":{}}}],["description",{"_index":232,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":659,"title":{},"body":{"controllers/PostsController.html":{}}}],["development",{"_index":1127,"title":{},"body":{"index.html":{}}}],["directional",{"_index":465,"title":{},"body":{"entities/MetaOption.html":{}}}],["dist/**/*.entity.js",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":355,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["doe",{"_index":236,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["draft",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto/pagination",{"_index":536,"title":{},"body":{"injectables/PaginationService.html":{}}}],["dtos/create",{"_index":473,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["dtos/get",{"_index":706,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/patch",{"_index":705,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["e.g",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["e2e",{"_index":1136,"title":{},"body":{"index.html":{}}}],["each",{"_index":242,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":589,"title":{},"body":{"entities/Post.html":{}}}],["eagerly",{"_index":636,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1117,"title":{},"body":{"index.html":{}}}],["eight",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":237,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["enables",{"_index":633,"title":{},"body":{"entities/Post.html":{}}}],["enddate",{"_index":417,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PostsService.html":{}}}],["endpoint",{"_index":941,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":133,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["entity/meta",{"_index":481,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["entity/post.entity",{"_index":737,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entity/tags.entity",{"_index":850,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["entity/user.entity",{"_index":231,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["enum",{"_index":357,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":1106,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posts.enums",{"_index":350,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env}.local",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development.local",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["environmentvalidation",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["error.message",{"_index":990,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["example",{"_index":220,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["exception",{"_index":1052,"title":{},"body":{"injectables/UserService.html":{}}}],["excerpt",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["exist",{"_index":1061,"title":{},"body":{"injectables/UserService.html":{}}}],["existing",{"_index":689,"title":{},"body":{"controllers/PostsController.html":{}}}],["existingtags",{"_index":872,"title":{},"body":{"injectables/TagsService.html":{}}}],["existinguser",{"_index":1046,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["expected",{"_index":582,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exporting",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":539,"title":{},"body":{"injectables/PaginationService.html":{},"dependencies.html":{}}}],["extends",{"_index":430,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["failed",{"_index":988,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["false",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["false})@isoptional()@isarray()@isint({each",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featured",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["featuredimageurl",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["fetch",{"_index":523,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/PostsController.html":{}}}],["few",{"_index":632,"title":{},"body":{"entities/Post.html":{}}}],["fields",{"_index":695,"title":{},"body":{"controllers/PostsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["final",{"_index":940,"title":{},"body":{"controllers/UserController.html":{}}}],["finally",{"_index":1012,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["finalresponse",{"_index":557,"title":{},"body":{"injectables/PaginationService.html":{}}}],["find",{"_index":771,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":958,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(undefined",{"_index":1036,"title":{},"body":{"injectables/UserService.html":{}}}],["findmultipletags",{"_index":853,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(undefined",{"_index":863,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":1026,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(undefined",{"_index":1039,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"entities/User.html":{}}}],["firstname",{"_index":233,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["footerenabled",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["format",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["forwardref",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["found",{"_index":776,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":1115,"title":{},"body":{"index.html":{}}}],["from.env",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["function",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["functions",{"_index":1109,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generic",{"_index":506,"title":{},"body":{"interfaces/Paginated.html":{}}}],["get('/:id",{"_index":951,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':userid",{"_index":712,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts",{"_index":644,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallposts(undefined",{"_index":750,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(userid",{"_index":666,"title":{},"body":{"controllers/PostsController.html":{}}}],["getalltags",{"_index":854,"title":{},"body":{"injectables/TagsService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpostsbasedto",{"_index":414,"title":{"classes/GetPostsBaseDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["getpostsquerydto",{"_index":429,"title":{"classes/GetPostsQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["gettagbyid",{"_index":855,"title":{},"body":{"injectables/TagsService.html":{}}}],["gettagbyid(undefined",{"_index":866,"title":{},"body":{"injectables/TagsService.html":{}}}],["getting",{"_index":1111,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":924,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers",{"_index":905,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":914,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersparamdto",{"_index":431,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["given",{"_index":674,"title":{},"body":{"controllers/PostsController.html":{}}}],["global/pagination/pagination.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["global/pagination/pagination.service",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["grow",{"_index":1143,"title":{},"body":{"index.html":{}}}],["handle",{"_index":1051,"title":{},"body":{"injectables/UserService.html":{}}}],["handles",{"_index":651,"title":{},"body":{"controllers/PostsController.html":{}}}],["headers",{"_index":928,"title":{},"body":{"controllers/UserController.html":{}}}],["hello",{"_index":143,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["here",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["host",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["httpexception",{"_index":697,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["httpexception('email",{"_index":1053,"title":{},"body":{"injectables/UserService.html":{}}}],["httpexception('no",{"_index":726,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpexception('post",{"_index":783,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('tag",{"_index":875,"title":{},"body":{"injectables/TagsService.html":{}}}],["httpexception('tags",{"_index":775,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('transaction",{"_index":1011,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["httpexception('user",{"_index":1066,"title":{},"body":{"injectables/UserService.html":{}}}],["https://example.com/image.jpg",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["https://nestjs.com",{"_index":1158,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org",{"_index":364,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":698,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":727,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserCreateMany.html":{}}}],["httpstatus.conflict",{"_index":877,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.created",{"_index":716,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.internal_server_error",{"_index":995,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["httpstatus.moved_permanently",{"_index":1062,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":777,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.ok",{"_index":711,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.request_timeout",{"_index":989,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["hyphens",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["id",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id'})@delete",{"_index":829,"title":{},"body":{"controllers/TagsController.html":{}}}],["id'})@delete('/soft",{"_index":833,"title":{},"body":{"controllers/TagsController.html":{}}}],["identifier",{"_index":1069,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["importing",{"_index":423,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["imports",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["in(tags",{"_index":882,"title":{},"body":{"injectables/TagsService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":660,"title":{},"body":{"controllers/PostsController.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/PaginationService.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(profileconfig.key",{"_index":1045,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(request",{"_index":541,"title":{},"body":{"injectables/PaginationService.html":{}}}],["injectable",{"_index":139,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":140,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["injection",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injections",{"_index":758,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository",{"_index":493,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoptionrepository",{"_index":763,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(metaoptionsrepository",{"_index":494,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["injectrepository(postrepository",{"_index":762,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tagrepository",{"_index":871,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":1043,"title":{},"body":{"injectables/UserService.html":{}}}],["installation",{"_index":1123,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1125,"title":{},"body":{"index.html":{}}}],["instance",{"_index":980,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["instead",{"_index":637,"title":{},"body":{"entities/Post.html":{}}}],["integer",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["interface",{"_index":499,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"coverage.html":{},"overview.html":{}}}],["interface/paginated.interface",{"_index":540,"title":{},"body":{"injectables/PaginationService.html":{}}}],["interfaces",{"_index":501,"title":{},"body":{"interfaces/Paginated.html":{}}}],["intersectiontype",{"_index":422,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["invalid",{"_index":382,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["ip",{"_index":929,"title":{},"body":{"controllers/UserController.html":{}}}],["isarray",{"_index":218,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isauthenticated",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":341,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["isdate()@isoptional",{"_index":419,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["isemail",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":342,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(['post",{"_index":358,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":362,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypes",{"_index":359,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":343,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isiso8601",{"_index":344,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":250,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":224,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":248,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["isnumber",{"_index":574,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":345,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["ispositive",{"_index":527,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":251,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":346,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["item",{"_index":370,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":219,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{}}}],["itemsperpage",{"_index":507,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["jane",{"_index":240,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["jane@doe.com",{"_index":241,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["john",{"_index":234,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["john@doe.com",{"_index":238,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["joi",{"_index":1095,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":623,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["joincolumn",{"_index":460,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":614,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["json",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["kamil",{"_index":1155,"title":{},"body":{"index.html":{}}}],["keeping",{"_index":1006,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["key",{"_index":253,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["language",{"_index":378,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["last",{"_index":511,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["lastname",{"_index":235,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lazy",{"_index":638,"title":{},"body":{"entities/Post.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":594,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":406,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1161,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1140,"title":{},"body":{"index.html":{}}}],["likes",{"_index":581,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["limit",{"_index":521,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["links",{"_index":504,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["literal",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["loading",{"_index":635,"title":{},"body":{"entities/Post.html":{}}}],["logic",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginbody",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginbody",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["logs",{"_index":654,"title":{},"body":{"controllers/PostsController.html":{}}}],["lowercase",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["m2m",{"_index":626,"title":{},"body":{"entities/Post.html":{}}}],["main",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["make",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["making",{"_index":759,"title":{},"body":{"injectables/PostsService.html":{}}}],["many",{"_index":208,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["many.ts",{"_index":971,"title":{},"body":{"injectables/UserCreateMany.html":{},"coverage.html":{}}}],["many.ts:13",{"_index":977,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["many.ts:7",{"_index":975,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["manytomany",{"_index":615,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":608,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":616,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":587,"title":{},"body":{"entities/Post.html":{}}}],["matches",{"_index":347,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":413,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":361,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matches(/^https?:\\/\\/[^\\s",{"_index":392,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["math.ceil(totalitems",{"_index":554,"title":{},"body":{"injectables/PaginationService.html":{}}}],["maxlength",{"_index":348,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":366,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(255",{"_index":360,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":356,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["meta",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":1100,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":439,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":754,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptions",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["metaoptions.post",{"_index":598,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":52,"title":{"controllers/MetaOptionsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":41,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":489,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":471,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":247,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["migrations",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginationQueryDto.html":{}}}],["minlength",{"_index":349,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":391,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":252,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":412,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1105,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1139,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1130,"title":{},"body":{"index.html":{}}}],["modern",{"_index":376,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1152,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":908,"title":{},"body":{"controllers/UserController.html":{}}}],["myśliwiec",{"_index":1156,"title":{},"body":{"index.html":{}}}],["name",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["need",{"_index":939,"title":{},"body":{"controllers/UserController.html":{}}}],["nest",{"_index":1121,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1160,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":538,"title":{},"body":{"injectables/PaginationService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":575,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1090,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":230,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjsis6@awesome",{"_index":239,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["new",{"_index":551,"title":{},"body":{"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newurl",{"_index":550,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.origin}${newurl.pathname}?page=1&limit=${limit",{"_index":558,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${nextpage}&limit=${limit",{"_index":561,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${page}&limit=${limit",{"_index":560,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${prevpage}&limit=${limit",{"_index":562,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${totalpages}&limit=${limit",{"_index":559,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newuser",{"_index":996,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["newuser.push(savednewuserinstance",{"_index":1005,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["newuserinstance",{"_index":1000,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["next",{"_index":513,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["nextpage",{"_index":555,"title":{},"body":{"injectables/PaginationService.html":{}}}],["node.js",{"_index":1114,"title":{},"body":{"index.html":{}}}],["null",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":449,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number'})@isnumber()@isnotempty",{"_index":570,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["number})@isoptional()@isint()@type(undefined",{"_index":435,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["object",{"_index":371,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/UserCreateMany.html":{}}}],["objectliteral",{"_index":537,"title":{},"body":{"injectables/PaginationService.html":{}}}],["objects",{"_index":683,"title":{},"body":{"controllers/PostsController.html":{}}}],["occurred",{"_index":1063,"title":{},"body":{"injectables/UserService.html":{}}}],["ondelete",{"_index":453,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["onetomany",{"_index":896,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":893,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":461,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":451,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1141,"title":{},"body":{"index.html":{}}}],["option.entity",{"_index":482,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":441,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":447,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":450,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":445,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":457,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:33",{"_index":455,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["options",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.controller",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":467,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:10",{"_index":470,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":352,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":246,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:16",{"_index":249,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["options.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":480,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":472,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":484,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:15",{"_index":491,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":488,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":245,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["options/entity/meta",{"_index":440,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/meta",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1165,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owning",{"_index":621,"title":{},"body":{"entities/Post.html":{}}}],["package",{"_index":1084,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":500,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":529,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginatequery(undefined",{"_index":533,"title":{},"body":{"injectables/PaginationService.html":{}}}],["pagination",{"_index":764,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["pagination'})@apiresponse({status",{"_index":915,"title":{},"body":{"controllers/UserController.html":{}}}],["pagination.service",{"_index":519,"title":{},"body":{"modules/PaginationModule.html":{}}}],["paginationmodule",{"_index":42,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationquery",{"_index":542,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/PostsService.html":{}}}],["paginationquerydto",{"_index":426,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginationservice",{"_index":46,"title":{"injectables/PaginationService.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["param",{"_index":699,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["param('userid",{"_index":713,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":932,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param.dto.ts",{"_index":433,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:16",{"_index":436,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parama",{"_index":943,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["parseintpipe",{"_index":700,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["partial",{"_index":692,"title":{},"body":{"controllers/PostsController.html":{}}}],["partialtype",{"_index":572,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":568,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":585,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passing",{"_index":634,"title":{},"body":{"entities/Post.html":{}}}],["password",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":690,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["patchpostdto",{"_index":566,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchuser",{"_index":906,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(@body",{"_index":967,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(patchuserdto",{"_index":925,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuserdto",{"_index":583,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["path",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["person",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":365,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1097,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":1150,"title":{},"body":{"index.html":{}}}],["port",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":920,"title":{},"body":{"controllers/UserController.html":{}}}],["possible",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":158,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":648,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@delete",{"_index":664,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('/create",{"_index":963,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.content",{"_index":792,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":573,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:103",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:113",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:124",{"_index":338,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:146",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:15",{"_index":571,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:156",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:34",{"_index":340,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:46",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:60",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:71",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:80",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:92",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.featuredimageurl",{"_index":796,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":452,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.metaoptions.id",{"_index":805,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.posttype",{"_index":786,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishedon",{"_index":798,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.schema",{"_index":794,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":788,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":790,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":800,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":784,"title":{},"body":{"injectables/PostsService.html":{}}}],["postentity",{"_index":736,"title":{},"body":{"modules/PostsModule.html":{}}}],["postgres",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["postquery",{"_index":667,"title":{},"body":{"controllers/PostsController.html":{}}}],["postrepository",{"_index":744,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":641,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.author",{"_index":894,"title":{},"body":{"entities/User.html":{}}}],["posts.controller",{"_index":735,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.dto",{"_index":707,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.dto.ts",{"_index":416,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["posts.dto.ts:12",{"_index":420,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.dto.ts:8",{"_index":421,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.service",{"_index":702,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.controller",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":51,"title":{"controllers/PostsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":709,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":43,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":701,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":620,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["posttypes",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttypes.post",{"_index":619,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["prev",{"_index":514,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["prevpage",{"_index":556,"title":{},"body":{"injectables/PaginationService.html":{}}}],["primarygeneratedcolumn",{"_index":446,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["processes",{"_index":691,"title":{},"body":{"controllers/PostsController.html":{}}}],["processing",{"_index":653,"title":{},"body":{"controllers/PostsController.html":{}}}],["production",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["profileconfig",{"_index":1021,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["profileconfiguration",{"_index":1029,"title":{},"body":{"injectables/UserService.html":{}}}],["programming",{"_index":377,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["progressive",{"_index":1113,"title":{},"body":{"index.html":{}}}],["project",{"_index":1142,"title":{},"body":{"index.html":{}}}],["promise",{"_index":535,"title":{},"body":{"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":210,"title":{"properties.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":779,"title":{},"body":{"injectables/PostsService.html":{}}}],["provided",{"_index":438,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["published",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["put",{"_index":927,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":543,"title":{},"body":{"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{}}}],["query('limit",{"_index":952,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":954,"title":{},"body":{"controllers/UserController.html":{}}}],["query.dto",{"_index":428,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PaginationService.html":{}}}],["query.dto.ts",{"_index":520,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:15",{"_index":525,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:26",{"_index":526,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryparams",{"_index":715,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["queryrunner",{"_index":981,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.committransaction",{"_index":1008,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.connect",{"_index":985,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.manager.create(user",{"_index":1001,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.manager.save(newuserinstance",{"_index":1003,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.release",{"_index":1014,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1010,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.starttransaction",{"_index":994,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["r\\n",{"_index":363,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["range",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1151,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["received",{"_index":655,"title":{},"body":{"controllers/PostsController.html":{}}}],["references",{"_index":900,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":1099,"title":{},"body":{"dependencies.html":{}}}],["relationship",{"_index":466,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["relationships",{"_index":627,"title":{},"body":{"entities/Post.html":{}}}],["release",{"_index":1013,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["remove",{"_index":629,"title":{},"body":{"entities/Post.html":{}}}],["replace",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Paginated.html":{}}}],["repositories",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{}}}],["repository",{"_index":487,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":553,"title":{},"body":{"injectables/PaginationService.html":{}}}],["repository.find",{"_index":544,"title":{},"body":{"injectables/PaginationService.html":{}}}],["representing",{"_index":678,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":531,"title":{},"body":{"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["requests",{"_index":672,"title":{},"body":{"controllers/PostsController.html":{}}}],["requesttimeoutexception",{"_index":1041,"title":{},"body":{"injectables/UserService.html":{}}}],["requesttimeoutexception('request",{"_index":1049,"title":{},"body":{"injectables/UserService.html":{}}}],["requesturl",{"_index":564,"title":{},"body":{"injectables/PaginationService.html":{}}}],["require",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["required",{"_index":217,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":682,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["retrieved",{"_index":676,"title":{},"body":{"controllers/PostsController.html":{}}}],["retrieves",{"_index":668,"title":{},"body":{"controllers/PostsController.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["returned",{"_index":918,"title":{},"body":{"controllers/UserController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["review",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":1009,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["routes",{"_index":1176,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":1128,"title":{},"body":{"index.html":{}}}],["runner",{"_index":979,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["rxjs",{"_index":1102,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":1004,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["savednewuserinstance",{"_index":1002,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["scalable",{"_index":1118,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["second",{"_index":899,"title":{},"body":{"entities/User.html":{}}}],["sent",{"_index":968,"title":{},"body":{"controllers/UserController.html":{}}}],["serialize",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":1119,"title":{},"body":{"index.html":{}}}],["service",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["set",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["setting",{"_index":630,"title":{},"body":{"entities/Post.html":{}}}],["setup",{"_index":898,"title":{},"body":{"entities/User.html":{}}}],["shows",{"_index":577,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["side",{"_index":622,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["sidebarenabled",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["single",{"_index":761,"title":{},"body":{"injectables/PostsService.html":{}}}],["skip",{"_index":545,"title":{},"body":{"injectables/PaginationService.html":{}}}],["slug",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["soft",{"_index":832,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":856,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdelete(undefined",{"_index":868,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdeletetag",{"_index":823,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(@query('id",{"_index":843,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(id",{"_index":831,"title":{},"body":{"controllers/TagsController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["special",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":434,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["specified",{"_index":679,"title":{},"body":{"controllers/PostsController.html":{}}}],["specify",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["sponsors",{"_index":1145,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.controller.ts",{"_index":1174,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":1110,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posts.enums.ts",{"_index":1107,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":141,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":142,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1020,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":1042,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:5",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/global/pagination/dto/pagination",{"_index":427,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/global/pagination/interface/paginated.interface",{"_index":757,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/global/pagination/interface/paginated.interface.ts",{"_index":502,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/global/pagination/pagination.module",{"_index":739,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/global/pagination/pagination.module.ts",{"_index":518,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/global/pagination/pagination.service",{"_index":756,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/global/pagination/pagination.service.ts",{"_index":528,"title":{},"body":{"injectables/PaginationService.html":{},"coverage.html":{}}}],["src/global/pagination/pagination.service.ts:16",{"_index":534,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/global/pagination/pagination.service.ts:9",{"_index":532,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/main.ts",{"_index":1077,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":244,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/get",{"_index":415,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":567,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity",{"_index":458,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/entity/post.entity.ts",{"_index":586,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity.ts:19",{"_index":597,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:26",{"_index":613,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:34",{"_index":600,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:42",{"_index":606,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:50",{"_index":607,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:56",{"_index":592,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:62",{"_index":603,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:69",{"_index":596,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:75",{"_index":602,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:81",{"_index":611,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:89",{"_index":599,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:96",{"_index":590,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/enums/posts.enums.ts",{"_index":1108,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":640,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:110",{"_index":665,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:45",{"_index":671,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:72",{"_index":650,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:96",{"_index":688,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":734,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":741,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:115",{"_index":749,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:15",{"_index":745,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:39",{"_index":747,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:59",{"_index":753,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:95",{"_index":751,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":373,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity",{"_index":618,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/entity/tags.entity.ts",{"_index":808,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity.ts:16",{"_index":815,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:24",{"_index":816,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:32",{"_index":819,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:38",{"_index":813,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:44",{"_index":818,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:51",{"_index":814,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:56",{"_index":817,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:59",{"_index":810,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:62",{"_index":820,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:65",{"_index":812,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":821,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:19",{"_index":826,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:26",{"_index":830,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:32",{"_index":834,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":738,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":848,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/tags/tags.service",{"_index":755,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/tags.service.ts",{"_index":852,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/tags.service.ts:14",{"_index":861,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:30",{"_index":865,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:36",{"_index":867,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:46",{"_index":864,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:56",{"_index":862,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:62",{"_index":869,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:8",{"_index":858,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/user/dtos/create",{"_index":207,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/get",{"_index":432,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/user/dtos/patch",{"_index":584,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/user/entity/user.entity",{"_index":617,"title":{},"body":{"entities/Post.html":{}}}],["src/user/entity/user.entity.ts",{"_index":885,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entity/user.entity.ts:14",{"_index":888,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:21",{"_index":890,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:29",{"_index":886,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:36",{"_index":892,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:39",{"_index":895,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:7",{"_index":889,"title":{},"body":{"entities/User.html":{}}}],["src/user/user",{"_index":970,"title":{},"body":{"injectables/UserCreateMany.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":902,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:64",{"_index":923,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:82",{"_index":913,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:92",{"_index":910,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:98",{"_index":926,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/user/user.module.ts",{"_index":1018,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/user/user.service.ts",{"_index":1025,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:101",{"_index":1040,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:111",{"_index":1033,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:21",{"_index":1032,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:44",{"_index":1035,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:75",{"_index":1037,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":992,"title":{},"body":{"injectables/UserCreateMany.html":{},"index.html":{}}}],["start:dev",{"_index":1131,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1132,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":418,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PostsService.html":{}}}],["started",{"_index":1112,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1122,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1070,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["stay",{"_index":1153,"title":{},"body":{"index.html":{}}}],["still",{"_index":579,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["story",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["string'})@isiso8601()@isnotempty",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isnotempty()@isstring()@minlength(3)@maxlength(255",{"_index":385,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isjson",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isstring",{"_index":379,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024)@matches(/^https?:\\/\\/[^\\s",{"_index":381,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isenum(posttypes)@isnotempty",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@isenum(poststatus",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(255)@matches(/^[a",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(512)@matches(/^[a",{"_index":389,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isoptional",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":339,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string(error",{"_index":991,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["success",{"_index":807,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["successful",{"_index":997,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["successfully",{"_index":806,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["summary",{"_index":710,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":1146,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["svg",{"_index":1163,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":424,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{}}}],["synchronize",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":505,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["table",{"_index":624,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1083,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":375,"title":{"entities/Tag.html":{}},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag'})@post",{"_index":825,"title":{},"body":{"controllers/TagsController.html":{}}}],["tag.dto",{"_index":835,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":374,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:23",{"_index":386,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:37",{"_index":390,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:46",{"_index":380,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:51",{"_index":388,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:65",{"_index":383,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.name",{"_index":874,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagrepository",{"_index":870,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":849,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":773,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags.posts",{"_index":609,"title":{},"body":{"entities/Post.html":{}}}],["tags.service",{"_index":836,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["tags/tags.controller",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":53,"title":{"controllers/TagsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":44,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":859,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":743,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":546,"title":{},"body":{"injectables/PaginationService.html":{}}}],["test",{"_index":1135,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1138,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1137,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1134,"title":{},"body":{"index.html":{}}}],["text",{"_index":591,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1144,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(loginbody",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('s3_bucket",{"_index":1056,"title":{},"body":{"injectables/UserService.html":{}}}],["this.datasource.createqueryrunner",{"_index":982,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["this.metaoptionsrepository.create(metaoptions",{"_index":497,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.delete",{"_index":804,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.save(createdmetaoption",{"_index":498,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create",{"_index":476,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.paginationservice.paginatequery",{"_index":801,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository",{"_index":802,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.create",{"_index":769,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.delete",{"_index":803,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findoneby",{"_index":781,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(post",{"_index":770,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postservice.create",{"_index":719,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.delete",{"_index":729,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.getallposts",{"_index":714,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.update",{"_index":723,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.profileconfiguration",{"_index":1060,"title":{},"body":{"injectables/UserService.html":{}}}],["this.request.headers.host",{"_index":549,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.request.protocol",{"_index":548,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.request.url",{"_index":565,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.tagsrepository.create(tag",{"_index":878,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete",{"_index":883,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":880,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":873,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findoneby",{"_index":881,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(createdtags",{"_index":879,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete",{"_index":884,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtag",{"_index":839,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete",{"_index":841,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags",{"_index":767,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softdelete",{"_index":844,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userrepository.create(user",{"_index":1054,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":1047,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":1065,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":1055,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userscreatemany.createmany",{"_index":1067,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createmany",{"_index":966,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.createuser",{"_index":962,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":959,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyid",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservices.findonebyid",{"_index":765,"title":{},"body":{"injectables/PostsService.html":{}}}],["through",{"_index":693,"title":{},"body":{"controllers/PostsController.html":{}}}],["throw",{"_index":725,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["time",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["timeout",{"_index":1050,"title":{},"body":{"injectables/UserService.html":{}}}],["timestamp",{"_index":601,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["totalitems",{"_index":508,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["totalpages",{"_index":510,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["touch",{"_index":1154,"title":{},"body":{"index.html":{}}}],["track",{"_index":1007,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["transaction",{"_index":993,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["transactions",{"_index":978,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["transfer",{"_index":657,"title":{},"body":{"controllers/PostsController.html":{}}}],["transform",{"_index":437,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["transformer",{"_index":228,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"dependencies.html":{}}}],["true",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@isint()@isnotempty",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@jointable",{"_index":610,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":222,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":984,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":1159,"title":{},"body":{"index.html":{}}}],["type",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1172,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm.forfeature",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":483,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([postentity",{"_index":740,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":851,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1023,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":576,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":384,"title":{},"body":{"classes/CreateTagDto.html":{},"index.html":{}}}],["undefined",{"_index":216,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["undefined})@get(':userid",{"_index":670,"title":{},"body":{"controllers/PostsController.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":221,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":605,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1133,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":492,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1171,"title":{},"body":{"properties.html":{}}}],["up",{"_index":578,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["update",{"_index":569,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["update(undefined",{"_index":752,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":686,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["updatedatecolumn",{"_index":456,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updateddate",{"_index":443,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedpost",{"_index":722,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost",{"_index":645,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":720,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(updatepostdto",{"_index":684,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost.content",{"_index":793,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.featuredimageurl",{"_index":797,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.id",{"_index":782,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.posttype",{"_index":787,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.publishedon",{"_index":799,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.schema",{"_index":795,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.slug",{"_index":789,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.status",{"_index":791,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.tags",{"_index":772,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.title",{"_index":785,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":694,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":685,"title":{},"body":{"controllers/PostsController.html":{}}}],["url",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PaginationService.html":{}}}],["url(this.request.url",{"_index":552,"title":{},"body":{"injectables/PaginationService.html":{}}}],["use",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{}}}],["used",{"_index":625,"title":{},"body":{"entities/Post.html":{}}}],["usefactory",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":194,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user'})@apiresponse({status",{"_index":669,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.controller",{"_index":1019,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":227,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":209,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":223,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["user.dto.ts:37",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":1048,"title":{},"body":{"injectables/UserService.html":{}}}],["user.firstname",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.posts",{"_index":588,"title":{},"body":{"entities/Post.html":{}}}],["user.service",{"_index":933,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":901,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercreatemany",{"_index":969,"title":{"injectables/UserCreateMany.html":{}},"body":{"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":680,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["usermodule",{"_index":45,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userparamsdto",{"_index":960,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":1028,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":211,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["users'})@post('/create",{"_index":909,"title":{},"body":{"controllers/UserController.html":{}}}],["users.users",{"_index":999,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["users/1223",{"_index":946,"title":{},"body":{"controllers/UserController.html":{}}}],["users/id?limit=10&page=1",{"_index":942,"title":{},"body":{"controllers/UserController.html":{}}}],["users?limit=10&page=2",{"_index":949,"title":{},"body":{"controllers/UserController.html":{}}}],["userscreatemany",{"_index":1031,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":181,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservices",{"_index":746,"title":{},"body":{"injectables/PostsService.html":{}}}],["using",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["valid",{"_index":780,"title":{},"body":{"injectables/PostsService.html":{}}}],["validate",{"_index":369,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":225,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":931,"title":{},"body":{"controllers/UserController.html":{}}}],["validationschema",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":226,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":254,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":593,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":1072,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":90,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":938,"title":{},"body":{"controllers/UserController.html":{},"properties.html":{}}}],["void",{"_index":1038,"title":{},"body":{"injectables/UserService.html":{}}}],["want",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["watch",{"_index":1129,"title":{},"body":{"index.html":{}}}],["website",{"_index":1157,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["whos",{"_index":947,"title":{},"body":{"controllers/UserController.html":{}}}],["whose",{"_index":681,"title":{},"body":{"controllers/PostsController.html":{}}}],["work",{"_index":631,"title":{},"body":{"entities/Post.html":{}}}],["works",{"_index":580,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["world",{"_index":144,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["yarn",{"_index":1124,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1149,"title":{},"body":{"index.html":{}}}],["your.env",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["z0",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nAppModule -->\n\nPaginationService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PaginationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            PostsController\n                        \n                        \n                            MetaOptionsController\n                        \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { PostsController } from './posts/posts.controller';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOptionsController } from './meta-options/meta-options.controller';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsController } from './tags/tags.controller';\nimport { TagsModule } from './tags/tags.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { PaginationService } from './global/pagination/pagination.service';\nimport { PaginationModule } from './global/pagination/pagination.module';\nimport appConfig from './config/index.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\n\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true, // make sure this is set to true to load environment variables from.env file\n      // envFilePath: ['.env.development.local'], // specify the path to your.env file\n      envFilePath: !ENV ? '.env' : `.env.${ENV}.local`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }), // to use environment variables\n    UserModule,\n    PostsModule,\n    AuthModule,\n    MetaOptionsModule,\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // specify any additional imports here, e.g., TypeORM migrations or custom repositories\n      inject: [ConfigService], // inject\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DATABASE_HOST'),\n        port: +configService.get('database.port'),\n        // port: +configService.get('DATABASE_PORT'),\n        username: configService.get('DATABASE_USERNAME'),\n        password: configService.get('DATABASE_PASSWORD'),\n        database: configService.get('DATABASE_NAME'),\n        entities: ['dist/**/*.entity.js'],\n        synchronize: configService.get('database.synchronize'), // set to false in production\n        // autoLoadEntities: true, // using this would require us to create a module (controller and module file) for every entity we want to add, exporting it and using the TypeORM.forFeature([]) function\n      }),\n    }),\n    TagsModule,\n    PaginationModule,\n  ],\n  controllers: [\n    AppController,\n    PostsController,\n    MetaOptionsController,\n    TagsController,\n  ],\n  providers: [AppService, PaginationService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginBody: LoginBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginBody\n                                            \n                                                            LoginBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\ntype LoginBody = {\n  id: number;\n  username: string;\n  password: string;\n};\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  login(@Body() loginBody: LoginBody) {\n    return this.authService.login(loginBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from 'src/user/user.module';\n\n@Module({\n  imports: [forwardRef(() => UserModule)], // for dependency injection (circular dependency injection)\n  exports: [AuthService],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n  ) {}\n\n  public login({\n    id,\n    username,\n    password,\n  }: {\n    id: number;\n    username: string;\n    password: string;\n  }) {\n    // check user exists in the database and if the password is correct\n    // login\n    // token\n\n    // const user = this.userService.findOneById({ id });\n    // console.log(`Logging in user ${user.firstName}`);\n\n    // return user;\n\n    return 'login';\n  }\n\n  public isAuthenticated() {\n    return true; // replace with actual authentication logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-many-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Array of users to be created', type: undefined, required: true, isArray: true, items: undefined, example: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-many-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entity/user.entity';\n\nexport class CreateManyUsersDto {\n  @ApiProperty({\n    description: 'Array of users to be created',\n    type: [CreateUserDto],\n    required: true,\n    isArray: true,\n    items: {\n      type: 'User',\n    },\n    example: [\n      {\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john@doe.com',\n        password: 'nestjsIS6@awesome',\n      },\n      {\n        firstName: 'Jane',\n        lastName: 'Doe',\n        email: 'jane@doe.com',\n        password: 'nestjsIS6@awesome',\n      },\n    ],\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMetaOptionsDto.html":{"url":"classes/CreateMetaOptionsDto.html","title":"class - CreateMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-meta-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from \"class-validator\";\n\nexport class CreateMetaOptionsDto {\n    // @ApiProperty()\n    // @IsString()\n    // @MinLength(4)\n    // @IsNotEmpty()\n    // key: string;\n  \n    // @ApiProperty()\n    // @IsNotEmpty()\n    // value: any;\n  \n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the id of the author of the post', example: 123, type: 'integer', required: true})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the additional options for the post', example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}', type: 'string', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostTypes, description: 'Possible tags for a post, range: ['post', 'page', 'story', 'series']', type: 'string'})@IsString()@IsEnum(PostTypes)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the date when the post was published', example: '2024-03-16T12:00:00+0000', format: 'date-time', type: 'string'})@IsISO8601()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the excerpt of the post. Serialize your json content or else there will be an error', example: '{\n \"@context\": \"https://schema.org\", \n \"@type\": \"Person\"\n}', format: 'json', type: 'string'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(255)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']', type: 'string'})@IsString()@IsNotEmpty()@IsEnum(PostStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined, type: 'array', required: false})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is a title of the post', example: 'Hello World', type: 'string'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { CreateMetaOptionsDto } from 'src/meta-options/dtos/create-meta-options.dto';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is a title of the post',\n    example: 'Hello World',\n    type: 'string',\n\n    // default: \"Hello World\"\n  }) // this adds the value to the post documentation\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostTypes,\n    description:\n      \"Possible tags for a post, range: ['post', 'page', 'story', 'series']\",\n    type: 'string',\n  })\n  @IsString()\n  //   @IsEnum(['post', 'page', 'story', 'series'])\n  @IsEnum(PostTypes)\n  @IsNotEmpty()\n  postType: PostTypes;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description:\n      \"Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']\",\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'This is the excerpt of the post. Serialize your json content or else there will be an error',\n    example:\n      '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\", \\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}',\n    format: 'json',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'This is the date when the post was published',\n    example: '2024-03-16T12:00:00+0000',\n    format: 'date-time',\n    type: 'string',\n  })\n  @IsISO8601()\n  @IsNotEmpty()\n  publishedOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1, 4],\n    type: 'array',\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true }) // validate each item in the array as a string\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    description: 'This is the additional options for the post',\n    example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n    type: 'string',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'The meta value is a json object',\n          example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n        },\n      },\n      required: ['key', 'value'],\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreateMetaOptionsDto)\n  metaOptions?: CreateMetaOptionsDto | null;\n\n  @ApiProperty({\n    description: 'This is the id of the author of the post',\n    example: 123,\n    type: 'integer',\n    required: true,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Tag Description', example: 'A modern programming language', type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)@Matches(/^https?:\\/\\/[^\\s]+$/, {message: 'Invalid URL format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the tag', example: 'TypeScript', type: 'string'})@IsNotEmpty()@IsString()@MinLength(3)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(512)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty({\n    description: 'Name of the tag',\n    example: 'TypeScript',\n    type: 'string',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(255)\n  name: string;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(512)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiPropertyOptional({\n    description: 'Tag Description',\n    example: 'A modern programming language',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional({})\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  @Matches(/^https?:\\/\\/[^\\s]+$/, {\n    message: 'Invalid URL format',\n  })\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto.html":{"url":"classes/GetPostsBaseDto.html","title":"class - GetPostsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger'; // importing from swagger so i get automatic documentation\nimport { PaginationQueryDto } from 'src/global/pagination/dto/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsQueryDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsQueryDto.html":{"url":"classes/GetPostsQueryDto.html","title":"class - GetPostsQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger'; // importing from swagger so i get automatic documentation\nimport { PaginationQueryDto } from 'src/global/pagination/dto/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsQueryDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 123, type: Number})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/get-users-param.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 123,\n    type: Number,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number) // transform string to number if provided\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/entity/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  }) // creating bi-directional relationship\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOptions(createMetaOptionsDto: CreateMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionsDto\n                                            \n                                                            CreateMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private metaOptionsService: MetaOptionsService) {}\n\n  @Post()\n  createMetaOptions(@Body() createMetaOptionsDto: CreateMetaOptionsDto) {\n    const metaOptions = this.metaOptionsService.create({\n      metaOptions: createMetaOptionsDto,\n    });\n\n    return metaOptions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './entity/meta-option.entity';\nimport { MetaOptionsController } from './meta-options.controller';\n\n@Module({\n  providers: [MetaOptionsService],\n  controllers: [MetaOptionsController],\n  exports: [MetaOptionsService],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/meta-options.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\nimport { MetaOption as MetaOptionsRepository } from './entity/meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    // injecting meta options service repository dependency\n    @InjectRepository(MetaOptionsRepository)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create({ metaOptions }: { metaOptions: CreateMetaOptionsDto }) {\n    const createdMetaOption =\n      await this.metaOptionsRepository.create(metaOptions);\n    await this.metaOptionsRepository.save(createdMetaOption);\n\n    return createdMetaOption;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/interface/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[]; // replace with your actual entity type... it would be generic\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    prev: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationService \n\nPaginationService \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationService  -->\n\nPaginationModule->PaginationService \n\n\n\n\n\nPaginationService\n\nPaginationService\n\nPaginationModule -->\n\nPaginationService->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/global/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationService } from './pagination.service';\n\n@Module({\n  providers: [PaginationService],\n  exports: [PaginationService],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/dto/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of items to fetch', example: 10, type: Number, default: 10, minimum: 1})@IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/global/pagination/dto/pagination-query.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of page to fetch', example: 10, type: Number, default: 10, minimum: 1})@IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/global/pagination/dto/pagination-query.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsOptional, IsPositive } from 'class-validator';\n\nexport class PaginationQueryDto {\n  @ApiPropertyOptional({\n    description: 'Number of items to fetch',\n    example: 10,\n    type: Number,\n    default: 10,\n    minimum: 1,\n  })\n  @IsOptional()\n  @IsPositive()\n  limit?: number = 10;\n\n  @ApiPropertyOptional({\n    description: 'Number of page to fetch',\n    example: 10,\n    type: Number,\n    default: 10,\n    minimum: 1,\n  })\n  @IsOptional()\n  @IsPositive()\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationService.html":{"url":"injectables/PaginationService.html","title":"injectable - PaginationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/pagination.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/global/pagination/pagination.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/global/pagination/pagination.service.ts:16\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PaginationQueryDto } from './dto/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport { Paginated } from './interface/paginated.interface';\n\n@Injectable()\nexport class PaginationService {\n  constructor(\n    // injecting the request object\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  public async paginateQuery({\n    paginationQuery,\n    repository,\n  }: {\n    paginationQuery: PaginationQueryDto;\n    repository: Repository;\n  }): Promise> {\n    const { limit, page } = paginationQuery;\n\n    const query = await repository.find({\n      skip: (page - 1) * limit,\n      take: limit,\n    });\n\n    // creating url\n\n    const baseUrl =\n      this.request.protocol + '://' + this.request.headers.host + '/';\n\n    const newUrl = new URL(this.request.url, baseUrl);\n\n    const totalItems = await repository.count({});\n    const totalPages = Math.ceil(totalItems / limit);\n    const nextPage = totalPages === page ? page : page + 1;\n    const prevPage = page === 1 ? page : page - 1;\n\n    const finalResponse: Paginated = {\n      data: query,\n      meta: {\n        itemsPerPage: limit,\n        totalItems,\n        currentPage: page,\n        totalPages,\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?page=1&limit=${limit}}`,\n        last: `${newUrl.pathname}?page=${totalPages}&limit=${limit}`,\n        current: `${newUrl.pathname}?page=${page}&limit=${limit}`,\n        next: `${newUrl.pathname}?page=${nextPage}&limit=${limit}`,\n        prev: `${newUrl.pathname}?page=${prevPage}&limit=${limit}`,\n      },\n    };\n\n    console.log({ baseUrl, requestUrl: this.request.url, newUrl });\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Update post with a specific id', example: 123, type: 'number'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n// import { PartialType } from '@nestjs/mapped-types'; \n// we are using the import from swagger so it shows up in our documentation, it still works likes expected as the import from @nestjs/mapped-types\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'Update post with a specific id',\n    example: 123,\n    type: 'number',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entity/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostTypes, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tags => tags.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { MetaOption } from '../../meta-options/entity/meta-option.entity';\nimport { User } from 'src/user/entity/user.entity';\nimport { Tag } from 'src/tags/entity/tags.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostTypes,\n    default: PostTypes.POST,\n  })\n  postType: PostTypes;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: false,\n  })\n  publishedOn: Date;\n\n  @ManyToMany(() => Tag, (tags) => tags.posts, {\n    eager: true,\n  })\n  @JoinTable() // this must be on the owning side of the relationship and join table is used for M2M relationships, it also creates a new table for the relationship\n  tags?: Tag[];\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    // cascade: ['remove'] // setting cascade to work for a few methods\n    cascade: true, // this enables us create data in the metaoption table by just passing the value\n    eager: true, // loading the metaOptions eagerly instead of lazy loading it\n  })\n  // @JoinColumn()\n  metaOptions?: MetaOption;\n\n  // metaOptions?: CreatePostDtoWithMeta[];\n\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                deletePost\n                            \n                            \n                                    \n                                    \n                                    \n                                getAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post'})@ApiResponse({status: undefined, description: 'Created post', type: CreatePostDto})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:72\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\nThis function handles the creation of a new post by processing the provided CreatePostDto.\nIt logs the received data and returns a confirmation message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the details of the post to be created.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the post request was received.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post'})@ApiResponse({status: undefined, description: 'Deleted post'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(userId: number, postQuery: GetPostsQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Retrieves all posts for a specific user'})@ApiResponse({status: undefined, description: 'All posts', type: undefined})@Get(':userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\nThis function handles GET requests to fetch all posts associated with a given user ID.\nIt logs the user ID for which posts are being retrieved and then calls the post service\nto fetch the posts.\nExample :                                representing all posts for the specified user.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user whose posts are to be retrieved.\n\n\n                                            \n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CreatePostDto objects,\nrepresenting all posts for the specified user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(updatePostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates a post'})@ApiResponse({status: undefined, description: 'Updated post', type: CreatePostDto})@Patch('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:96\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\nThis function handles PATCH requests to update an existing post using the provided data.\nIt logs the update data received and processes the partial post update through the\nPatchPostDto data transfer object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the fields to be updated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the patch request was received.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsQueryDto } from './dtos/get-posts.dto';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   *\n   * This function handles GET requests to fetch all posts associated with a given user ID.\n   * It logs the user ID for which posts are being retrieved and then calls the post service\n   * to fetch the posts.\n   *\n   * @param {number} userId - The ID of the user whose posts are to be retrieved.\n   * @returns {Promise} A promise that resolves to an array of CreatePostDto objects,\n   *                                     representing all posts for the specified user.\n   */\n\n  @ApiOperation({\n    summary: 'Retrieves all posts for a specific user',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'All posts',\n    type: [CreatePostDto],\n  })\n  @Get(':userId?')\n  getAllPosts(\n    @Param('userId') userId: number,\n    @Query() postQuery: GetPostsQueryDto,\n  ) {\n    console.log({ postQuery });\n\n    return this.postService.getAllPosts({ userId, queryParams: postQuery});\n  }\n\n  /**\n   * Creates a new post.\n   *\n   * This function handles the creation of a new post by processing the provided CreatePostDto.\n   * It logs the received data and returns a confirmation message.\n   *\n   * @param {CreatePostDto} createPostDto - The data transfer object containing the details of the post to be created.\n   * @returns {string} A confirmation message indicating that the post request was received.\n   */\n  @ApiOperation({\n    summary: 'Creates a new post',\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Created post',\n    type: CreatePostDto,\n  })\n  @Post('')\n  createPost(@Body() createPostDto: CreatePostDto) {\n    const createdPost = this.postService.create({ createPost: createPostDto });\n    return createdPost;\n  }\n\n  /**\n   * Updates an existing post.\n   *\n   * This function handles PATCH requests to update an existing post using the provided data.\n   * It logs the update data received and processes the partial post update through the\n   * PatchPostDto data transfer object.\n   *\n   * @param {PatchPostDto} updatePostDto - The data transfer object containing the fields to be updated.\n   * @returns {string} A confirmation message indicating that the patch request was received.\n   */\n  @ApiOperation({\n    summary: 'Updates a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Updated post',\n    type: CreatePostDto,\n  })\n  @Patch('')\n  updatePost(@Body() updatePostDto: PatchPostDto) {\n    // console.log({updatePostDto})\n    const updatedPost = this.postService.update({ updatePost: updatePostDto });\n    return updatedPost;\n  }\n\n  @ApiOperation({\n    summary: 'Deletes a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Deleted post',\n  })\n  @Delete('')\n  deletePost(@Query('id', ParseIntPipe) id: number) {\n    if (!id) {\n      throw new HttpException('No ID Provided', HttpStatus.BAD_REQUEST);\n    }\n\n    const deleteRequest = this.postService.delete({ id });\n\n    return deleteRequest;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_exports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { UserModule } from 'src/user/user.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post as PostEntity } from './entity/post.entity';\nimport { MetaOption } from 'src/meta-options/entity/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/global/pagination/pagination.module';\n\n@Module({\n  imports: [\n    UserModule,\n    TagsModule,\n    PaginationModule,\n    TypeOrmModule.forFeature([PostEntity, MetaOption]),\n  ],\n  controllers: [PostsController],\n  providers: [PostsService],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userServices: UserService, tagsService: TagsService, postRepository: Repository, metaOptionsRepository: Repository, paginationService: PaginationService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userServices\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption as MetaOptionRepository } from 'src/meta-options/entity/meta-option.entity';\nimport { Post, Post as PostRepository } from './entity/post.entity';\nimport { TagsService } from 'src/tags/tags.service';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsQueryDto } from './dtos/get-posts.dto';\nimport { PaginationService } from 'src/global/pagination/pagination.service';\nimport { Paginated } from 'src/global/pagination/interface/paginated.interface';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /**\n     * Repositories Injections\n     */\n\n    // injecting user service (making user of another service (a single dependency injection))\n    private userServices: UserService,\n\n    private tagsService: TagsService,\n\n    /**\n     * Repositories Injections\n     */\n    @InjectRepository(PostRepository)\n    private postRepository: Repository,\n\n    @InjectRepository(MetaOptionRepository)\n    private metaOptionsRepository: Repository,\n\n    // injecting pagination service\n    private paginationService: PaginationService,\n  ) {}\n\n  public async create({ createPost }: { createPost: CreatePostDto }) {\n    const author = await this.userServices.findOneById({\n      id: createPost.authorId,\n    });\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: createPost.tags,\n    });\n\n    const post = await this.postRepository.create({\n      ...createPost,\n      author: author,\n      tags: tags,\n    });\n\n    await this.postRepository.save(post);\n\n    return post;\n  }\n\n  public async update({ updatePost }: { updatePost: PatchPostDto }) {\n    // find the tags\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: updatePost.tags,\n    });\n\n    if (!(tags.length > 0)) {\n      throw new HttpException('Tags not found', HttpStatus.NOT_FOUND, {\n        cause: 'Tags not found',\n        description: 'Provide a valid tags to update',\n      });\n    }\n\n    const post = await this.postRepository.findOneBy({ id: updatePost.id });\n\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    }\n\n    post.title = updatePost.title ?? post.title;\n    post.postType = updatePost.postType ?? post.postType;\n    post.slug = updatePost.slug ?? post.slug;\n    post.status = updatePost.status ?? post.status;\n    post.content = updatePost.content ?? post.content;\n    post.schema = updatePost.schema ?? post.schema;\n    post.featuredImageUrl =\n      updatePost.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishedOn = updatePost.publishedOn ?? post.publishedOn;\n    post.tags = updatePost.tags ? tags : post.tags;\n\n    const updatedPost = await this.postRepository.save(post);\n\n    return updatedPost;\n  }\n\n  public async getAllPosts({\n    userId,\n    queryParams,\n  }: {\n    userId: number;\n    queryParams: GetPostsQueryDto;\n  }): Promise> {\n    const { endDate, limit, page, startDate } = queryParams;\n\n    const posts = await this.paginationService.paginateQuery({\n      paginationQuery: {\n        limit,\n        page,\n      },\n      repository: this.postRepository,\n    });\n\n    return posts;\n  }\n\n  public async delete({ id }: { id: number }) {\n    // const post = await this.postRepository.findOneBy({ id });\n\n    // if (!post) {\n    //   throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    // }\n\n    await this.postRepository.delete({ id });\n\n    // await this.metaOptionsRepository.delete({ id: post.metaOptions.id });\n\n    return { message: 'Post deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/entity/tags.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                deletedDate\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'json',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n    length: 1024,\n  })\n  featuredImageUrl?: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @DeleteDateColumn({})\n  deletedDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteTag\n                            \n                            \n                                    \n                                    \n                                    Async\n                                softDeleteTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createTag: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a tag'})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTag\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a tag by id'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        softDeleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDeleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Soft Delete a tag by id'})@Delete('/soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { ApiOperation } from '@nestjs/swagger';\nimport { TagsService } from './tags.service';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(private tagsService: TagsService) {}\n\n  @ApiOperation({ summary: 'Create a tag' })\n  @Post('')\n  createPost(@Body() createTag: CreateTagDto) {\n    const createdTags = this.tagsService.createTag({ tag: createTag });\n    return createdTags;\n  }\n\n  @ApiOperation({ summary: 'Delete a tag by id' })\n  @Delete('')\n  async deleteTag(@Query('id', ParseIntPipe) id: number) {\n    return await this.tagsService.delete({ id });\n  }\n\n  @ApiOperation({ summary: 'Soft Delete a tag by id' })\n  @Delete('/soft-delete')\n  async softDeleteTag(@Query('id', ParseIntPipe) id: number) {\n    return await this.tagsService.softDelete({ id });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsService } from './tags.service';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './entity/tags.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Tag])],\n  controllers: [TagsController],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTags\n                            \n                            \n                                    Public\n                                    Async\n                                getTagById\n                            \n                            \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTags()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getTagById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTagById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { In, Repository } from 'typeorm';\nimport { Tag as TagRepository } from './entity/tags.entity';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    @InjectRepository(TagRepository)\n    private tagsRepository: Repository,\n  ) {}\n\n  public async createTag({ tag }: { tag: CreateTagDto }) {\n    const existingTags = await this.tagsRepository.findOne({\n      where: { name: tag.name },\n    });\n\n    if (existingTags) {\n      throw new HttpException('Tag already exists', HttpStatus.CONFLICT);\n    }\n\n    const createdTags = await this.tagsRepository.create(tag);\n\n    await this.tagsRepository.save(createdTags);\n\n    return createdTags;\n  }\n\n  public async getAllTags() {\n    const tags = await this.tagsRepository.find({});\n\n    return tags;\n  }\n\n  public async getTagById({ id }: { id: number }) {\n    const tag = await this.tagsRepository.findOneBy({ id });\n\n    if (!tag) {\n      throw new HttpException('Tag not found', HttpStatus.NOT_FOUND);\n    }\n\n    return tag;\n  }\n\n  public async findMultipleTags({ tags }: { tags: number[] }) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags),\n      },\n    });\n\n    return results;\n  }\n\n  public async delete({ id }: { id: number }) {\n    await this.tagsRepository.delete({ id });\n\n    return { message: 'Tag deleted successfully', status: 'success', id };\n  }\n\n  public async softDelete({ id }: { id: number }) {\n    await this.tagsRepository.softDelete({ id });\n\n    return { message: 'Tag soft deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 60, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, posts => posts.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    unique: true,\n    nullable: false,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 60,\n    nullable: false,\n  })\n  password: string;\n\n  @OneToMany(() => Post, (posts) => posts.author) // first argument is the one we want to setup a relationship with, second argument is the what references the relationship\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create users', description: 'Create multiple users'})@Post('/create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all users', description: 'Get all users with optional pagination'})@ApiResponse({status: 200, description: 'All users', type: CreateUserDto})@ApiQuery({name: 'limit', type: Number, required: false, description: 'Limit the number of returned results', example: 10})@ApiQuery({name: 'page', type: Number, required: false, description: 'The position of the number that you want the api to return', example: 1})@Get('/:id?')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-user.dto';\n\n@Controller('users')\n@ApiTags('Users') // with the updated version of @nestjs/swagger there is no need to use @ApiTags\nexport class UserController {\n  /**\n   * Final Endpoint - /users/id?limit=10&page=1\n   * Parama id - optional, convert to integer, cannot have a default value\n   * Query limit - integer, default 10\n   * Query page - integer, default value 1\n   * ==> USE CASES\n   * /users/ -> return all users with default pagination\n   * /users/1223 -> returns one user whos id is 1234\n   * /users?limit=10&page=2 -> return page 2 with limit of pagination 10\n   */\n\n  constructor(private readonly userService: UserService) {}\n\n  @ApiOperation({\n    summary: 'Get all users',\n    description: 'Get all users with optional pagination',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'All users',\n    type: CreateUserDto,\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: Number,\n    required: false,\n    description: 'Limit the number of returned results',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    required: false,\n    description: 'The position of the number that you want the api to return',\n    example: 1,\n  })\n  @Get('/:id?')\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    // console.log(getUserParamDto);\n    // console.log(`Limit: ${limit}, Page: ${page}`);\n\n    const findAll = this.userService.findAll({\n      page,\n      limit,\n      userParamsDTO: getUserParamDto,\n    });\n\n    return findAll;\n  }\n\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    const createUser = this.userService.createUser({ user: createUserDto });\n    return createUser;\n  }\n\n  @ApiOperation({\n    summary: 'Create users',\n    description: 'Create multiple users',\n  })\n  @Post('/create-many')\n  public createManyUsers(@Body() createUsersDto: CreateManyUsersDto) {\n    const createUsers = this.userService.createMany({ users: createUsersDto });\n    return createUsers;\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n    // return 'You sent a patch request to users endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCreateMany.html":{"url":"injectables/UserCreateMany.html","title":"injectable - UserCreateMany","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCreateMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-create-many.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-create-many.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user-create-many.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { DataSource } from 'typeorm';\nimport { User } from './entity/user.entity';\nimport { CreateManyUsersDto } from './dtos/create-many-user.dto';\n\n@Injectable()\nexport class UserCreateMany {\n  constructor(\n    // injecting datasource for typeorm transactions\n    private dataSource: DataSource,\n  ) {}\n\n  public async createMany({ users }: { users: CreateManyUsersDto }) {\n    // create query runner instance\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    // connect query runner to datasource\n    try {\n      await queryRunner.connect();\n    } catch (error: any) {\n      throw new HttpException(\n        'Database connection failed',\n        HttpStatus.REQUEST_TIMEOUT,\n        {\n          cause: error.message,\n          description: String(error),\n        },\n      );\n    }\n\n    // start transaction\n    try {\n      await queryRunner.startTransaction();\n    } catch (error: any) {\n      throw new HttpException(\n        'Failed to start QueryRunner Transaction',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n        {\n          cause: error.message,\n          description: String(error),\n        },\n      );\n    }\n\n    let newUser: User[] = [];\n    try {\n      // if successful commit the transaction\n      for (let user of users.users) {\n        const newUserInstance = queryRunner.manager.create(User, user); // entity and object\n        const savedNewUserInstance =\n          await queryRunner.manager.save(newUserInstance); // save entity to the database\n\n        newUser.push(savedNewUserInstance); // keeping track of the users we have created\n      }\n\n      await queryRunner.commitTransaction();\n    } catch (error: any) {\n      // if failed rollback transaction\n      await queryRunner.rollbackTransaction();\n\n      throw new HttpException('Transaction Failed', HttpStatus.BAD_REQUEST, {\n        cause: error.message,\n        description: String(error),\n      });\n    } finally {\n      // release connection\n      try {\n        await queryRunner.release();\n      } catch (error: any) {\n        throw new HttpException(\n          'Failed to release QueryRunner connection',\n          HttpStatus.INTERNAL_SERVER_ERROR,\n          {\n            cause: error.message,\n            description: String(error),\n          },\n        );\n      }\n    }\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserCreateMany\n\nUserCreateMany\n\nUserModule -->\n\nUserCreateMany->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserCreateMany\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entity/user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { UserCreateMany } from './user-create-many';\nimport profileConfig from './config/profile.config';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule), // for dependency injection (circular dependency injection)\n    TypeOrmModule.forFeature([User]), // for repository (entity) injection\n    ConfigModule.forFeature(profileConfig)\n  ],\n  controllers: [UserController],\n  providers: [UserService, UserCreateMany],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository, configService: ConfigService, profileConfiguration: ConfigType<>, dataSource: DataSource, usersCreateMany: UserCreateMany)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateMany\n                                                  \n                                                        \n                                                                        UserCreateMany\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/auth.service';\nimport { DataSource, Repository } from 'typeorm';\nimport { User } from './entity/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from './config/profile.config';\nimport { UserCreateMany } from './user-create-many';\nimport { CreateManyUsersDto } from './dtos/create-many-user.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => AuthService))\n    private authService: AuthService,\n\n    // injecting user service repository dependency\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    // injecting environment variables\n    private configService: ConfigService,\n\n    // injecting module specific configuration dependencies (environment variables)\n    @Inject(profileConfig.KEY)\n    private profileConfiguration: ConfigType,\n\n    // injecting datasource for typeorm transactions\n    private dataSource: DataSource,\n\n    private usersCreateMany: UserCreateMany,\n  ) {}\n\n  public async createUser({\n    user,\n  }: {\n    user: CreateUserDto;\n  }): Promise {\n    // check user\n    let existingUser = undefined;\n\n    try {\n      existingUser = await this.userRepository.findOne({\n        where: { email: user.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException('Request timeout', {\n        cause: error,\n        description: 'Request timeout',\n      });\n    }\n\n    // handle exception\n    if (existingUser) {\n      throw new HttpException('Email already exists', HttpStatus.CONFLICT);\n    }\n\n    // create a new user\n    const newUser = await this.userRepository.create(user);\n    await this.userRepository.save(newUser);\n\n    return newUser;\n  }\n\n  public findAll({\n    userParamsDTO,\n    limit,\n    page,\n  }: {\n    userParamsDTO: GetUsersParamDto;\n    limit: number;\n    page: number;\n  }) {\n    const environment = this.configService.get('S3_BUCKET');\n    console.log(`Environment: ${environment}`);\n\n    console.log('NODE_ENV: ', process.env.NODE_ENV);\n\n    console.log('Profile: ', this.profileConfiguration);\n\n    throw new HttpException(\n      'Api endpoint does not exist',\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        description: 'Occurred because the API endpoint was deprecated',\n        cause: 'Api endpoint does not exist',\n      },\n    );\n  }\n\n  public async findOneById({ id }: { id: number }) {\n    const user = await this.userRepository.findOneBy({ id });\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    return user;\n  }\n\n  public async createMany({ users }: { users: CreateManyUsersDto }) {\n    return await this.usersCreateMany.createMany({ users });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/auth.controller.ts\n            \n            type alias\n            LoginBody\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/global/pagination/dto/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/global/pagination/interface/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/global/pagination/pagination.service.ts\n            \n            injectable\n            PaginationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-meta-options.dto.ts\n            \n            class\n            CreateMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/entity/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsQueryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/entity/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/entity/tags.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tags/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/dtos/create-many-user.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user-create-many.ts\n            \n            injectable\n            UserCreateMany\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../posts.enums.ts)\n                        \n                        \n                            PostTypes   (src/.../posts.enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/posts.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PostTypes\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationService \n\nPaginationService \n\nPaginationService  -->\n\nPaginationModule->PaginationService \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nPaginationModule -->\n\nPaginationService->PaginationModule\n\n\n\nAppModule -->\n\nPaginationService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUserCreateMany\n\nUserCreateMany\n\nUserModule -->\n\nUserCreateMany->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LoginBody   (src/.../auth.controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.controller.ts\n    \n    \n        \n            \n                \n                    \n                    LoginBody\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
