var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.382,1,2.236]],["body/guards/AccessTokenGuard.html",[1,2.664,2,2.481,3,0.158,4,0.143,5,0.143,6,3.655,7,2.903,8,2.27,9,0.254,10,1.083,11,1.693,12,5.467,13,2.232,14,5.431,15,1.565,16,2.481,17,4.68,18,3.335,19,2.761,20,0.617,21,3.194,22,1.381,23,0.016,24,1.034,25,0.671,26,0.949,27,4,28,4.231,29,3.194,30,3.041,31,1.083,32,2.254,33,3.194,34,1.565,35,3.194,36,0.358,37,1.558,38,1.347,39,1.231,40,0.706,41,0.488,42,1.231,43,1.841,44,4.007,45,2.27,46,2.481,47,2.27,48,1.961,49,2.102,50,0.269,51,1.48,52,2.481,53,1.082,54,2.664,55,2.27,56,2.093,57,1.558,58,1.56,59,3.194,60,3.194,61,3.194,62,3.194,63,0.081,64,2.102,65,2.042,66,2.764,67,2.764,68,1.961,69,1.961,70,1.558,71,2.27,72,3.194,73,3.778,74,3.194,75,1.04,76,1.841,77,2.764,78,3.194,79,2.764,80,3.194,81,3.194,82,3.194,83,2.27,84,2.042,85,1.633,86,2.764,87,2.764,88,2.838,89,1.642,90,3.591,91,1.129,92,3.194,93,2.102,94,2.481,95,2.102,96,2.481,97,2.102,98,2.481,99,3.194,100,2.042,101,2.764,102,1.642,103,2.144,104,2.764,105,1.642,106,1.736,107,0.917,108,0.009,109,0.009]],["title/controllers/AppController.html",[110,1.371,111,2.757]],["body/controllers/AppController.html",[3,0.265,4,0.24,5,0.24,9,0.426,10,1.529,20,0.608,23,0.016,31,1.254,36,0.355,41,0.817,50,0.265,58,1.874,63,0.135,75,1.204,108,0.013,109,0.013,110,2.305,111,4.637,112,1.89,113,4.63,114,6.343,115,1.417,116,5.35,117,4.322,118,4.63,119,3.083,120,3.52,121,5.35]],["title/modules/AppModule.html",[122,1.161,123,2.757]],["body/modules/AppModule.html",[0,2.339,1,3.016,3,0.122,4,0.111,5,0.235,7,1.203,11,1.187,18,1.514,19,1.767,23,0.016,36,0.419,39,1.467,41,0.377,42,0.95,43,1.421,48,1.514,50,0.189,51,0.578,63,0.062,69,2.339,93,1.623,95,1.623,97,1.623,100,2.312,108,0.008,109,0.008,111,3.307,112,1.346,117,3.671,118,2.135,122,1.392,123,5.403,124,1.09,125,1.04,126,1.203,127,1.203,128,1.09,129,2.27,130,1.203,131,2.135,132,2.135,133,2.135,134,3.671,135,3.934,136,3.934,137,3.934,138,3.671,139,3.934,140,3.671,141,3.446,142,3.446,143,1.858,144,1.203,145,1.203,146,1.916,147,3.062,148,3.062,149,3.062,150,2.844,151,2.466,152,2.466,153,2.466,154,2.466,155,2.466,156,2.466,157,1.916,158,1.958,159,2.506,160,2.135,161,2.466,162,2.466,163,2.466,164,2.506,165,4.066,166,2.466,167,2.466,168,3.297,169,2.466,170,3.809,171,2.466,172,3.809,173,2.466,174,3.297,175,3.809,176,1.753,177,2.466,178,1.514,179,2.466,180,2.135,181,2.707,182,2.466,183,2.707,184,2.466,185,1.916,186,2.466,187,1.623,188,2.466,189,2.466,190,2.707,191,2.466,192,1.514,193,0.835,194,4.394,195,1.916,196,3.809,197,2.466,198,2.466,199,2.135,200,2.466,201,2.466,202,3.809,203,2.506,204,2.707,205,2.466,206,3.809,207,2.466,208,2.466,209,1.623,210,2.466,211,2.466,212,2.466,213,1.916,214,2.466,215,2.466,216,2.466,217,2.466,218,2.959,219,2.466,220,2.466,221,2.466,222,2.466,223,2.466,224,2.466,225,2.959,226,3.297,227,2.135,228,2.135,229,2.135,230,2.135,231,2.135,232,1.916,233,2.135,234,2.135,235,1.916,236,1.144,237,1.34,238,2.506,239,3.615,240,2.466,241,1.916]],["title/injectables/AppService.html",[40,0.593,117,2.382]],["body/injectables/AppService.html",[3,0.275,4,0.249,5,0.249,9,0.442,10,1.563,20,0.631,23,0.016,31,1.3,36,0.301,40,1.019,41,0.847,50,0.275,58,1.915,63,0.14,75,1.248,108,0.013,109,0.013,114,6.421,117,4.095,242,1.879,243,4.801,244,5.547,245,4.801,246,4.801]],["title/controllers/AuthController.html",[110,1.371,247,2.757]],["body/controllers/AuthController.html",[3,0.211,4,0.191,5,0.191,9,0.34,10,1.323,20,0.642,22,1.435,23,0.016,24,1.075,25,0.575,26,0.986,31,1.323,36,0.381,38,1.797,41,0.651,50,0.211,63,0.108,73,3.662,75,1.27,108,0.011,109,0.011,110,1.506,112,1.506,115,1.495,119,2.457,247,4.013,248,3.689,249,2.457,250,2.754,251,4.886,252,3.715,253,4.262,254,4.434,255,4.262,256,4.262,257,6.33,258,4.262,259,4.138,260,4.262,261,4.262,262,4.262,263,3.068,264,3.312,265,2.805,266,1.444,267,3.649,268,3.689,269,3.689,270,2.457,271,3.689,272,3.312,273,2.805,274,4.262,275,3.312,276,4.262,277,4.886,278,4.262,279,4.262,280,2.316,281,3.312,282,4.262,283,2.457,284,4.262,285,3.689,286,4.262,287,4.262,288,4.262,289,4.262,290,4.262,291,4.262]],["title/modules/AuthModule.html",[122,1.161,134,2.382]],["body/modules/AuthModule.html",[3,0.176,4,0.159,5,0.159,11,1.104,18,2.175,19,2.308,23,0.016,36,0.414,39,1.365,41,0.541,42,1.365,43,2.042,48,2.175,49,2.331,50,0.176,63,0.089,93,2.331,95,2.331,97,2.331,108,0.01,109,0.01,112,1.758,122,1.721,124,1.565,125,1.494,126,1.728,127,1.728,128,1.565,129,2.806,130,2.806,134,4.678,141,2.868,143,2.427,144,1.728,145,1.728,150,2.704,164,2.331,180,3.066,218,2.752,226,4.307,227,3.066,228,3.066,229,3.066,230,3.066,231,3.066,232,2.752,233,3.066,234,3.066,236,2.308,237,2.704,238,2.331,239,2.752,247,4.088,267,4.327,268,3.066,292,3.066,293,3.066,294,3.066,295,3.882,296,3.703,297,4.184,298,4.184,299,3.542,300,4.088,301,2.868,302,3.542,303,3.066,304,3.066,305,3.537,306,3.542,307,2.752,308,3.537,309,3.066,310,4.976,311,3.542,312,3.066,313,3.066,314,3.066,315,2.175,316,3.542]],["title/injectables/AuthService.html",[40,0.593,267,2.236]],["body/injectables/AuthService.html",[3,0.134,4,0.121,5,0.121,7,1.317,9,0.215,10,0.956,11,1.931,13,1.938,15,1.382,17,4.572,18,3.021,19,2.544,20,0.704,22,1.251,23,0.016,24,0.937,25,0.691,26,0.86,31,1.153,34,1.858,36,0.382,37,1.317,38,1.138,39,1.04,40,0.623,41,0.412,42,1.04,43,1.556,44,1.556,48,2.506,49,1.776,50,0.134,51,1.285,53,0.914,54,1.556,57,1.991,63,0.068,65,2.424,69,1.657,70,1.991,71,1.919,73,2.674,75,1.107,84,1.803,85,1.442,88,1.657,89,1.388,91,1.938,100,1.193,102,1.388,103,1.893,105,1.388,107,0.775,108,0.008,109,0.008,178,1.657,203,1.776,235,2.097,236,2.544,237,1.467,242,0.914,251,4.259,252,3.609,254,2.685,259,2.506,263,2.674,267,2.352,269,2.336,272,2.097,273,1.776,295,3.599,296,3.2,298,4.243,301,1.556,304,2.336,307,2.097,308,2.901,309,2.336,315,2.506,317,2.336,318,1.172,319,2.826,320,5.889,321,5.484,322,4.92,323,2.699,324,3.138,325,2.699,326,2.699,327,2.901,328,2.699,329,2.699,330,1.893,331,2.699,332,2.699,333,2.699,334,2.699,335,2.097,336,1.919,337,2.336,338,2.685,339,2.097,340,2.097,341,2.336,342,2.097,343,2.352,344,3.532,345,2.699,346,4.92,347,2.699,348,1.919,349,2.699,350,2.699,351,2.336,352,2.097,353,2.336,354,2.699,355,2.699,356,4.261,357,2.699,358,2.699,359,2.336,360,2.336,361,2.699]],["title/guards/AuthenticationGuard.html",[0,2.382,181,2.757]],["body/guards/AuthenticationGuard.html",[0,1.969,1,3.918,2,5.122,3,0.159,4,0.144,5,0.144,7,1.564,9,0.255,10,1.086,11,1.697,12,6.38,13,2.33,15,1.57,20,0.527,22,1.178,23,0.016,24,0.883,25,0.607,26,0.81,27,4.011,28,4.239,30,2.11,31,1.086,32,2.261,36,0.344,37,1.564,38,1.352,40,0.708,41,0.49,46,2.491,47,2.279,50,0.159,51,1.398,63,0.081,64,2.11,65,2.048,66,2.775,67,2.775,68,1.969,75,1.043,84,2.635,85,1.923,87,2.775,88,3.342,91,1.133,100,2.048,103,1.487,104,2.775,105,1.648,106,1.742,107,0.921,108,0.009,109,0.009,176,2.279,178,1.969,181,3.294,250,2.909,270,2.671,318,0.921,327,2.279,362,2.775,363,4.634,364,4.634,365,4.634,366,3.206,367,6.96,368,3.206,369,3.206,370,2.775,371,3.601,372,2.491,373,4.634,374,2.775,375,3.206,376,3.206,377,1.848,378,2.775,379,4.011,380,5.443,381,4.011,382,3.206,383,3.206,384,3.206,385,3.206,386,3.206,387,3.206,388,3.206,389,2.671,390,4.634,391,3.206,392,3.206,393,3.206,394,3.206,395,2.491,396,2.491,397,2.491,398,4.634,399,2.775,400,3.206,401,4.634,402,3.206,403,3.206,404,3.206,405,3.206,406,4.634,407,2.491]],["title/injectables/BcryptProvider.html",[40,0.593,305,2.757]],["body/injectables/BcryptProvider.html",[3,0.172,4,0.156,5,0.156,9,0.276,10,1.149,11,1.772,20,0.557,22,1.246,23,0.016,24,0.933,25,0.689,26,0.856,31,1.448,32,3.466,34,2.093,36,0.309,40,0.749,41,0.53,50,0.172,51,1.333,58,2.041,63,0.088,64,2.282,75,1.103,76,2.825,91,1.225,107,0.996,108,0.01,109,0.01,242,1.175,265,4.066,295,2.664,305,3.484,319,2.191,327,3.484,339,2.694,343,4.5,348,4.393,352,4.801,408,3.002,409,4.921,410,4.921,411,3.002,412,3.468,413,4.243,414,5.349,415,6.412,416,4.418,417,4.801,418,3.809,419,4.243,420,3.484,421,3.002,422,3.468,423,4.902,424,3.809,425,5.349,426,5.643,427,3.468,428,3.01,429,3.002,430,4.902,431,3.468,432,3.468,433,3.002,434,3.468]],["title/classes/CreateMetaOptionsDto.html",[63,0.098,435,2.382]],["body/classes/CreateMetaOptionsDto.html",[3,0.255,4,0.231,5,0.231,9,0.41,20,0.586,23,0.016,25,0.525,36,0.28,50,0.255,58,1.988,63,0.161,108,0.013,109,0.013,115,1.364,158,3.277,318,1.83,435,3.913,436,1.673,437,3.463,438,4.952,439,4.458,440,5.378,441,5.15,442,5.15,443,4.952,444,3.93,445,1.984,446,4.53,447,3.162,448,4.458,449,4.001,450,3.162]],["title/classes/CreatePostDto.html",[63,0.098,451,2.382]],["body/classes/CreatePostDto.html",[3,0.098,4,0.088,5,0.088,9,0.157,20,0.698,23,0.016,25,0.779,26,1.039,30,2.096,36,0.275,50,0.098,56,1.547,58,2.065,63,0.101,76,1.836,83,1.399,100,2.627,103,1.478,107,1.949,108,0.006,109,0.006,115,1.626,158,1.638,245,3.474,246,3.474,266,2.452,280,1.069,283,2.921,318,1.153,395,1.529,397,3.937,420,1.399,428,1.208,435,2.465,436,0.639,437,1.069,438,1.529,440,1.529,443,2.475,444,3.103,445,0.758,446,4.059,447,3.33,448,1.703,449,1.529,450,2.465,451,1.956,452,5.461,453,1.529,454,4.366,455,2.853,456,2.641,457,3.474,458,3.474,459,3.334,460,2.936,461,4.386,462,3.279,463,3.67,464,3.279,465,3.993,466,1.968,467,1.968,468,2.758,469,2.096,470,3.584,471,2.758,472,4.694,473,1.968,474,1.968,475,3.186,476,3.186,477,5.423,478,1.968,479,1.968,480,1.968,481,1.968,482,3.937,483,3.186,484,4.613,485,4.613,486,2.314,487,3.474,488,3.474,489,1.968,490,1.968,491,3.855,492,3.119,493,3.993,494,3.186,495,3.186,496,3.186,497,3.186,498,1.968,499,1.968,500,2.758,501,1.968,502,3.584,503,3.279,504,1.731,505,2.475,506,2.265,507,2.475,508,2.265,509,2.475,510,2.096,511,1.968,512,3.937,513,2.758,514,2.758,515,2.758,516,1.968,517,1.968,518,3.186,519,1.012,520,2.605,521,1.968,522,1.968,523,1.968,524,1.968,525,3.186,526,2.475,527,1.968,528,3.474,529,1.968,530,3.126,531,2.758,532,1.529,533,1.529,534,3.186,535,1.703,536,1.399,537,3.855,538,0.87,539,1.529,540,1.968,541,1.295,542,1.703,543,2.475,544,1.968,545,1.968,546,1.703,547,1.703,548,1.968,549,3.186,550,1.968,551,1.968,552,1.703,553,1.295,554,1.968,555,2.096,556,4.014,557,1.968,558,1.968,559,3.186,560,3.186,561,1.703,562,1.529,563,0.913,564,1.399,565,1.529,566,1.703,567,1.529]],["title/classes/CreateTagDto.html",[63,0.098,568,2.553]],["body/classes/CreateTagDto.html",[3,0.164,4,0.149,5,0.149,9,0.264,20,0.729,23,0.016,24,1.22,25,0.762,26,1.165,36,0.258,50,0.164,58,2.165,63,0.12,107,2.054,108,0.009,109,0.009,115,1.697,266,2.051,318,1.364,420,2.357,436,1.077,443,3.689,444,3.014,445,1.277,446,3.942,447,3.718,454,3.375,455,3.942,459,4.217,462,3.375,463,3.73,464,3.375,465,4.109,468,4.109,469,3.124,470,5.181,471,4.109,472,5.241,492,3.689,500,4.109,502,4.705,503,4.304,504,3.291,505,3.689,506,3.375,507,3.689,508,3.375,509,3.689,510,3.124,530,3.49,531,4.109,532,2.576,533,2.576,537,4.304,538,1.465,542,2.869,546,2.869,547,2.869,552,2.869,568,3.124,569,5.771,570,2.869,571,2.573,572,4.304,573,4.747,574,4.747,575,4.109,576,3.315,577,3.315,578,3.315,579,4.109,580,3.315,581,4.109,582,3.315,583,3.315,584,3.315,585,3.315,586,3.315,587,3.315,588,2.869,589,3.315]],["title/classes/CreateUserDto.html",[63,0.098,590,2.236]],["body/classes/CreateUserDto.html",[3,0.198,4,0.18,5,0.18,9,0.319,20,0.781,23,0.016,25,0.699,26,1.236,36,0.218,50,0.198,56,2.086,57,2.993,58,2.165,63,0.137,108,0.011,109,0.011,115,1.818,318,1.555,343,3.536,420,2.847,436,1.301,444,3.571,445,1.543,447,4.216,504,2.943,508,3.849,530,3.788,532,3.111,533,3.111,588,4.687,590,3.121,591,6.125,592,3.111,593,4.361,594,4.361,595,4.361,596,4.005,597,4.005,598,4.005,599,4.005,600,4.005,601,4.005,602,4.005,603,4.005,604,4.005,605,6.572,606,5.415,607,5.415,608,4.687,609,5.415,610,6.125,611,5.415,612,5.415,613,5.415,614,4.005,615,4.687,616,6.572,617,4.005,618,4.005]],["title/injectables/CreateUserProvider.html",[40,0.593,619,2.382]],["body/injectables/CreateUserProvider.html",[3,0.142,4,0.129,5,0.129,9,0.228,10,1.001,11,1.762,13,1.803,15,1.446,20,0.485,22,1.086,23,0.016,24,0.813,25,0.576,26,0.746,31,0.672,32,2.083,34,1.446,36,0.357,37,2.489,38,1.209,39,1.105,40,0.652,41,0.438,44,1.653,50,0.142,51,0.672,53,2.335,57,2.083,63,0.072,65,2.255,70,2.083,75,0.645,84,2.498,85,2.136,88,1.761,89,2.195,91,2.239,102,2.195,103,2.622,105,2.623,106,2.321,107,1.465,108,0.008,109,0.008,122,1.278,193,0.971,236,2.367,238,1.887,241,2.228,242,0.971,295,3.665,301,1.653,315,1.761,319,1.966,335,2.228,338,1.887,339,2.228,340,2.228,341,3.696,343,3.258,344,4.416,348,3.035,351,3.696,389,1.653,407,2.228,464,2.038,519,1.474,520,1.474,590,2.461,594,3.627,619,2.622,620,4.416,621,2.482,622,3.964,623,2.868,624,3.258,625,4.03,626,2.868,627,3.696,628,2.482,629,2.868,630,1.474,631,2.038,632,2.868,633,2.868,634,1.761,635,2.228,636,1.209,637,2.321,638,2.482,639,2.868,640,2.868,641,2.228,642,2.868,643,2.868,644,2.868,645,5.652,646,5.652,647,3.318,648,2.321,649,2.482,650,2.482,651,2.482,652,2.868,653,2.868,654,2.868,655,2.228,656,2.038,657,2.228,658,2.868,659,5.231,660,2.868,661,2.868,662,2.482,663,2.868,664,2.868,665,2.868,666,2.868,667,2.868,668,2.868,669,2.868,670,2.482,671,2.482,672,2.038,673,2.482]],["title/injectables/DataResponseInterceptor.html",[40,0.593,183,2.757]],["body/injectables/DataResponseInterceptor.html",[3,0.201,4,0.182,5,0.182,9,0.323,10,1.28,13,1.432,15,1.849,19,3.064,20,0.621,22,1.388,23,0.016,24,1.04,25,0.556,26,0.954,28,4.695,30,3.592,31,0.95,36,0.359,39,1.562,40,0.834,41,0.619,42,1.562,44,2.336,46,4.796,47,2.881,50,0.201,63,0.102,64,2.667,65,1.791,68,2.489,75,1.228,77,5.717,108,0.011,109,0.011,168,3.508,183,3.881,185,4.796,242,1.373,389,3.147,674,5.343,675,3.508,676,5.459,677,4.054,678,4.054,679,5.459,680,5.459,681,4.796,682,6.605,683,4.054,684,5.459,685,4.054,686,4.054,687,4.054,688,3.508,689,4.054,690,6.605,691,5.459,692,6.605,693,4.054,694,4.054,695,4.054,696,4.054,697,4.062,698,4.054,699,4.054,700,4.054,701,4.054]],["title/controllers/FileUploadController.html",[110,1.371,702,2.757]],["body/controllers/FileUploadController.html",[3,0.188,4,0.17,5,0.335,9,0.302,10,1.221,13,1.337,15,1.282,20,0.43,22,0.962,23,0.016,24,1.357,25,0.607,26,0.661,31,0.887,36,0.366,39,1.458,41,0.578,45,4.235,50,0.188,63,0.096,68,2.324,73,2.057,75,0.852,100,3.075,107,2.086,108,0.01,109,0.01,110,1.337,112,1.337,115,1.002,120,2.491,187,3.428,249,2.182,266,1.765,454,3.704,520,3.577,538,1.673,575,3.276,697,3.428,702,3.704,703,2.831,704,3.276,705,4.01,706,4.51,707,3.785,708,4.63,709,3.785,710,3.785,711,3.785,712,3.785,713,3.785,714,3.276,715,3.785,716,3.276,717,5.21,718,5.21,719,3.704,720,3.942,721,3.276,722,3.785,723,5.21,724,3.785,725,3.276,726,3.785,727,3.785,728,3.785,729,5.21,730,3.785,731,3.785,732,3.785,733,2.69,734,2.941,735,3.785,736,3.785,737,3.785]],["title/modules/FileUploadModule.html",[122,1.161,135,2.553]],["body/modules/FileUploadModule.html",[3,0.223,4,0.202,5,0.291,23,0.016,24,0.856,36,0.41,41,0.686,42,1.731,50,0.223,63,0.113,108,0.012,109,0.012,112,2.065,122,1.943,124,1.986,125,1.895,126,2.192,127,2.192,128,1.986,129,3.169,130,2.192,135,4.966,143,2.851,144,2.192,145,2.192,150,2.442,164,2.957,187,2.957,190,3.194,192,2.759,193,1.522,571,2.084,702,4.617,703,2.442,705,2.59,720,4.489,721,3.889,738,3.889,739,3.889,740,4.489,741,4.493,742,4.493,743,3.889,744,3.889,745,3.491,746,4.155,747,3.889,748,4.493,749,2.957,750,4.493]],["title/injectables/FileUploadService.html",[40,0.593,720,2.382]],["body/injectables/FileUploadService.html",[3,0.244,4,0.157,5,0.313,9,0.279,10,1.156,11,1.78,13,2.018,15,1.67,19,2.877,20,0.561,22,1.254,23,0.016,24,0.939,25,0.691,26,0.861,31,0.82,34,1.67,36,0.379,39,1.347,40,0.753,41,0.534,42,1.347,50,0.173,51,1.339,63,0.088,75,0.787,84,2.179,85,2.192,89,1.798,91,1.742,102,1.798,103,1.622,108,0.01,109,0.01,187,3.758,190,2.486,193,1.185,209,2.301,237,1.9,242,1.185,319,2.201,330,1.622,340,2.717,624,3.575,634,2.147,636,1.475,637,1.9,662,3.027,703,3.104,705,3.77,706,4.944,708,2.717,720,3.028,734,2.717,740,4.167,743,3.027,744,3.027,745,2.717,747,3.027,751,3.027,752,3.497,753,5.712,754,4.944,755,3.497,756,3.497,757,3.497,758,4.931,759,3.497,760,2.717,761,3.497,762,3.027,763,3.497,764,3.497,765,3.497,766,3.497,767,3.497,768,3.497,769,3.497,770,3.497,771,3.497,772,3.497,773,3.831,774,3.497,775,5.712,776,3.497,777,3.497,778,3.027,779,4.268,780,3.497,781,2.717,782,3.497,783,3.027,784,3.027,785,3.027,786,3.027,787,3.497,788,2.486,789,3.497,790,3.497,791,3.497]],["title/injectables/GenerateTokenProvider.html",[40,0.593,296,2.108]],["body/injectables/GenerateTokenProvider.html",[3,0.169,4,0.153,5,0.153,9,0.272,10,1.137,11,2.1,13,2.291,15,1.643,16,2.656,17,4.788,18,3.464,19,2.848,20,0.641,22,1.561,23,0.016,24,1.074,25,0.721,26,0.985,31,1.137,34,2.08,36,0.352,39,1.317,40,0.741,41,0.522,42,1.317,43,1.97,48,2.979,49,2.249,50,0.169,51,1.137,53,2.282,55,2.429,56,1.869,57,1.667,63,0.086,65,2.144,69,2.099,70,1.667,71,2.429,73,1.857,75,1.092,90,4.77,91,2.169,93,2.249,94,2.656,95,2.249,96,2.656,97,2.249,98,2.656,108,0.01,109,0.01,203,2.249,232,5.233,236,1.585,242,1.158,252,3.192,296,2.637,319,2.173,330,2.251,342,2.656,356,3.77,651,2.958,788,2.429,792,5.314,793,2.656,794,5.641,795,6.484,796,3.418,797,3.418,798,3.418,799,3.77,800,3.418,801,3.418,802,2.958,803,5.038,804,3.418,805,3.418,806,4.852,807,3.418,808,3.418,809,3.418,810,4.852,811,3.418,812,4.852,813,3.418]],["title/classes/GetPostsBaseDto.html",[63,0.098,814,2.757]],["body/classes/GetPostsBaseDto.html",[3,0.239,4,0.216,5,0.216,9,0.384,20,0.695,23,0.016,25,0.623,26,1.234,36,0.365,50,0.239,63,0.17,108,0.012,109,0.012,115,1.619,318,1.756,436,1.566,445,1.857,491,5.02,526,5.218,530,3.871,538,2.13,541,3.172,641,3.745,814,4.773,815,5.218,816,3.745,817,5.218,818,5.218,819,6.114,820,4.82,821,4.82,822,5.292,823,3.745,824,4.172,825,3.754,826,3.426,827,3.745,828,2.96,829,2.478]],["title/classes/GetPostsQueryDto.html",[63,0.098,828,2.382]],["body/classes/GetPostsQueryDto.html",[3,0.257,4,0.233,5,0.233,23,0.016,36,0.377,50,0.257,63,0.175,108,0.013,109,0.013,436,1.684,445,1.997,491,4.548,526,5.393,530,4,538,2.29,541,3.41,641,4.027,814,4.933,815,4.027,816,4.027,817,4.027,818,4.027,822,6.007,823,4.027,824,4.485,825,4.262,826,3.684,827,4.027,828,3.929,829,3.289]],["title/classes/GetUsersParamDto.html",[63,0.098,830,2.553]],["body/classes/GetUsersParamDto.html",[3,0.241,4,0.218,5,0.218,9,0.387,20,0.553,23,0.016,25,0.744,26,1.074,36,0.366,50,0.241,53,2.083,56,2.816,58,1.397,63,0.17,107,1.397,108,0.012,109,0.012,115,1.288,318,1.766,436,1.58,445,1.874,462,3.457,463,3.161,528,5.322,530,3.544,536,3.457,537,4.371,538,2.149,563,3.39,565,4.777,647,3.778,830,4.046,831,5.322,832,4.046,833,4.209,834,4.371,835,4.863,836,4.863,837,4.863]],["title/controllers/GoogleAuthenticationController.html",[110,1.371,300,2.757]],["body/controllers/GoogleAuthenticationController.html",[3,0.235,4,0.213,5,0.213,9,0.379,10,1.42,13,1.679,15,1.609,20,0.54,22,1.208,23,0.016,24,0.905,25,0.484,26,0.83,31,1.114,36,0.382,38,2.003,41,0.726,50,0.235,63,0.12,73,2.582,75,1.069,108,0.012,109,0.012,110,1.679,112,1.679,115,1.258,235,4.707,249,2.738,250,2.318,263,3.818,264,3.692,266,2.052,270,2.738,271,4.112,273,3.126,275,3.692,277,4.112,297,4.096,300,4.307,312,4.112,838,4.707,839,4.112,840,4.707,841,6.058,842,4.751,843,4.623,844,4.751,845,4.751,846,4.112,847,4.751,848,4.751,849,4.751]],["title/injectables/GoogleAuthenticationService.html",[40,0.593,297,2.382]],["body/injectables/GoogleAuthenticationService.html",[3,0.15,4,0.135,5,0.135,9,0.241,10,1.04,11,1.639,13,2.281,15,1.503,19,2.689,20,0.659,22,1.128,23,0.016,24,0.845,25,0.629,26,0.775,31,1.04,34,1.503,36,0.363,39,1.163,40,0.678,41,0.461,42,1.163,50,0.15,51,1.564,53,2.319,55,2.146,57,2.565,63,0.076,64,1.987,65,1.334,69,1.854,73,3.508,75,1.183,79,2.613,84,1.334,85,1.858,89,1.552,90,4.086,91,1.858,102,1.552,103,2.058,105,1.552,106,1.641,107,0.867,108,0.009,109,0.009,225,2.346,236,1.4,237,1.641,242,1.023,250,1.473,273,1.987,296,3.15,297,2.724,301,1.74,307,2.346,308,2.146,313,2.613,314,2.613,315,1.854,318,1.274,319,2.026,324,3.339,330,1.4,336,2.146,338,1.987,593,2.146,594,4.389,595,2.146,648,1.641,656,2.146,659,3.839,688,2.613,788,2.146,838,4.797,840,3.447,843,2.919,846,2.613,850,2.613,851,5.258,852,5.258,853,6.456,854,3.019,855,5.258,856,3.019,857,4.436,858,3.019,859,3.019,860,3.019,861,2.613,862,5.796,863,3.019,864,3.019,865,2.613,866,3.019,867,3.019,868,4.436,869,3.019,870,4.436,871,3.019,872,3.019,873,3.019,874,3.019,875,2.613,876,3.019,877,3.019,878,3.019,879,3.019,880,3.019,881,4.436,882,4.436,883,2.613,884,3.019,885,3.019,886,2.613,887,3.019,888,4.436,889,3.019,890,2.613,891,2.613,892,3.019]],["title/classes/GoogleTokenDto.html",[63,0.098,843,2.553]],["body/classes/GoogleTokenDto.html",[3,0.275,4,0.249,5,0.249,9,0.442,20,0.631,23,0.015,25,0.565,36,0.301,50,0.275,58,1.915,63,0.168,108,0.013,109,0.013,115,1.469,318,1.915,436,1.802,444,3.886,445,2.137,843,4.388,893,5.772,894,4.31,895,7.15,896,5.547]],["title/injectables/HashingProvider.html",[40,0.593,295,2.108]],["body/injectables/HashingProvider.html",[3,0.2,4,0.181,5,0.181,9,0.321,10,1.275,20,0.619,22,1.384,23,0.016,24,1.036,25,0.722,26,0.951,31,1.443,32,3.459,34,2.233,36,0.219,40,0.831,41,0.616,50,0.2,58,1.977,63,0.102,76,3.136,107,1.159,108,0.011,109,0.011,242,1.366,265,4.052,295,2.957,327,3.868,343,4.422,348,3.868,352,4.784,353,4.71,409,5.33,410,5.33,411,3.491,413,4.71,415,5.33,417,4.228,418,4.228,419,4.71,421,3.491,426,5.705,428,3.341,429,3.491,433,3.491,897,3.491,898,7.248,899,4.034,900,6.592,901,6.592,902,5.441,903,4.034,904,4.034,905,4.034]],["title/modules/MailModule.html",[122,1.161,136,2.553]],["body/modules/MailModule.html",[3,0.187,4,0.169,5,0.169,11,1.177,23,0.016,36,0.394,39,1.455,41,0.577,42,1.455,50,0.187,53,1.279,63,0.095,68,2.319,70,1.842,75,0.85,85,1.334,100,1.669,108,0.01,109,0.01,112,1.838,122,2.012,124,2.299,125,1.592,126,1.842,127,1.842,128,1.669,129,2.903,130,2.903,136,4.687,143,2.538,144,1.842,145,1.842,150,2.827,164,2.485,165,5.226,199,3.269,209,2.485,213,4.042,218,2.934,241,4.042,250,1.842,389,2.177,428,2.319,555,2.485,625,4.661,906,3.269,907,3.269,908,3.269,909,3.776,910,3.776,911,3.776,912,3.776,913,3.776,914,4.042,915,2.934,916,3.269,917,5.202,918,3.776,919,3.776,920,3.776,921,3.776,922,3.776,923,3.776,924,3.776,925,3.776,926,3.776,927,3.776,928,3.776,929,3.776,930,5.202,931,3.776,932,3.776,933,3.776,934,3.776,935,3.776,936,3.776,937,3.776,938,3.776,939,3.776,940,3.776,941,3.269,942,3.269,943,3.776,944,3.776,945,3.776,946,3.776,947,3.269,948,3.776,949,3.776,950,3.776,951,3.776]],["title/injectables/MailService.html",[40,0.593,625,2.382]],["body/injectables/MailService.html",[3,0.222,4,0.201,5,0.201,9,0.356,10,1.365,11,2.02,15,1.514,20,0.662,22,1.481,23,0.016,24,1.109,25,0.699,26,1.017,30,2.941,31,1.048,32,2.841,34,1.973,36,0.352,40,0.89,41,0.683,50,0.222,51,1.048,53,2.412,57,3.161,63,0.113,91,1.579,108,0.011,109,0.011,119,2.576,242,1.514,319,2.496,464,4.14,593,4.14,595,4.14,625,3.576,802,3.868,914,3.472,915,3.472,941,3.868,942,3.868,952,3.868,953,6.479,954,4.469,955,7.3,956,4.469,957,4.469,958,4.469,959,4.469,960,4.469,961,4.469,962,4.469,963,4.469]],["title/classes/MetaOption.html",[63,0.098,964,2.553]],["body/classes/MetaOption.html",[3,0.225,4,0.203,5,0.203,9,0.361,20,0.668,23,0.016,25,0.703,36,0.354,50,0.291,51,1.062,63,0.114,76,3.387,100,3.16,108,0.012,109,0.012,115,1.556,193,1.535,266,2.561,318,1.688,374,5.086,377,2.611,436,1.472,437,3.544,440,5.067,519,2.329,520,3.548,571,2.726,636,1.91,829,2.329,964,3.866,965,5.067,966,3.52,967,3.866,968,4.53,969,5.645,970,5.086,971,4.53,972,4.291,973,2.981,974,3.387,975,4.53,976,4.53,977,4.53,978,4.53,979,3.22,980,3.921]],["title/controllers/MetaOptionsController.html",[110,1.371,148,2.553]],["body/controllers/MetaOptionsController.html",[3,0.239,4,0.216,5,0.216,9,0.384,10,1.433,20,0.548,22,1.226,23,0.016,24,0.918,25,0.491,26,0.842,31,1.13,36,0.365,41,0.736,50,0.239,51,1.13,63,0.122,75,1.085,108,0.012,109,0.012,110,1.703,112,1.703,115,1.276,119,2.778,148,4.023,158,3.453,159,4.023,249,2.778,263,2.62,266,2.275,428,3.754,435,4.645,437,3.323,539,3.745,562,5.218,630,2.478,981,4.172,982,6.114,983,4.82,984,4.82,985,4.124,986,4.172,987,4.82,988,4.82,989,4.82]],["title/modules/MetaOptionsModule.html",[122,1.161,137,2.553]],["body/modules/MetaOptionsModule.html",[3,0.23,4,0.208,5,0.208,23,0.016,24,0.882,36,0.391,41,0.707,50,0.23,63,0.117,108,0.012,109,0.012,112,2.106,122,1.972,124,2.047,125,1.953,126,2.259,127,2.259,128,2.047,129,3.215,130,3.215,137,4.933,143,2.908,144,2.259,145,2.259,148,4.337,150,2.517,158,3.065,159,3.048,160,4.009,192,2.844,193,1.569,437,2.517,571,2.148,749,3.048,964,3.048,979,4.237,985,4.81,986,4.009,990,4.009,991,4.009,992,4.009,993,4.632,994,4.009,995,4.009,996,4.632]],["title/injectables/MetaOptionsService.html",[40,0.593,985,2.382]],["body/injectables/MetaOptionsService.html",[3,0.216,4,0.196,5,0.196,9,0.348,10,1.344,11,1.996,13,1.542,15,1.942,20,0.652,22,1.458,23,0.016,24,1.092,25,0.693,26,1.002,31,1.023,34,1.942,36,0.384,40,0.876,41,0.666,50,0.216,51,1.023,63,0.11,65,1.928,70,2.128,75,0.982,85,1.542,91,1.542,108,0.011,109,0.011,158,2.948,159,4.214,193,1.478,236,2.024,242,1.478,319,2.467,330,2.024,428,2.679,435,3.521,437,3.48,539,3.39,562,4.455,624,3.92,630,2.243,634,2.679,636,1.84,637,2.371,648,3.48,964,2.871,985,3.521,994,3.777,995,3.777,997,3.777,998,4.363,999,4.363,1000,5.733,1001,3.777,1002,4.363,1003,4.363,1004,5.733,1005,4.363,1006,4.363]],["title/interfaces/Paginated.html",[1007,2.757,1008,2.553]],["body/interfaces/Paginated.html",[3,0.245,4,0.222,5,0.222,9,0.394,23,0.016,25,0.784,34,2.415,50,0.245,56,2.748,58,2.11,108,0.012,109,0.012,158,3.666,318,1.786,359,4.284,360,4.284,510,3.257,681,3.846,697,4.692,799,5.282,1007,3.519,1008,4.091,1009,4.95,1010,4.284,1011,6.172,1012,4.284,1013,4.95,1014,4.284,1015,4.284,1016,4.284,1017,4.284,1018,4.284,1019,4.284,1020,4.284]],["title/modules/PaginationModule.html",[122,1.161,138,2.382]],["body/modules/PaginationModule.html",[3,0.255,4,0.231,5,0.231,23,0.016,36,0.346,41,0.787,50,0.255,63,0.13,108,0.013,109,0.013,122,2.071,124,2.276,125,2.172,126,2.512,127,2.512,128,2.276,129,3.376,130,3.376,138,4.713,142,4.58,143,3.109,144,2.512,145,2.512,1021,4.458,1022,4.458,1023,5.15,1024,5.15,1025,5.15]],["title/classes/PaginationQueryDto.html",[63,0.098,825,2.382]],["body/classes/PaginationQueryDto.html",[3,0.209,4,0.189,5,0.189,9,0.336,20,0.637,23,0.016,25,0.747,26,1.173,36,0.342,50,0.209,56,2.977,63,0.159,107,1.61,108,0.011,109,0.011,115,1.485,280,3.904,318,1.61,436,1.371,445,1.625,450,3.443,462,3.986,463,3.451,486,4.027,530,3.63,536,2.999,537,4.477,538,1.864,553,4.416,561,4.853,608,5.809,825,3.443,826,4.477,1026,3.651,1027,4.144,1028,6.588,1029,5.215,1030,5.607,1031,4.219,1032,4.219,1033,6.298]],["title/injectables/PaginationService.html",[40,0.593,142,2.236]],["body/injectables/PaginationService.html",[3,0.169,4,0.153,5,0.153,9,0.271,10,1.134,11,1.754,13,1.203,15,1.639,20,0.55,22,1.431,23,0.016,24,0.921,25,0.659,26,0.845,31,0.798,32,2.36,34,1.639,36,0.366,39,1.311,40,0.739,41,0.52,44,4.076,45,2.42,50,0.169,51,1.686,63,0.086,65,1.504,75,0.766,76,1.962,85,1.203,91,1.709,108,0.01,109,0.01,120,2.24,142,2.788,158,1.75,176,2.42,242,1.153,319,2.168,389,1.962,470,2.645,486,4.147,510,2.24,553,4.032,624,3.532,636,1.435,681,2.645,697,2.24,799,2.645,825,2.97,827,2.645,974,1.962,1008,3.183,1011,2.946,1014,2.946,1015,4.187,1016,2.946,1017,4.871,1018,2.946,1019,2.946,1020,2.946,1027,4.26,1034,2.946,1035,5.628,1036,3.404,1037,3.404,1038,3.404,1039,3.404,1040,3.404,1041,3.404,1042,3.404,1043,4.871,1044,3.439,1045,3.404,1046,3.404,1047,3.404,1048,2.946,1049,5.628,1050,3.404,1051,3.404,1052,4.838,1053,3.404,1054,3.404,1055,3.404,1056,3.404,1057,3.404,1058,4.838,1059,3.404,1060,3.404,1061,3.404,1062,3.404,1063,3.404,1064,3.404,1065,3.404]],["title/classes/PatchPostDto.html",[63,0.098,1066,2.553]],["body/classes/PatchPostDto.html",[3,0.23,4,0.208,5,0.208,9,0.37,20,0.528,23,0.016,25,0.672,36,0.401,50,0.23,56,2.543,63,0.151,107,1.334,108,0.012,109,0.012,115,1.23,266,2.023,318,1.715,377,3.442,424,3.609,436,1.509,444,3.245,445,1.79,446,4.244,451,2.852,453,3.609,463,3.07,492,3.609,538,2.053,541,3.056,563,3.343,565,4.639,648,2.524,823,3.609,829,3.07,834,4.244,1066,3.929,1067,5.168,1068,5.971,1069,4.639,1070,4.645,1071,4.645,1072,5.168,1073,3.609,1074,5.971,1075,4.639,1076,4.645,1077,4.645,1078,4.645,1079,4.645,1080,4.645,1081,4.645]],["title/classes/PatchUserDto.html",[63,0.098,1082,2.757]],["body/classes/PatchUserDto.html",[3,0.282,4,0.256,5,0.256,23,0.015,36,0.368,50,0.282,63,0.144,108,0.013,109,0.013,377,3.285,436,1.852,590,3.285,592,4.428,631,4.051,648,3.097,829,3.485,1072,4.933,1075,4.428,1082,4.818,1083,4.933,1084,6.777]],["title/classes/Post.html",[63,0.098,266,1.314]],["body/classes/Post.html",[3,0.149,4,0.135,5,0.135,9,0.24,20,0.807,23,0.016,25,0.793,26,1.195,36,0.315,50,0.22,51,0.706,58,2.258,63,0.076,100,3.218,108,0.009,109,0.009,115,1.88,193,1.021,266,1.501,280,3.506,283,3.028,318,1.272,436,0.979,454,3.734,455,3.734,456,3.81,457,4.547,458,4.547,459,3.456,460,2.701,461,4.547,482,4.794,491,4.116,512,4.794,519,2.977,520,3.947,535,2.608,543,4.499,555,4.502,571,2.055,572,2.142,636,2.215,829,1.549,967,4.671,970,2.608,972,4.736,973,1.983,974,2.553,1085,2.342,1086,3.014,1087,3.014,1088,3.014,1089,3.014,1090,3.014,1091,3.014,1092,3.014,1093,4.43,1094,3.014,1095,3.014,1096,3.014,1097,3.014,1098,3.014,1099,3.014,1100,2.608]],["title/controllers/PostsController.html",[110,1.371,147,2.553]],["body/controllers/PostsController.html",[3,0.093,4,0.084,5,0.084,6,1.147,7,0.911,9,0.149,10,0.716,20,0.509,22,1.137,23,0.016,24,0.852,25,0.632,26,0.781,31,1.413,32,1.889,36,0.328,37,0.911,38,0.788,41,0.285,44,2.578,50,0.093,51,0.908,53,2.351,54,2.578,56,2.245,58,0.877,63,0.047,70,1.49,75,1.006,76,3.051,84,1.35,85,2.192,86,1.617,88,1.147,107,1.894,108,0.006,109,0.006,110,0.66,112,0.66,115,1.184,119,1.077,120,1.229,147,2.009,178,1.147,249,1.077,250,0.911,263,1.66,265,2.943,266,2.528,270,1.077,283,2.578,372,1.452,389,1.077,397,2.373,399,2.643,414,2.643,417,2.373,418,3.476,424,2.373,451,4.217,463,0.961,504,2.877,519,2.3,538,0.826,563,2.947,567,1.452,630,0.961,647,3.832,670,2.643,672,1.328,697,4.265,719,3.506,733,3.18,803,3.476,828,2.747,834,3.18,1029,3.476,1044,2.171,1066,3.676,1069,4.113,1073,2.373,1101,1.617,1102,6.064,1103,3.476,1104,3.054,1105,3.352,1106,3.352,1107,1.868,1108,3.476,1109,5.293,1110,3.054,1111,1.868,1112,4.473,1113,1.868,1114,1.868,1115,4.113,1116,5.293,1117,3.054,1118,5.293,1119,5.828,1120,5.293,1121,5.293,1122,4.473,1123,3.054,1124,1.868,1125,3.054,1126,3.054,1127,2.373,1128,1.868,1129,1.868,1130,1.868,1131,4.932,1132,4.473,1133,1.868,1134,1.868,1135,1.868,1136,4.473,1137,3.054,1138,3.054,1139,4.473,1140,3.054,1141,3.873,1142,3.873,1143,3.054,1144,3.054,1145,1.868,1146,4.473,1147,3.872,1148,1.868,1149,1.868,1150,4.473,1151,4.582,1152,3.054,1153,3.054,1154,4.473,1155,3.054,1156,2.009,1157,2.373,1158,1.868,1159,1.875,1160,1.617,1161,4.269,1162,1.452,1163,1.328,1164,1.617,1165,2.373,1166,1.452,1167,1.868,1168,1.868,1169,1.868,1170,3.873,1171,1.868,1172,1.868,1173,1.868,1174,1.617,1175,1.868,1176,1.617,1177,1.328,1178,3.054,1179,1.868,1180,1.868,1181,1.868,1182,1.868,1183,2.643,1184,1.868,1185,1.868,1186,3.054,1187,1.868]],["title/modules/PostsModule.html",[122,1.161,139,2.553]],["body/modules/PostsModule.html",[3,0.209,4,0.189,5,0.189,23,0.016,24,0.801,36,0.404,41,0.643,50,0.209,63,0.106,108,0.011,109,0.011,112,1.978,122,1.882,124,1.86,125,1.774,126,2.053,127,2.053,128,1.86,129,3.068,130,3.068,138,4.408,139,5.112,140,4.408,141,4.137,143,2.731,144,2.053,145,2.053,147,4.139,150,3.042,192,2.584,193,1.425,266,1.425,303,3.642,456,3.683,571,1.952,749,2.769,1159,4.743,1160,3.642,1188,3.642,1189,3.642,1190,4.208,1191,3.642,1192,4.208,1193,4.208,1194,4.208,1195,4.208,1196,3.642,1197,4.208]],["title/injectables/PostsService.html",[40,0.593,1159,2.382]],["body/injectables/PostsService.html",[3,0.1,4,0.091,5,0.091,9,0.161,10,0.764,11,2.066,13,1.657,15,1.104,20,0.584,22,1.307,23,0.016,24,0.979,25,0.686,26,0.898,31,1.099,32,1.589,34,2.035,36,0.36,37,1.589,38,0.853,40,0.498,41,0.309,50,0.1,51,1.525,53,1.104,56,1.576,63,0.051,65,1.44,70,1.995,75,1.055,84,2.552,85,2.123,89,1.04,91,2.299,102,1.04,103,1.511,105,2.103,106,1.1,107,1.175,108,0.006,109,0.006,142,3.329,193,0.685,236,0.939,237,1.1,238,2.144,242,0.685,266,2.1,281,1.572,283,1.166,319,2.554,324,2.287,330,1.897,336,1.438,377,1.166,451,2.001,459,2.144,460,3.345,486,1.878,504,1.1,563,2.787,564,3.333,567,3.178,624,2.962,630,1.04,634,1.242,636,0.853,637,1.1,648,2.548,655,1.572,656,1.438,657,1.572,672,1.438,803,2.531,817,1.572,818,1.572,828,2.001,883,1.751,969,1.751,1001,1.751,1008,1.331,1027,2.144,1043,1.751,1048,1.751,1066,2.144,1069,3.643,1073,2.531,1102,2.82,1103,3.178,1105,3.54,1106,2.82,1127,1.572,1156,2.691,1159,2.001,1162,1.572,1163,1.438,1164,1.751,1174,3.54,1177,4.105,1183,2.82,1196,1.751,1198,1.751,1199,2.023,1200,3.329,1201,4.09,1202,2.023,1203,3.258,1204,2.023,1205,1.751,1206,2.023,1207,2.023,1208,2.023,1209,2.023,1210,2.023,1211,1.438,1212,2.023,1213,2.023,1214,2.023,1215,3.258,1216,3.258,1217,2.023,1218,2.023,1219,2.023,1220,2.023,1221,1.751,1222,2.023,1223,2.023,1224,3.994,1225,3.258,1226,2.023,1227,4.09,1228,2.82,1229,3.258,1230,2.82,1231,4.09,1232,2.023,1233,3.258,1234,3.258,1235,2.023,1236,3.258,1237,3.258,1238,2.023,1239,3.258,1240,2.023,1241,3.258,1242,3.258,1243,2.023,1244,3.258,1245,2.023,1246,3.258,1247,2.023,1248,3.258,1249,2.023,1250,3.258,1251,2.023,1252,3.258,1253,2.023,1254,3.258,1255,2.023,1256,3.258,1257,2.023,1258,3.258,1259,2.023,1260,2.023,1261,2.023,1262,2.023,1263,2.023,1264,2.023,1265,2.023,1266,1.751]],["title/classes/RefreshTokenDto.html",[63,0.098,259,2.382]],["body/classes/RefreshTokenDto.html",[3,0.273,4,0.247,5,0.247,9,0.439,20,0.626,23,0.015,25,0.561,36,0.299,50,0.273,58,1.908,63,0.168,108,0.013,109,0.013,115,1.459,252,4.691,259,4.078,318,1.908,436,1.79,444,3.609,445,2.123,447,4.078,894,4.281,1267,5.749,1268,5.51,1269,5.51]],["title/injectables/RefreshTokenProvider.html",[40,0.593,298,2.382]],["body/injectables/RefreshTokenProvider.html",[3,0.168,4,0.152,5,0.152,7,1.657,9,0.271,10,1.132,11,1.752,13,2.163,15,1.636,16,2.639,17,4.778,18,3.452,19,2.84,20,0.549,22,1.228,23,0.016,24,0.92,25,0.624,26,0.844,31,0.796,34,1.636,36,0.384,37,2.356,38,1.432,39,1.309,40,0.738,41,0.519,42,1.309,43,1.958,48,2.966,49,2.235,50,0.168,51,1.318,53,1.904,54,1.958,55,3.434,63,0.086,65,2.135,69,2.086,70,1.657,71,2.415,73,3.327,75,0.764,84,1.501,85,1.707,88,2.086,89,1.746,91,1.986,93,2.235,94,2.639,95,2.235,96,2.639,97,2.235,98,2.639,102,1.746,103,2.241,105,1.746,106,2.625,107,0.976,108,0.01,109,0.01,178,2.086,203,2.235,236,1.576,242,1.151,252,3.179,259,2.966,272,2.639,273,2.235,296,3.758,298,2.966,301,1.958,308,2.415,319,2.166,324,3.448,330,1.576,336,2.415,337,2.94,338,2.235,342,2.639,356,3.753,370,2.94,563,1.576,579,2.94,788,3.434,793,2.639,875,2.94,886,4.866,890,2.94,1029,2.639,1270,4.866,1271,5.621,1272,3.397,1273,3.397,1274,3.397,1275,3.397,1276,3.397,1277,3.397,1278,3.397,1279,3.397]],["title/classes/SignInDto.html",[63,0.098,254,2.553]],["body/classes/SignInDto.html",[3,0.262,4,0.237,5,0.237,9,0.421,20,0.736,23,0.016,25,0.659,36,0.287,50,0.262,57,3.414,58,2.095,63,0.163,108,0.013,109,0.013,115,1.714,254,4.259,318,1.859,343,4.034,436,1.716,444,3.804,445,2.035,447,3.975,615,5.602,1280,4.571,1281,5.281,1282,5.281,1283,5.281,1284,5.281]],["title/classes/Tags.html",[63,0.098,460,1.994]],["body/classes/Tags.html",[3,0.19,4,0.172,5,0.172,9,0.305,20,0.768,23,0.016,24,1.141,25,0.761,26,1.127,36,0.285,50,0.26,51,0.897,58,2.273,63,0.097,75,0.861,83,3.733,100,3.303,107,1.722,108,0.01,109,0.01,115,1.79,193,1.297,266,1.297,318,1.508,436,1.244,445,1.475,455,4.261,459,4.244,460,2.7,463,1.969,502,4.08,503,2.722,504,2.081,505,2.975,506,2.722,507,2.975,508,2.722,509,2.975,510,2.519,519,1.969,520,3.843,571,2.436,636,1.614,829,1.969,967,4.448,972,4.594,973,2.519,974,3.027,1115,2.975,1285,2.975,1286,5.994,1287,3.829,1288,3.829,1289,3.829,1290,3.829,1291,3.829,1292,3.314,1293,3.829,1294,2.722,1295,3.314]],["title/controllers/TagsController.html",[110,1.371,149,2.553]],["body/controllers/TagsController.html",[3,0.209,4,0.189,5,0.189,9,0.335,10,1.312,11,1.961,20,0.636,22,1.423,23,0.016,24,1.066,25,0.57,26,0.978,31,1.312,36,0.364,41,0.643,50,0.209,51,0.986,56,2.424,63,0.106,75,1.259,91,1.487,108,0.011,109,0.011,110,1.487,112,1.487,115,1.482,119,2.425,149,3.683,249,2.425,263,2.287,266,1.896,330,1.952,460,2.164,538,1.86,563,3.11,568,4.412,572,4.766,630,2.164,648,3.042,719,4.471,733,3.979,1044,2.991,1103,4.349,1108,4.349,1156,4.412,1157,4.349,1200,3.626,1296,3.642,1297,5.598,1298,4.208,1299,4.208,1300,4.208,1301,5.445,1302,4.208,1303,4.208,1304,4.208,1305,3.642,1306,3.642,1307,4.208,1308,4.208,1309,4.845,1310,4.208,1311,4.208,1312,4.208]],["title/modules/TagsModule.html",[122,1.161,140,2.382]],["body/modules/TagsModule.html",[3,0.233,4,0.211,5,0.211,23,0.016,24,0.894,36,0.393,41,0.718,50,0.233,63,0.119,108,0.012,109,0.012,112,2.125,122,1.985,124,2.076,125,1.981,126,2.291,127,2.291,128,2.076,129,3.236,130,3.236,140,4.618,143,2.934,144,2.291,145,2.291,149,4.366,150,2.553,192,2.884,193,1.591,460,2.415,571,2.179,749,3.091,1200,4.524,1294,4.275,1306,4.066,1313,4.066,1314,4.066,1315,4.066,1316,4.697,1317,4.697,1318,4.066,1319,4.697]],["title/injectables/TagsService.html",[40,0.593,1200,2.236]],["body/injectables/TagsService.html",[3,0.148,4,0.134,5,0.134,9,0.238,10,1.033,11,2.327,13,1.057,15,1.493,20,0.732,22,1.564,23,0.016,24,1.225,25,0.748,26,1.075,31,1.442,34,2.313,36,0.35,37,1.459,38,1.262,40,0.673,41,0.457,50,0.148,51,1.442,56,2.015,63,0.076,75,1.384,84,1.947,85,1.848,91,2.274,108,0.011,109,0.009,193,1.013,242,1.013,281,2.325,283,1.724,319,2.877,330,2.853,460,3.163,504,1.626,563,3.167,568,2.899,572,4.574,624,3.326,630,1.538,634,1.837,636,1.262,637,1.626,655,2.325,656,2.127,657,2.325,1127,2.325,1156,3.442,1177,2.127,1200,2.54,1205,2.59,1211,2.127,1224,2.325,1266,2.59,1301,4.527,1305,2.59,1309,3.814,1318,2.59,1320,2.59,1321,5.231,1322,5.771,1323,5.231,1324,2.992,1325,2.992,1326,4.406,1327,2.992,1328,2.992,1329,2.992,1330,2.992,1331,2.992,1332,2.992,1333,2.992,1334,2.992,1335,2.992,1336,4.406,1337,4.406,1338,2.992,1339,4.406,1340,2.992,1341,2.992,1342,4.406,1343,2.992,1344,2.992]],["title/classes/Upload.html",[63,0.098,705,2.236]],["body/classes/Upload.html",[3,0.186,4,0.169,5,0.169,9,0.3,20,0.763,23,0.016,25,0.778,36,0.282,50,0.294,51,0.881,56,1.998,58,2.23,63,0.095,100,3.291,108,0.01,109,0.01,115,1.778,193,1.273,209,3.907,280,2.818,318,1.489,377,2.167,436,1.221,469,3.412,519,1.933,520,3.829,543,4.613,571,2.406,636,1.585,703,3.773,705,2.989,746,2.672,760,5.218,778,3.254,781,4.613,783,3.254,784,5.139,786,5.139,829,1.933,967,4.419,972,4.568,973,2.474,974,3.689,1345,2.672,1346,3.759,1347,3.759,1348,3.759,1349,3.759,1350,3.759,1351,4.489,1352,4.489,1353,3.759,1354,3.759,1355,3.759,1356,3.254]],["title/injectables/UploadToAwsProvider.html",[40,0.593,740,2.382]],["body/injectables/UploadToAwsProvider.html",[3,0.167,4,0.151,5,0.301,9,0.268,10,1.126,11,1.744,13,2.155,15,1.627,19,2.83,20,0.636,22,1.423,23,0.016,24,1.066,25,0.703,26,0.978,31,1.126,34,2.066,36,0.364,37,2.343,38,1.421,39,1.298,40,0.734,41,0.515,42,1.298,50,0.167,51,1.653,58,0.968,63,0.085,75,1.081,84,1.489,85,1.977,89,1.732,91,1.191,102,1.732,103,1.563,105,1.732,106,2.61,107,0.968,108,0.009,109,0.009,190,2.395,209,3.16,242,1.141,263,1.831,319,2.156,330,1.563,389,1.942,449,2.618,469,2.217,563,2.228,671,2.916,672,2.395,673,2.916,703,3.315,705,1.942,708,3.731,740,2.949,745,2.618,754,4.157,762,2.916,773,2.618,781,3.731,785,2.916,1357,5.28,1358,2.916,1359,5.596,1360,5.596,1361,3.369,1362,3.369,1363,3.369,1364,3.369,1365,3.369,1366,3.369,1367,5.596,1368,2.916,1369,3.369,1370,4.802,1371,2.916,1372,3.369,1373,3.369,1374,3.369,1375,4.802,1376,3.369,1377,3.369,1378,4.157,1379,3.369,1380,3.369,1381,3.369,1382,3.369,1383,3.369,1384,3.369,1385,3.369,1386,3.369,1387,3.369,1388,3.369,1389,3.369,1390,3.369,1391,3.369,1392,3.369,1393,3.369,1394,3.369,1395,3.369,1396,4.802,1397,3.369,1398,3.369]],["title/classes/User.html",[53,1.314,63,0.098]],["body/classes/User.html",[3,0.193,4,0.175,5,0.175,9,0.311,20,0.739,23,0.016,25,0.745,26,0.929,36,0.289,50,0.264,51,0.914,53,1.802,57,3.171,58,2.249,63,0.098,83,3.781,100,3.373,108,0.01,109,0.01,115,1.721,193,1.321,280,2.891,318,1.528,343,3.489,436,1.267,445,1.503,504,2.12,506,3.781,519,2.006,520,3.76,555,4.278,571,2.467,593,4.302,595,4.302,636,1.645,829,2.006,832,2.567,967,4.278,972,4.477,973,2.567,974,3.066,1230,3.376,1292,3.376,1378,4.604,1399,3.031,1400,5.319,1401,3.901,1402,3.901,1403,3.901,1404,5.319,1405,3.901,1406,3.901,1407,3.376,1408,3.901,1409,3.901,1410,3.376,1411,3.376,1412,3.901,1413,2.773,1414,3.376]],["title/controllers/UserController.html",[110,1.371,1415,2.757]],["body/controllers/UserController.html",[1,1.458,3,0.125,4,0.114,5,0.114,6,1.554,7,1.234,9,0.202,10,0.911,20,0.538,22,1.202,23,0.016,24,1.09,25,0.678,26,1.055,31,1.243,36,0.353,38,1.067,41,0.387,50,0.125,51,0.911,53,2.046,56,2.765,63,0.064,75,1.415,85,2.134,107,1.951,108,0.01,109,0.008,110,0.894,112,0.894,115,1.252,119,1.458,120,1.665,178,1.554,213,3.018,249,1.458,250,1.234,263,1.375,264,1.966,265,2.556,266,1.316,270,1.458,275,1.966,280,2.882,283,1.458,285,3.362,319,2.564,324,2.306,372,1.966,396,1.966,416,1.966,450,2.385,463,2.727,486,3.916,520,2.727,538,1.717,553,2.556,555,3.49,563,1.802,566,4.092,590,3.741,610,2.19,622,4.121,630,1.301,631,2.761,648,2.882,714,2.19,719,3.361,733,2.761,830,3.49,832,4.47,891,2.19,1027,4.548,1028,4.092,1044,3.361,1082,4.613,1108,3.018,1147,2.19,1151,4.092,1156,1.665,1157,3.674,1161,3.362,1162,1.966,1163,1.799,1221,4.092,1411,3.362,1415,2.761,1416,2.19,1417,4.728,1418,3.885,1419,2.53,1420,2.53,1421,2.53,1422,2.53,1423,2.53,1424,2.53,1425,2.53,1426,3.885,1427,3.885,1428,3.362,1429,2.53,1430,2.53,1431,4.728,1432,2.53,1433,2.53,1434,2.53,1435,2.53,1436,2.53,1437,2.53,1438,2.53,1439,2.53,1440,2.53,1441,2.53,1442,2.19,1443,2.19,1444,4.728,1445,3.885,1446,2.53,1447,2.53,1448,2.53,1449,2.53,1450,2.19,1451,2.53,1452,2.53,1453,2.53,1454,2.53,1455,2.53,1456,2.53,1457,2.53,1458,2.53,1459,2.53,1460,2.53,1461,2.53,1462,2.53,1463,2.53,1464,2.53,1465,2.53,1466,3.362,1467,2.53,1468,2.19,1469,2.19,1470,2.53,1471,2.53,1472,2.53,1473,2.53]],["title/modules/UserModule.html",[122,1.161,141,2.236]],["body/modules/UserModule.html",[0,2.453,1,2.303,3,0.198,4,0.179,5,0.179,23,0.016,24,0.761,36,0.405,41,0.61,42,1.539,50,0.198,53,1.353,63,0.101,108,0.011,109,0.011,112,1.91,122,1.833,124,1.765,125,1.684,126,1.949,127,1.949,128,1.765,129,2.989,130,2.989,134,3.319,141,4.343,143,2.637,144,1.949,145,1.949,150,2.171,164,2.629,174,3.458,192,2.453,193,1.353,236,2.508,237,3.33,238,2.629,239,3.104,301,3.116,315,2.453,324,3.737,571,1.853,619,4.342,635,3.104,637,2.171,749,2.629,1012,3.458,1413,3.843,1415,4.356,1443,3.458,1469,3.458,1474,3.458,1475,3.458,1476,3.458,1477,3.995,1478,3.995,1479,3.995,1480,3.458,1481,3.458,1482,3.458,1483,3.458,1484,3.995,1485,3.995,1486,3.995,1487,3.995,1488,3.995,1489,3.995,1490,3.995,1491,3.995]],["title/injectables/UserService.html",[40,0.593,324,1.892]],["body/injectables/UserService.html",[3,0.116,4,0.105,5,0.105,9,0.187,10,0.857,11,2.146,13,1.951,15,1.239,19,2.36,20,0.665,22,1.488,23,0.016,24,1.114,25,0.733,26,1.022,31,1.294,32,1.784,34,2.252,36,0.374,37,1.784,38,0.987,39,0.902,40,0.559,41,0.358,42,0.902,50,0.116,51,1.193,53,2.417,56,1.734,57,2.196,58,1.05,63,0.059,65,2.249,70,1.142,75,1.316,84,2.586,85,2.068,89,1.88,91,1.798,102,1.88,103,1.696,105,1.203,106,1.987,107,0.672,108,0.007,109,0.007,122,0.7,125,0.987,157,1.819,165,4.75,193,0.793,195,1.819,203,3.348,204,2.6,225,1.819,236,1.696,237,1.272,242,0.793,267,3.523,301,1.349,315,1.437,319,2.749,324,1.784,330,2.088,335,1.819,338,1.54,395,2.842,407,1.819,486,2.108,563,2.088,590,2.108,594,3.2,619,3.754,622,3.497,624,3.182,627,3.896,628,2.026,630,1.203,631,1.664,634,1.437,635,1.819,636,0.987,637,1.272,638,2.026,650,3.896,779,2.026,830,2.407,832,1.54,834,1.664,861,2.026,1027,2.407,1163,1.664,1176,3.896,1177,3.617,1211,1.664,1224,3.497,1428,3.896,1442,2.026,1450,3.896,1466,3.896,1468,3.165,1480,2.026,1481,2.026,1482,2.026,1483,2.026,1492,2.026,1493,4.501,1494,4.501,1495,4.501,1496,2.341,1497,4.501,1498,2.341,1499,2.341,1500,2.341,1501,2.341,1502,2.341,1503,2.341,1504,2.341,1505,2.341,1506,2.341,1507,2.341,1508,2.341,1509,2.341,1510,2.341,1511,2.341,1512,2.341,1513,2.341,1514,2.341,1515,2.341,1516,2.341,1517,3.657,1518,2.341,1519,4.501,1520,2.341,1521,3.657,1522,2.341,1523,2.341]],["title/coverage.html",[1524,4.117]],["body/coverage.html",[0,2.352,1,1.432,5,0.111,6,2.87,7,2.28,8,3.323,23,0.016,25,0.39,40,1.121,52,1.931,53,0.842,54,1.432,63,0.187,85,0.878,108,0.008,109,0.008,110,2.28,111,1.766,113,2.151,117,1.526,128,1.098,142,1.432,146,1.931,147,1.635,148,1.635,149,1.635,158,1.278,159,2.521,181,1.766,183,1.766,185,1.931,187,2.521,194,1.931,243,2.151,247,1.766,248,2.151,250,1.212,254,1.635,259,1.526,266,0.842,267,1.432,295,1.35,296,1.35,297,1.526,298,1.526,300,1.766,305,1.766,317,2.151,324,1.212,362,2.151,371,1.931,408,2.151,435,1.526,437,3.084,438,1.931,439,2.151,451,1.526,452,2.151,453,2.976,456,1.635,460,1.278,541,1.635,568,1.635,569,2.151,570,2.151,590,1.432,591,2.151,592,2.976,619,1.526,620,2.151,621,2.151,625,1.526,674,2.151,675,2.151,702,1.766,703,3.084,704,2.151,705,1.432,720,1.526,740,1.526,746,1.766,751,2.151,792,2.151,793,2.976,814,1.766,815,2.976,816,2.976,825,1.526,826,1.766,828,1.526,830,1.635,831,2.151,832,1.635,833,2.151,838,2.976,839,2.151,843,1.635,850,2.151,893,2.151,894,2.976,897,2.151,952,2.151,964,1.635,965,2.976,966,2.976,979,1.766,981,2.151,985,1.526,997,2.151,1007,1.766,1008,1.635,1010,2.151,1026,2.151,1034,2.151,1066,1.635,1067,2.151,1082,1.766,1083,2.151,1085,2.976,1101,2.151,1115,1.931,1159,1.526,1165,1.931,1166,1.931,1198,2.151,1200,1.432,1228,6.931,1267,2.151,1270,2.151,1280,2.151,1285,2.976,1294,1.766,1296,2.151,1320,2.151,1345,2.723,1357,2.151,1358,2.151,1399,2.976,1413,1.766,1415,1.766,1416,2.151,1492,2.151,1524,1.931,1525,2.485,1526,2.485,1527,6.76,1528,6.76,1529,7.151,1530,7.072,1531,4.675,1532,2.151,1533,2.976,1534,5.254,1535,2.485,1536,4.675,1537,2.485,1538,2.485,1539,2.485,1540,2.485,1541,2.485,1542,2.485,1543,5.675,1544,2.151,1545,2.485,1546,2.485,1547,2.485,1548,2.485,1549,2.485,1550,2.485]],["title/dependencies.html",[125,1.968,1551,2.802]],["body/dependencies.html",[23,0.016,41,0.72,42,1.815,43,2.715,45,3.348,47,3.348,63,0.152,108,0.012,109,0.012,125,1.986,157,3.66,176,3.348,193,1.596,250,2.298,377,2.715,378,4.077,425,4.077,445,1.815,536,3.348,538,2.082,636,1.986,716,4.077,773,3.66,840,3.66,865,4.077,914,3.66,915,3.66,947,4.077,1075,3.66,1211,3.348,1368,4.077,1371,4.077,1552,4.711,1553,4.711,1554,4.711,1555,6.025,1556,4.711,1557,4.711,1558,4.711,1559,4.711,1560,4.711,1561,4.711,1562,4.711,1563,4.711,1564,4.711,1565,4.711,1566,4.711,1567,4.711,1568,4.711,1569,4.711,1570,4.711,1571,4.711,1572,4.711,1573,4.711,1574,4.711,1575,4.711,1576,4.711,1577,4.711,1578,4.711,1579,4.711,1580,4.711,1581,4.711,1582,4.711]],["title/miscellaneous/enumerations.html",[1583,1.759,1584,4.039]],["body/miscellaneous/enumerations.html",[9,0.387,23,0.016,108,0.012,109,0.012,266,2.083,270,3.544,450,4.898,469,4.046,482,4.777,486,3.544,487,5.322,488,5.322,493,5.322,512,4.777,513,5.322,514,5.322,515,5.322,649,5.322,703,2.643,725,5.322,760,4.777,974,3.544,1345,3.457,1351,5.322,1352,5.322,1533,3.778,1583,2.643,1584,4.209,1585,4.209,1586,4.209,1587,6.148,1588,4.863]],["title/miscellaneous/functions.html",[1583,1.759,1589,4.039]],["body/miscellaneous/functions.html",[9,0.486,23,0.014,108,0.014,109,0.014,128,3.288,1544,5.278,1583,3.314,1589,5.278,1590,6.098]],["title/index.html",[9,0.258,379,2.802,1591,3.237]],["body/index.html",[4,0.207,23,0.016,68,2.836,107,1.327,108,0.012,109,0.012,463,3.384,564,3.283,581,3.998,637,2.51,734,3.589,916,3.998,1407,3.998,1524,3.589,1592,4.619,1593,4.619,1594,5.95,1595,4.619,1596,4.619,1597,4.619,1598,4.619,1599,4.619,1600,6.582,1601,4.619,1602,4.619,1603,7.492,1604,4.619,1605,4.619,1606,4.619,1607,7.364,1608,4.619,1609,4.619,1610,5.95,1611,4.619,1612,4.619,1613,4.619,1614,4.619,1615,5.95,1616,5.95,1617,4.619,1618,4.619,1619,4.619,1620,5.95,1621,5.95,1622,4.619,1623,4.619,1624,4.619,1625,4.619,1626,4.619,1627,3.998,1628,4.619,1629,4.619,1630,4.619,1631,4.619,1632,4.619,1633,4.619,1634,4.619,1635,4.619,1636,4.619,1637,4.619,1638,4.619,1639,4.619,1640,4.619,1641,3.998]],["title/modules.html",[124,2.342]],["body/modules.html",[23,0.013,108,0.013,109,0.013,123,3.803,124,2.364,134,3.285,135,3.52,136,3.52,137,3.52,138,3.285,139,3.52,140,3.285,141,3.083,1627,6.809,1642,7.867,1643,7.867,1644,7.867]],["title/overview.html",[1645,4.587]],["body/overview.html",[2,2.52,23,0.016,108,0.009,109,0.009,112,1.146,117,3.364,122,0.97,123,5.544,124,1.434,125,1.368,126,1.582,127,1.582,128,1.434,129,1.582,130,1.582,131,2.808,132,2.808,133,2.808,134,4.577,135,4.489,136,4.355,137,4.355,138,4.189,139,4.861,140,4.189,141,4.099,142,4.024,143,2.28,144,1.582,145,1.582,242,1.099,267,3.932,292,2.808,293,2.808,294,2.808,295,3.258,296,2.977,297,3.364,298,3.364,324,3.328,396,2.52,436,1.054,503,2.306,553,2.134,619,3.364,625,4.189,720,3.364,738,2.808,739,2.808,740,3.364,906,2.808,907,2.808,908,2.808,985,4.189,990,2.808,991,2.808,992,2.808,1007,2.306,1021,2.808,1022,2.808,1159,4.189,1188,2.808,1189,2.808,1191,2.808,1200,3.932,1313,2.808,1314,2.808,1315,2.808,1474,2.808,1475,2.808,1476,2.808,1645,2.808,1646,3.244,1647,3.244,1648,3.244]],["title/properties.html",[318,1.34,1551,2.802]],["body/properties.html",[23,0.015,107,1.732,108,0.014,109,0.014,318,1.732,416,4.686,564,4.287,1641,5.22,1649,6.031,1650,6.031]],["title/miscellaneous/typealiases.html",[1583,1.759,1651,4.667]],["body/miscellaneous/typealiases.html",[6,3.677,7,2.921,8,4.96,9,0.477,23,0.014,25,0.711,34,2.028,54,4.022,108,0.014,109,0.014,1583,3.254,1652,5.988,1653,5.183]],["title/miscellaneous/variables.html",[204,3.317,1583,1.759]],["body/miscellaneous/variables.html",[6,2.584,7,2.053,8,3.979,9,0.335,23,0.016,25,0.57,28,2.991,44,2.425,51,1.312,52,4.349,53,2.131,54,3.226,58,1.608,75,1.259,101,3.642,108,0.011,109,0.011,146,3.27,194,4.349,195,3.27,204,2.991,250,2.731,270,3.226,280,4.134,371,4.349,381,4.845,437,2.287,450,4.672,456,3.683,519,2.164,703,2.287,746,3.979,965,3.27,966,4.349,979,3.979,980,3.642,1085,3.27,1100,3.642,1165,4.349,1166,3.27,1285,3.27,1294,3.979,1295,3.642,1345,2.991,1356,3.642,1399,3.27,1410,4.845,1413,3.979,1414,3.642,1532,4.845,1533,3.27,1583,2.287,1585,4.845,1586,3.642,1653,3.642,1654,4.208,1655,4.208,1656,4.208,1657,4.208,1658,4.208,1659,4.208,1660,4.208,1661,4.208,1662,4.208,1663,4.208,1664,4.208,1665,4.208]],["title/routes.html",[1666,4.587]],["body/routes.html",[23,0.014,108,0.014,109,0.014,1666,5.418]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":1228,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1649,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1568,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1579,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1581,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1567,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1529,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1545,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1548,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1527,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1530,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1534,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1536,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1543,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1531,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":495,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":553,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["1.1.26",{"_index":1553,"title":{},"body":{"dependencies.html":{}}}],["1.4.12",{"_index":1564,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1542,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1540,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1028,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{}}}],["10.0.0",{"_index":1555,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1562,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":1559,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1557,"title":{},"body":{"dependencies.html":{}}}],["10.4.15",{"_index":1560,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":1425,"title":{},"body":{"controllers/UserController.html":{}}}],["11.0.4",{"_index":1582,"title":{},"body":{"dependencies.html":{}}}],["123",{"_index":565,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["1234",{"_index":1457,"title":{},"body":{"controllers/UserController.html":{}}}],["16t12:00:00+0000",{"_index":496,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17",{"_index":1647,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":1572,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1648,"title":{},"body":{"overview.html":{}}}],["1})@get('/:id",{"_index":1429,"title":{},"body":{"controllers/UserController.html":{}}}],["1})@isoptional()@ispositive",{"_index":1030,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["2",{"_index":396,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["2.0.2",{"_index":1554,"title":{},"body":{"dependencies.html":{}}}],["2.0.6",{"_index":1558,"title":{},"body":{"dependencies.html":{}}}],["2.1643.0",{"_index":1565,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":1538,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["2024",{"_index":494,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["25",{"_index":1539,"title":{},"body":{"coverage.html":{}}}],["3.1.10",{"_index":1569,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":1556,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":1547,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1541,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":554,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["5.1.1",{"_index":1566,"title":{},"body":{"dependencies.html":{}}}],["6.9.16",{"_index":1575,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1546,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1537,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":1580,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1646,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":1561,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":1577,"title":{},"body":{"dependencies.html":{}}}],["8.9.3",{"_index":1573,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":503,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/Tags.html":{},"overview.html":{}}}],["9.15.0",{"_index":1570,"title":{},"body":{"dependencies.html":{}}}],["9]+)*$/.test(v",{"_index":1293,"title":{},"body":{"classes/Tags.html":{}}}],["_",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["aac",{"_index":1354,"title":{},"body":{"classes/Upload.html":{}}}],["abstract",{"_index":898,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["accept",{"_index":729,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["access",{"_index":370,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/RefreshTokenProvider.html":{}}}],["access_token",{"_index":895,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["accesskeyid",{"_index":1383,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["accesstoken",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["accesstokenprovider",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["activeuser",{"_index":1165,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["actual",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Paginated.html":{}}}],["adapter",{"_index":948,"title":{},"body":{"modules/MailModule.html":{}}}],["additional",{"_index":558,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["address",{"_index":1409,"title":{},"body":{"classes/User.html":{}}}],["adds",{"_index":540,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["against",{"_index":433,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["alias",{"_index":1535,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1652,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowedmimetypes",{"_index":763,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["allowedmimetypes.includes(file.mimetype",{"_index":768,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["alphanumeric",{"_index":507,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/Tags.html":{}}}],["already",{"_index":655,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["amazing",{"_index":1628,"title":{},"body":{"index.html":{}}}],["another",{"_index":1218,"title":{},"body":{"injectables/PostsService.html":{}}}],["anywhere",{"_index":921,"title":{},"body":{"modules/MailModule.html":{}}}],["api",{"_index":1428,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["apiheader",{"_index":717,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["apiheaders",{"_index":718,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["apiheaders(['undefined",{"_index":709,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["apioperation",{"_index":719,"title":{},"body":{"controllers/FileUploadController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":1108,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":446,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":492,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":483,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":537,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({description",{"_index":462,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({})@isjson()@isoptional",{"_index":584,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiquery",{"_index":1444,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":1161,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":1445,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":1447,"title":{},"body":{"controllers/UserController.html":{}}}],["apiversion",{"_index":700,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app",{"_index":1605,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["app_interceptor",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{}}}],["appconfiguration",{"_index":679,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["appcontroller",{"_index":111,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1469,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["application'})@httpcode(httpstatus.created)@auth(authtype.none)@useinterceptors(classserializerinterceptor)@post",{"_index":1420,"title":{},"body":{"controllers/UserController.html":{}}}],["application/json",{"_index":730,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["applications",{"_index":1599,"title":{},"body":{"index.html":{}}}],["applying",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":123,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":117,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":397,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["assess",{"_index":885,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["assign",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["associated",{"_index":1137,"title":{},"body":{"controllers/PostsController.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{}}}],["aud",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["audience",{"_index":95,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["audio",{"_index":1352,"title":{},"body":{"classes/Upload.html":{},"miscellaneous/enumerations.html":{}}}],["auth",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.bearer",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth(authtype.bearer)@post('refresh",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth(authtype.none",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["auth(authtype.none)@httpcode(httpstatus.ok)@post",{"_index":844,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["auth(authtype.none)@post('login')@httpcode(httpstatus.ok",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":302,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/access",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":371,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":247,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":852,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(undefined",{"_index":858,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticated",{"_index":805,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["authentication",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller",{"_index":311,"title":{},"body":{"modules/AuthModule.html":{}}}],["authentication.controller.ts",{"_index":839,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:15",{"_index":845,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":312,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":850,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:16",{"_index":856,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:29",{"_index":863,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:31",{"_index":860,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:42",{"_index":859,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticationguard",{"_index":181,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":388,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":134,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":564,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":567,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["authorization",{"_index":724,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["authservice",{"_index":267,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":373,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":376,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":363,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":381,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":391,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["automatic",{"_index":824,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["available",{"_index":951,"title":{},"body":{"modules/MailModule.html":{}}}],["await",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":773,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["aws.provider",{"_index":744,"title":{},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{}}}],["aws.provider.ts",{"_index":1358,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["aws.provider.ts:15",{"_index":1366,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:28",{"_index":1364,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:9",{"_index":1362,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["awsconfig",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["awsconfiguration",{"_index":754,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["awsfileupload",{"_index":1359,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["awsfileupload(undefined",{"_index":1363,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["awskey",{"_index":775,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["backers",{"_index":1629,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":758,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["baseurl",{"_index":1049,"title":{},"body":{"injectables/PaginationService.html":{}}}],["bcrypt",{"_index":425,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":434,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":431,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(password",{"_index":432,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":305,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":725,"title":{},"body":{"controllers/FileUploadController.html":{},"miscellaneous/enumerations.html":{}}}],["before",{"_index":691,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["being",{"_index":1138,"title":{},"body":{"controllers/PostsController.html":{}}}],["blog",{"_index":465,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["body",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["bootstrap",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1644,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1642,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1391,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["buffer",{"_index":426,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1595,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":682,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["calls",{"_index":1140,"title":{},"body":{"controllers/PostsController.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["cases",{"_index":1454,"title":{},"body":{"controllers/UserController.html":{}}}],["catch",{"_index":102,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{}}}],["catch((error",{"_index":405,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["cause",{"_index":105,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{}}}],["character",{"_index":613,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":508,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/Tags.html":{}}}],["check",{"_index":644,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["checking",{"_index":384,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["choice",{"_index":774,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["circular",{"_index":315,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["class",{"_index":63,"title":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MetaOption.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"classes/Upload.html":{},"classes/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":436,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MetaOption.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"classes/Upload.html":{},"classes/User.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":1441,"title":{},"body":{"controllers/UserController.html":{}}}],["clientid",{"_index":868,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":870,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cluster_appmodule",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":292,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":293,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":294,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_fileuploadmodule",{"_index":738,"title":{},"body":{"modules/FileUploadModule.html":{},"overview.html":{}}}],["cluster_fileuploadmodule_providers",{"_index":739,"title":{},"body":{"modules/FileUploadModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":906,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":907,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":908,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":990,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_exports",{"_index":991,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":992,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":1021,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":1022,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":1023,"title":{},"body":{"modules/PaginationModule.html":{}}}],["cluster_postsmodule",{"_index":1188,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":1189,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1190,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1191,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1313,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1314,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1315,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1474,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1475,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1476,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["compare",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords",{"_index":409,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords(undefined",{"_index":411,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["compares",{"_index":413,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparison",{"_index":904,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["compodoc/compodoc",{"_index":1552,"title":{},"body":{"dependencies.html":{}}}],["composed",{"_index":505,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/Tags.html":{}}}],["config",{"_index":688,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["config/aws.config",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["config/index.config",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":1483,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["configmodule",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forfeature(awsconfig",{"_index":748,"title":{},"body":{"modules/FileUploadModule.html":{}}}],["configmodule.forfeature(emailconfig",{"_index":922,"title":{},"body":{"modules/MailModule.html":{}}}],["configmodule.forfeature(googleconfig",{"_index":316,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1485,"title":{},"body":{"modules/UserModule.html":{}}}],["configmodule.forroot",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"injectables/UserService.html":{}}}],["configservice.get('emailconfig.mailhost",{"_index":932,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('emailconfig.mailport",{"_index":934,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('emailconfig.mailsecure",{"_index":936,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('emailconfig.smtppassword",{"_index":939,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('emailconfig.smtpusername",{"_index":937,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('mail_host",{"_index":931,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('mongodb_uri",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{}}}],["configuration",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{}}}],["confirmation",{"_index":1120,"title":{},"body":{"controllers/PostsController.html":{}}}],["conflictexception",{"_index":759,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["conflictexception(error.message",{"_index":791,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["connection",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log",{"_index":389,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"modules/MailModule.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/UploadToAwsProvider.html":{}}}],["console.log('after",{"_index":696,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log('before",{"_index":693,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log('canactivate",{"_index":404,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["console.log('file",{"_index":777,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["console.log('guards",{"_index":393,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["console.log('inside",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["console.log('node_env",{"_index":1514,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('profile",{"_index":1515,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`environment",{"_index":1513,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`limit",{"_index":1465,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(configservice.get('emailconfig.mailhost",{"_index":924,"title":{},"body":{"modules/MailModule.html":{}}}],["console.log(configservice.get('emailconfig.mailport",{"_index":925,"title":{},"body":{"modules/MailModule.html":{}}}],["console.log(configservice.get('emailconfig.mailsecure",{"_index":926,"title":{},"body":{"modules/MailModule.html":{}}}],["console.log(configservice.get('emailconfig.smtppassword",{"_index":928,"title":{},"body":{"modules/MailModule.html":{}}}],["console.log(configservice.get('emailconfig.smtpusername",{"_index":927,"title":{},"body":{"modules/MailModule.html":{}}}],["console.log(getuserparamdto",{"_index":1464,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log({updatepostdto",{"_index":1182,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{}}}],["constructor(appconfiguration",{"_index":677,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["constructor(authservice",{"_index":1496,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(awsconfiguration",{"_index":1361,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["constructor(googleconfiguration",{"_index":854,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["constructor(mailerservice",{"_index":954,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(metaoptionmodel",{"_index":998,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":119,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":366,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(request",{"_index":1036,"title":{},"body":{"injectables/PaginationService.html":{}}}],["constructor(tagsmodel",{"_index":1324,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(uploadtoawsprovider",{"_index":752,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["constructor(usermodel",{"_index":623,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["constructor(userservice",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(userservices",{"_index":1199,"title":{},"body":{"injectables/PostsService.html":{}}}],["containing",{"_index":1122,"title":{},"body":{"controllers/PostsController.html":{}}}],["content",{"_index":454,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/FileUploadController.html":{},"classes/Post.html":{}}}],["contenttype",{"_index":1395,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailService.html":{}}}],["context.getclass",{"_index":386,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":385,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":110,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FileUploadController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FileUploadController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('file",{"_index":722,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["controller('google",{"_index":847,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('meta",{"_index":987,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":1168,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":1307,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":1446,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/MailModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convert",{"_index":1453,"title":{},"body":{"controllers/UserController.html":{}}}],["coverage",{"_index":1524,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":648,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["create(undefined",{"_index":1001,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["created",{"_index":1112,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdmetaoption",{"_index":1004,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createdmetaoption.save",{"_index":1006,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createdpost",{"_index":1178,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdtags",{"_index":1309,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createdtags.save",{"_index":1341,"title":{},"body":{"injectables/TagsService.html":{}}}],["createmetaoptions",{"_index":982,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(@body",{"_index":988,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(createmetaoptionsdto",{"_index":983,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptionsdto",{"_index":435,"title":{"classes/CreateMetaOptionsDto.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1103,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["createpost(@body",{"_index":1308,"title":{},"body":{"controllers/TagsController.html":{}}}],["createpost(createpostdto",{"_index":1107,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createtag",{"_index":1298,"title":{},"body":{"controllers/TagsController.html":{}}}],["createpost.slug.tolowercase",{"_index":1232,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost.tags",{"_index":1226,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":451,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdto})@patch",{"_index":1148,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto})@post",{"_index":1113,"title":{},"body":{"controllers/PostsController.html":{}}}],["creates",{"_index":1109,"title":{},"body":{"controllers/PostsController.html":{}}}],["createtag",{"_index":1301,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtag(undefined",{"_index":1327,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtagdto",{"_index":568,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createtoken",{"_index":794,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["createtoken(undefined",{"_index":797,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["createuser",{"_index":622,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(@body",{"_index":1472,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(createuserdto",{"_index":1419,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(undefined",{"_index":628,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":590,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto})@apiquery({name",{"_index":1424,"title":{},"body":{"controllers/UserController.html":{}}}],["createuserprovider",{"_index":619,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["creating",{"_index":1048,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/PostsService.html":{}}}],["creation",{"_index":670,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{}}}],["credentials",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":1662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":1019,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["currentpage",{"_index":1016,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["data",{"_index":697,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{}}}],["database",{"_index":779,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/UserService.html":{}}}],["databaseconfig",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":183,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["date",{"_index":491,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/Post.html":{}}}],["date().toisostring().replace(/:/g",{"_index":1380,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["db",{"_index":884,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["dbname",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":380,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["decorators",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/FileUploadController.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"classes/Upload.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["decorators/auth.decorator",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["default",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"classes/Post.html":{},"classes/Upload.html":{},"classes/User.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":365,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaults",{"_index":940,"title":{},"body":{"modules/MailModule.html":{}}}],["defaultvaluepipe",{"_index":1437,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":1463,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(10",{"_index":1461,"title":{},"body":{"controllers/UserController.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":1156,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["delete(undefined",{"_index":1205,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":1127,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletepost",{"_index":1104,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":1185,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1124,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleterequest",{"_index":1186,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletes",{"_index":1125,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletetag",{"_index":1297,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(@query('id",{"_index":1311,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(id",{"_index":1302,"title":{},"body":{"controllers/TagsController.html":{}}}],["dependencies",{"_index":125,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["deprecated",{"_index":1520,"title":{},"body":{"injectables/UserService.html":{}}}],["description",{"_index":107,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"controllers/FileUploadController.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"classes/Tags.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":1123,"title":{},"body":{"controllers/PostsController.html":{}}}],["development",{"_index":1606,"title":{},"body":{"index.html":{}}}],["dir",{"_index":943,"title":{},"body":{"modules/MailModule.html":{}}}],["directly(via",{"_index":920,"title":{},"body":{"modules/MailModule.html":{}}}],["document",{"_index":974,"title":{},"body":{"classes/MetaOption.html":{},"injectables/PaginationService.html":{},"classes/Post.html":{},"classes/Tags.html":{},"classes/Upload.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["documentation",{"_index":541,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["doing",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["don't",{"_index":919,"title":{},"body":{"modules/MailModule.html":{}}}],["draft",{"_index":513,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto/pagination",{"_index":1040,"title":{},"body":{"injectables/PaginationService.html":{}}}],["dtos/create",{"_index":630,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/get",{"_index":1163,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/google",{"_index":846,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/patch",{"_index":1162,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["dtos/refresh",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["dtos/signin.dto",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["e2e",{"_index":1617,"title":{},"body":{"index.html":{}}}],["each",{"_index":556,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":1596,"title":{},"body":{"index.html":{}}}],["eight",{"_index":609,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ejs",{"_index":947,"title":{},"body":{"modules/MailModule.html":{},"dependencies.html":{}}}],["ejsadapter",{"_index":917,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"classes/SignInDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["emailconfig",{"_index":911,"title":{},"body":{"modules/MailModule.html":{}}}],["en",{"_index":731,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["enddate",{"_index":817,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PostsService.html":{}}}],["endpoint",{"_index":1450,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["enter",{"_index":1408,"title":{},"body":{"classes/User.html":{}}}],["entire",{"_index":1489,"title":{},"body":{"modules/UserModule.html":{}}}],["entity",{"_index":1012,"title":{},"body":{"interfaces/Paginated.html":{},"modules/UserModule.html":{}}}],["entry",{"_index":789,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["enum",{"_index":543,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"classes/Upload.html":{}}}],["enumerations",{"_index":1584,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posts.enums",{"_index":535,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["env",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env}.local",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development.local",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserService.html":{}}}],["environmentvalidation",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":103,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{}}}],["error.message",{"_index":106,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{}}}],["error.stack",{"_index":673,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{}}}],["everywhere",{"_index":1490,"title":{},"body":{"modules/UserModule.html":{}}}],["example",{"_index":463,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"classes/Tags.html":{},"controllers/UserController.html":{},"index.html":{}}}],["exception",{"_index":407,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["excerpt",{"_index":475,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["executed",{"_index":690,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["execution",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1517,"title":{},"body":{"injectables/UserService.html":{}}}],["existing",{"_index":1150,"title":{},"body":{"controllers/PostsController.html":{}}}],["existingslug",{"_index":1233,"title":{},"body":{"injectables/PostsService.html":{}}}],["existingtags",{"_index":1336,"title":{},"body":{"injectables/TagsService.html":{}}}],["existinguser",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["existinguser.password",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":656,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["exp",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["expected",{"_index":1081,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["expiresin",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{}}}],["export",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/FileUploadController.html":{},"injectables/PaginationService.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":708,"title":{},"body":{"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["ext",{"_index":946,"title":{},"body":{"modules/MailModule.html":{}}}],["extends",{"_index":829,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"classes/Tags.html":{},"classes/Upload.html":{},"classes/User.html":{}}}],["extension",{"_index":1373,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["extract",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["extractrequestfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(undefined",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["failed",{"_index":671,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{}}}],["false",{"_index":555,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"classes/Post.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["false})@isoptional()@isarray()@isint({each",{"_index":521,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["family_name",{"_index":882,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["featured",{"_index":468,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["featuredimageurl",{"_index":455,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/Post.html":{},"classes/Tags.html":{}}}],["fetch",{"_index":1029,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{}}}],["fetching",{"_index":1412,"title":{},"body":{"classes/User.html":{}}}],["field",{"_index":1410,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["fields",{"_index":1155,"title":{},"body":{"controllers/PostsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1394,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.mimetype",{"_index":785,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["file.originalname",{"_index":1372,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.size",{"_index":787,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["fileinterceptor",{"_index":715,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["filename",{"_index":781,"title":{},"body":{"injectables/FileUploadService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{}}}],["filenamewithoutspace",{"_index":1375,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["filetypes",{"_index":760,"title":{},"body":{"injectables/FileUploadService.html":{},"classes/Upload.html":{},"miscellaneous/enumerations.html":{}}}],["filetypes.image",{"_index":783,"title":{},"body":{"injectables/FileUploadService.html":{},"classes/Upload.html":{}}}],["fileuploadcontroller",{"_index":702,"title":{"controllers/FileUploadController.html":{}},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"coverage.html":{}}}],["fileuploadmodule",{"_index":135,"title":{"modules/FileUploadModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FileUploadModule.html":{},"modules.html":{},"overview.html":{}}}],["fileuploadservice",{"_index":720,"title":{"injectables/FileUploadService.html":{}},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"coverage.html":{},"overview.html":{}}}],["final",{"_index":1449,"title":{},"body":{"controllers/UserController.html":{}}}],["finalresponse",{"_index":1058,"title":{},"body":{"injectables/PaginationService.html":{}}}],["find",{"_index":883,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{}}}],["findall",{"_index":1466,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(undefined",{"_index":1500,"title":{},"body":{"injectables/UserService.html":{}}}],["findmultipletags",{"_index":1321,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(undefined",{"_index":1330,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":1493,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(undefined",{"_index":1502,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyemail",{"_index":1494,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyemail(undefined",{"_index":1504,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbygoogleid",{"_index":1495,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbygoogleid(undefined",{"_index":1506,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":400,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["first",{"_index":510,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"classes/Tags.html":{}}}],["firstname",{"_index":593,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"classes/User.html":{}}}],["footerenabled",{"_index":560,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["force",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["format",{"_index":472,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["forwardref",{"_index":301,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["found",{"_index":1177,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":1594,"title":{},"body":{"index.html":{}}}],["from.env",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["function",{"_index":1115,"title":{},"body":{"controllers/PostsController.html":{},"classes/Tags.html":{},"coverage.html":{}}}],["functions",{"_index":1589,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":788,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["generatefilename",{"_index":1360,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatefilename(undefined",{"_index":1365,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatetoken",{"_index":855,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["generatetokenprovider",{"_index":296,"title":{"injectables/GenerateTokenProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{},"overview.html":{}}}],["generatetokens",{"_index":795,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["generatetokens(undefined",{"_index":800,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["generic",{"_index":1013,"title":{},"body":{"interfaces/Paginated.html":{}}}],["get('/:id",{"_index":1459,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':userid",{"_index":1171,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts",{"_index":1105,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallposts(undefined",{"_index":1207,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(userid",{"_index":1130,"title":{},"body":{"controllers/PostsController.html":{}}}],["getalltags",{"_index":1322,"title":{},"body":{"injectables/TagsService.html":{}}}],["gethello",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpostsbasedto",{"_index":814,"title":{"classes/GetPostsBaseDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["getpostsquerydto",{"_index":828,"title":{"classes/GetPostsQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["getrefreshtoken",{"_index":1271,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["getrefreshtoken(undefined",{"_index":1273,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["gettagbyid",{"_index":1323,"title":{},"body":{"injectables/TagsService.html":{}}}],["gettagbyid(undefined",{"_index":1333,"title":{},"body":{"injectables/TagsService.html":{}}}],["getting",{"_index":379,"title":{"index.html":{}},"body":{"guards/AuthenticationGuard.html":{}}}],["getuserparamdto",{"_index":1431,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers",{"_index":1417,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":1422,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersparamdto",{"_index":830,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["gif",{"_index":771,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["given",{"_index":414,"title":{},"body":{"injectables/BcryptProvider.html":{},"controllers/PostsController.html":{}}}],["given_name",{"_index":881,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["global",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{}}}],["global/interceptors/data",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["global/pagination/pagination.module",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["global/pagination/pagination.service",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["globally",{"_index":1487,"title":{},"body":{"modules/UserModule.html":{}}}],["google",{"_index":840,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["googleauthentication",{"_index":841,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["googleauthentication(@body",{"_index":848,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["googleauthentication(body",{"_index":842,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["googleauthenticationcontroller",{"_index":300,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":297,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["googleconfig",{"_index":313,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["googleconfiguration",{"_index":857,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleid",{"_index":594,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{}}}],["googletokendto",{"_index":843,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["grow",{"_index":1624,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["guards/access",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["handle",{"_index":653,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["handled",{"_index":699,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["handles",{"_index":1116,"title":{},"body":{"controllers/PostsController.html":{}}}],["hashed",{"_index":415,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashedpassword",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashes",{"_index":423,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashing",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{}}}],["hashing.provider",{"_index":427,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashingprovider",{"_index":295,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":410,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(undefined",{"_index":421,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["headers",{"_index":1435,"title":{},"body":{"controllers/UserController.html":{}}}],["hello",{"_index":245,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["here",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/MailModule.html":{},"index.html":{}}}],["host",{"_index":930,"title":{},"body":{"modules/MailModule.html":{}}}],["http://localhost:7321/auth/login",{"_index":963,"title":{},"body":{"injectables/MailService.html":{}}}],["httpcode",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.created",{"_index":1470,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["httpexception",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{}}}],["httpexception('author",{"_index":1223,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('email",{"_index":654,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["httpexception('invalid",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('no",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/PostsController.html":{}}}],["httpexception('post",{"_index":1241,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('slug",{"_index":1235,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('tag",{"_index":1339,"title":{},"body":{"injectables/TagsService.html":{}}}],["httpexception('tags",{"_index":1229,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('unauthorized",{"_index":406,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["httpexception('user",{"_index":1176,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["httpexception(`${error.message",{"_index":104,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["https://example.com/image.jpg",{"_index":471,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["https://nestjs.com",{"_index":1638,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":478,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org",{"_index":550,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":672,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["httpstatus.conflict",{"_index":657,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["httpstatus.created",{"_index":1175,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.moved_permanently",{"_index":1518,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":1224,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.ok",{"_index":1170,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.unauthorized",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{}}}],["hyphens",{"_index":509,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/Tags.html":{}}}],["iat",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["id",{"_index":563,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id'})@delete",{"_index":1303,"title":{},"body":{"controllers/TagsController.html":{}}}],["identifier",{"_index":1525,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":518,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["idtoken",{"_index":878,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["ignoreexpiration",{"_index":99,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["image",{"_index":469,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"miscellaneous/enumerations.html":{}}}],["image/gif",{"_index":765,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["image/jpeg",{"_index":764,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["image/jpg",{"_index":767,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["image/png",{"_index":766,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["implements",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["import",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imported",{"_index":1491,"title":{},"body":{"modules/UserModule.html":{}}}],["importing",{"_index":641,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["imports",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["in(tags",{"_index":1343,"title":{},"body":{"injectables/TagsService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":418,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/PostsController.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/PaginationService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{}}}],["inject(appconfig.key",{"_index":689,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["inject(awsconfig.key",{"_index":762,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["inject(forwardref",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserService.html":{}}}],["inject(googleconfig.key",{"_index":867,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["inject(jwtconfig.key",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["inject(profileconfig.key",{"_index":1510,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(request",{"_index":1042,"title":{},"body":{"injectables/PaginationService.html":{}}}],["injectable",{"_index":40,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":242,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserService.html":{}}}],["injection",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injections",{"_index":1216,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectmodel",{"_index":634,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectmodel(metaoption.name",{"_index":1003,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["injectmodel(post.name",{"_index":1220,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectmodel(tags.name",{"_index":1335,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectmodel(upload.name",{"_index":761,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["injectmodel(user.name",{"_index":638,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["injectrepository",{"_index":1509,"title":{},"body":{"injectables/UserService.html":{}}}],["inlinecssenabled",{"_index":949,"title":{},"body":{"modules/MailModule.html":{}}}],["installation",{"_index":1602,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1604,"title":{},"body":{"index.html":{}}}],["instance",{"_index":401,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instead",{"_index":1522,"title":{},"body":{"injectables/UserService.html":{}}}],["integer",{"_index":566,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["intercept",{"_index":676,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":680,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":1007,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"coverage.html":{},"overview.html":{}}}],["interface/paginated.interface",{"_index":1041,"title":{},"body":{"injectables/PaginationService.html":{}}}],["interfaces",{"_index":1009,"title":{},"body":{"interfaces/Paginated.html":{}}}],["intersectiontype",{"_index":822,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["invalid",{"_index":579,"title":{},"body":{"classes/CreateTagDto.html":{},"injectables/RefreshTokenProvider.html":{}}}],["ip",{"_index":1436,"title":{},"body":{"controllers/UserController.html":{}}}],["isarray",{"_index":525,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauthenticated",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":526,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["isdate()@isoptional",{"_index":819,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["isemail",{"_index":615,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":596,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":527,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(['post",{"_index":544,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":548,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypes",{"_index":545,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":528,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isiso8601",{"_index":529,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":443,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":444,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isemail",{"_index":1281,"title":{},"body":{"classes/SignInDto.html":{}}}],["isnotempty()@isjson",{"_index":441,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["isnotempty()@isstring",{"_index":1283,"title":{},"body":{"classes/SignInDto.html":{}}}],["isnumber",{"_index":1074,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":530,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["ispasswordcorrect",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispositive",{"_index":1033,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["iss",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["isstring",{"_index":447,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":1268,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":598,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional",{"_index":600,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":602,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":604,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issuer",{"_index":97,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["isurl",{"_index":531,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["item",{"_index":557,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":561,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{}}}],["itemsperpage",{"_index":1014,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["joi",{"_index":1571,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":916,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":944,"title":{},"body":{"modules/MailModule.html":{}}}],["jpeg",{"_index":770,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["jpg",{"_index":769,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["json",{"_index":477,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["json.stringify(guards",{"_index":394,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["jwt",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["jwt(refresh",{"_index":804,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["jwtconfig",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["jwtconfig.key",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["jwtconfiguration.jwtsecret",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtconfiguration.jwttokenaudience",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtconfiguration.jwttokenexpiration",{"_index":233,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtconfiguration.jwttokenissuer",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["kamil",{"_index":1635,"title":{},"body":{"index.html":{}}}],["key",{"_index":449,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"injectables/UploadToAwsProvider.html":{}}}],["keyof",{"_index":1661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keys",{"_index":387,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["language",{"_index":575,"title":{},"body":{"classes/CreateTagDto.html":{},"controllers/FileUploadController.html":{}}}],["last",{"_index":1018,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["lastname",{"_index":595,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"classes/User.html":{}}}],["legend",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["letter",{"_index":611,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["library",{"_index":865,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1641,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1621,"title":{},"body":{"index.html":{}}}],["likes",{"_index":1080,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["limit",{"_index":1027,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["links",{"_index":1011,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["literal",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginbody",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginbody",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginticket",{"_index":876,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":880,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginurl",{"_index":962,"title":{},"body":{"injectables/MailService.html":{}}}],["logs",{"_index":1118,"title":{},"body":{"controllers/PostsController.html":{}}}],["loop",{"_index":398,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["lowercase",{"_index":506,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/Tags.html":{},"classes/User.html":{}}}],["mail",{"_index":639,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["mail.module.ts",{"_index":643,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["mail.service",{"_index":910,"title":{},"body":{"modules/MailModule.html":{}}}],["mail/mail.module",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule",{"_index":913,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":923,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":955,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":136,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":625,"title":{"injectables/MailService.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["main",{"_index":500,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["make",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["making",{"_index":1217,"title":{},"body":{"injectables/PostsService.html":{}}}],["map",{"_index":686,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((data",{"_index":695,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["match",{"_index":902,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["matches",{"_index":420,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":618,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":547,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matches(/^https?:\\/\\/[^\\s",{"_index":589,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["matching",{"_index":109,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["math.ceil(totalitems",{"_index":1055,"title":{},"body":{"injectables/PaginationService.html":{}}}],["maxlength",{"_index":532,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":552,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(255",{"_index":546,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":542,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":616,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["media",{"_index":1353,"title":{},"body":{"classes/Upload.html":{}}}],["message",{"_index":504,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Tags.html":{},"injectables/TagsService.html":{},"classes/User.html":{}}}],["meta",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["metadata",{"_index":378,"title":{},"body":{"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["metaoption",{"_index":964,"title":{"classes/MetaOption.html":{}},"body":{"classes/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["metaoption.name",{"_index":996,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["metaoptionmodel",{"_index":1000,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptions",{"_index":562,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["metaoptionschema",{"_index":979,"title":{},"body":{"classes/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["metaoptionscontroller",{"_index":148,"title":{"controllers/MetaOptionsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":137,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsservice",{"_index":985,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":440,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/MetaOption.html":{}}}],["method",{"_index":692,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["mime",{"_index":784,"title":{},"body":{"injectables/FileUploadService.html":{},"classes/Upload.html":{}}}],["minimum",{"_index":608,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginationQueryDto.html":{}}}],["minlength",{"_index":533,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":588,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":448,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":617,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1583,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1620,"title":{},"body":{"index.html":{}}}],["mixed",{"_index":977,"title":{},"body":{"classes/MetaOption.html":{}}}],["mode",{"_index":1610,"title":{},"body":{"index.html":{}}}],["model",{"_index":624,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["model.countdocuments",{"_index":1054,"title":{},"body":{"injectables/PaginationService.html":{}}}],["model.find",{"_index":1045,"title":{},"body":{"injectables/PaginationService.html":{}}}],["modern",{"_index":573,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["module",{"_index":122,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CreateUserProvider.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["modules",{"_index":124,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":915,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":918,"title":{},"body":{"modules/MailModule.html":{}}}],["mongodb",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":636,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"classes/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"classes/Tags.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoose.schema.types.objectid",{"_index":1099,"title":{},"body":{"classes/Post.html":{}}}],["mongoose.types.objectid",{"_index":1093,"title":{},"body":{"classes/Post.html":{}}}],["mongoosemodule",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":749,"title":{},"body":{"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1632,"title":{},"body":{"index.html":{}}}],["mp4",{"_index":1355,"title":{},"body":{"classes/Upload.html":{}}}],["multipart/form",{"_index":723,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["myśliwiec",{"_index":1636,"title":{},"body":{"index.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["necessary",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["need",{"_index":1448,"title":{},"body":{"controllers/UserController.html":{}}}],["needs",{"_index":383,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["nest",{"_index":1600,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1640,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":684,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":914,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DataResponseInterceptor.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationService.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1075,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"classes/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Tags.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":716,"title":{},"body":{"controllers/FileUploadController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":538,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/FileUploadController.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newurl",{"_index":1052,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.origin}${newurl.pathname}?page=1&limit=${limit",{"_index":1059,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${nextpage}&limit=${limit",{"_index":1062,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${page}&limit=${limit",{"_index":1061,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${prevpage}&limit=${limit",{"_index":1063,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${totalpages}&limit=${limit",{"_index":1060,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newuser",{"_index":659,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["newuser.save",{"_index":661,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["next",{"_index":681,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["next.handle().pipe",{"_index":694,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nextpage",{"_index":1056,"title":{},"body":{"injectables/PaginationService.html":{}}}],["node.js",{"_index":1593,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1574,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":649,"title":{},"body":{"injectables/CreateUserProvider.html":{},"miscellaneous/enumerations.html":{}}}],["noreply",{"_index":941,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["normalizedslug",{"_index":1231,"title":{},"body":{"injectables/PostsService.html":{}}}],["null",{"_index":395,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/UserService.html":{}}}],["number",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetUsersParamDto.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number'})@isnumber()@isnotempty",{"_index":1070,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["number})@isoptional()@isint()@type(undefined",{"_index":835,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["oauth2client",{"_index":862,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":851,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"injectables/HashingProvider.html":{},"classes/MetaOption.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{}}}],["objects",{"_index":1144,"title":{},"body":{"controllers/PostsController.html":{}}}],["observable",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["occurred",{"_index":1519,"title":{},"body":{"injectables/UserService.html":{}}}],["omit",{"_index":808,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["one",{"_index":610,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UserController.html":{}}}],["onmoduleinit",{"_index":853,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1622,"title":{},"body":{"index.html":{}}}],["option.schema",{"_index":995,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["option.schema.ts",{"_index":966,"title":{},"body":{"classes/MetaOption.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["option.schema.ts:11",{"_index":968,"title":{},"body":{"classes/MetaOption.html":{}}}],["option.schema.ts:18",{"_index":971,"title":{},"body":{"classes/MetaOption.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["options",{"_index":428,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.controller",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":981,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:10",{"_index":984,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":539,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":439,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:16",{"_index":442,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["options.hashedpassword",{"_index":905,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["options.module",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":993,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.password",{"_index":429,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["options.service",{"_index":986,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":997,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:15",{"_index":1002,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":999,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":438,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options/schema/meta",{"_index":965,"title":{},"body":{"classes/MetaOption.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["otherwise",{"_index":889,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["out",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1645,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1551,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":486,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":1008,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":1035,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginatequery(undefined",{"_index":1038,"title":{},"body":{"injectables/PaginationService.html":{}}}],["pagination",{"_index":1221,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["pagination'})@apiresponse({status",{"_index":1423,"title":{},"body":{"controllers/UserController.html":{}}}],["pagination.service",{"_index":1025,"title":{},"body":{"modules/PaginationModule.html":{}}}],["paginationmodule",{"_index":138,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationquery",{"_index":1043,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/PostsService.html":{}}}],["paginationquerydto",{"_index":825,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginationservice",{"_index":142,"title":{"injectables/PaginationService.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["param",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["param('userid",{"_index":1172,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":1442,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param.dto.ts",{"_index":833,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:16",{"_index":836,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parama",{"_index":1452,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["params",{"_index":1389,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["parseintpipe",{"_index":1157,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["partial",{"_index":1153,"title":{},"body":{"controllers/PostsController.html":{}}}],["partialtype",{"_index":1072,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":1068,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":1084,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["pass",{"_index":938,"title":{},"body":{"modules/MailModule.html":{}}}],["passed",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["password",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"classes/SignInDto.html":{},"classes/User.html":{}}}],["passwords",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashingProvider.html":{}}}],["patch",{"_index":1151,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["patchpostdto",{"_index":1066,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchuser",{"_index":1418,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(@body",{"_index":1473,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(patchuserdto",{"_index":1432,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuserdto",{"_index":1082,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["path",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileUploadService.html":{},"modules/MailModule.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{}}}],["path.extname(filename",{"_index":1374,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["payload",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["person",{"_index":479,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":551,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1576,"title":{},"body":{"dependencies.html":{}}}],["plain",{"_index":900,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["platform",{"_index":961,"title":{},"body":{"injectables/MailService.html":{}}}],["please",{"_index":1407,"title":{},"body":{"classes/User.html":{},"index.html":{}}}],["png",{"_index":772,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["port",{"_index":933,"title":{},"body":{"modules/MailModule.html":{}}}],["position",{"_index":1426,"title":{},"body":{"controllers/UserController.html":{}}}],["possible",{"_index":484,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":266,"title":{"classes/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/FileUploadController.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":1126,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@delete",{"_index":1128,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('login",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.content",{"_index":1250,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":1073,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":453,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:103",{"_index":474,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:113",{"_index":499,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:124",{"_index":522,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:15",{"_index":1071,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:34",{"_index":524,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:46",{"_index":490,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:60",{"_index":511,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:71",{"_index":517,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:80",{"_index":467,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:92",{"_index":481,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.featuredimageurl",{"_index":1254,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions.id",{"_index":1265,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.name",{"_index":1197,"title":{},"body":{"modules/PostsModule.html":{}}}],["post.postschema",{"_index":1252,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.posttype",{"_index":1244,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishedon",{"_index":1256,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.save",{"_index":1237,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":1246,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":1248,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":1258,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.title",{"_index":1242,"title":{},"body":{"injectables/PostsService.html":{}}}],["postmodel",{"_index":1201,"title":{},"body":{"injectables/PostsService.html":{}}}],["postquery",{"_index":1131,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts",{"_index":1102,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.controller",{"_index":1193,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.dto",{"_index":1164,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.dto.ts",{"_index":816,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["posts.dto.ts:12",{"_index":820,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.dto.ts:8",{"_index":821,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.service",{"_index":1160,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.controller",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["postschema",{"_index":456,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"modules/PostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postscontroller",{"_index":147,"title":{"controllers/PostsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":1169,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":139,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":1159,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":512,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":1098,"title":{},"body":{"classes/Post.html":{}}}],["posttype",{"_index":457,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["posttypes",{"_index":482,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttypes.post",{"_index":1097,"title":{},"body":{"classes/Post.html":{}}}],["prefer",{"_index":978,"title":{},"body":{"classes/MetaOption.html":{}}}],["prefix",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FileUploadController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["prev",{"_index":1020,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["prevpage",{"_index":1057,"title":{},"body":{"injectables/PaginationService.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["processes",{"_index":1152,"title":{},"body":{"controllers/PostsController.html":{}}}],["processing",{"_index":1117,"title":{},"body":{"controllers/PostsController.html":{}}}],["production",{"_index":1612,"title":{},"body":{"index.html":{}}}],["profileconfig",{"_index":1482,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["profileconfiguration",{"_index":1497,"title":{},"body":{"injectables/UserService.html":{}}}],["programming",{"_index":574,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["progressive",{"_index":1592,"title":{},"body":{"index.html":{}}}],["project",{"_index":1623,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["promise.all",{"_index":809,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["promise.resolve(instance.canactivate(context",{"_index":402,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["prop",{"_index":972,"title":{},"body":{"classes/MetaOption.html":{},"classes/Post.html":{},"classes/Tags.html":{},"classes/Upload.html":{},"classes/User.html":{}}}],["prop({type",{"_index":967,"title":{},"body":{"classes/MetaOption.html":{},"classes/Post.html":{},"classes/Tags.html":{},"classes/Upload.html":{},"classes/User.html":{}}}],["properties",{"_index":318,"title":{"properties.html":{}},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"classes/Upload.html":{},"classes/User.html":{},"properties.html":{}}}],["protect",{"_index":1488,"title":{},"body":{"modules/UserModule.html":{}}}],["provide",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{}}}],["provided",{"_index":647,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{}}}],["provider",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{}}}],["provider/create",{"_index":1480,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["providers",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/bcrypt.provider",{"_index":306,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/generate",{"_index":307,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["providers/hashing.provider",{"_index":304,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/refresh",{"_index":309,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/upload",{"_index":743,"title":{},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{}}}],["public",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["published",{"_index":493,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":458,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["put",{"_index":1434,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":1044,"title":{},"body":{"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["query('limit",{"_index":1460,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":1462,"title":{},"body":{"controllers/UserController.html":{}}}],["query.dto",{"_index":827,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PaginationService.html":{}}}],["query.dto.ts",{"_index":1026,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:15",{"_index":1031,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:26",{"_index":1032,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryparams",{"_index":1174,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["r\\n",{"_index":549,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["range",{"_index":485,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1631,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":120,"title":{},"body":{"controllers/AppController.html":{},"controllers/FileUploadController.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["received",{"_index":1119,"title":{},"body":{"controllers/PostsController.html":{}}}],["record",{"_index":374,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/MetaOption.html":{}}}],["redirecturi",{"_index":873,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["ref",{"_index":970,"title":{},"body":{"classes/MetaOption.html":{},"classes/Post.html":{}}}],["reflect",{"_index":1578,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":367,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refresh",{"_index":886,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["refreshtoken",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{}}}],["refreshtoken(@body",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(token",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokendto",{"_index":259,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["refreshtokenprovider",{"_index":298,"title":{"injectables/RefreshTokenProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtokens",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens(undefined",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["region",{"_index":1387,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["replace",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Paginated.html":{}}}],["replace(/\\s/g",{"_index":1377,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["repositories",{"_index":1215,"title":{},"body":{"injectables/PostsService.html":{}}}],["repository",{"_index":637,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["representing",{"_index":1141,"title":{},"body":{"controllers/PostsController.html":{}}}],["req",{"_index":1158,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":101,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requested",{"_index":727,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["requests",{"_index":1136,"title":{},"body":{"controllers/PostsController.html":{}}}],["requesttimeoutexception",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception('request",{"_index":652,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["requesttimeoutexception(`timeout",{"_index":1521,"title":{},"body":{"injectables/UserService.html":{}}}],["requesttimeoutexception(error.message",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["requesturl",{"_index":1064,"title":{},"body":{"injectables/PaginationService.html":{}}}],["required",{"_index":520,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"controllers/FileUploadController.html":{},"classes/MetaOption.html":{},"classes/Post.html":{},"classes/Tags.html":{},"classes/Upload.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":417,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/PostsController.html":{}}}],["response",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.interceptor",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":675,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:13",{"_index":678,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:21",{"_index":683,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["results",{"_index":108,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["retrieved",{"_index":1139,"title":{},"body":{"controllers/PostsController.html":{}}}],["retrieves",{"_index":1132,"title":{},"body":{"controllers/PostsController.html":{}}}],["return",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1411,"title":{},"body":{"classes/User.html":{},"controllers/UserController.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["review",{"_index":515,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["right",{"_index":390,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["routes",{"_index":1666,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":1607,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["s3",{"_index":1367,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["s3.types.putobjectrequest",{"_index":1390,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["s3.upload(params).promise",{"_index":1397,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["s@]+@[^\\s@]+\\.[^\\s@]+$/.test(v",{"_index":1406,"title":{},"body":{"classes/User.html":{}}}],["salt",{"_index":430,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["same",{"_index":664,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["save",{"_index":662,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{}}}],["scalable",{"_index":1597,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":514,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":571,"title":{},"body":{"classes/CreateTagDto.html":{},"modules/FileUploadModule.html":{},"classes/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"classes/Post.html":{},"modules/PostsModule.html":{},"classes/Tags.html":{},"modules/TagsModule.html":{},"classes/Upload.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schema/meta",{"_index":994,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["schema/post.schema",{"_index":1196,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["schema/tags.schema",{"_index":1318,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["schema/upload.schema",{"_index":747,"title":{},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{}}}],["schema/user.schema",{"_index":635,"title":{},"body":{"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["schemafactory",{"_index":973,"title":{},"body":{"classes/MetaOption.html":{},"classes/Post.html":{},"classes/Tags.html":{},"classes/Upload.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(metaoption",{"_index":980,"title":{},"body":{"classes/MetaOption.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(post",{"_index":1100,"title":{},"body":{"classes/Post.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(tags",{"_index":1295,"title":{},"body":{"classes/Tags.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(upload",{"_index":1356,"title":{},"body":{"classes/Upload.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1414,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["sdk",{"_index":1368,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["secret",{"_index":93,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["secretaccesskey",{"_index":1385,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["secure",{"_index":935,"title":{},"body":{"modules/MailModule.html":{}}}],["select",{"_index":1404,"title":{},"body":{"classes/User.html":{}}}],["send",{"_index":663,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["sendwelcomemail",{"_index":953,"title":{},"body":{"injectables/MailService.html":{}}}],["sendwelcomemail(undefined",{"_index":957,"title":{},"body":{"injectables/MailService.html":{}}}],["sent",{"_index":1275,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["serialize",{"_index":476,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":488,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":734,"title":{},"body":{"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"index.html":{}}}],["server'})@useinterceptors(undefined)@post",{"_index":711,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["service",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"modules/MailModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserService.html":{}}}],["services",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["set",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["setmetadata",{"_index":1440,"title":{},"body":{"controllers/UserController.html":{}}}],["setmetadata(auth_type_key",{"_index":1665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":1486,"title":{},"body":{"modules/UserModule.html":{}}}],["setup",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["shows",{"_index":1076,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["side",{"_index":1598,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":559,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["signed",{"_index":1110,"title":{},"body":{"controllers/PostsController.html":{}}}],["signindto",{"_index":254,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signoptions",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["signtoken",{"_index":806,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["single",{"_index":1219,"title":{},"body":{"injectables/PostsService.html":{}}}],["size",{"_index":786,"title":{},"body":{"injectables/FileUploadService.html":{},"classes/Upload.html":{}}}],["skip",{"_index":1046,"title":{},"body":{"injectables/PaginationService.html":{}}}],["slug",{"_index":459,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"classes/Tags.html":{}}}],["social/google",{"_index":310,"title":{},"body":{"modules/AuthModule.html":{}}}],["something",{"_index":698,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["special",{"_index":612,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":834,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["specified",{"_index":1142,"title":{},"body":{"controllers/PostsController.html":{}}}],["specify",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["split('.')[0",{"_index":1376,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["sponsors",{"_index":1626,"title":{},"body":{"index.html":{}}}],["src/.../access",{"_index":1653,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../active",{"_index":1654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1585,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1590,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../meta",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../post.schema.ts",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../posts.enums.ts",{"_index":1587,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../tags.schema.ts",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../upload.schema.ts",{"_index":1586,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":113,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":116,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":243,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":244,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:28",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1479,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":299,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":1508,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:21",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:38",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:43",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:77",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:87",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/active",{"_index":1166,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":372,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1533,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refresh",{"_index":1267,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts",{"_index":1280,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts:10",{"_index":1284,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/signin.dto.ts:6",{"_index":1282,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":362,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:14",{"_index":368,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:33",{"_index":369,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":408,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:15",{"_index":422,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:34",{"_index":412,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":792,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":632,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":897,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:19",{"_index":899,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:5",{"_index":903,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1270,"title":{},"body":{"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["src/auth/social/dtos/google",{"_index":893,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":838,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/config/aws.config",{"_index":745,"title":{},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["src/config/email.config",{"_index":912,"title":{},"body":{"modules/MailModule.html":{}}}],["src/config/google.config",{"_index":314,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["src/config/index.config",{"_index":687,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["src/config/jwt.config",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["src/file",{"_index":703,"title":{},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/global/interceptors/data",{"_index":674,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/global/pagination/dto/pagination",{"_index":826,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/global/pagination/interface/paginated.interface",{"_index":1214,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/global/pagination/interface/paginated.interface.ts",{"_index":1010,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/global/pagination/pagination.module",{"_index":1195,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/global/pagination/pagination.module.ts",{"_index":1024,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/global/pagination/pagination.service",{"_index":1213,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/global/pagination/pagination.service.ts",{"_index":1034,"title":{},"body":{"injectables/PaginationService.html":{},"coverage.html":{}}}],["src/global/pagination/pagination.service.ts:16",{"_index":1039,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/global/pagination/pagination.service.ts:9",{"_index":1037,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/mail/mail.module.ts",{"_index":909,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/mail.service",{"_index":633,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/mail/mail.service.ts",{"_index":952,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/mail.service.ts:6",{"_index":956,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:9",{"_index":958,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":1544,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":437,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/posts/dtos/create",{"_index":452,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/get",{"_index":815,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":1067,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/posts.enums.ts",{"_index":1588,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":1101,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:111",{"_index":1149,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:125",{"_index":1129,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:49",{"_index":1135,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:77",{"_index":1114,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":1192,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":1198,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:132",{"_index":1208,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:15",{"_index":1202,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:152",{"_index":1206,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:36",{"_index":1204,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:96",{"_index":1210,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/schema/post.schema",{"_index":975,"title":{},"body":{"classes/MetaOption.html":{}}}],["src/posts/schema/post.schema.ts",{"_index":1085,"title":{},"body":{"classes/Post.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/posts/schema/post.schema.ts:12",{"_index":1095,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/schema/post.schema.ts:20",{"_index":1089,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/schema/post.schema.ts:26",{"_index":1091,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/schema/post.schema.ts:32",{"_index":1096,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/schema/post.schema.ts:40",{"_index":1092,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/schema/post.schema.ts:46",{"_index":1086,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/schema/post.schema.ts:52",{"_index":1088,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/schema/post.schema.ts:58",{"_index":1087,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/schema/post.schema.ts:65",{"_index":1094,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/schema/post.schema.ts:71",{"_index":1090,"title":{},"body":{"classes/Post.html":{}}}],["src/tags/dtos/create",{"_index":569,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/schema/tags.schema.ts",{"_index":1285,"title":{},"body":{"classes/Tags.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/tags/schema/tags.schema.ts:10",{"_index":1289,"title":{},"body":{"classes/Tags.html":{}}}],["src/tags/schema/tags.schema.ts:23",{"_index":1290,"title":{},"body":{"classes/Tags.html":{}}}],["src/tags/schema/tags.schema.ts:29",{"_index":1287,"title":{},"body":{"classes/Tags.html":{}}}],["src/tags/schema/tags.schema.ts:35",{"_index":1291,"title":{},"body":{"classes/Tags.html":{}}}],["src/tags/schema/tags.schema.ts:41",{"_index":1288,"title":{},"body":{"classes/Tags.html":{}}}],["src/tags/tags.controller.ts",{"_index":1296,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:19",{"_index":1300,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:26",{"_index":1304,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":1194,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":1316,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/tags/tags.service",{"_index":1212,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/tags.service.ts",{"_index":1320,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/tags.service.ts:15",{"_index":1328,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:31",{"_index":1332,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:37",{"_index":1334,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:47",{"_index":1331,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:57",{"_index":1329,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:9",{"_index":1325,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/user/dtos/create",{"_index":591,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/get",{"_index":831,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/user/dtos/patch",{"_index":1083,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/user/provider/create",{"_index":620,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/user/schema/user.schema",{"_index":802,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"injectables/MailService.html":{}}}],["src/user/schema/user.schema.ts",{"_index":1399,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/schema/user.schema.ts:10",{"_index":1402,"title":{},"body":{"classes/User.html":{}}}],["src/user/schema/user.schema.ts:17",{"_index":1403,"title":{},"body":{"classes/User.html":{}}}],["src/user/schema/user.schema.ts:30",{"_index":1401,"title":{},"body":{"classes/User.html":{}}}],["src/user/schema/user.schema.ts:37",{"_index":1405,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.controller.ts",{"_index":1416,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:102",{"_index":1433,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:71",{"_index":1430,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:96",{"_index":1421,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":303,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/user/user.module.ts",{"_index":1477,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["src/user/user.service.ts",{"_index":1492,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:22",{"_index":1498,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:42",{"_index":1499,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:46",{"_index":1501,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:72",{"_index":1503,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:82",{"_index":1505,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:96",{"_index":1507,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":1608,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1611,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1613,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":818,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PostsService.html":{}}}],["started",{"_index":1591,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1601,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1526,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":364,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["stay",{"_index":1633,"title":{},"body":{"index.html":{}}}],["still",{"_index":1078,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["story",{"_index":487,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["strict",{"_index":950,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string'})@isdate()@isnotempty",{"_index":498,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isnotempty()@isstring()@minlength(3)@maxlength(255",{"_index":582,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isjson",{"_index":480,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isstring",{"_index":576,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024",{"_index":473,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024)@matches(/^https?:\\/\\/[^\\s",{"_index":578,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isenum(posttypes)@isnotempty",{"_index":489,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@isenum(poststatus",{"_index":516,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(255)@matches(/^[a",{"_index":501,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(512)@matches(/^[a",{"_index":586,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isoptional",{"_index":466,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":523,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string(error",{"_index":1238,"title":{},"body":{"injectables/PostsService.html":{}}}],["sub",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["subject",{"_index":960,"title":{},"body":{"injectables/MailService.html":{}}}],["success",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["successfully",{"_index":1266,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["summary",{"_index":733,"title":{},"body":{"controllers/FileUploadController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":1627,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["svg",{"_index":1643,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":823,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{}}}],["t",{"_index":799,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["table",{"_index":1550,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1549,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":572,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/Post.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag'})@post",{"_index":1299,"title":{},"body":{"controllers/TagsController.html":{}}}],["tag._id",{"_index":1260,"title":{},"body":{"injectables/PostsService.html":{}}}],["tag.dto",{"_index":1305,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":570,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:23",{"_index":583,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:37",{"_index":587,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:46",{"_index":577,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:51",{"_index":585,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:65",{"_index":580,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.name",{"_index":1338,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags",{"_index":460,"title":{"classes/Tags.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tags.controller",{"_index":1317,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":1227,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags.map(tag",{"_index":1259,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags.name",{"_index":1319,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.service",{"_index":1306,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["tags/tags.controller",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["tagschema",{"_index":1286,"title":{},"body":{"classes/Tags.html":{}}}],["tagscontroller",{"_index":149,"title":{"controllers/TagsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodel",{"_index":1326,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsmodule",{"_index":140,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsschema",{"_index":1294,"title":{},"body":{"classes/Tags.html":{},"modules/TagsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tagsservice",{"_index":1200,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":1047,"title":{},"body":{"injectables/PaginationService.html":{}}}],["tap",{"_index":685,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["template",{"_index":942,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["templates",{"_index":945,"title":{},"body":{"modules/MailModule.html":{}}}],["test",{"_index":1616,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1619,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1618,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1615,"title":{},"body":{"index.html":{}}}],["text",{"_index":901,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["thanks",{"_index":1625,"title":{},"body":{"index.html":{}}}],["then((canactivate",{"_index":403,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.accesstokenguard",{"_index":375,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.accesstokenprovider.generatetokens",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appconfiguration.apiversion",{"_index":701,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.appservice.gethello",{"_index":121,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":392,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.awsconfiguration.awsaccesskey",{"_index":1384,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.awsconfiguration.awsbucketname",{"_index":1392,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.awsconfiguration.awscloudfronturl}/${awskey",{"_index":782,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["this.awsconfiguration.awsregion",{"_index":1388,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.awsconfiguration.awssecretaccesskey",{"_index":1386,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.configservice.get('appconfig.awsbucketname",{"_index":1382,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.configservice.get('s3_bucket",{"_index":1512,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createtoken",{"_index":810,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.createuserprovider.createuser",{"_index":1511,"title":{},"body":{"injectables/UserService.html":{}}}],["this.extractrequestfromheader",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.fileuploadservice.uploadfile",{"_index":737,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["this.generatefilename",{"_index":1393,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.generatetoken.generatetokens",{"_index":888,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokenprovider.generatetokens",{"_index":1279,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.googleauthenticationservice.authenticate",{"_index":849,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.googleconfiguration.googleclientid",{"_index":869,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleconfiguration.googleclientsecret",{"_index":871,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleconfiguration.googleredirecturi",{"_index":874,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.hashingprovider.comparepasswords",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashingprovider.hashpassword",{"_index":658,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration.jwtrefreshtokenexpiration",{"_index":813,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.jwtconfiguration.jwtsecret",{"_index":94,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtconfiguration.jwttokenaudience",{"_index":96,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtconfiguration.jwttokenexpiration",{"_index":811,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.jwtconfiguration.jwttokenissuer",{"_index":98,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtservice.signasync",{"_index":807,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":1276,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.mailerservice.sendmail",{"_index":959,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.sendwelcomemail",{"_index":669,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.metaoptionmodel(metaoptions",{"_index":1005,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.delete",{"_index":1264,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsservice.create",{"_index":989,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.oauthclient",{"_index":872,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":877,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.paginationservice.paginatequery",{"_index":1261,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel",{"_index":1236,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.deleteone",{"_index":1263,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.findone",{"_index":1234,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findoneby",{"_index":1262,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postservice.create",{"_index":1179,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.delete",{"_index":1187,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.getallposts",{"_index":1173,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.update",{"_index":1184,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.profileconfiguration",{"_index":1516,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflector.getallandoverride",{"_index":382,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.refreshtokenprovider.getrefreshtoken",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":1051,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.request.protocol",{"_index":1050,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.request.url",{"_index":1065,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.tagsmodel(tag",{"_index":1340,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsmodel.deleteone",{"_index":1344,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsmodel.find",{"_index":1342,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsmodel.findone",{"_index":1337,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtag",{"_index":1310,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete",{"_index":1312,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags",{"_index":1225,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.uploadmodel",{"_index":780,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["this.uploadtoawsprovider.awsfileupload",{"_index":776,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["this.usermodel.create(user",{"_index":660,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usermodel.findone",{"_index":650,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["this.usermodel.manager.transaction",{"_index":666,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userservice.createuser",{"_index":891,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":1467,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyid",{"_index":1278,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.userservice.finduserbyemail",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.finduserbygoogleid",{"_index":887,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservices.findonebyid",{"_index":1222,"title":{},"body":{"injectables/PostsService.html":{}}}],["through",{"_index":399,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/PostsController.html":{}}}],["throw",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{}}}],["throwing",{"_index":1523,"title":{},"body":{"injectables/UserService.html":{}}}],["time",{"_index":497,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["timeout",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["timestamp",{"_index":1379,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["timestamps",{"_index":976,"title":{},"body":{"classes/MetaOption.html":{}}}],["timestamp}${extension",{"_index":1381,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["title",{"_index":461,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["token",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FileUploadController.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["token')@httpcode(httpstatus.ok",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.access_token",{"_index":879,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["token.dto",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["token.dto.ts",{"_index":894,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:5",{"_index":896,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["token.dto.ts:6",{"_index":1269,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/UserController.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["token.guard.ts:27",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:38",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:43",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.provider",{"_index":308,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts",{"_index":793,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["token.provider.ts:17",{"_index":1272,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts:18",{"_index":798,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["token.provider.ts:32",{"_index":1274,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts:47",{"_index":801,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["token.provider.ts:8",{"_index":796,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["token.refreshtoken",{"_index":1277,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":890,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["totalitems",{"_index":1015,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["totalpages",{"_index":1017,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["touch",{"_index":1634,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":665,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["transactionalentitymanager",{"_index":667,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["transactionalentitymanager.save(user",{"_index":668,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["transfer",{"_index":1121,"title":{},"body":{"controllers/PostsController.html":{}}}],["transform",{"_index":837,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["transformer",{"_index":536,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"dependencies.html":{}}}],["transport",{"_index":929,"title":{},"body":{"modules/MailModule.html":{}}}],["trim",{"_index":1378,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"classes/User.html":{}}}],["true",{"_index":100,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"controllers/FileUploadController.html":{},"modules/MailModule.html":{},"classes/MetaOption.html":{},"classes/Post.html":{},"classes/Tags.html":{},"classes/Upload.html":{},"classes/User.html":{}}}],["try",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":1639,"title":{},"body":{"index.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"classes/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1651,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":1211,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":377,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"classes/Upload.html":{},"dependencies.html":{}}}],["types.objectid",{"_index":969,"title":{},"body":{"classes/MetaOption.html":{},"injectables/PostsService.html":{}}}],["types/multer",{"_index":1563,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":581,"title":{},"body":{"classes/CreateTagDto.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":864,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception(`${error.message",{"_index":892,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["undefined",{"_index":519,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"classes/MetaOption.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"classes/Tags.html":{},"classes/Upload.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["undefined'])@apioperation({summary",{"_index":710,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["undefined})@get(':userid",{"_index":1134,"title":{},"body":{"controllers/PostsController.html":{}}}],["unique",{"_index":1400,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":1614,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1650,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1077,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["update",{"_index":1069,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["update(undefined",{"_index":1209,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":1147,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["updatedpost",{"_index":1183,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost",{"_index":1106,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":1181,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(updatepostdto",{"_index":1145,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost.content",{"_index":1251,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.featuredimageurl",{"_index":1255,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.id",{"_index":1240,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.postschema",{"_index":1253,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.posttype",{"_index":1245,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.publishedon",{"_index":1257,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.slug",{"_index":1247,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.status",{"_index":1249,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.tags",{"_index":1239,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.title",{"_index":1243,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1154,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":1146,"title":{},"body":{"controllers/PostsController.html":{}}}],["upload",{"_index":705,"title":{"classes/Upload.html":{}},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["upload.controller",{"_index":742,"title":{},"body":{"modules/FileUploadModule.html":{}}}],["upload.controller.ts",{"_index":704,"title":{},"body":{"controllers/FileUploadController.html":{},"coverage.html":{}}}],["upload.controller.ts:36",{"_index":712,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["upload.module",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["upload.module.ts",{"_index":741,"title":{},"body":{"modules/FileUploadModule.html":{}}}],["upload.name",{"_index":750,"title":{},"body":{"modules/FileUploadModule.html":{}}}],["upload.save",{"_index":790,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["upload.service",{"_index":721,"title":{},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{}}}],["upload.service.ts",{"_index":751,"title":{},"body":{"injectables/FileUploadService.html":{},"coverage.html":{}}}],["upload.service.ts:15",{"_index":755,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["upload.service.ts:28",{"_index":757,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["upload/file",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"coverage.html":{}}}],["upload/providers/upload",{"_index":1357,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["upload/schema/upload.schema.ts",{"_index":1345,"title":{},"body":{"classes/Upload.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["upload/schema/upload.schema.ts:18",{"_index":1346,"title":{},"body":{"classes/Upload.html":{}}}],["upload/schema/upload.schema.ts:24",{"_index":1348,"title":{},"body":{"classes/Upload.html":{}}}],["upload/schema/upload.schema.ts:32",{"_index":1350,"title":{},"body":{"classes/Upload.html":{}}}],["upload/schema/upload.schema.ts:38",{"_index":1347,"title":{},"body":{"classes/Upload.html":{}}}],["upload/schema/upload.schema.ts:44",{"_index":1349,"title":{},"body":{"classes/Upload.html":{}}}],["uploaded",{"_index":778,"title":{},"body":{"injectables/FileUploadService.html":{},"classes/Upload.html":{}}}],["uploadedfile",{"_index":713,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["uploadfile",{"_index":706,"title":{},"body":{"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{}}}],["uploadfile(@uploadedfile",{"_index":736,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["uploadfile(file",{"_index":707,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["uploadfile(undefined",{"_index":756,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["uploadmodel",{"_index":753,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["uploadresult",{"_index":1396,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploadresult.key",{"_index":1398,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploadschema",{"_index":746,"title":{},"body":{"modules/FileUploadModule.html":{},"classes/Upload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadtoawsprovider",{"_index":740,"title":{"injectables/UploadToAwsProvider.html":{}},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{},"coverage.html":{},"overview.html":{}}}],["uri",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":470,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PaginationService.html":{}}}],["url(this.request.url",{"_index":1053,"title":{},"body":{"injectables/PaginationService.html":{}}}],["us,en;q=0.8",{"_index":732,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["use",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"controllers/UserController.html":{}}}],["useclass",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["usefactory",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{}}}],["useguards",{"_index":1439,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors",{"_index":714,"title":{},"body":{"controllers/FileUploadController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":1471,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":735,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["usenewurlparser",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":53,"title":{"classes/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiresponse({status",{"_index":1133,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.'})@apiresponse({status",{"_index":1111,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.controller",{"_index":1478,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator",{"_index":1167,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.decorator.ts",{"_index":1532,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":631,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":592,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":599,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":603,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":597,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":614,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:42",{"_index":601,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":651,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{}}}],["user.googleid",{"_index":645,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.id",{"_index":812,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["user.name",{"_index":1484,"title":{},"body":{"modules/UserModule.html":{}}}],["user.password",{"_index":646,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider",{"_index":1481,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.provider.ts",{"_index":621,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:17",{"_index":626,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:30",{"_index":629,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.service",{"_index":1443,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.sub",{"_index":1180,"title":{},"body":{"controllers/PostsController.html":{}}}],["user/user.module",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["user[field",{"_index":1664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usercontroller",{"_index":1415,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":803,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["usermodel",{"_index":627,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":141,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userparamsdto",{"_index":1468,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userpayload",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":832,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["users/1223",{"_index":1455,"title":{},"body":{"controllers/UserController.html":{}}}],["users/id?limit=10&page=1",{"_index":1451,"title":{},"body":{"controllers/UserController.html":{}}}],["users?limit=10&page=2",{"_index":1458,"title":{},"body":{"controllers/UserController.html":{}}}],["userschema",{"_index":1413,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":324,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservices",{"_index":1203,"title":{},"body":{"injectables/PostsService.html":{}}}],["useunifiedtopology",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["using",{"_index":424,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["uuid",{"_index":1371,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["uuid4",{"_index":1370,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["v",{"_index":1292,"title":{},"body":{"classes/Tags.html":{},"classes/User.html":{}}}],["v4",{"_index":1369,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["valid",{"_index":1230,"title":{},"body":{"injectables/PostsService.html":{},"classes/User.html":{}}}],["validate",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{},"classes/Tags.html":{},"classes/User.html":{}}}],["validatenested",{"_index":534,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":1438,"title":{},"body":{"controllers/UserController.html":{}}}],["validationschema",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":445,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/Tags.html":{},"classes/User.html":{},"dependencies.html":{}}}],["value",{"_index":450,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["variable",{"_index":1528,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":204,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["verify",{"_index":875,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["version",{"_index":416,"title":{},"body":{"injectables/BcryptProvider.html":{},"controllers/UserController.html":{},"properties.html":{}}}],["via",{"_index":642,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["video",{"_index":1351,"title":{},"body":{"classes/Upload.html":{},"miscellaneous/enumerations.html":{}}}],["void",{"_index":861,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{}}}],["want",{"_index":1427,"title":{},"body":{"controllers/UserController.html":{}}}],["watch",{"_index":1609,"title":{},"body":{"index.html":{}}}],["website",{"_index":1637,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":464,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/MailService.html":{}}}],["well",{"_index":866,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["whether",{"_index":419,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["whos",{"_index":1456,"title":{},"body":{"controllers/UserController.html":{}}}],["whose",{"_index":1143,"title":{},"body":{"controllers/PostsController.html":{}}}],["without",{"_index":640,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["works",{"_index":1079,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["world",{"_index":246,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["x",{"_index":726,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["xmlhttprequest",{"_index":728,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["yarn",{"_index":1603,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1630,"title":{},"body":{"index.html":{}}}],["your.env",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["z0",{"_index":502,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/Tags.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":607,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":606,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":605,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport { Observable } from 'rxjs';\nimport jwtConfig from 'src/config/jwt.config';\n\nexport const REQUEST_USER_KEY = 'user';\n\nexport type UserPayload = {\n  sub: number;\n  email: string;\n  iat: number;\n  exp: number;\n  aud: string;\n  iss: string;\n};\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    // injecting necessary services here\n\n    // injecting jwt service\n    private jwtService: JwtService,\n\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n  ) {}\n\n  private extractRequestFromHeader({ request }: { request: Request }) {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n\n  async canActivate(context: ExecutionContext): Promise {\n    // get the request object from the execution context\n    const request = context.switchToHttp().getRequest();\n\n    // extract the token from the request (header)\n    const token = this.extractRequestFromHeader({ request });\n    // console.log('inside canActivate', token);\n\n    // validate the token\n    if (!token) {\n      throw new HttpException('No token passed', HttpStatus.UNAUTHORIZED);\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: this.jwtConfiguration.jwtSecret,\n        // audience: this.jwtConfiguration.jwtTokenAudience,\n        // issuer: this.jwtConfiguration.jwtTokenIssuer,\n        // ignoreExpiration: true\n      });\n      request[REQUEST_USER_KEY] = payload as UserPayload;\n    } catch (error: any) {\n      throw new HttpException(`${error.message}`, HttpStatus.UNAUTHORIZED, {\n        cause: error.message,\n        description: error,\n      });\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nFileUploadModule\n\nFileUploadModule\n\nAppModule -->\n\nFileUploadModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nAppModule -->\n\nPaginationService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PaginationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            PostsController\n                        \n                        \n                            MetaOptionsController\n                        \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            FileUploadModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { PostsController } from './posts/posts.controller';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOptionsController } from './meta-options/meta-options.controller';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsController } from './tags/tags.controller';\nimport { TagsModule } from './tags/tags.module';\nimport { ConfigModule, ConfigService, ConfigType } from '@nestjs/config';\nimport { PaginationService } from './global/pagination/pagination.service';\nimport { PaginationModule } from './global/pagination/pagination.module';\nimport appConfig from './config/index.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport { DataResponseInterceptor } from './global/interceptors/data-response/data-response.interceptor';\nimport { FileUploadModule } from './file-upload/file-upload.module';\nimport { MailModule } from './mail/mail.module';\nimport awsConfig from './config/aws.config';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nexport const ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    // env configs\n    ConfigModule.forRoot({\n      isGlobal: true, // make sure this is set to true to load environment variables from.env file\n      // envFilePath: ['.env.development.local'], // specify the path to your.env file\n      envFilePath: !ENV ? '.env' : `.env.${ENV}.local`,\n      load: [appConfig, databaseConfig, awsConfig],\n      validationSchema: environmentValidation,\n    }), // to use environment variables\n    // env configs\n\n    UserModule,\n    PostsModule,\n    AuthModule,\n    MetaOptionsModule,\n\n    // mongodb connection setup\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get('MONGODB_URI'),\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n      }),\n    }),\n\n    // MongooseModule.forRoot('', {\n    //   dbName: ''\n    // }),\n\n    // jwt configuration\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync({\n      imports: [ConfigModule.forFeature(jwtConfig)],\n      useFactory: async (jwtConfiguration: ConfigType) => ({\n        secret: jwtConfiguration.jwtSecret,\n        signOptions: {\n          audience: jwtConfiguration.jwtTokenAudience,\n          issuer: jwtConfiguration.jwtTokenIssuer,\n          expiresIn: jwtConfiguration.jwtTokenExpiration,\n        },\n      }),\n      inject: [jwtConfig.KEY],\n    }),\n    // jwt configuration\n\n    TagsModule,\n    PaginationModule,\n    FileUploadModule,\n    MailModule,\n  ],\n  controllers: [\n    AppController,\n    PostsController,\n    MetaOptionsController,\n    TagsController,\n  ],\n  providers: [\n    AppService,\n    PaginationService,\n    AccessTokenGuard, // because authentication guard has a dependency injection of AccessTokenGuard\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n      // useClass: AccessTokenGuard,\n    }, // applying global guard\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: DataResponseInterceptor,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginBody: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.NONE)@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginBody\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(token: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.BEARER)@Post('refresh-token')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Post,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { Auth, AuthType } from './decorators/auth.decorator';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Auth(AuthType.NONE)\n  @Post('login')\n  @HttpCode(HttpStatus.OK) // this force and assign the default success response with status code 200\n  login(@Body() loginBody: SignInDto) {\n    return this.authService.login({ body: loginBody });\n  }\n\n  @Auth(AuthType.BEARER)\n  @Post('refresh-token')\n  @HttpCode(HttpStatus.OK)\n  refreshToken(@Body() token: RefreshTokenDto) {\n    return this.authService.refreshTokens({ token });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokenProvider\n\nGenerateTokenProvider\n\nAuthModule -->\n\nGenerateTokenProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokenProvider\n\nRefreshTokenProvider\n\nAuthModule -->\n\nRefreshTokenProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokenProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokenProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from 'src/user/user.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { ConfigModule, ConfigType } from '@nestjs/config';\nimport jwtConfig from 'src/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { GenerateTokenProvider } from './providers/generate-token.provider';\nimport { RefreshTokenProvider } from './providers/refresh-token.provider';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\nimport { GoogleAuthenticationService } from './social/google-authentication.service';\nimport googleConfig from 'src/config/google.config';\n\n@Module({\n  imports: [\n    forwardRef(() => UserModule), // for dependency injection (circular dependency injection)\n    ConfigModule.forFeature(googleConfig),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync({\n      imports: [ConfigModule.forFeature(jwtConfig)],\n      useFactory: async (jwtConfiguration: ConfigType) => ({\n        secret: jwtConfiguration.jwtSecret,\n        signOptions: {\n          audience: jwtConfiguration.jwtTokenAudience,\n          issuer: jwtConfiguration.jwtTokenIssuer,\n          expiresIn: jwtConfiguration.jwtTokenExpiration,\n        },\n      }),\n      inject: [jwtConfig.KEY],\n    }),\n  ],\n  exports: [AuthService, HashingProvider],\n  controllers: [AuthController, GoogleAuthenticationController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider,\n      useClass: BcryptProvider,\n    },\n    GenerateTokenProvider,\n    RefreshTokenProvider,\n    GoogleAuthenticationService,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accessTokenProvider\n                            \n                            \n                                    Public\n                                refreshTokenProvider\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, hashingProvider: HashingProvider, jwtService: JwtService, jwtConfiguration: ConfigType<>, accessTokenProvider: GenerateTokenProvider, refreshTokenProvider: RefreshTokenProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenProvider\n                                                  \n                                                        \n                                                                        RefreshTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        accessTokenProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GenerateTokenProvider\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        refreshTokenProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RefreshTokenProvider\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:40\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Inject,\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from 'src/config/jwt.config';\nimport { UserPayload } from './guards/access-token/access-token.guard';\nimport { GenerateTokenProvider } from './providers/generate-token.provider';\nimport { RefreshTokenProvider } from './providers/refresh-token.provider';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n\n    // injecting hashing provider\n    @Inject(forwardRef(() => HashingProvider)) // doing this because this is a circular dependency\n    private hashingProvider: HashingProvider,\n\n    // injecting jwt service dependency\n    private jwtService: JwtService,\n\n    // injecting jwtConfig (environment values)\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n\n    public accessTokenProvider: GenerateTokenProvider,\n\n    public refreshTokenProvider: RefreshTokenProvider,\n  ) {}\n\n  public async login({ body }: { body: SignInDto }) {\n    const { email, password } = body;\n\n    const existingUser = await this.userService.findUserByEmail({ email });\n\n    let isPasswordCorrect: boolean;\n\n    try {\n      isPasswordCorrect = await this.hashingProvider.comparePasswords({\n        hashedPassword: existingUser.password,\n        password,\n      });\n    } catch (error: any) {\n      throw new RequestTimeoutException(error.message, {\n        cause: error,\n        description: 'Request timeout. Could not compare passwords',\n      });\n    }\n\n    if (!isPasswordCorrect) {\n      throw new HttpException('Invalid credentials', HttpStatus.UNAUTHORIZED);\n    }\n\n    const { accessToken, refreshToken } =\n      await this.accessTokenProvider.generateTokens({\n        user: existingUser,\n      });\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  public async refreshTokens({ token }: { token: RefreshTokenDto }) {\n    const { accessToken, refreshToken } =\n      await this.refreshTokenProvider.getRefreshToken({ token });\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  public isAuthenticated() {\n    return true; // replace with actual authentication logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AUTH_TYPE_KEY, AuthType } from 'src/auth/decorators/auth.decorator';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  constructor(\n    // injecting necessary services here\n\n    // injecting reflector\n    private reflector: Reflector,\n\n    private accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  private static defaultAuthType: AuthType = AuthType.BEARER;\n\n  private authTypeGuardMap: Record = {\n    [AuthType.BEARER]: this.accessTokenGuard,\n    [AuthType.NONE]: {\n      canActivate: () => true,\n    },\n  };\n\n  async canActivate(context: ExecutionContext): Promise {\n    // get all auth types from the reflector (metadata)\n    // getting the auth decorator passed\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY, // decorator that needs checking\n      [context.getHandler(), context.getClass()], // get keys for all type auth\n    ) ?? [AuthenticationGuard.defaultAuthType];\n\n    // console.log({ authTypes });\n\n    // getting the right guard for the right auth type decorator\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n\n    // console.log('Guards:', JSON.stringify(guards, null, 2));\n\n    // array of guards\n    // loop guards canActivate\n    // loop through all the guards and fire the canActivate (returns a boolean)\n    for (const instance of guards) {\n      // console.log({ instance });\n      const canActivate = await Promise.resolve(instance.canActivate(context))\n        .then((canActivate) => {\n          // console.log('canActivate', canActivate);\n          return canActivate;\n        })\n        .catch((error: any) => {\n          throw new HttpException(`${error.message}`, HttpStatus.UNAUTHORIZED, {\n            cause: error.message,\n            description: error,\n          });\n        });\n\n      if (!canActivate) {\n        throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\n      }\n      return true;\n    }\n\n    // throw exception if no canActivate\n    throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                comparePasswords\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \ncomparePasswords(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:34\n                        \n                    \n\n\n            \n                \n                        Compares a given password with its hashed version.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to a boolean indicating whether the password matches the hashed password.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:15\n                        \n                    \n\n\n            \n                \n                        Hashes a given password using bcrypt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                [object Object]\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe password to be hashed. Can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to the hashed password as a string.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  /**\n   * Hashes a given password using bcrypt.\n   *\n   * @param options - The options for hashing the password.\n   * @param options.password - The password to be hashed. Can be a string or a Buffer.\n   *\n   * @returns A Promise that resolves to the hashed password as a string.\n   */\n  public async hashPassword({\n    password,\n  }: {\n    password: string | Buffer;\n  }): Promise {\n    const salt = await bcrypt.genSalt();\n    const hashed = bcrypt.hash(password, salt);\n\n    return hashed;\n  }\n\n  /**\n   * Compares a given password with its hashed version.\n   *\n   * @param password - The password to compare. It can be a string or a Buffer.\n   * @param hashedPassword - The hashed version of the password to compare against.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the password matches the hashed password.\n   */\n  comparePasswords({\n    password,\n    hashedPassword,\n  }: {\n    password: string | Buffer;\n    hashedPassword: string;\n  }): Promise {\n    const compare = bcrypt.compare(password, hashedPassword);\n    return compare;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMetaOptionsDto.html":{"url":"classes/CreateMetaOptionsDto.html","title":"class - CreateMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-meta-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from \"class-validator\";\n\nexport class CreateMetaOptionsDto {\n    // @ApiProperty()\n    // @IsString()\n    // @MinLength(4)\n    // @IsNotEmpty()\n    // key: string;\n  \n    // @ApiProperty()\n    // @IsNotEmpty()\n    // value: any;\n  \n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                postSchema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        postSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the excerpt of the post. Serialize your json content or else there will be an error', example: '{\n \"@context\": \"https://schema.org\", \n \"@type\": \"Person\"\n}', format: 'json', type: 'string'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostTypes, description: 'Possible tags for a post, range: ['post', 'page', 'story', 'series']', type: 'string'})@IsString()@IsEnum(PostTypes)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the date when the post was published', example: '2024-03-16T12:00:00+0000', format: 'date-time', type: 'string'})@IsDate()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(255)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']', type: 'string'})@IsString()@IsNotEmpty()@IsEnum(PostStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined, type: 'array', required: false})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is a title of the post', example: 'Hello World', type: 'string'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { CreateMetaOptionsDto } from 'src/meta-options/dtos/create-meta-options.dto';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is a title of the post',\n    example: 'Hello World',\n    type: 'string',\n\n    // default: \"Hello World\"\n  }) // this adds the value to the post documentation\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostTypes,\n    description:\n      \"Possible tags for a post, range: ['post', 'page', 'story', 'series']\",\n    type: 'string',\n  })\n  @IsString()\n  //   @IsEnum(['post', 'page', 'story', 'series'])\n  @IsEnum(PostTypes)\n  @IsNotEmpty()\n  postType: PostTypes;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description:\n      \"Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']\",\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'This is the excerpt of the post. Serialize your json content or else there will be an error',\n    example:\n      '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\", \\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}',\n    format: 'json',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsJSON()\n  postSchema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'This is the date when the post was published',\n    example: '2024-03-16T12:00:00+0000',\n    format: 'date-time',\n    type: 'string',\n  })\n  @IsDate()\n  @IsNotEmpty()\n  publishedOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1, 4],\n    type: 'array',\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true }) // validate each item in the array as a string\n  tags?: number[];\n\n  // @ApiPropertyOptional({\n  //   description: 'This is the additional options for the post',\n  //   example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n  //   type: 'string',\n  //   required: false,\n  //   items: {\n  //     type: 'object',\n  //     properties: {\n  //       metaValue: {\n  //         type: 'json',\n  //         description: 'The meta value is a json object',\n  //         example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n  //       },\n  //     },\n  //     required: ['key', 'value'],\n  //   },\n  // })\n  // @IsOptional()\n  // @ValidateNested({ each: true })\n  // @Type(() => CreateMetaOptionsDto)\n  // metaOptions?: CreateMetaOptionsDto | null;\n\n  // @ApiProperty({\n  //   description: 'This is the id of the author of the post',\n  //   example: 123,\n  //   type: 'integer',\n  //   required: true,\n  // })\n  // @IsInt()\n  // @IsNotEmpty()\n  // authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Tag Description', example: 'A modern programming language', type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)@Matches(/^https?:\\/\\/[^\\s]+$/, {message: 'Invalid URL format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the tag', example: 'TypeScript', type: 'string'})@IsNotEmpty()@IsString()@MinLength(3)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(512)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty({\n    description: 'Name of the tag',\n    example: 'TypeScript',\n    type: 'string',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(255)\n  name: string;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(512)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiPropertyOptional({\n    description: 'Tag Description',\n    example: 'A modern programming language',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional({})\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  @Matches(/^https?:\\/\\/[^\\s]+$/, {\n    message: 'Invalid URL format',\n  })\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  // @IsNotEmpty()\n  @IsOptional()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password?: string;\n\n  @IsString()\n  @IsOptional()\n  googleId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/provider/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, hashingProvider: HashingProvider, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/user/provider/create-user.provider.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/provider/create-user.provider.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { MailService } from 'src/mail/mail.service';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from '../schema/user.schema';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    // injecting user service repository dependency\n    @InjectModel(User.name)\n    private userModel: Model,\n\n    // injecting hashing provider\n    @Inject(forwardRef(() => HashingProvider)) // doing this because this is a circular dependency\n    private hashingProvider: HashingProvider,\n\n    private mailService: MailService, // injecting mail service repository dependency... doing this without importing via module because mail.module.ts is a global module\n  ) {}\n\n  public async createUser({ user }: { user: CreateUserDto }): Promise {\n    // check user\n    let existingUser = undefined;\n\n    if (!user.googleId && !user.password) {\n      throw new HttpException(\n        'Provide a googleId or a password',\n        HttpStatus.UNAUTHORIZED,\n        {\n          cause: 'either googleId or password was provided',\n          description:\n            'in other to create a user either googleId or password is required and none was provided',\n        },\n      );\n    }\n\n    try {\n      existingUser = await this.userModel.findOne({\n        where: { email: user.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException('Request timeout', {\n        cause: error,\n        description: 'Request timeout',\n      });\n    }\n\n    // handle exception\n    if (existingUser) {\n      throw new HttpException('Email already exists', HttpStatus.CONFLICT);\n    }\n\n    if (user.password) {\n      const hashedPassword = await this.hashingProvider.hashPassword({\n        password: user.password,\n      });\n\n      user.password = hashedPassword;\n    }\n\n    if (user.googleId) {\n      user.googleId = user.googleId;\n    }\n\n    let newUser;\n\n    try {\n      // create a new user\n      newUser = this.userModel.create(user)\n      await newUser.save();\n      // Save and send welcome email should be in the same transaction\n      // await this.userModel.manager.transaction(\n      //   async (transactionalEntityManager) => {\n      //     await transactionalEntityManager.save(User, newUser);\n      //     await this.mailService.sendWelcomeMail({ user: newUser });\n      //   },\n      // );\n    } catch (error: any) {\n      console.log({ error });\n      throw new HttpException(\n        `User creation failed: ${error.message}`,\n        HttpStatus.BAD_REQUEST,\n        {\n          cause: error.message,\n          description: error.stack,\n        },\n      );\n    }\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/global/interceptors/data-response/data-response.interceptor.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/global/interceptors/data-response/data-response.interceptor.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { Observable, tap, map } from 'rxjs';\nimport appConfig from 'src/config/index.config';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  constructor(\n    // injecting config\n\n    @Inject(appConfig.KEY)\n    private appConfiguration: ConfigType,\n  ) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    // executed before method execution\n    console.log('before ...', {});\n    console.log({ context });\n\n    // executed before method execution\n\n    return next.handle().pipe(\n      map((data) => {\n        // executed after method execution\n\n        console.log('after ...', {});\n        console.log({ data });\n        // do something here after the request is handled\n\n        return {\n          apiVersion: this.appConfiguration.apiVersion,\n          data: data,\n        };\n      }),\n\n      // executed after method execution\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileUploadController.html":{"url":"controllers/FileUploadController.html","title":"controller - FileUploadController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileUploadController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file-upload/file-upload.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                file-upload\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiHeaders(['undefined', 'undefined'])@ApiOperation({summary: 'Upload a file', description: 'Upload a file to the server'})@UseInterceptors(undefined)@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/file-upload/file-upload.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiHeader, ApiHeaders, ApiOperation } from '@nestjs/swagger';\nimport { Express } from 'express';\nimport { FileUploadService } from './file-upload.service';\n\n@Controller('file-upload')\nexport class FileUploadController {\n  constructor(\n    private readonly fileUploadService: FileUploadService, // inject your FileUploadService here\n  ) {}\n\n  // @ApiHeader({ name: 'Content-Type', description: 'multipart/form-data', required: true })\n  @ApiHeaders([\n    { name: 'Authorization', description: 'Bearer token', required: true },\n    {\n      name: 'Content-Type',\n      description: 'multipart/form-data',\n      required: true,\n    },\n    // { name: 'X-Requested-With', description: 'XMLHttpRequest', required: true },\n    // { name: 'Accept', description: 'application/json', required: true },\n    // { name: 'Accept-Language', description: 'en-US,en;q=0.8', required: true },\n  ])\n  @ApiOperation({\n    summary: 'Upload a file',\n    description: 'Upload a file to the server',\n  })\n  @UseInterceptors(FileInterceptor('file', {}))\n  @Post('')\n  uploadFile(@UploadedFile() file: Express.Multer.File) {\n    return this.fileUploadService.uploadFile({ file });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FileUploadModule.html":{"url":"modules/FileUploadModule.html","title":"module - FileUploadModule","body":"\n                   \n\n\n\n\n    Modules\n    FileUploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FileUploadModule\n\n\n\ncluster_FileUploadModule_providers\n\n\n\n\nFileUploadService\n\nFileUploadService\n\n\n\nFileUploadModule\n\nFileUploadModule\n\nFileUploadModule -->\n\nFileUploadService->FileUploadModule\n\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\nFileUploadModule -->\n\nUploadToAwsProvider->FileUploadModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/file-upload/file-upload.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FileUploadService\n                        \n                        \n                            UploadToAwsProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FileUploadController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileUploadService } from './file-upload.service';\nimport { FileUploadController } from './file-upload.controller';\nimport { UploadToAwsProvider } from './providers/upload-to-aws.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport awsConfig from 'src/config/aws.config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Upload, UploadSchema } from './schema/upload.schema';\n\n@Module({\n  imports: [\n    ConfigModule.forFeature(awsConfig),\n    MongooseModule.forFeature([\n      {\n        name: Upload.name,\n        schema: UploadSchema,\n      },\n    ]),\n  ],\n  providers: [FileUploadService, UploadToAwsProvider],\n  controllers: [FileUploadController],\n})\nexport class FileUploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileUploadService.html":{"url":"injectables/FileUploadService.html","title":"injectable - FileUploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileUploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file-upload/file-upload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadToAwsProvider: UploadToAwsProvider, uploadModel: Model, awsConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/file-upload/file-upload.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadToAwsProvider\n                                                  \n                                                        \n                                                                        UploadToAwsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        awsConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file-upload/file-upload.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { UploadToAwsProvider } from './providers/upload-to-aws.provider';\nimport awsConfig from 'src/config/aws.config';\nimport { ConfigType } from '@nestjs/config';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FileTypes, Upload } from './schema/upload.schema';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class FileUploadService {\n  constructor(\n    // provider\n    private uploadToAwsProvider: UploadToAwsProvider,\n\n    // upload repository injection\n    @InjectModel(Upload.name)\n    private uploadModel: Model,\n\n    @Inject(awsConfig.KEY)\n    private awsConfiguration: ConfigType,\n  ) {}\n\n  public async uploadFile({ file }: { file: Express.Multer.File }) {\n    try {\n      const allowedMimeTypes = [\n        'image/jpeg',\n        'image/gif',\n        'image/png',\n        'image/jpg',\n      ];\n      if (!allowedMimeTypes.includes(file.mimetype)) {\n        throw new BadRequestException(\n          'Upload a file of type jpg, jpeg, gif, or png',\n        );\n      }\n\n      // upload the file to aws (any server of our choice)\n      const awsKey = await this.uploadToAwsProvider.awsFileUpload({ file });\n      console.log('File uploaded to AWS:', awsKey);\n\n      // save the file info to database\n      const upload = new this.uploadModel({\n        filename: awsKey,\n        path: `${this.awsConfiguration.awsCloudfrontUrl}/${awsKey}`,\n        type: FileTypes.IMAGE,\n        mime: file.mimetype,\n        size: file.size,\n      });\n\n      // generate to a new entry in database\n      return await upload.save();\n    } catch (error: any) {\n      throw new ConflictException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokenProvider.html":{"url":"injectables/GenerateTokenProvider.html","title":"injectable - GenerateTokenProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokenProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-token.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createToken\n                            \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-token.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    createToken(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-token.provider.ts:18\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-token.provider.ts:47\n                        \n                    \n\n\n            \n                \n                        generateTokens\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from 'src/config/jwt.config';\nimport { User } from 'src/user/schema/user.schema';\n\n@Injectable()\nexport class GenerateTokenProvider {\n  constructor(\n    // injecting jwt service dependency\n    private jwtService: JwtService,\n\n    // injecting jwtConfig (environment values)\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n  ) {}\n\n  private async createToken({\n    userId,\n    expiresIn,\n    payload,\n  }: {\n    userId: number;\n    expiresIn: number;\n    payload?: T;\n  }) {\n    // generate jwt(refresh) token for authenticated user\n    const signToken = await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        expiresIn: expiresIn,\n        secret: this.jwtConfiguration.jwtSecret,\n        audience: this.jwtConfiguration.jwtTokenAudience,\n        issuer: this.jwtConfiguration.jwtTokenIssuer,\n      },\n    );\n\n    return signToken;\n  }\n\n  /**\n   * generateTokens\n   */\n  public async generateTokens({\n    user,\n  }: {\n    // user: Omit;\n    user: User;\n  }) {\n    const [accessToken, refreshToken] = await Promise.all([\n      await this.createToken({\n        expiresIn: this.jwtConfiguration.jwtTokenExpiration,\n        userId: user.id,\n        payload: {\n          email: user.email,\n        },\n      }),\n\n      await this.createToken({\n        expiresIn: this.jwtConfiguration.jwtRefreshTokenExpiration,\n        userId: user.id,\n      }),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto.html":{"url":"classes/GetPostsBaseDto.html","title":"class - GetPostsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger'; // importing from swagger so i get automatic documentation\nimport { PaginationQueryDto } from 'src/global/pagination/dto/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsQueryDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsQueryDto.html":{"url":"classes/GetPostsQueryDto.html","title":"class - GetPostsQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger'; // importing from swagger so i get automatic documentation\nimport { PaginationQueryDto } from 'src/global/pagination/dto/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsQueryDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 123, type: Number})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/get-users-param.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 123,\n    type: Number,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number) // transform string to number if provided\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                googleAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        googleAuthentication\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleAuthentication(body: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.NONE)@HttpCode(HttpStatus.OK)@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\nimport { Auth, AuthType } from '../decorators/auth.decorator';\nimport { GoogleAuthenticationService } from './google-authentication.service';\n\n@Controller('google-authentication')\nexport class GoogleAuthenticationController {\n  constructor(\n    private googleAuthenticationService: GoogleAuthenticationService,\n  ) {}\n\n  @Auth(AuthType.NONE)\n  @HttpCode(HttpStatus.OK)\n  @Post('')\n  googleAuthentication(@Body() body: GoogleTokenDto) {\n    return this.googleAuthenticationService.authenticate({ token: body });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(googleConfiguration: ConfigType<>, userService: UserService, generateToken: GenerateTokenProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/google-authentication.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        googleConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateToken\n                                                  \n                                                        \n                                                                        GenerateTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/google-authentication.service.ts:29\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  OnModuleInit,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { OAuth2Client } from 'google-auth-library';\nimport googleConfig from 'src/config/google.config';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\nimport { UserService } from 'src/user/user.service';\nimport { GenerateTokenProvider } from '../providers/generate-token.provider';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n  constructor(\n    // injecting google-config as well as jwt configuration\n\n    @Inject(googleConfig.KEY)\n    private googleConfiguration: ConfigType,\n\n    @Inject(forwardRef(() => UserService)) // circular dependency injection\n    private userService: UserService,\n\n    private generateToken: GenerateTokenProvider,\n  ) {}\n\n  private oauthClient: OAuth2Client;\n\n  onModuleInit() {\n    const clientId = this.googleConfiguration.googleClientId;\n    const clientSecret = this.googleConfiguration.googleClientSecret;\n\n    this.oauthClient = new OAuth2Client({\n      clientId,\n      clientSecret,\n      redirectUri: this.googleConfiguration.googleRedirectUri,\n    });\n  }\n\n  public async authenticate({ token }: { token: GoogleTokenDto }) {\n    try {\n      // verify token\n      const loginTicket = await this.oauthClient.verifyIdToken({\n        idToken: token.access_token,\n      });\n\n      // extract payload from token\n      const payload = loginTicket.getPayload();\n      const { sub: googleId, email, given_name, family_name } = payload;\n\n      // find the user in the db (if user exists just return assess token and refresh token)\n      const user = await this.userService.findUserByGoogleId({\n        googleId: googleId,\n      });\n\n      if (user) {\n        return this.generateToken.generateTokens({ user });\n      }\n\n      // ... otherwise create a new user and then generate tokens\n      const newUser = await this.userService.createUser({\n        user: {\n          email: email,\n          firstName: given_name,\n          lastName: family_name,\n          googleId: googleId,\n        },\n      });\n\n      return this.generateToken.generateTokens({ user: newUser });\n    } catch (error: any) {\n      throw new UnauthorizedException(`${error.message}`, {\n        cause: error.message,\n        description: error,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                access_token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class GoogleTokenDto {\n  @IsNotEmpty()\n  access_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePasswords\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:19\n                        \n                    \n\n\n            \n                \n                        Compares a plain text password with a hashed password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                [object Object]\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text password to compare. Can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to a boolean indicating whether the passwords match.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n  abstract hashPassword({\n    password,\n  }: {\n    password: string | Buffer;\n  }): Promise;\n\n  /**\n   * Compares a plain text password with a hashed password.\n   * \n   * @param options - The options for password comparison.\n   * @param options.password - The plain text password to compare. Can be a string or a Buffer.\n   * @param options.hashedPassword - The hashed password to compare against.\n   * @returns A promise that resolves to a boolean indicating whether the passwords match.\n   */\n  abstract comparePasswords({\n    password,\n    hashedPassword,\n  }: {\n    password: string | Buffer;\n    hashedPassword: string;\n  }): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport emailConfig from 'src/config/email.config';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { join } from 'path';\nimport { EjsAdapter } from '@nestjs-modules/mailer/dist/adapters/ejs.adapter';\n\n@Global() // i don't have to import directly(via module imports) i can use it anywhere\n@Module({\n  imports: [\n    ConfigModule.forFeature(emailConfig),\n    MailerModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => {\n        console.log({ configService });\n        console.log(configService.get('emailConfig.mailHost'));\n        console.log(configService.get('emailConfig.mailPort'));\n        console.log(configService.get('emailConfig.mailSecure'));\n        console.log(configService.get('emailConfig.smtpUsername'));\n        console.log(configService.get('emailConfig.smtpPassword'));\n        return {\n          transport: {\n            // host: configService.get('MAIL_HOST'),\n            host: configService.get('emailConfig.mailHost'),\n            port: configService.get('emailConfig.mailPort'),\n            secure: configService.get('emailConfig.mailSecure'),\n            auth: {\n              user: configService.get('emailConfig.smtpUsername'),\n              pass: configService.get('emailConfig.smtpPassword'),\n            },\n          },\n          defaults: {\n            from: '\"NoReply\" ',\n          },\n          template: {\n            dir: join(__dirname, 'templates'),\n            ext: '.ejs',\n            adapter: new EjsAdapter({\n              inlineCssEnabled: true,\n            }),\n            options: {\n              strict: false,\n            },\n          },\n        };\n      },\n    }),\n  ],\n  providers: [MailService],\n  exports: [MailService], // make it available for other modules to use it\n  controllers: [], // no controllers here as this is just a service module\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                sendWelcomeMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/mail.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        sendWelcomeMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWelcomeMail(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport { User } from 'src/user/schema/user.schema';\n\n@Injectable()\nexport class MailService {\n  constructor(private mailerService: MailerService) {}\n\n  public async sendWelcomeMail({ user }: { user: User }): Promise {\n    const { email, firstName, lastName } = user;\n\n    await this.mailerService.sendMail({\n      to: email,\n      from: '\"NoReply\" ',\n      subject: 'Welcome to our platform!',\n      template: 'welcome',\n      context: {\n        firstName,\n        lastName,\n        email,\n        loginUrl: 'http://localhost:7321/auth/login',\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetaOption.html":{"url":"classes/MetaOption.html","title":"class - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/schema/meta-option.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/schema/meta-option.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Types.ObjectId | Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Post', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/schema/meta-option.schema.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { Post } from 'src/posts/schema/post.schema';\n\n@Schema({ timestamps: true })\nexport class MetaOption extends Document {\n  @Prop({\n    type: Object,  // or Mixed if you prefer\n    required: true,\n  })\n  metaValue: Record;\n\n  @Prop({\n    type: Types.ObjectId,\n    ref: 'Post',\n    required: true,\n  })\n  post: Types.ObjectId | Post;\n}\n\nexport const MetaOptionSchema = SchemaFactory.createForClass(MetaOption); \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOptions(createMetaOptionsDto: CreateMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionsDto\n                                            \n                                                            CreateMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private metaOptionsService: MetaOptionsService) {}\n\n  @Post()\n  createMetaOptions(@Body() createMetaOptionsDto: CreateMetaOptionsDto) {\n    const metaOptions = this.metaOptionsService.create({\n      metaOptions: createMetaOptionsDto,\n    });\n\n    return metaOptions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { MetaOption, MetaOptionSchema } from './schema/meta-option.schema';\n\n@Module({\n  providers: [MetaOptionsService],\n  controllers: [MetaOptionsController],\n  exports: [MetaOptionsService],\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: MetaOption.name,\n        schema: MetaOptionSchema,\n      },\n    ]),\n  ],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/meta-options.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { MetaOption } from './schema/meta-option.schema';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    // injecting meta options service repository dependency\n    @InjectModel(MetaOption.name)\n    private metaOptionModel: Model,\n  ) {}\n\n  public async create({ metaOptions }: { metaOptions: CreateMetaOptionsDto }) {\n    const createdMetaOption = new this.metaOptionModel(metaOptions);\n    await createdMetaOption.save();\n\n    return createdMetaOption;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/interface/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[]; // replace with your actual entity type... it would be generic\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    prev: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationService \n\nPaginationService \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationService  -->\n\nPaginationModule->PaginationService \n\n\n\n\n\nPaginationService\n\nPaginationService\n\nPaginationModule -->\n\nPaginationService->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/global/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationService } from './pagination.service';\n\n@Module({\n  providers: [PaginationService],\n  exports: [PaginationService],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/dto/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of items to fetch', example: 10, type: Number, default: 10, minimum: 1})@IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/global/pagination/dto/pagination-query.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of page to fetch', example: 10, type: Number, default: 10, minimum: 1})@IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/global/pagination/dto/pagination-query.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsOptional, IsPositive } from 'class-validator';\n\nexport class PaginationQueryDto {\n  @ApiPropertyOptional({\n    description: 'Number of items to fetch',\n    example: 10,\n    type: Number,\n    default: 10,\n    minimum: 1,\n  })\n  @IsOptional()\n  @IsPositive()\n  limit?: number = 10;\n\n  @ApiPropertyOptional({\n    description: 'Number of page to fetch',\n    example: 10,\n    type: Number,\n    default: 10,\n    minimum: 1,\n  })\n  @IsOptional()\n  @IsPositive()\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationService.html":{"url":"injectables/PaginationService.html","title":"injectable - PaginationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/pagination.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/global/pagination/pagination.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/global/pagination/pagination.service.ts:16\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PaginationQueryDto } from './dto/pagination-query.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport { Paginated } from './interface/paginated.interface';\nimport { Model, Document } from 'mongoose';\n\n@Injectable()\nexport class PaginationService {\n  constructor(\n    // injecting the request object\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  public async paginateQuery({\n    paginationQuery,\n    model,\n  }: {\n    paginationQuery: PaginationQueryDto;\n    model: Model;\n  }): Promise> {\n    const { limit, page } = paginationQuery;\n\n    const query = await model.find({\n      skip: (page - 1) * limit,\n      take: limit,\n    });\n\n    // creating url\n\n    const baseUrl =\n      this.request.protocol + '://' + this.request.headers.host + '/';\n\n    const newUrl = new URL(this.request.url, baseUrl);\n\n    const totalItems = await model.countDocuments({});\n    const totalPages = Math.ceil(totalItems / limit);\n    const nextPage = totalPages === page ? page : page + 1;\n    const prevPage = page === 1 ? page : page - 1;\n\n    const finalResponse: Paginated = {\n      data: query,\n      meta: {\n        itemsPerPage: limit,\n        totalItems,\n        currentPage: page,\n        totalPages,\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?page=1&limit=${limit}}`,\n        last: `${newUrl.pathname}?page=${totalPages}&limit=${limit}`,\n        current: `${newUrl.pathname}?page=${page}&limit=${limit}`,\n        next: `${newUrl.pathname}?page=${nextPage}&limit=${limit}`,\n        prev: `${newUrl.pathname}?page=${prevPage}&limit=${limit}`,\n      },\n    };\n\n    console.log({ baseUrl, requestUrl: this.request.url, newUrl });\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Update post with a specific id', example: 123, type: 'number'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n// import { PartialType } from '@nestjs/mapped-types'; \n// we are using the import from swagger so it shows up in our documentation, it still works likes expected as the import from @nestjs/mapped-types\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'Update post with a specific id',\n    example: 123,\n    type: 'number',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/schema/post.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    Optional\n                                postSchema\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/schema/post.schema.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/schema/post.schema.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        postSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/schema/post.schema.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true, enum: PostTypes, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/schema/post.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/schema/post.schema.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/schema/post.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true, enum: PostStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/schema/post.schema.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/schema/post.schema.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/schema/post.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/schema/post.schema.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport mongoose from 'mongoose';\n\n@Schema()\nexport class Post extends Document {\n  @Prop({\n    type: String,\n    required: true,\n  })\n  title: string;\n\n  @Prop({\n    type: String,\n    required: true,\n    enum: PostTypes,\n    default: PostTypes.POST,\n  })\n  postType: PostTypes;\n\n  @Prop({\n    type: String,\n    required: true,\n  })\n  slug: string;\n\n  @Prop({\n    type: String,\n    required: true,\n  })\n  type: string;\n\n  @Prop({\n    type: String,\n    required: true,\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n\n  @Prop({\n    type: String,\n    required: false,\n  })\n  content?: string;\n\n  @Prop({\n    type: String,\n    required: false,\n  })\n  postSchema?: string;\n\n  @Prop({\n    type: String,\n    required: false,\n  })\n  featuredImageUrl?: string;\n\n  @Prop({\n    type: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Tag' }],\n    required: false,\n    default: [],\n  })\n  tags?: mongoose.Types.ObjectId[];\n\n  @Prop({\n    type: Date,\n    required: true,\n  })\n  publishedOn: Date;\n}\n\nexport const PostSchema = SchemaFactory.createForClass(Post);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                deletePost\n                            \n                            \n                                    \n                                    \n                                    \n                                getAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: UserPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post', description: 'Creates a new post for a signed in user.'})@ApiResponse({status: undefined, description: 'Created post', type: CreatePostDto})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\nThis function handles the creation of a new post by processing the provided CreatePostDto.\nIt logs the received data and returns a confirmation message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the details of the post to be created.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            UserPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the post request was received.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post'})@ApiResponse({status: undefined, description: 'Deleted post'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(userId: number, postQuery: GetPostsQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Retrieves all posts for a specific user'})@ApiResponse({status: undefined, description: 'All posts', type: undefined})@Get(':userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\nThis function handles GET requests to fetch all posts associated with a given user ID.\nIt logs the user ID for which posts are being retrieved and then calls the post service\nto fetch the posts.\nExample :                                representing all posts for the specified user.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user whose posts are to be retrieved.\n\n\n                                            \n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CreatePostDto objects,\nrepresenting all posts for the specified user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(updatePostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates a post'})@ApiResponse({status: undefined, description: 'Updated post', type: CreatePostDto})@Patch('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\nThis function handles PATCH requests to update an existing post using the provided data.\nIt logs the update data received and processes the partial post update through the\nPatchPostDto data transfer object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the fields to be updated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the patch request was received.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  Req,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsQueryDto } from './dtos/get-posts.dto';\nimport { Auth, AuthType } from 'src/auth/decorators/auth.decorator';\nimport { ActiveUser } from 'src/auth/decorators/active-user.decorator';\nimport { UserPayload } from 'src/auth/guards/access-token/access-token.guard';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   *\n   * This function handles GET requests to fetch all posts associated with a given user ID.\n   * It logs the user ID for which posts are being retrieved and then calls the post service\n   * to fetch the posts.\n   *\n   * @param {number} userId - The ID of the user whose posts are to be retrieved.\n   * @returns {Promise} A promise that resolves to an array of CreatePostDto objects,\n   *                                     representing all posts for the specified user.\n   */\n\n  @ApiOperation({\n    summary: 'Retrieves all posts for a specific user',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'All posts',\n    type: [CreatePostDto],\n  })\n  @Get(':userId?')\n  getAllPosts(\n    @Param('userId') userId: number,\n    @Query() postQuery: GetPostsQueryDto,\n  ) {\n    console.log({ postQuery });\n\n    return this.postService.getAllPosts({ userId, queryParams: postQuery });\n  }\n\n  /**\n   * Creates a new post.\n   *\n   * This function handles the creation of a new post by processing the provided CreatePostDto.\n   * It logs the received data and returns a confirmation message.\n   *\n   * @param {CreatePostDto} createPostDto - The data transfer object containing the details of the post to be created.\n   * @returns {string} A confirmation message indicating that the post request was received.\n   */\n  @ApiOperation({\n    summary: 'Creates a new post',\n    description: 'Creates a new post for a signed in user.',\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Created post',\n    type: CreatePostDto,\n  })\n  @Post('')\n  createPost(\n    @Body() createPostDto: CreatePostDto,\n    @ActiveUser() user: UserPayload,\n  ) {\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.UNAUTHORIZED);\n    }\n\n    const createdPost = this.postService.create({\n      createPost: createPostDto,\n      authorId: user.sub as number,\n    });\n    return createdPost;\n  }\n\n  /**\n   * Updates an existing post.\n   *\n   * This function handles PATCH requests to update an existing post using the provided data.\n   * It logs the update data received and processes the partial post update through the\n   * PatchPostDto data transfer object.\n   *\n   * @param {PatchPostDto} updatePostDto - The data transfer object containing the fields to be updated.\n   * @returns {string} A confirmation message indicating that the patch request was received.\n   */\n  @ApiOperation({\n    summary: 'Updates a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Updated post',\n    type: CreatePostDto,\n  })\n  @Patch('')\n  updatePost(@Body() updatePostDto: PatchPostDto) {\n    // console.log({updatePostDto})\n    const updatedPost = this.postService.update({ updatePost: updatePostDto });\n    return updatedPost;\n  }\n\n  @ApiOperation({\n    summary: 'Deletes a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Deleted post',\n  })\n  @Delete('')\n  deletePost(@Query('id', ParseIntPipe) id: number) {\n    if (!id) {\n      throw new HttpException('No ID Provided', HttpStatus.BAD_REQUEST);\n    }\n\n    const deleteRequest = this.postService.delete({ id });\n\n    return deleteRequest;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { UserModule } from 'src/user/user.module';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/global/pagination/pagination.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Post, PostSchema } from './schema/post.schema';\n\n@Module({\n  imports: [\n    UserModule,\n    TagsModule,\n    PaginationModule,\n    MongooseModule.forFeature([\n      {\n        name: Post.name,\n        schema: PostSchema,\n      },\n    ]),\n  ],\n  controllers: [PostsController],\n  providers: [PostsService],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userServices: UserService, tagsService: TagsService, postModel: Model, paginationService: PaginationService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userServices\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:152\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { TagsService } from 'src/tags/tags.service';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsQueryDto } from './dtos/get-posts.dto';\nimport { PaginationService } from 'src/global/pagination/pagination.service';\nimport { Paginated } from 'src/global/pagination/interface/paginated.interface';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Post } from './schema/post.schema';\nimport { Model, Types } from 'mongoose';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /**\n     * Repositories Injections\n     */\n\n    // injecting user service (making user of another service (a single dependency injection))\n    private userServices: UserService,\n\n    private tagsService: TagsService,\n\n    /**\n     * Repositories Injections\n     */\n    @InjectModel(Post.name)\n    private postModel: Model,\n\n    // injecting pagination service\n    private paginationService: PaginationService,\n  ) {}\n\n  public async create({\n    createPost,\n    authorId,\n  }: {\n    createPost: CreatePostDto;\n    authorId: number;\n  }) {\n    const author = await this.userServices.findOneById({\n      id: authorId,\n    });\n\n    if (!author) {\n      throw new HttpException('Author not found', HttpStatus.NOT_FOUND);\n    }\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: createPost.tags,\n    });\n\n    if (!tags.length || tags.length === 0) {\n      throw new HttpException('Tags not found', HttpStatus.NOT_FOUND, {\n        cause: 'Tags not found',\n        description: 'Provide a valid tags to create',\n      });\n    }\n\n    const normalizedSlug = createPost.slug.toLowerCase();\n    const existingSlug = await this.postModel.findOne({\n      where: {\n        slug: normalizedSlug,\n      },\n    });\n\n    if (existingSlug) {\n      throw new HttpException('Slug already exists', HttpStatus.CONFLICT);\n    }\n\n    try {\n      const post = new this.postModel({\n        ...createPost,\n        author: author,\n        tags: tags,\n        slug: normalizedSlug,\n      });\n\n      await post.save();\n\n      return post;\n    } catch (error: any) {\n      throw new HttpException(\n        `Error while creating post`,\n        HttpStatus.BAD_REQUEST,\n        {\n          cause: error.message,\n          description: String(error),\n        },\n      );\n    }\n  }\n\n  public async update({ updatePost }: { updatePost: PatchPostDto }) {\n    // find the tags\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: updatePost.tags,\n    });\n\n    if (!(tags.length > 0)) {\n      throw new HttpException('Tags not found', HttpStatus.NOT_FOUND, {\n        cause: 'Tags not found',\n        description: 'Provide a valid tags to update',\n      });\n    }\n\n    const post = await this.postModel.findOne({ id: updatePost.id });\n\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    }\n\n    post.title = updatePost.title ?? post.title;\n    post.postType = updatePost.postType ?? post.postType;\n    post.slug = updatePost.slug ?? post.slug;\n    post.status = updatePost.status ?? post.status;\n    post.content = updatePost.content ?? post.content;\n    post.postSchema = updatePost.postSchema ?? post.postSchema;\n    post.featuredImageUrl =\n      updatePost.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishedOn = updatePost.publishedOn ?? post.publishedOn;\n    post.tags = updatePost.tags ? tags.map(tag => tag._id as Types.ObjectId) : post.tags;\n\n    const updatedPost = await post.save();\n\n    return updatedPost;\n  }\n\n  public async getAllPosts({\n    userId,\n    queryParams,\n  }: {\n    userId: number;\n    queryParams: GetPostsQueryDto;\n  }): Promise> {\n    const { endDate, limit, page, startDate } = queryParams;\n\n    const posts = await this.paginationService.paginateQuery({\n      paginationQuery: {\n        limit,\n        page,\n      },\n      model: this.postModel,\n    });\n\n    return posts;\n  }\n\n  public async delete({ id }: { id: number }) {\n    // const post = await this.postRepository.findOneBy({ id });\n\n    // if (!post) {\n    //   throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    // }\n\n    await this.postModel.deleteOne({ id });\n\n    // await this.metaOptionsRepository.delete({ id: post.metaOptions.id });\n\n    return { message: 'Post deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @IsString()\n  @IsNotEmpty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenProvider.html":{"url":"injectables/RefreshTokenProvider.html","title":"injectable - RefreshTokenProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-token.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokenProvider, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-token.provider.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRefreshToken(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-token.provider.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from 'src/config/jwt.config';\nimport { GenerateTokenProvider } from './generate-token.provider';\nimport { UserService } from 'src/user/user.service';\nimport { UserPayload } from '../guards/access-token/access-token.guard';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\n\n@Injectable()\nexport class RefreshTokenProvider {\n  constructor(\n    // injecting jwt service dependency\n    private jwtService: JwtService,\n\n    // injecting jwtConfig (environment values)\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n\n    private generateTokenProvider: GenerateTokenProvider,\n\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n  ) {}\n\n  public async getRefreshToken({ token }: { token: RefreshTokenDto }) {\n    try {\n      // verify the refresh token sent\n      const { sub } = await this.jwtService.verifyAsync\n      >(token.refreshToken, {\n        secret: this.jwtConfiguration.jwtSecret,\n        audience: this.jwtConfiguration.jwtTokenAudience,\n        issuer: this.jwtConfiguration.jwtTokenIssuer,\n      });\n      // fetch the user\n      const user = await this.userService.findOneById({ id: sub });\n\n      // generate new access and refresh tokens\n      const { accessToken, refreshToken } =\n        await this.generateTokenProvider.generateTokens({\n          user,\n        });\n\n      return { accessToken, refreshToken };\n    } catch (error: any) {\n      throw new HttpException(\n        `Invalid refresh token ${error.message}`,\n        HttpStatus.UNAUTHORIZED,\n        {\n          cause: error.message,\n          description: error,\n        },\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\"\n\nexport class SignInDto {\n    @IsNotEmpty()\n    @IsEmail()\n    email: string\n\n    @IsNotEmpty()\n    @IsString()\n    password: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tags.html":{"url":"classes/Tags.html","title":"class - Tags","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tags\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/schema/tags.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                    Optional\n                                tagSchema\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/schema/tags.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/schema/tags.schema.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/schema/tags.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true, validate: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/schema/tags.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        tagSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/schema/tags.schema.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\nexport class Tags extends Document {\n  @Prop({\n    type: String,\n    required: true,\n  })\n  name: string;\n\n  @Prop({\n    type: String,\n    required: true,\n    validate: {\n      validator: function (v: string) {\n        return /^[a-z0-9]+(?:-[a-z0-9]+)*$/.test(v);\n      },\n      message:\n        'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n    },\n  })\n  slug: string;\n\n  @Prop({\n    type: String,\n    required: true,\n  })\n  description: string;\n\n  @Prop({\n    type: String,\n    required: true,\n  })\n  tagSchema?: string;\n\n  @Prop({\n    type: String,\n    required: true,\n  })\n  featuredImageUrl?: string;\n}\n\nexport const TagsSchema = SchemaFactory.createForClass(Tags);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createTag: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a tag'})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTag\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a tag by id'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { ApiOperation } from '@nestjs/swagger';\nimport { TagsService } from './tags.service';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(private tagsService: TagsService) {}\n\n  @ApiOperation({ summary: 'Create a tag' })\n  @Post('')\n  createPost(@Body() createTag: CreateTagDto) {\n    const createdTags = this.tagsService.createTag({ tag: createTag });\n    return createdTags;\n  }\n\n  @ApiOperation({ summary: 'Delete a tag by id' })\n  @Delete('')\n  async deleteTag(@Query('id', ParseIntPipe) id: number) {\n    return await this.tagsService.delete({ id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsService } from './tags.service';\nimport { TagsController } from './tags.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Tags, TagsSchema } from './schema/tags.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Tags.name,\n        schema: TagsSchema,\n      },\n    ]),\n  ],\n  controllers: [TagsController],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTags\n                            \n                            \n                                    Public\n                                    Async\n                                getTagById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/tags/tags.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTags()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getTagById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTagById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { In, Repository } from 'typeorm';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Tags } from './schema/tags.schema';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    @InjectModel(Tags.name)\n    private tagsModel: Model,\n  ) {}\n\n  public async createTag({ tag }: { tag: CreateTagDto }) {\n    const existingTags = await this.tagsModel.findOne({\n      where: { name: tag.name },\n    });\n\n    if (existingTags) {\n      throw new HttpException('Tag already exists', HttpStatus.CONFLICT);\n    }\n\n    const createdTags = new this.tagsModel(tag);\n\n    await createdTags.save();\n\n    return createdTags;\n  }\n\n  public async getAllTags() {\n    const tags = await this.tagsModel.find({});\n\n    return tags;\n  }\n\n  public async getTagById({ id }: { id: number }) {\n    const tag = await this.tagsModel.findOne({ id });\n\n    if (!tag) {\n      throw new HttpException('Tag not found', HttpStatus.NOT_FOUND);\n    }\n\n    return tag;\n  }\n\n  public async findMultipleTags({ tags }: { tags: number[] }) {\n    const results = await this.tagsModel.find({\n      where: {\n        id: In(tags),\n      },\n    });\n\n    return results;\n  }\n\n  public async delete({ id }: { id: number }) {\n    await this.tagsModel.deleteOne({ id });\n\n    return { message: 'Tag deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Upload.html":{"url":"classes/Upload.html","title":"class - Upload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file-upload/schema/upload.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                fileName\n                            \n                            \n                                    \n                                mime\n                            \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                size\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/schema/upload.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        mime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/schema/upload.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/schema/upload.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/schema/upload.schema.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true, enum: FileTypes, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/schema/upload.schema.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\n\nexport enum FileTypes {\n  IMAGE = 'image',\n  VIDEO = 'video',\n  AUDIO = 'audio',\n  DOCUMENT = 'document',\n  OTHER = 'other',\n}\n\n@Schema()\nexport class Upload extends Document {\n  @Prop({\n    type: String,\n    required: true,\n  })\n  fileName: string;\n\n  @Prop({\n    type: String,\n    required: true,\n  })\n  path: string;\n\n  @Prop({\n    type: String,\n    required: true,\n    enum: FileTypes,\n    default: FileTypes.IMAGE,\n  })\n  type: FileTypes;\n\n  @Prop({\n    type: String,\n    required: true,\n  })\n  mime: string; // media types that can be uploaded (.aac or .mp4)\n\n  @Prop({\n    type: String,\n    required: true,\n  })\n  size: number;\n}\n\nexport const UploadSchema = SchemaFactory.createForClass(Upload);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadToAwsProvider.html":{"url":"injectables/UploadToAwsProvider.html","title":"injectable - UploadToAwsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadToAwsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file-upload/providers/upload-to-aws.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                awsFileUpload\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(awsConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/file-upload/providers/upload-to-aws.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        awsConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        awsFileUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    awsFileUpload(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file-upload/providers/upload-to-aws.provider.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file-upload/providers/upload-to-aws.provider.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { S3 } from 'aws-sdk';\nimport awsConfig from 'src/config/aws.config';\nimport * as path from 'path';\nimport { v4 as uuid4 } from 'uuid';\n\n@Injectable()\nexport class UploadToAwsProvider {\n  constructor(\n    @Inject(awsConfig.KEY)\n    private awsConfiguration: ConfigType,\n  ) {}\n\n  private generateFileName({ file }: { file: Express.Multer.File }) {\n    const id = uuid4();\n    const filename = file.originalname;\n    const extension = path.extname(filename);\n    const fileNameWithoutSpace = filename\n      .split('.')[0]\n      .replace(/\\s/g, '')\n      .trim();\n    const timestamp = new Date().toISOString().replace(/:/g, '-').trim();\n\n    return `${id}-${fileNameWithoutSpace}-${timestamp}${extension}`;\n  }\n\n  public async awsFileUpload({ file }: { file: Express.Multer.File }) {\n    // this.configService.get('appConfig.awsBucketName')\n\n    const s3 = new S3({\n      accessKeyId: this.awsConfiguration.awsAccessKey,\n      secretAccessKey: this.awsConfiguration.awsSecretAccessKey,\n      region: this.awsConfiguration.awsRegion,\n    });\n\n    const params: S3.Types.PutObjectRequest = {\n      Bucket: this.awsConfiguration.awsBucketName,\n      Key: this.generateFileName({ file }),\n      Body: file.buffer,\n      ContentType: file.mimetype,\n    };\n\n    try {\n      const uploadResult = await s3.upload(params).promise();\n      console.log({ uploadResult });\n\n      return uploadResult.Key;\n    } catch (error: any) {\n      throw new HttpException(\n        `Failed to upload image: ${error.message}`,\n        HttpStatus.BAD_REQUEST,\n        {\n          cause: error.message,\n          description: error.stack,\n        },\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schema/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, unique: true, required: true, lowercase: true, trim: true, validate: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/user.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/user.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, default: '', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/user.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/user.schema.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\nexport class User extends Document {\n  @Prop({\n    type: String,\n    required: true,\n  })\n  firstName: string;\n\n  @Prop({\n    type: String,\n    default: '',\n    required: false,\n  })\n  lastName?: string;\n\n  @Prop({\n    type: String,\n    unique: true,\n    required: true,\n    lowercase: true,\n    trim: true,\n    validate: {\n      validator: (v: string) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(v),\n      message: 'Please enter a valid email address',\n    },\n  })\n  email: string;\n\n  @Prop({\n    type: String,\n    required: true,\n    select: false, // this field will not be returned when fetching users\n  })\n  password: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new user', description: 'Create a new user for the application'})@HttpCode(HttpStatus.CREATED)@Auth(AuthType.NONE)@UseInterceptors(ClassSerializerInterceptor)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all users', description: 'Get all users with optional pagination'})@ApiResponse({status: 200, description: 'All users', type: CreateUserDto})@ApiQuery({name: 'limit', type: Number, required: false, description: 'Limit the number of returned results', example: 10})@ApiQuery({name: 'page', type: Number, required: false, description: 'The position of the number that you want the api to return', example: 1})@Get('/:id?')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n  UseGuards,\n  SetMetadata,\n  HttpCode,\n  HttpStatus,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { Auth, AuthType } from 'src/auth/decorators/auth.decorator';\n\n@Controller('users')\n@ApiTags('Users') // with the updated version of @nestjs/swagger there is no need to use @ApiTags\nexport class UserController {\n  /**\n   * Final Endpoint - /users/id?limit=10&page=1\n   * Parama id - optional, convert to integer, cannot have a default value\n   * Query limit - integer, default 10\n   * Query page - integer, default value 1\n   * ==> USE CASES\n   * /users/ -> return all users with default pagination\n   * /users/1223 -> returns one user whos id is 1234\n   * /users?limit=10&page=2 -> return page 2 with limit of pagination 10\n   */\n\n  constructor(private readonly userService: UserService) {}\n\n  @ApiOperation({\n    summary: 'Get all users',\n    description: 'Get all users with optional pagination',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'All users',\n    type: CreateUserDto,\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: Number,\n    required: false,\n    description: 'Limit the number of returned results',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    required: false,\n    description: 'The position of the number that you want the api to return',\n    example: 1,\n  })\n  @Get('/:id?')\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    // console.log(getUserParamDto);\n    // console.log(`Limit: ${limit}, Page: ${page}`);\n\n    const findAll = this.userService.findAll({\n      page,\n      limit,\n      userParamsDTO: getUserParamDto,\n    });\n\n    return findAll;\n  }\n\n  @ApiOperation({\n    summary: 'Create a new user',\n    description: 'Create a new user for the application',\n  })\n  @HttpCode(HttpStatus.CREATED)\n  @Auth(AuthType.NONE)\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    const createUser = this.userService.createUser({ user: createUserDto });\n    return createUser;\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { CreateUserProvider } from './provider/create-user.provider';\nimport profileConfig from './config/profile.config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './schema/user.schema';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule), // for dependency injection (circular dependency injection)\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]), // for repository (entity) injection\n    ConfigModule.forFeature(profileConfig),\n  ],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    CreateUserProvider,\n    // {\n    //   provide: APP_GUARD,\n    //   useClass: AccessTokenGuard\n    // }, // setting a guard globally (this protect the entire application, everywhere the userModule is been imported)\n  ],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    Public\n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findUserByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userModel: Model, configService: ConfigService, profileConfiguration: ConfigType<>, createUserProvider: CreateUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByGoogleId(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/auth.service';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from './config/profile.config';\nimport { CreateUserProvider } from './provider/create-user.provider';\nimport { Model } from 'mongoose';\nimport { User } from './schema/user.schema';\nimport { InjectModel } from '@nestjs/mongoose';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => AuthService))\n    private authService: AuthService,\n\n    // injecting user database model\n    @InjectModel(User.name)\n    private userModel: Model,\n\n    // injecting environment variables\n    private configService: ConfigService,\n\n    // injecting module specific configuration dependencies (environment variables)\n    @Inject(profileConfig.KEY)\n    private profileConfiguration: ConfigType,\n\n    private createUserProvider: CreateUserProvider,\n  ) {}\n\n  public async createUser({ user }: { user: CreateUserDto }): Promise {\n    return await this.createUserProvider.createUser({ user });\n  }\n\n  public findAll({\n    userParamsDTO,\n    limit,\n    page,\n  }: {\n    userParamsDTO: GetUsersParamDto;\n    limit: number;\n    page: number;\n  }) {\n    const environment = this.configService.get('S3_BUCKET');\n    console.log(`Environment: ${environment}`);\n\n    console.log('NODE_ENV: ', process.env.NODE_ENV);\n\n    console.log('Profile: ', this.profileConfiguration);\n\n    throw new HttpException(\n      'Api endpoint does not exist',\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        description: 'Occurred because the API endpoint was deprecated',\n        cause: 'Api endpoint does not exist',\n      },\n    );\n  }\n\n  public async findOneById({ id }: { id: number }) {\n    const user = await this.userModel.findOne({ id });\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    return user;\n  }\n\n  public async findUserByEmail({ email }: { email: string }) {\n    try {\n      const user = await this.userModel.findOne({ email });\n\n      if (!user) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n\n      return user;\n    } catch (error: any) {\n      throw new RequestTimeoutException(`Timeout occurred: ${error.message}`);\n    }\n  }\n\n  public async findUserByGoogleId({ googleId }: { googleId: string }) {\n    try {\n      const user = await this.userModel.findOne({ googleId });\n\n      if (!user) {\n        // throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n        return null; // return null if user not found, instead of throwing an exception\n      }\n\n      return user;\n    } catch (error: any) {\n      throw new RequestTimeoutException(`Timeout occurred: ${error.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/auth/decorators/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/guards/access-token/access-token.guard.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/guards/access-token/access-token.guard.ts\n            \n            type alias\n            UserPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-token.provider.ts\n            \n            injectable\n            GenerateTokenProvider\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-token.provider.ts\n            \n            injectable\n            RefreshTokenProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/file-upload/file-upload.controller.ts\n            \n            controller\n            FileUploadController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/file-upload/file-upload.service.ts\n            \n            injectable\n            FileUploadService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/file-upload/providers/upload-to-aws.provider.ts\n            \n            injectable\n            UploadToAwsProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/file-upload/schema/upload.schema.ts\n            \n            class\n            Upload\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/file-upload/schema/upload.schema.ts\n            \n            variable\n            UploadSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/global/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/global/pagination/dto/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/global/pagination/interface/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/global/pagination/pagination.service.ts\n            \n            injectable\n            PaginationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-meta-options.dto.ts\n            \n            class\n            CreateMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/meta-options/schema/meta-option.schema.ts\n            \n            class\n            MetaOption\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/meta-options/schema/meta-option.schema.ts\n            \n            variable\n            MetaOptionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsQueryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/schema/post.schema.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                        src/posts/schema/post.schema.ts\n            \n            variable\n            PostSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/schema/tags.schema.ts\n            \n            class\n            Tags\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/tags/schema/tags.schema.ts\n            \n            variable\n            TagsSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tags/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/provider/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/schema/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/user/schema/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/mongoose : ^10.1.0\n        \n            @nestjs/platform-express : ^10.4.15\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/multer : ^1.4.12\n        \n            aws-sdk : 2.1643.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ejs : ^3.1.10\n        \n            google-auth-library : ^9.15.0\n        \n            joi : ^17.13.3\n        \n            mongoose : ^8.9.3\n        \n            nodemailer : ^6.9.16\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^11.0.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth.decorator.ts)\n                        \n                        \n                            FileTypes   (src/.../upload.schema.ts)\n                        \n                        \n                            PostStatus   (src/.../posts.enums.ts)\n                        \n                        \n                            PostTypes   (src/.../posts.enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 BEARER\n                            \n                        \n                        \n                            \n                                Value : bearer\n                            \n                        \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n            \n        \n\n    src/file-upload/schema/upload.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        FileTypes\n                    \n                \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : image\n                            \n                        \n                        \n                            \n                                 VIDEO\n                            \n                        \n                        \n                            \n                                Value : video\n                            \n                        \n                        \n                            \n                                 AUDIO\n                            \n                        \n                        \n                            \n                                Value : audio\n                            \n                        \n                        \n                            \n                                 DOCUMENT\n                            \n                        \n                        \n                            \n                                Value : document\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n            \n        \n\n    src/posts/enums/posts.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PostTypes\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FileUploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_FileUploadModule\n\n\n\ncluster_FileUploadModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nFileUploadModule\n\nFileUploadModule\n\nAppModule -->\n\nFileUploadModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationService \n\nPaginationService \n\nPaginationService  -->\n\nPaginationModule->PaginationService \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nPaginationModule -->\n\nPaginationService->PaginationModule\n\n\n\nAppModule -->\n\nPaginationService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokenProvider\n\nGenerateTokenProvider\n\nAuthModule -->\n\nGenerateTokenProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokenProvider\n\nRefreshTokenProvider\n\nAuthModule -->\n\nRefreshTokenProvider->AuthModule\n\n\n\n\n\nFileUploadService\n\nFileUploadService\n\nFileUploadModule -->\n\nFileUploadService->FileUploadModule\n\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\nFileUploadModule -->\n\nUploadToAwsProvider->FileUploadModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    17 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserPayload   (src/.../access-token.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/guards/access-token/access-token.guard.ts\n    \n    \n        \n            \n                \n                    \n                    UserPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.decorator.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            MetaOptionSchema   (src/.../meta-option.schema.ts)\n                        \n                        \n                            PostSchema   (src/.../post.schema.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../access-token.guard.ts)\n                        \n                        \n                            TagsSchema   (src/.../tags.schema.ts)\n                        \n                        \n                            UploadSchema   (src/.../upload.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof UserPayload | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: UserPayload = request[REQUEST_USER_KEY];\n\n    if (field) {\n      return user[field];\n    } else {\n      return user;\n    }\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) => SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/meta-options/schema/meta-option.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MetaOptionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(MetaOption)\n                    \n                \n\n\n        \n    \n\n    src/posts/schema/post.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PostSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Post)\n                    \n                \n\n\n        \n    \n\n    src/auth/guards/access-token/access-token.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/tags/schema/tags.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TagsSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Tags)\n                    \n                \n\n\n        \n    \n\n    src/file-upload/schema/upload.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UploadSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Upload)\n                    \n                \n\n\n        \n    \n\n    src/user/schema/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
