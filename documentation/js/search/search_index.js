var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.162,1,1.94]],["body/controllers/AppController.html",[0,1.828,1,3.052,2,1.456,3,0.587,4,0.518,5,0.518,6,3.198,7,0.659,8,2.01,9,4.603,10,1.456,11,0.036,12,0.998,13,3.865,14,1.601,15,1.515,16,0.736,17,0.998,18,2.678,19,3.198,20,0.587,21,0.118,22,2.169,23,2.759,24,1.601,25,3.865,26,0.028,27,0.028]],["title/modules/AppModule.html",[28,1.162,29,1.94]],["body/modules/AppModule.html",[1,2.982,2,1.572,3,0.466,4,0.411,5,0.411,11,0.036,16,0.852,17,0.792,18,2.771,19,2.539,20,0.466,21,0.093,26,0.024,27,0.024,28,1.786,29,3.748,30,1.401,31,1.401,32,1.722,33,1.722,34,1.401,35,2.661,36,1.722,37,2.539,38,2.539,39,2.539,40,2.771,41,3.08,42,2.506,43,2.341,44,1.722,45,1.722,46,3.068,47,2.661,48,2.624,49,3.068,50,3.068,51,3.068,52,3.068,53,3.068]],["title/injectables/AppService.html",[18,1.557,54,1.162]],["body/injectables/AppService.html",[3,0.616,4,0.544,5,0.544,7,0.693,8,2.073,9,4.684,11,0.036,12,1.048,14,1.683,15,1.563,16,0.616,17,1.048,18,2.527,20,0.616,21,0.124,24,1.683,26,0.029,27,0.029,54,1.885,55,2.28,56,3.361,57,4.061,58,2.899,59,2.899]],["title/controllers/AuthController.html",[0,1.162,60,1.94]],["body/controllers/AuthController.html",[0,1.317,2,1.317,3,0.53,4,0.468,5,0.468,7,0.596,8,1.885,10,1.317,11,0.036,12,0.902,14,1.448,15,1.421,16,0.691,17,0.902,20,0.53,21,0.106,22,1.962,24,1.448,26,0.027,27,0.027,60,2.862,61,2.495,62,2.495,63,2.892,64,3.765,65,3.495,66,4.066,67,4.55,68,3.495,69,1.765,70,1.765,71,1.175,72,1.317,73,2.495,74,1.448,75,2.31,76,2.892,77,1.596,78,1.317,79,2.892,80,2.495,81,3.495,82,3.495,83,3.495]],["title/modules/AuthModule.html",[28,1.162,40,1.557]],["body/modules/AuthModule.html",[2,1.684,3,0.516,4,0.456,5,0.456,11,0.036,16,0.805,17,0.878,20,0.516,21,0.103,26,0.026,27,0.026,28,1.881,30,1.553,31,1.553,32,1.909,33,1.909,34,1.553,35,2.802,36,2.802,40,2.909,42,2.04,43,2.508,44,1.909,45,1.909,48,2.139,60,3.14,75,2.764,76,2.814,84,2.814,85,2.814,86,2.814,87,3.4,88,2.811,89,3.4,90,2.814]],["title/injectables/AuthService.html",[54,1.162,75,1.408]],["body/injectables/AuthService.html",[3,0.43,4,0.379,5,0.379,7,0.483,8,1.635,11,0.037,12,1.173,14,1.635,15,1.232,16,0.599,17,0.731,20,0.43,21,0.086,24,1.635,26,0.023,27,0.023,54,1.487,55,1.589,64,4.068,69,1.993,70,1.993,71,1.269,72,1.487,75,1.802,77,2.075,78,1.066,79,3.266,80,3.244,88,1.78,91,2.342,92,3.368,93,4.916,94,2.817,95,2.83,96,2.276,97,2.83,98,2.83,99,2.83,100,2.83,101,2.483,102,2.83,103,2.342,104,2.342,105,2.021,106,2.021,107,2.342,108,2.342,109,2.342,110,2.83,111,2.482,112,2.342,113,2.342,114,2.83,115,2.83,116,1.78,117,2.83,118,2.83,119,2.342,120,2.021,121,2.83,122,2.83,123,2.83,124,2.83]],["title/classes/CreatePostDto.html",[21,0.094,125,1.557]],["body/classes/CreatePostDto.html",[3,0.177,4,0.156,5,0.156,7,0.199,10,1.683,11,0.036,12,1.153,15,1.709,16,0.461,20,0.177,21,0.092,26,0.012,27,0.012,58,1.84,59,1.84,71,1.497,72,1.561,74,2.251,120,2.427,125,0.999,126,0.533,127,3.284,128,0.734,129,1.177,130,3.082,131,2.133,132,2.133,133,2.133,134,2.133,135,2.133,136,2.813,137,2.138,138,2.813,139,2.427,140,2.813,141,2.677,142,2.513,143,2.813,144,1.167,145,1.167,146,1.638,147,1.638,148,2.513,149,1.638,150,3.057,151,1.167,152,1.167,153,1.91,154,1.638,155,1.638,156,1.638,157,2.813,158,2.427,159,1.84,160,1.638,161,1.167,162,1.167,163,1.167,164,2.427,165,1.979,166,1.85,167,2.513,168,2.513,169,1.447,170,1.84,171,1.84,172,1.167,173,1.167,174,3.057,175,2.133,176,2.168,177,1.638,178,1.638,179,1.638,180,1.638,181,1.167,182,1.167,183,1.638,184,1.638,185,2.513,186,1.638,187,1.638,188,1.167,189,1.167,190,1.167,191,1.167,192,1.638,193,1.167,194,2.513,195,2.513,196,1.413,197,1.638,198,1.638,199,1.638,200,1.413,201,1.638,202,1.638,203,1.167,204,2.427,205,1.413,206,1.413,207,1.413,208,1.167,209,1.167,210,1.621,211,1.167,212,1.167,213,1.167,214,1.167,215,2.133,216,0.966,217,0.966,218,1.638,219,1.638,220,2.606,221,2.324,222,2.957,223,1.638,224,0.833,225,0.833,226,1.638,227,0.589,228,0.966,229,0.734,230,2.957,231,2.637,232,0.533,233,1.413,234,0.966,235,2.477,236,0.734,237,1.638,238,1.638,239,0.966,240,0.966,241,0.966,242,0.966,243,1.638,244,0.966,245,0.966,246,2.133,247,0.966,248,0.966,249,3.258,250,0.966,251,0.966,252,0.966,253,0.833,254,0.966,255,0.966,256,0.966,257,0.833,258,0.966]],["title/classes/CreatePostDtoWithMeta.html",[21,0.094,153,1.94]],["body/classes/CreatePostDtoWithMeta.html",[3,0.248,4,0.219,5,0.219,7,0.279,10,0.986,11,0.036,12,0.676,15,1.759,16,0.567,20,0.248,21,0.114,26,0.015,27,0.015,58,1.868,59,1.868,71,1.443,74,2.163,120,2.666,125,0.827,126,0.747,127,2.334,128,1.03,129,1.493,130,2.666,131,1.355,132,1.355,133,1.355,134,1.355,135,1.355,136,2.165,137,1.646,138,2.165,139,1.868,141,2.589,142,2.165,143,2.705,146,1.355,147,1.355,148,2.165,149,1.355,150,2.705,153,2.349,154,1.355,155,1.355,157,2.705,158,2.334,159,1.868,160,1.355,164,2.334,166,1.967,167,2.165,168,2.165,169,1.469,170,1.868,171,1.868,174,2.705,176,1.868,177,1.355,178,1.355,179,1.355,180,1.355,183,1.355,184,1.355,185,2.165,186,1.355,187,1.355,192,1.355,194,2.165,195,2.165,196,1.169,197,1.355,198,1.355,199,1.355,200,1.169,201,1.355,202,1.355,204,2.334,205,1.169,206,1.169,207,1.169,210,1.646,215,2.705,216,1.355,217,1.355,218,2.165,219,2.165,220,2.986,221,2.739,222,3.389,223,2.165,224,1.169,225,1.169,226,2.165,227,0.827,228,1.355,229,1.03,230,3.389,231,3.108,232,0.747,233,1.868,234,1.355,235,3.079,236,1.03,237,2.165,238,2.165,239,1.355,240,1.355,241,1.355,242,1.355,243,2.165,244,1.355,245,1.355,246,2.705,247,1.355,248,1.355,249,4.051,250,1.355,251,1.355,252,1.355,253,1.169,254,1.355,255,1.355,256,1.355,257,1.169,258,1.355,259,1.637,260,1.637,261,1.637,262,1.637]],["title/classes/CreateUserDto.html",[21,0.094,263,1.731]],["body/classes/CreateUserDto.html",[3,0.432,4,0.382,5,0.382,7,0.486,10,1.857,11,0.035,12,1.273,15,1.753,16,0.432,20,0.432,21,0.121,26,0.023,27,0.023,71,1.273,72,1.494,78,1.494,80,3.255,126,1.301,129,1.81,196,2.83,200,2.83,220,3.101,221,2.494,222,3.519,224,2.034,225,2.034,227,1.438,263,2.225,264,4.288,265,2.034,266,3.773,267,3.773,268,4.559,269,2.849,270,2.849,271,2.849,272,2.849,273,2.849,274,2.849,275,2.849,276,4.929,277,3.964,278,3.964,279,3.964,280,3.964,281,4.44,282,3.964,283,3.964,284,3.964,285,2.849,286,3.964,287,2.849,288,3.964,289,3.964,290,2.849,291,2.849]],["title/classes/GetUsersParamDto.html",[21,0.094,292,1.731]],["body/classes/GetUsersParamDto.html",[3,0.516,4,0.456,5,0.456,7,0.58,10,1.281,11,0.036,12,0.878,15,1.062,16,0.758,20,0.516,21,0.152,26,0.026,27,0.026,71,1.422,72,1.684,77,2.514,78,2.075,111,2.256,126,1.553,129,2.04,140,2.814,141,2.256,166,1.281,221,2.811,227,1.717,229,2.139,231,3.19,232,1.553,292,2.508,293,3.698,294,2.811,295,2.814,296,3.698,297,3.698,298,3.4,299,3.4,300,4.469,301,3.4,302,3.4]],["title/classes/PatchPostDto.html",[21,0.094,303,1.94]],["body/classes/PatchPostDto.html",[3,0.486,4,0.429,5,0.429,7,0.546,10,1.206,11,0.036,12,0.827,16,0.843,20,0.486,21,0.131,26,0.025,27,0.025,71,1.251,74,1.779,77,2.465,78,1.825,125,1.617,126,1.462,128,2.014,129,1.961,141,2.168,166,1.206,175,2.65,220,2.701,227,1.617,230,3.065,232,1.462,236,2.014,296,3.553,297,3.553,303,2.701,304,3.553,305,3.553,306,4.294,307,4.294,308,3.202,309,3.202,310,3.553,311,2.65,312,2.65,313,4.294,314,3.065,315,3.065,316,3.202,317,3.202,318,3.202,319,3.202,320,3.202,321,3.202,322,3.202,323,3.202]],["title/classes/PatchUserDto.html",[21,0.094,324,1.94]],["body/classes/PatchUserDto.html",[3,0.64,4,0.565,5,0.565,11,0.035,16,0.777,20,0.64,21,0.128,26,0.03,27,0.03,126,1.926,263,2.367,265,3.011,305,4.237,310,3.49,311,3.49,314,3.011,315,3.011,324,3.221,325,3.49,326,5.121,327,3.49]],["title/controllers/PostsController.html",[0,1.162,47,1.731]],["body/controllers/PostsController.html",[0,0.837,2,0.837,3,0.337,4,0.298,5,0.298,7,0.379,8,1.373,10,1.493,11,0.036,12,1.023,14,1.642,15,1.035,16,0.713,17,0.573,20,0.337,21,0.068,22,1.247,23,1.586,24,1.642,26,0.019,27,0.019,47,1.86,62,1.586,69,2.001,70,2.001,71,1.385,72,1.493,73,1.586,74,2.222,78,1.493,111,1.122,125,2.757,137,2.493,156,3.279,166,1.857,232,1.014,303,2.763,312,2.742,328,1.838,329,4.078,330,3.313,331,2.742,332,3.313,333,2.221,334,3.313,335,3.313,336,1.86,337,3.313,338,3.313,339,2.221,340,2.221,341,2.221,342,2.221,343,2.221,344,2.221,345,3.635,346,2.221,347,3.313,348,2.742,349,2.221,350,2.221,351,3.962,352,1.586,353,1.838,354,3.279,355,1.673,356,1.838,357,1.838,358,3.279,359,3.635,360,1.838,361,2.221,362,2.221,363,3.313,364,2.221,365,2.221,366,1.838,367,2.221,368,2.742,369,2.221,370,2.221,371,2.742,372,2.742,373,2.742,374,2.742,375,2.221]],["title/modules/PostsModule.html",[28,1.162,41,1.731]],["body/modules/PostsModule.html",[2,1.658,3,0.504,4,0.445,5,0.445,11,0.036,16,0.797,17,0.858,20,0.504,21,0.101,26,0.026,27,0.026,28,1.86,30,1.517,31,1.517,32,1.865,33,1.865,34,1.517,35,2.77,36,2.77,41,3.305,42,2.565,43,2.471,44,1.865,45,1.865,47,2.77,48,2.769,90,2.75,355,3.046,356,2.75,376,2.75,377,2.75,378,2.75,379,3.323,380,3.323,381,3.323]],["title/injectables/PostsService.html",[54,1.162,355,1.557]],["body/injectables/PostsService.html",[3,0.419,4,0.37,5,0.37,7,0.471,8,1.606,11,0.037,12,1.001,14,1.606,15,1.211,16,0.588,17,0.712,20,0.419,21,0.084,22,1.549,24,1.143,26,0.023,27,0.023,54,1.461,55,1.549,69,1.957,70,1.957,71,1.255,72,1.461,74,1.606,77,1.26,78,1.04,92,2.819,94,1.97,96,2.014,101,2.439,104,2.283,105,1.97,106,1.97,111,2.858,112,2.283,113,3.208,116,2.439,119,2.283,130,3.2,139,3.2,166,1.04,329,3.208,331,3.709,336,1.549,345,3.709,352,1.97,355,1.957,366,2.283,382,2.283,383,2.759,384,2.759,385,3.877,386,2.759,387,2.759,388,2.283,389,2.759,390,2.283,391,2.759,392,2.759,393,2.759,394,2.283,395,2.283,396,3.208,397,2.759,398,2.759,399,2.759,400,2.759,401,3.877]],["title/controllers/UserController.html",[0,1.162,402,1.94]],["body/controllers/UserController.html",[0,0.613,2,0.613,3,0.247,4,0.218,5,0.218,7,0.278,8,1.079,10,1.227,11,0.036,12,0.841,14,1.542,15,0.508,16,0.659,17,0.42,20,0.247,21,0.05,22,0.914,23,1.162,24,1.963,26,0.022,27,0.015,62,1.162,69,1.644,70,2.056,71,1.261,72,1.636,73,1.162,74,1.542,77,1.189,78,2.022,92,3.074,96,1.349,111,0.822,116,1.024,137,1.024,141,1.879,158,2.657,159,2.657,166,1.785,169,2.813,232,1.189,233,2.657,235,1.639,257,1.86,263,2.659,281,1.347,292,2.089,294,3.279,324,2.98,327,2.156,336,1.462,348,1.347,353,2.156,354,3.08,357,1.347,358,2.156,359,2.156,360,1.347,368,1.347,372,2.156,373,2.156,374,2.695,402,1.639,403,1.347,404,2.605,405,3.257,406,2.605,407,1.628,408,1.628,409,1.628,410,4.236,411,1.628,412,1.628,413,2.605,414,1.628,415,2.605,416,1.628,417,2.605,418,2.605,419,2.695,420,1.628,421,3.257,422,1.628,423,1.628,424,1.628,425,1.628,426,3.257,427,1.628,428,1.628,429,3.257,430,1.628,431,1.628,432,1.347,433,1.347,434,1.347,435,3.257,436,2.605,437,1.628,438,1.628,439,1.347,440,1.628,441,2.605,442,1.628,443,1.628,444,1.628,445,1.628,446,3.257,447,3.257,448,1.628,449,3.257,450,1.628,451,1.628,452,1.628,453,1.628,454,1.347,455,1.628,456,1.628,457,1.628,458,1.628,459,1.628,460,1.628,461,1.628,462,2.156,463,1.628,464,1.347,465,1.628,466,1.628,467,1.628,468,1.628]],["title/modules/UserModule.html",[28,1.162,42,1.408]],["body/modules/UserModule.html",[2,1.684,3,0.516,4,0.456,5,0.456,11,0.036,16,0.805,17,0.878,20,0.516,21,0.103,26,0.026,27,0.026,28,1.881,30,1.553,31,1.553,32,1.909,33,1.909,34,1.553,35,2.802,36,2.802,40,2.256,42,2.631,43,2.508,44,1.909,45,1.909,48,2.139,88,2.811,96,2.508,402,3.14,434,2.814,469,2.814,470,2.814,471,2.814,472,3.4,473,3.4,474,3.4]],["title/injectables/UserService.html",[54,1.162,96,1.278]],["body/injectables/UserService.html",[3,0.341,4,0.301,5,0.301,7,0.383,8,1.383,11,0.037,12,1.029,14,1.383,16,0.605,17,0.579,20,0.341,21,0.068,24,1.383,26,0.02,27,0.02,54,1.258,55,1.26,63,1.857,69,2.013,70,2.013,71,1.322,72,1.502,75,2.339,77,2.568,78,1.502,88,1.412,92,3.112,94,2.383,96,1.383,101,2.777,103,1.857,105,1.602,106,1.602,107,1.857,108,1.857,109,1.857,111,1.133,116,2.508,169,2.478,266,3.653,267,3.653,292,1.874,294,2.1,336,1.26,352,1.602,371,1.857,388,1.857,390,1.857,394,1.857,395,1.857,396,1.857,410,3.653,419,2.763,432,1.857,433,1.857,454,2.763,462,3.299,464,3.299,475,1.857,476,3.986,477,2.244,478,2.244,479,2.244,480,2.244,481,2.244,482,2.244,483,2.244,484,3.986,485,2.244,486,2.244,487,2.244,488,2.244,489,3.338,490,4.415,491,3.338,492,3.338,493,3.338,494,2.244,495,2.244,496,2.244,497,2.244]],["title/coverage.html",[498,2.989]],["body/coverage.html",[0,1.895,1,1.877,5,0.4,6,2.469,11,0.036,18,1.507,21,0.166,26,0.024,27,0.024,34,1.363,47,1.675,54,1.895,56,2.469,60,1.877,61,2.922,66,2.13,71,1.057,75,1.363,91,2.469,96,1.236,125,1.507,127,2.922,128,2.939,153,1.877,236,1.877,253,2.13,263,1.675,264,2.469,265,2.922,292,1.675,293,2.469,294,1.877,295,2.469,303,1.877,304,2.469,324,1.877,325,2.469,328,2.469,336,1.675,355,1.507,382,2.469,402,1.877,403,2.469,475,2.469,498,2.13,499,2.984,500,6.067,501,5.269,502,2.984,503,4.673,504,5.028,505,2.469,506,2.984,507,2.984,508,4.094,509,2.984,510,2.984,511,2.984]],["title/dependencies.html",[31,1.691,512,2.14]],["body/dependencies.html",[11,0.036,17,1.044,21,0.152,26,0.029,27,0.029,31,1.846,227,2.041,229,2.543,232,1.846,314,2.886,315,2.886,513,4.043,514,4.043,515,5.412,516,4.043,517,4.043,518,4.043,519,4.043,520,4.043,521,4.043,522,4.043,523,4.043,524,4.043,525,4.043,526,4.043,527,4.043]],["title/miscellaneous/enumerations.html",[528,1.306,529,3.064]],["body/miscellaneous/enumerations.html",[7,0.671,11,0.036,26,0.029,27,0.029,74,2.033,164,3.502,169,2.754,170,3.502,171,3.502,176,3.502,204,3.502,205,3.502,206,3.502,207,3.502,235,3.788,528,1.986,529,3.255,530,4.906,531,3.934]],["title/miscellaneous/functions.html",[528,1.306,532,3.064]],["body/miscellaneous/functions.html",[7,0.791,11,0.032,26,0.032,27,0.032,34,2.622,505,3.841,528,2.343,532,3.841,533,4.641]],["title/index.html",[7,0.441,534,2.586,535,2.586]],["body/index.html",[4,0.426,11,0.036,26,0.025,27,0.025,141,2.437,166,1.198,210,2,498,2.269,536,3.179,537,3.179,538,4.273,539,3.179,540,3.179,541,3.179,542,3.179,543,3.179,544,3.179,545,4.827,546,3.179,547,3.179,548,3.179,549,3.179,550,5.666,551,3.179,552,3.179,553,3.179,554,5.546,555,3.179,556,3.179,557,4.273,558,3.179,559,3.179,560,3.179,561,3.179,562,4.273,563,4.273,564,3.179,565,3.179,566,3.179,567,4.273,568,4.273,569,3.179,570,3.179,571,3.179,572,3.179,573,3.179,574,2.63,575,3.179,576,3.179,577,3.179,578,3.179,579,3.179,580,3.179,581,3.179,582,3.179,583,3.179,584,3.179,585,3.179,586,3.179,587,3.179,588,3.179,589,3.179,590,3.179,591,2.63]],["title/modules.html",[30,1.912]],["body/modules.html",[11,0.031,26,0.031,27,0.031,29,2.732,30,1.983,40,2.193,41,2.438,42,1.983,574,4.793,592,5.791,593,5.791,594,5.791]],["title/overview.html",[595,3.464]],["body/overview.html",[2,1.185,11,0.035,18,2.424,26,0.025,27,0.025,28,1.185,29,3.702,30,1.436,31,1.436,32,1.765,33,1.765,34,1.436,35,1.765,36,1.765,37,2.602,38,2.602,39,2.602,40,2.791,41,3.225,42,2.58,43,2.381,44,1.765,45,1.765,55,1.765,75,2.58,84,2.602,85,2.602,86,2.602,96,2.341,126,1.436,355,2.853,376,2.602,377,2.602,378,2.602,469,2.602,470,2.602,471,2.602,595,2.602,596,4.8,597,3.145]],["title/properties.html",[129,1.691,512,2.14]],["body/properties.html",[11,0.036,26,0.032,27,0.032,129,2.086,166,1.721,210,2.874,439,3.781,591,3.781,598,4.569,599,4.569]],["title/miscellaneous/typealiases.html",[528,1.306,600,3.703]],["body/miscellaneous/typealiases.html",[7,0.783,11,0.032,26,0.032,27,0.032,61,3.279,66,3.847,71,1.391,101,2.889,528,2.319,601,4.593,602,4.593]],["title/routes.html",[603,3.464]],["body/routes.html",[11,0.033,26,0.033,27,0.033,603,3.988]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"routes.html":{}}}],["0",{"_index":500,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":598,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":522,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":521,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":503,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":507,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":501,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":508,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":504,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":509,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["01t12:00:00z",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["1",{"_index":419,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["1.1.26",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":447,"title":{},"body":{"controllers/UserController.html":{}}}],["10.0.0",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":416,"title":{},"body":{"controllers/UserController.html":{}}}],["123",{"_index":297,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["1234",{"_index":452,"title":{},"body":{"controllers/UserController.html":{}}}],["2",{"_index":454,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["2.0.6",{"_index":517,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":413,"title":{},"body":{"controllers/UserController.html":{}}}],["2022",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["4",{"_index":596,"title":{},"body":{"overview.html":{}}}],["6",{"_index":597,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":520,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["actual",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{}}}],["additional",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["adds",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["alias",{"_index":502,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":601,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["amazing",{"_index":575,"title":{},"body":{"index.html":{}}}],["api",{"_index":418,"title":{},"body":{"controllers/UserController.html":{}}}],["apioperation",{"_index":358,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isnotempty",{"_index":261,"title":{},"body":{"classes/CreatePostDtoWithMeta.html":{}}}],["apiproperty()@isstring()@minlength(4)@isnotempty",{"_index":259,"title":{},"body":{"classes/CreatePostDtoWithMeta.html":{}}}],["apiproperty({description",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apiquery",{"_index":435,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":359,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["apiresponse({status",{"_index":342,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags",{"_index":436,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":438,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":552,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":544,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["auth",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["auth.controller",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":60,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":390,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["authentication",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"index.html":{},"properties.html":{}}}],["authservice",{"_index":75,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["backers",{"_index":576,"title":{},"body":{"index.html":{}}}],["blog",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["body",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":594,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":592,"title":{},"body":{"modules.html":{}}}],["building",{"_index":539,"title":{},"body":{"index.html":{}}}],["cases",{"_index":448,"title":{},"body":{"controllers/UserController.html":{}}}],["cause",{"_index":398,"title":{},"body":{"injectables/PostsService.html":{}}}],["character",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{}}}],["check",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["checks",{"_index":389,"title":{},"body":{"injectables/PostsService.html":{}}}],["class",{"_index":21,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":376,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":378,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":379,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":377,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":469,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":470,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":471,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["compodoc/compodoc",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["composed",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["console.log",{"_index":371,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["console.log(`find",{"_index":494,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`getting",{"_index":366,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["console.log(`limit",{"_index":461,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(`logging",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`user",{"_index":486,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(createuserdto",{"_index":466,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(getuserparamdto",{"_index":460,"title":{},"body":{"controllers/UserController.html":{}}}],["const",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":477,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["constructor(userservice",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(userservices",{"_index":383,"title":{},"body":{"injectables/PostsService.html":{}}}],["content",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"injectables/PostsService.html":{}}}],["context",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":361,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":437,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convert",{"_index":445,"title":{},"body":{"controllers/UserController.html":{}}}],["correct",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["coverage",{"_index":498,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":311,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["created",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":370,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":125,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostdtowithmeta",{"_index":153,"title":{"classes/CreatePostDtoWithMeta.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"coverage.html":{}}}],["createpostdto})@patch",{"_index":349,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto})@post",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{}}}],["creates",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{}}}],["createuserdto",{"_index":263,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["createuserdto})@apiquery({name",{"_index":414,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers",{"_index":404,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(@body",{"_index":465,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(createuserdto",{"_index":407,"title":{},"body":{"controllers/UserController.html":{}}}],["database",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["date",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"controllers/UserController.html":{}}}],["defaultvaluepipe",{"_index":430,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":459,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(10",{"_index":457,"title":{},"body":{"controllers/UserController.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":424,"title":{},"body":{"controllers/UserController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["description",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":553,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["doe",{"_index":490,"title":{},"body":{"injectables/UserService.html":{}}}],["draft",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":357,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["dtos/get",{"_index":432,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/patch",{"_index":360,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["dummypost",{"_index":401,"title":{},"body":{"injectables/PostsService.html":{}}}],["dummyuserdata",{"_index":495,"title":{},"body":{"injectables/UserService.html":{}}}],["dummyuserdata.find((user",{"_index":496,"title":{},"body":{"injectables/UserService.html":{}}}],["e2e",{"_index":564,"title":{},"body":{"index.html":{}}}],["each",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["efficient",{"_index":540,"title":{},"body":{"index.html":{}}}],["eight",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["endpoint",{"_index":374,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["enum",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["enumerations",{"_index":529,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posts.enums",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["error",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["example",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UserController.html":{},"index.html":{}}}],["excerpt",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["exists",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["expected",{"_index":323,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":519,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":305,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"controllers/UserController.html":{}}}],["false})@isoptional()@isarray()@isstring({each",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featured",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["featuredimageurl",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["final",{"_index":442,"title":{},"body":{"controllers/UserController.html":{}}}],["find",{"_index":488,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":462,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(undefined",{"_index":479,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":476,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(undefined",{"_index":481,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["firstname",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["format",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["forwardref",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["found",{"_index":396,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":538,"title":{},"body":{"index.html":{}}}],["function",{"_index":506,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":532,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":455,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":411,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':userid",{"_index":364,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallposts(@param('userid",{"_index":365,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts(undefined",{"_index":386,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(userid",{"_index":341,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gets",{"_index":391,"title":{},"body":{"injectables/PostsService.html":{}}}],["getting",{"_index":534,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":421,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers",{"_index":405,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":409,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersparamdto",{"_index":292,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["grow",{"_index":571,"title":{},"body":{"index.html":{}}}],["headers",{"_index":427,"title":{},"body":{"controllers/UserController.html":{}}}],["hello",{"_index":58,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["here",{"_index":582,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":388,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["httpexception('user",{"_index":395,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["https://example.com/image.jpg",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["https://nestjs.com",{"_index":588,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["httpstatus",{"_index":352,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.created",{"_index":369,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.forbidden",{"_index":487,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":397,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpstatus.ok",{"_index":363,"title":{},"body":{"controllers/PostsController.html":{}}}],["hyphens",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["id",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"coverage.html":{}}}],["image",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":54,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":55,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["installation",{"_index":549,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":551,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":467,"title":{},"body":{"controllers/UserController.html":{}}}],["integer",{"_index":446,"title":{},"body":{"controllers/UserController.html":{}}}],["ip",{"_index":428,"title":{},"body":{"controllers/UserController.html":{}}}],["isarray",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["isauth",{"_index":484,"title":{},"body":{"injectables/UserService.html":{}}}],["isauthenticated",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["isemail",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["isenum(['post",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["isenum(poststatus",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["isenum(posttypes",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["isint",{"_index":300,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["isiso8601",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["isjson",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["isnotempty",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnumber",{"_index":313,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["item",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["items",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["jane",{"_index":492,"title":{},"body":{"injectables/UserService.html":{}}}],["jane@doe.com",{"_index":493,"title":{},"body":{"injectables/UserService.html":{}}}],["john",{"_index":489,"title":{},"body":{"injectables/UserService.html":{}}}],["john@doe.com",{"_index":491,"title":{},"body":{"injectables/UserService.html":{}}}],["join",{"_index":578,"title":{},"body":{"index.html":{}}}],["json",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["kamil",{"_index":585,"title":{},"body":{"index.html":{}}}],["key",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["lastname",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["layout",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["letter",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":591,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":568,"title":{},"body":{"index.html":{}}}],["likes",{"_index":322,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["limit",{"_index":410,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["literal",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["logic",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginbody",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginbody",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lowercase",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["main",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["make",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["matches",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"routes.html":{}}}],["maxlength",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["metadata",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["minimum",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["minlength(8",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":528,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":567,"title":{},"body":{"index.html":{}}}],["mode",{"_index":557,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":581,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":586,"title":{},"body":{"index.html":{}}}],["name",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["need",{"_index":440,"title":{},"body":{"controllers/UserController.html":{}}}],["nest",{"_index":545,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":590,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":516,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":314,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":518,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["node.js",{"_index":537,"title":{},"body":{"index.html":{}}}],["number",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number'})@isnumber()@isnotempty",{"_index":308,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["number})@isoptional()@isint()@type(undefined",{"_index":298,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["object",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["one",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UserController.html":{}}}],["open",{"_index":569,"title":{},"body":{"index.html":{}}}],["option",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["optional",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["options",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":595,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":512,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":449,"title":{},"body":{"controllers/UserController.html":{}}}],["pagination'})@apiresponse({status",{"_index":412,"title":{},"body":{"controllers/UserController.html":{}}}],["param",{"_index":353,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["param.dto",{"_index":433,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param.dto.ts",{"_index":295,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:16",{"_index":299,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parama",{"_index":444,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parseintpipe",{"_index":429,"title":{},"body":{"controllers/UserController.html":{}}}],["partialtype",{"_index":310,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":306,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":326,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":354,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["patchpostdto",{"_index":303,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":406,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(@body",{"_index":468,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(patchuserdto",{"_index":422,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuserdto",{"_index":324,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["person",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["please",{"_index":579,"title":{},"body":{"index.html":{}}}],["position",{"_index":417,"title":{},"body":{"controllers/UserController.html":{}}}],["possible",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["post",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('login",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.dto",{"_index":312,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:107",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:118",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:15",{"_index":309,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:156",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:164",{"_index":260,"title":{},"body":{"classes/CreatePostDtoWithMeta.html":{}}}],["post.dto.ts:168",{"_index":262,"title":{},"body":{"classes/CreatePostDtoWithMeta.html":{}}}],["post.dto.ts:30",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:42",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:55",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:66",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:75",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:87",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:97",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.controller",{"_index":381,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":356,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.controller",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":47,"title":{"controllers/PostsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":362,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":41,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":355,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["posttypes",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["private",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":559,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":536,"title":{},"body":{"index.html":{}}}],["project",{"_index":570,"title":{},"body":{"index.html":{}}}],["properties",{"_index":129,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["provided",{"_index":302,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["published",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["put",{"_index":425,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":426,"title":{},"body":{"controllers/UserController.html":{}}}],["query('limit",{"_index":456,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":458,"title":{},"body":{"controllers/UserController.html":{}}}],["r\\n",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["range",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["read",{"_index":580,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["reflect",{"_index":523,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":399,"title":{},"body":{"injectables/PostsService.html":{}}}],["replace",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":548,"title":{},"body":{"index.html":{}}}],["request",{"_index":373,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["required",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"routes.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returned",{"_index":415,"title":{},"body":{"controllers/UserController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["review",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"miscellaneous/enumerations.html":{}}}],["routes",{"_index":603,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":554,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":541,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["sent",{"_index":372,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["serialize",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["series",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":542,"title":{},"body":{"index.html":{}}}],["service",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["shows",{"_index":318,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["side",{"_index":543,"title":{},"body":{"index.html":{}}}],["sidebar",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["sidebarenabled",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["slug",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["special",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":296,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["sponsors",{"_index":573,"title":{},"body":{"index.html":{}}}],["src/.../auth.controller.ts",{"_index":602,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":533,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posts.enums.ts",{"_index":530,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":56,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":57,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":474,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":483,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:31",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:5",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":505,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":304,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/posts.enums.ts",{"_index":531,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:25",{"_index":344,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:40",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:55",{"_index":350,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":380,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":382,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:5",{"_index":384,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:9",{"_index":387,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/user/dtos/create",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/get",{"_index":293,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/user/dtos/patch",{"_index":325,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":403,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:63",{"_index":420,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:81",{"_index":408,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:87",{"_index":423,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/user/user.module.ts",{"_index":472,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/user/user.service.ts",{"_index":475,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:12",{"_index":478,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:18",{"_index":480,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:46",{"_index":482,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":555,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":558,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":560,"title":{},"body":{"index.html":{}}}],["started",{"_index":535,"title":{"index.html":{}},"body":{}}],["starter",{"_index":547,"title":{},"body":{"index.html":{}}}],["statements",{"_index":499,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["stay",{"_index":583,"title":{},"body":{"index.html":{}}}],["still",{"_index":320,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["story",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["string'})@isiso8601()@isnotempty",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isjson",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isurl",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isenum(posttypes)@isnotempty",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@isenum(poststatus",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@matches(/^[a",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isoptional",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@minlength(4)@isnotempty",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["summary",{"_index":368,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":574,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":593,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":317,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["system",{"_index":400,"title":{},"body":{"injectables/PostsService.html":{}}}],["table",{"_index":511,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":510,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["test",{"_index":563,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":566,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":565,"title":{},"body":{"index.html":{}}}],["tests",{"_index":562,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":572,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauthenticated",{"_index":485,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.login(loginbody",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.postservice.getallposts",{"_index":367,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.userservice.findall",{"_index":463,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyid",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservices.findonebyid",{"_index":393,"title":{},"body":{"injectables/PostsService.html":{}}}],["throw",{"_index":394,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["time",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["title",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"injectables/PostsService.html":{}}}],["token",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":584,"title":{},"body":{"index.html":{}}}],["transform",{"_index":301,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["transformer",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["true})@type(undefined",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":589,"title":{},"body":{"index.html":{}}}],["type",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":600,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":315,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":546,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["undefined})@get(':userid",{"_index":343,"title":{},"body":{"controllers/PostsController.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":561,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":599,"title":{},"body":{"properties.html":{}}}],["up",{"_index":319,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["update",{"_index":307,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updated",{"_index":348,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["updatepost",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":375,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(updatepostdto",{"_index":346,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepostdto",{"_index":351,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":347,"title":{},"body":{"controllers/PostsController.html":{}}}],["url",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["use",{"_index":441,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user's",{"_index":392,"title":{},"body":{"injectables/PostsService.html":{}}}],["user.controller",{"_index":473,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":327,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{}}}],["user.dto.ts",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.firstname",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["user.id",{"_index":497,"title":{},"body":{"injectables/UserService.html":{}}}],["user.service",{"_index":434,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":402,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":345,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["usermodule",{"_index":42,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userparamsdto",{"_index":464,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users",{"_index":294,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["users/1223",{"_index":450,"title":{},"body":{"controllers/UserController.html":{}}}],["users/id?limit=10&page=1",{"_index":443,"title":{},"body":{"controllers/UserController.html":{}}}],["users?limit=10&page=2",{"_index":453,"title":{},"body":{"controllers/UserController.html":{}}}],["userservice",{"_index":96,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservices",{"_index":385,"title":{},"body":{"injectables/PostsService.html":{}}}],["using",{"_index":316,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["validate",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["validatenested",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["validationpipe",{"_index":431,"title":{},"body":{"controllers/UserController.html":{}}}],["validator",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{}}}],["version",{"_index":439,"title":{},"body":{"controllers/UserController.html":{},"properties.html":{}}}],["want",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{},"controllers/UserController.html":{}}}],["watch",{"_index":556,"title":{},"body":{"index.html":{}}}],["website",{"_index":587,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["whos",{"_index":451,"title":{},"body":{"controllers/UserController.html":{}}}],["works",{"_index":321,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["world",{"_index":59,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["yarn",{"_index":550,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":577,"title":{},"body":{"index.html":{}}}],["z0",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDtoWithMeta.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { PostsController } from './posts/posts.controller';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UserModule, PostsModule, AuthModule],\n  controllers: [AppController, PostsController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginBody: LoginBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginBody\n                                            \n                                                            LoginBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\ntype LoginBody = {\n  id: number;\n  username: string;\n  password: string;\n};\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  login(@Body() loginBody: LoginBody) {\n    return this.authService.login(loginBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from 'src/user/user.module';\n\n@Module({\n  imports: [forwardRef(() => UserModule)],\n  exports: [AuthService],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // injecting a service dependency\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n  ) {}\n\n  public login({\n    id,\n    username,\n    password,\n  }: {\n    id: number;\n    username: string;\n    password: string;\n  }) {\n    // check user exists in the database and if the password is correct\n    // login\n    // token\n\n    const user = this.userService.findOneById({ id });\n    console.log(`Logging in user ${user.firstName}`);\n\n    return user;\n  }\n\n  public isAuthenticated() {\n    return true; // replace with actual authentication logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CreatePostDtoWithMeta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the additional options for the post', example: undefined, type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostTypes, description: 'Possible tags for a post, range: ['post', 'page', 'story', 'series']', type: 'string'})@IsString()@IsEnum(PostTypes)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the date when the post was published', example: '2022-01-01T12:00:00Z', format: 'date-time', type: 'string'})@IsISO8601()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the excerpt of the post. Serialize your json content or else there will be an error', example: '{\n \"@context\": \"https://schema.org\", \n \"@type\": \"Person\"\n}', format: 'json', type: 'string'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']', type: 'string'})@IsString()@IsNotEmpty()@IsEnum(PostStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the author of the post', example: undefined, type: 'array', required: false})@IsOptional()@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is a title of the post', example: 'Hello World', type: 'string'})@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is a title of the post',\n    example: 'Hello World',\n    type: 'string',\n\n    // default: \"Hello World\"\n  }) // this adds the value to the post documentation\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostTypes,\n    description:\n      \"Possible tags for a post, range: ['post', 'page', 'story', 'series']\",\n    type: 'string',\n  })\n  @IsString()\n  //   @IsEnum(['post', 'page', 'story', 'series'])\n  @IsEnum(PostTypes)\n  @IsNotEmpty()\n  postType: PostTypes;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description:\n      \"Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']\",\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'This is the excerpt of the post. Serialize your json content or else there will be an error',\n    example:\n      '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\", \\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}',\n    format: 'json',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'This is the date when the post was published',\n    example: '2022-01-01T12:00:00Z',\n    format: 'date-time',\n    type: 'string',\n  })\n  @IsISO8601()\n  @IsNotEmpty()\n  publishedOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'This is the author of the post',\n    example: ['author', 'blog'],\n    type: 'array',\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true }) // validate each item in the array as a string\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    description: 'This is the additional options for the post',\n    example: [\n      {\n        key: 'sidebar',\n        value: true,\n      },\n      {\n        key: 'layout',\n        value: 'default',\n      },\n    ],\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'the key can be any string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'any value that you want to make for the key',\n          example: true,\n        },\n      },\n      required: ['key', 'value'],\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostDtoWithMeta)\n  metaOptions: CreatePostDtoWithMeta[];\n}\n\nclass CreatePostDtoWithMeta {\n  @ApiProperty()\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  key: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDtoWithMeta.html":{"url":"classes/CreatePostDtoWithMeta.html","title":"class - CreatePostDtoWithMeta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDtoWithMeta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:164\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:168\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is a title of the post',\n    example: 'Hello World',\n    type: 'string',\n\n    // default: \"Hello World\"\n  }) // this adds the value to the post documentation\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostTypes,\n    description:\n      \"Possible tags for a post, range: ['post', 'page', 'story', 'series']\",\n    type: 'string',\n  })\n  @IsString()\n  //   @IsEnum(['post', 'page', 'story', 'series'])\n  @IsEnum(PostTypes)\n  @IsNotEmpty()\n  postType: PostTypes;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description:\n      \"Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']\",\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'This is the excerpt of the post. Serialize your json content or else there will be an error',\n    example:\n      '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\", \\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}',\n    format: 'json',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'This is the date when the post was published',\n    example: '2022-01-01T12:00:00Z',\n    format: 'date-time',\n    type: 'string',\n  })\n  @IsISO8601()\n  @IsNotEmpty()\n  publishedOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'This is the author of the post',\n    example: ['author', 'blog'],\n    type: 'array',\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true }) // validate each item in the array as a string\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    description: 'This is the additional options for the post',\n    example: [\n      {\n        key: 'sidebar',\n        value: true,\n      },\n      {\n        key: 'layout',\n        value: 'default',\n      },\n    ],\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'the key can be any string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'any value that you want to make for the key',\n          example: true,\n        },\n      },\n      required: ['key', 'value'],\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostDtoWithMeta)\n  metaOptions: CreatePostDtoWithMeta[];\n}\n\nclass CreatePostDtoWithMeta {\n  @ApiProperty()\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  key: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 123, type: Number})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/get-users-param.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 123,\n    type: Number,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number) // transform string to number if provided\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Update post with a specific id', example: 123, type: 'number'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n// import { PartialType } from '@nestjs/mapped-types'; \n// we are using the import from swagger so it shows up in our documentation, it still works likes expected as the import from @nestjs/mapped-types\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'Update post with a specific id',\n    example: 123,\n    type: 'number',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                getAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post'})@ApiResponse({status: undefined, description: 'Created post', type: CreatePostDto})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: undefined, description: 'All posts', type: undefined})@Get(':userId')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(updatePostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates a post'})@ApiResponse({status: undefined, description: 'Updated post', type: CreatePostDto})@Patch('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postService: PostsService) {}\n\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'All posts',\n    type: [CreatePostDto],\n  })\n  @Get(':userId')\n  getAllPosts(@Param('userId') userId: number) {\n    console.log(`Getting posts for user ${userId}`);\n\n    return this.postService.getAllPosts({ userId });\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new post',\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Created post',\n    type: CreatePostDto,\n  })\n  @Post('')\n  createPost(@Body() createPostDto: CreatePostDto) {\n    console.log({ createPostDto });\n\n    return 'You sent a post request to posts endpoint';\n  }\n\n  @ApiOperation({\n    summary: 'Updates a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Updated post',\n    type: CreatePostDto,\n  })\n  @Patch('')\n  updatePost(@Body() updatePostDto: PatchPostDto) {\n    console.log({ updatePostDto });\n\n    return 'You sent a patch request to posts endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { UserModule } from 'src/user/user.module';\n\n@Module({\n  imports: [UserModule],\n  controllers: [PostsController],\n  providers: [PostsService],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getAllPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userServices: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userServices\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { user: any; title: string; content: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\n\n@Injectable()\nexport class PostsService {\n  // injecting user service\n  constructor(private userServices: UserService) {}\n\n  public getAllPosts({ userId }: { userId: number }) {\n    // checks if a user exists and is authenticated\n    // gets the user's posts from a database\n    // and returns them\n\n    const user = this.userServices.findOneById({ id: userId });\n    console.log(`Getting posts for user ${user.firstName}`);\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND, {\n        cause: 'User not registered',\n        description: 'User was not found in the system database',\n      });\n    }\n\n    const dummyPost = {\n      user,\n      title: 'Post Title',\n      content: 'Post Content',\n    };\n\n    return dummyPost;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Get all users', description: 'Get all users with optional pagination'})@ApiResponse({status: 200, description: 'All users', type: CreateUserDto})@ApiQuery({name: 'limit', type: Number, required: false, description: 'Limit the number of returned results', example: 10})@ApiQuery({name: 'page', type: Number, required: false, description: 'The position of the number that you want the api to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users') // with the updated version of @nestjs/swagger there is no need to use @ApiTags\nexport class UserController {\n  /**\n   * Final Endpoint - /users/id?limit=10&page=1\n   * Parama id - optional, convert to integer, cannot have a default value\n   * Query limit - integer, default 10\n   * Query page - integer, default value 1\n   * ==> USE CASES\n   * /users/ -> return all users with default pagination\n   * /users/1223 -> returns one user whos id is 1234\n   * /users?limit=10&page=2 -> return page 2 with limit of pagination 10\n   */\n\n  constructor(private readonly userService: UserService) {}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Get all users',\n    description: 'Get all users with optional pagination',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'All users',\n    type: CreateUserDto,\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: Number,\n    required: false,\n    description: 'Limit the number of returned results',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    required: false,\n    description: 'The position of the number that you want the api to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    // console.log(getUserParamDto);\n    // console.log(`Limit: ${limit}, Page: ${page}`);\n\n    const findAll = this.userService.findAll({\n      page,\n      limit,\n      userParamsDTO: getUserParamDto,\n    });\n\n    return findAll;\n  }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    console.log(createUserDto instanceof CreateUserDto);\n    return 'You sent a post request to users endpoint';\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n    // return 'You sent a patch request to users endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [forwardRef(() => AuthModule)],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/auth.service';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    // injecting auth service dependency\n    @Inject(forwardRef(() => AuthService))\n    private authService: AuthService,\n  ) {}\n  public findAll({\n    userParamsDTO,\n    limit,\n    page,\n  }: {\n    userParamsDTO: GetUsersParamDto;\n    limit: number;\n    page: number;\n  }) {\n    const { id } = userParamsDTO;\n\n    const isAuth = this.authService.isAuthenticated();\n    console.log(`User authenticated: ${isAuth}`);\n\n    if (!isAuth) {\n      throw new HttpException('User not found', HttpStatus.FORBIDDEN);\n    }\n\n    console.log(\n      `Find all users with id: ${id}, limit: ${limit}, page: ${page}`,\n    );\n\n    return [\n      { id: 1, firstName: 'John Doe', email: 'john@doe.com' },\n      { id: 2, firstName: 'Jane Doe', email: 'jane@doe.com' },\n    ];\n  }\n\n  public findOneById({ id }: { id: number }) {\n    console.log(`Find user with id: ${id}`);\n\n    const dummyUserData = [\n      { id: 1, firstName: 'John Doe', email: 'john@doe.com' },\n      { id: 2, firstName: 'Jane Doe', email: 'jane@doe.com' },\n    ];\n\n    return dummyUserData.find((user) => user.id === id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/auth.controller.ts\n            \n            type alias\n            LoginBody\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDtoWithMeta\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../posts.enums.ts)\n                        \n                        \n                            PostTypes   (src/.../posts.enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/posts.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PostTypes\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LoginBody   (src/.../auth.controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.controller.ts\n    \n    \n        \n            \n                \n                    \n                    LoginBody\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
