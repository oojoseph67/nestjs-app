var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.05,1,2.261]],["body/controllers/AppController.html",[0,1.731,1,3.728,2,1.513,3,0.424,4,0.378,5,0.378,6,3.863,7,0.522,8,1.853,9,5.329,10,1.234,11,0.026,12,0.802,13,4.575,14,1.621,15,1.731,16,0.52,17,1.001,18,3.351,19,3.863,20,0.424,21,0.053,22,2.532,23,3.394,24,1.621,25,4.575,26,0.021,27,0.021]],["title/modules/AppModule.html",[28,1.05,29,2.261]],["body/modules/AppModule.html",[0,0.789,1,2.986,2,1.248,3,0.237,4,0.211,5,0.409,11,0.027,16,0.601,17,0.559,18,3.064,19,2.157,20,0.237,21,0.03,26,0.014,27,0.014,28,1.635,29,4.314,30,1.118,31,1.04,32,1.302,33,1.302,34,1.118,35,2.288,36,1.302,37,2.157,38,2.157,39,2.157,40,3.064,41,3.346,42,3.346,43,3.064,44,2.823,45,1.924,46,1.302,47,1.302,48,1.895,49,2.712,50,2.712,51,2.712,52,2.744,53,2.554,54,2.554,55,2.554,56,2.554,57,2.554,58,1.543,59,1.04,60,1.78,61,2.28,62,2.157,63,2.554,64,2.554,65,2.554,66,3.187,67,4.186,68,1.699,69,3.774,70,2.554,71,3.774,72,2.554,73,3.774,74,2.554,75,1.04,76,3.33,77,1.895,78,2.554,79,2.554,80,2.484,81,2.554,82,2.554,83,3.774,84,3.774,85,3.187,86,2.511,87,2.554,88,3.774,89,2.554,90,3.774,91,2.554,92,2.554,93,2.554,94,2.554,95,2.157,96,2.554,97,2.157,98,2.157,99,2.554,100,1.04,101,2.554,102,2.554,103,2.157,104,2.8,105,2.554,106,0.414,107,2.554,108,2.554,109,2.554,110,3.774,111,2.554,112,2.554,113,1.895,114,2.554,115,1.543,116,2.554,117,1.895,118,2.554,119,1.413,120,2.554,121,2.554,122,2.554,123,1.302,124,2.157,125,2.554,126,2.8,127,2.554,128,1.205,129,0.905,130,1.895,131,2.554,132,2.554,133,2.554,134,1.895]],["title/injectables/AppService.html",[18,1.88,135,1.124]],["body/injectables/AppService.html",[3,0.441,4,0.392,5,0.392,7,0.542,8,1.897,9,5.398,11,0.026,12,0.833,14,1.684,15,1.772,16,0.441,17,1.04,18,3.173,20,0.441,21,0.055,24,1.684,26,0.022,27,0.022,135,1.897,136,2.423,137,4.013,138,4.753,139,4.013,140,4.013]],["title/controllers/AuthController.html",[0,1.05,141,2.261]],["body/controllers/AuthController.html",[0,1.307,2,1.399,3,0.392,4,0.349,5,0.349,7,0.483,8,1.765,10,1.141,11,0.027,12,0.741,14,1.499,15,1.649,16,0.495,17,0.926,20,0.392,21,0.049,22,2.341,24,1.499,26,0.02,27,0.02,106,0.864,113,3.139,115,2.556,141,3.55,142,3.139,143,2.556,144,4.23,145,4.506,146,4.23,147,4.794,148,5.336,149,4.23,150,1.723,151,1.499,152,1.065,153,2.556,154,1.065,155,2.98,156,3.572,157,1.221,158,1.141,159,4.23,160,4.23,161,4.23]],["title/modules/AuthModule.html",[28,1.05,40,1.88]],["body/modules/AuthModule.html",[2,1.721,3,0.377,4,0.336,5,0.336,11,0.026,16,0.561,17,0.889,20,0.377,21,0.047,26,0.02,27,0.02,28,1.773,30,1.779,31,1.656,32,2.072,33,2.072,34,1.779,35,2.925,36,2.925,40,3.598,44,2.652,45,2.652,46,2.072,47,2.072,52,2.249,141,3.817,155,3.459,156,3.432,162,3.432,163,3.432,164,3.432,165,4.064,166,3.461,167,4.064,168,3.432,169,2.879,170,3.143,171,2.704]],["title/injectables/AuthService.html",[135,1.124,155,1.732]],["body/injectables/AuthService.html",[3,0.323,4,0.288,5,0.288,7,0.398,8,1.556,11,0.027,12,0.933,14,1.666,15,1.645,16,0.436,17,0.763,20,0.323,21,0.041,24,1.885,26,0.018,27,0.018,75,1.42,80,1.929,104,2.586,106,0.923,113,3.489,115,3.216,117,2.586,135,1.556,136,1.777,145,5.023,150,1.916,151,1.666,152,1.184,155,2.397,157,1.537,158,0.94,166,2.319,169,2.602,170,2.106,171,2.319,172,2.944,173,3.391,174,5.696,175,2.842,176,3.486,177,2.955,178,3.486,179,3.486,180,3.486,181,3.486,182,2.602,183,3.486,184,2.944,185,2.319,186,2.106,187,2.944,188,2.106,189,2.944,190,2.163,191,2.586,192,3.486,193,3.486,194,3.486,195,3.486,196,3.486,197,3.486,198,3.486,199,3.486,200,3.486]],["title/classes/CreateMetaOptionsDto.html",[21,0.04,201,1.88]],["body/classes/CreateMetaOptionsDto.html",[3,0.408,4,0.363,5,0.363,7,0.502,10,1.186,11,0.027,12,0.77,15,1.838,16,0.408,20,0.408,21,0.064,26,0.021,27,0.021,60,2.578,106,0.712,201,3.025,202,2.074,203,2.393,204,4.055,205,3.712,206,1.936,207,4.413,208,4.396,209,4.396,210,4.055,211,3.76,212,2.241,213,3.637,214,2.925,215,3.712,216,3.712,217,2.433]],["title/classes/CreatePostDto.html",[21,0.04,218,1.88]],["body/classes/CreatePostDto.html",[3,0.148,4,0.131,5,0.131,7,0.182,10,1.474,11,0.026,12,0.958,15,1.91,16,0.392,20,0.148,21,0.039,26,0.01,27,0.01,60,1.23,80,2.953,97,2.202,106,1.073,123,1.69,139,2.798,140,2.798,152,1.343,154,1.576,157,0.753,158,1.034,201,2.121,202,0.751,203,0.697,204,1.181,206,1.174,207,1.181,210,1.935,211,2.899,212,0.811,213,3.192,214,3.023,215,1.344,216,1.344,217,1.834,218,1.443,219,4.71,220,1.181,221,3.314,222,3.847,223,2.205,224,2.205,225,2.798,226,2.798,227,2.205,228,2.814,229,2.341,230,2.899,231,3.572,232,2.844,233,1.576,234,3.152,235,1.935,236,2.202,237,4.051,238,1.591,239,1.591,240,3.138,241,3.236,242,3.236,243,1.591,244,1.591,245,2.202,246,2.202,247,3.236,248,2.202,249,3.837,250,1.591,251,1.591,252,2.608,253,1.935,254,3.314,255,3.314,256,2.608,257,1.591,258,1.591,259,1.591,260,3.138,261,2.608,262,2.189,263,3.833,264,3.833,265,2.205,266,2.798,267,2.798,268,1.591,269,1.591,270,3.023,271,3.236,272,2.608,273,2.608,274,2.608,275,2.608,276,1.591,277,1.591,278,2.608,279,2.608,280,3.371,281,2.202,282,2.608,283,1.591,284,1.591,285,1.591,286,1.591,287,2.202,288,1.591,289,3.236,290,3.236,291,1.443,292,2.202,293,2.202,294,2.202,295,1.935,296,2.202,297,1.935,298,1.591,299,3.138,300,2.202,301,2.202,302,2.202,303,1.591,304,1.591,305,3.572,306,2.608,307,1.059,308,1.591,309,1.591,310,1.591,311,1.591,312,2.608,313,1.591,314,1.591,315,2.798,316,2.608,317,3.023,318,2.202,319,1.181,320,1.181,321,1.181,322,2.608,323,1.344,324,1.181,325,3.371,326,0.751,327,1.181,328,1.059,329,1.591,330,1.181,331,1.344,332,2.202,333,1.591,334,1.591,335,1.344,336,1.344,337,1.591,338,2.608,339,1.591,340,1.591,341,1.344,342,1.344,343,1.344,344,3.314,345,1.591,346,1.591,347,1.935]],["title/classes/CreateTagDto.html",[21,0.04,348,2.053]],["body/classes/CreateTagDto.html",[3,0.258,4,0.23,5,0.23,7,0.317,10,1.476,11,0.026,12,0.959,15,2.004,16,0.372,20,0.258,21,0.047,26,0.015,27,0.015,106,1.042,151,1.939,152,1.436,154,1.3,202,1.312,206,1.422,210,2.979,211,2.848,212,1.418,213,3.136,214,3.435,222,2.979,223,3.136,227,3.136,228,3.643,232,2.979,234,3.175,240,2.979,241,3.391,242,3.391,245,3.391,246,3.391,247,4.817,248,3.391,249,4.359,262,2.329,287,3.391,289,4.359,290,4.359,291,2.857,292,3.391,293,3.391,294,3.391,295,2.979,296,3.391,297,2.979,317,3.435,318,3.391,319,2.063,320,2.063,321,2.063,325,3.83,326,1.312,331,2.348,335,2.348,336,2.348,341,2.348,348,2.427,349,4.817,350,2.348,351,2.435,352,4.015,353,4.015,354,4.015,355,2.781,356,2.781,357,2.781,358,4.015,359,2.781,360,3.391,361,2.781,362,2.781,363,2.781,364,2.781,365,2.781,366,2.781,367,2.348,368,2.781]],["title/classes/CreateUserDto.html",[21,0.04,369,1.88]],["body/classes/CreateUserDto.html",[3,0.331,4,0.295,5,0.295,7,0.407,10,1.551,11,0.026,12,1.008,15,1.979,16,0.331,20,0.331,21,0.056,26,0.018,27,0.018,106,0.932,115,3.254,152,1.203,158,1.288,202,1.684,206,1.692,211,3.475,212,1.82,214,3.827,291,2.644,295,3.545,317,3.179,319,2.648,320,2.648,321,2.648,367,4.034,369,2.644,370,5.063,371,2.648,372,3.996,373,4.548,374,4.548,375,3.569,376,3.569,377,3.569,378,3.569,379,3.569,380,3.569,381,3.569,382,5.751,383,4.777,384,4.777,385,4.777,386,4.777,387,4.578,388,4.777,389,4.777,390,4.777,391,3.569,392,4.777,393,5.751,394,3.569,395,3.569]],["title/classes/GetUsersParamDto.html",[21,0.04,396,2.053]],["body/classes/GetUsersParamDto.html",[3,0.384,4,0.342,5,0.342,7,0.472,10,1.116,11,0.026,12,0.725,15,1.279,16,0.537,20,0.384,21,0.067,26,0.02,27,0.02,106,1.018,152,1.325,157,1.815,158,1.695,190,1.998,202,1.953,206,1.864,212,2.11,234,2.683,235,3.905,240,3.071,262,1.571,315,4.444,317,3.502,324,3.071,325,3.905,326,1.953,396,3.18,397,4.444,398,3.502,399,3.495,400,3.502,401,4.139,402,4.139,403,4.139,404,3.495]],["title/entities/MetaOption.html",[129,1.204,405,1.603]],["body/entities/MetaOption.html",[3,0.325,4,0.289,5,0.289,7,0.4,10,1.607,11,0.027,12,1.044,15,1.458,16,0.438,20,0.325,21,0.041,26,0.018,27,0.018,100,1.427,106,0.994,119,1.939,123,2.406,129,1.672,154,1.627,157,1.541,158,1.273,203,2.687,206,1.672,207,3.959,270,3.799,280,3.501,405,2.226,406,3.709,407,2.959,408,4.505,409,4.505,410,4.505,411,3.504,412,3.55,413,3.504,414,2.332,415,3.14,416,3.504,417,2.959,418,4.719,419,3.985,420,3.504,421,3.504,422,4.505,423,3.504,424,2.6,425,3.14,426,3.985,427,3.985,428,2.6,429,3.504,430,3.504,431,3.504,432,2.6]],["title/controllers/MetaOptionsController.html",[0,1.05,50,2.053]],["body/controllers/MetaOptionsController.html",[0,1.268,2,1.357,3,0.38,4,0.339,5,0.339,7,0.468,8,1.731,10,1.106,11,0.027,12,0.719,14,1.453,16,0.534,17,0.897,20,0.38,21,0.048,22,2.27,24,1.453,26,0.02,27,0.02,50,3.162,60,2.718,61,3.162,75,1.671,106,0.664,143,2.478,150,1.671,151,1.453,152,1.033,153,2.478,154,1.451,201,3.605,203,2.291,224,3.834,253,3.882,327,3.043,433,3.463,434,5.232,435,4.101,436,4.101,437,3.189,438,3.463,439,1.935,440,4.101,441,4.101,442,4.101]],["title/modules/MetaOptionsModule.html",[28,1.05,41,2.053]],["body/modules/MetaOptionsModule.html",[2,1.718,3,0.376,4,0.335,5,0.335,11,0.026,16,0.579,17,0.887,20,0.376,21,0.047,26,0.02,27,0.02,28,1.771,30,1.774,31,1.651,32,2.066,33,2.066,34,1.774,35,2.921,36,2.921,41,3.926,45,2.647,46,2.066,47,2.066,50,3.462,52,2.242,58,2.449,59,1.651,60,2.449,61,2.449,62,3.422,203,1.774,405,1.911,437,3.753,438,3.422,443,3.422,444,3.422,445,3.422,446,4.052,447,3.422,448,2.449,449,4.052]],["title/injectables/MetaOptionsService.html",[135,1.124,437,1.88]],["body/injectables/MetaOptionsService.html",[3,0.342,4,0.304,5,0.304,7,0.421,8,1.615,11,0.027,12,0.855,14,1.306,16,0.562,17,0.807,20,0.342,21,0.043,24,1.306,26,0.019,27,0.019,59,1.502,60,2.303,61,3.307,75,1.502,100,1.502,106,0.944,128,2.582,135,1.615,136,1.879,150,1.988,151,1.729,152,1.229,169,2.04,173,3.029,175,2.95,182,2.701,185,2.453,186,2.228,188,2.228,201,2.701,203,2.396,224,3.248,253,2.735,327,2.735,405,1.739,437,2.701,439,1.739,447,3.113,448,2.228,450,3.113,451,3.307,452,3.686,453,3.354,454,3.686,455,4.621,456,3.113,457,3.686,458,2.228,459,2.453,460,3.686,461,4.881,462,2.95,463,3.686,464,3.686]],["title/classes/PatchPostDto.html",[21,0.04,465,2.053]],["body/classes/PatchPostDto.html",[3,0.366,4,0.326,5,0.326,7,0.45,10,1.064,11,0.026,12,0.691,16,0.588,20,0.366,21,0.059,26,0.02,27,0.02,106,0.916,126,2.927,128,1.861,154,1.285,157,1.788,158,1.526,202,1.861,206,1.808,211,3.084,212,2.011,213,3.396,218,2.183,220,2.927,232,2.927,234,2.602,235,3.786,262,1.498,326,1.861,330,2.927,400,3.396,465,3.084,466,4.309,467,4.309,468,5.103,469,3.786,470,3.945,471,3.945,472,4.309,473,2.927,474,5.103,475,3.786,476,3.786,477,3.945,478,3.945,479,3.945,480,3.945,481,3.945,482,3.945,483,3.945]],["title/classes/PatchUserDto.html",[21,0.04,484,2.261]],["body/classes/PatchUserDto.html",[3,0.454,4,0.404,5,0.404,11,0.026,16,0.541,20,0.454,21,0.057,26,0.022,27,0.022,128,2.307,202,2.307,369,2.707,371,3.629,467,4.925,472,4.13,475,3.629,476,3.629,484,3.881,485,4.13,486,5.833,487,3.629]],["title/entities/Post.html",[129,1.204,154,0.856]],["body/entities/Post.html",[3,0.192,4,0.171,5,0.171,7,0.237,8,0.686,10,1.614,11,0.027,12,1.049,15,1.788,16,0.448,20,0.192,21,0.024,26,0.012,27,0.012,60,0.978,80,3.43,100,0.845,106,1.041,119,1.148,123,2.95,128,0.978,129,1.142,152,1.457,154,0.811,157,1.141,158,0.869,190,1.94,206,1.142,217,1.148,222,2.933,223,2.63,224,3.548,225,3.338,226,3.338,227,2.63,228,2.63,229,2.187,230,2.917,231,3.338,233,2.388,260,3.581,270,2.145,299,3.581,307,2.145,323,1.751,328,2.966,332,4.655,351,2.102,405,2.277,406,1.253,412,2.63,414,3.668,415,4.161,417,1.751,425,3.767,426,2.721,427,2.721,428,3.307,432,2.391,448,1.253,488,1.751,489,2.074,490,3.223,491,5.109,492,2.074,493,3.764,494,2.074,495,3.791,496,3.791,497,2.721,498,2.074,499,2.074,500,3.223,501,2.074,502,2.074,503,3.223,504,2.074,505,2.074,506,2.391,507,2.391,508,2.074,509,2.074,510,1.751,511,3.223,512,2.074,513,2.074,514,2.721,515,2.074,516,2.721,517,2.721,518,3.223,519,2.074,520,2.074,521,2.074,522,2.074,523,2.074,524,1.751,525,1.751,526,3.338,527,2.074,528,2.074,529,2.074,530,1.751,531,1.057,532,2.074,533,2.074,534,2.074,535,2.074,536,2.074,537,1.751,538,2.074,539,3.223,540,2.074,541,2.074,542,2.074,543,2.074]],["title/controllers/PostsController.html",[0,1.05,49,2.053]],["body/controllers/PostsController.html",[0,0.528,2,0.565,3,0.158,4,0.141,5,0.141,7,0.195,8,0.914,10,1.078,11,0.027,12,0.7,14,1.883,15,0.854,16,0.407,17,0.374,20,0.158,21,0.02,22,0.945,23,1.268,24,1.416,26,0.011,27,0.011,49,1.67,75,1.417,106,0.885,126,2.05,134,3.485,143,1.032,150,1.628,151,1.416,152,1.006,153,1.032,154,1.618,157,1.612,158,1.333,186,1.67,190,2.12,218,3.326,229,2.212,234,0.871,262,2.12,291,2.599,305,2.333,307,2.66,326,0.806,347,3.485,400,1.839,404,3.707,439,0.806,465,2.987,469,3.485,473,2.05,530,3.376,531,2.52,537,4.807,544,1.443,545,4,546,2.582,547,2.763,548,2.333,549,2.938,550,1.708,551,2.938,552,3.479,553,3.376,554,1.708,555,1.708,556,4.697,557,2.763,558,2.763,559,4.697,560,5.147,561,4.697,562,4.697,563,3.997,564,2.763,565,3.997,566,2.966,567,1.708,568,2.763,569,2.05,570,1.708,571,1.708,572,1.708,573,1.708,574,1.708,575,1.708,576,2.763,577,3.997,578,3.997,579,2.763,580,2.763,581,2.763,582,3.997,583,2.763,584,3.479,585,3.479,586,3.376,587,2.763,588,2.938,589,2.763,590,2.763,591,1.708,592,3.997,593,3.376,594,1.708,595,1.708,596,3.997,597,3.966,598,2.763,599,2.763,600,2.763,601,3.997,602,2.763,603,1.67,604,1.137,605,1.137,606,3.376,607,2.05,608,1.137,609,1.529,610,1.443,611,2.966,612,3.707,613,1.268,614,1.708,615,1.708,616,3.479,617,1.708,618,1.708,619,1.708,620,2.582,621,1.708,622,1.443,623,2.763,624,1.708,625,1.708,626,1.708,627,2.333,628,1.708,629,1.708,630,1.137,631,1.708,632,1.708,633,2.763,634,1.708]],["title/modules/PostsModule.html",[28,1.05,42,2.053]],["body/modules/PostsModule.html",[2,1.612,3,0.341,4,0.304,5,0.304,11,0.027,16,0.598,17,0.804,20,0.341,21,0.043,26,0.019,27,0.019,28,1.689,30,1.61,31,1.497,32,1.874,33,1.874,34,1.61,35,2.786,36,2.786,42,4.013,43,3.444,44,3.173,45,2.484,46,1.874,47,1.874,49,3.303,52,2.697,58,2.221,59,1.497,154,0.926,168,3.104,203,1.61,405,2.298,406,2.221,448,2.221,609,3.7,610,3.104,635,3.104,636,3.104,637,3.676,638,3.104,639,3.676,640,3.676,641,3.676,642,3.104,643,3.676,644,3.676]],["title/injectables/PostsService.html",[135,1.124,609,1.88]],["body/injectables/PostsService.html",[3,0.183,4,0.163,5,0.163,7,0.225,8,1.023,11,0.027,12,0.825,14,1.535,16,0.517,17,0.431,20,0.183,21,0.023,24,1.535,26,0.012,27,0.012,59,0.802,75,2.206,100,0.802,103,2.612,106,0.971,128,1.803,135,1.023,136,1.003,150,1.918,151,1.668,152,1.186,154,1.364,157,1.564,158,0.834,169,1.089,170,1.189,173,3.27,175,1.869,177,2.043,182,2.997,184,1.662,185,1.31,186,1.869,188,2.618,190,1.174,203,0.862,218,1.712,229,1.089,230,3.445,233,2.309,262,0.747,291,1.089,405,0.928,406,1.189,439,0.928,448,1.189,451,3.571,453,2.894,455,3.227,456,1.662,458,2.618,459,1.31,462,3.512,465,1.869,469,3.214,473,2.295,531,1.948,545,2.058,546,2.835,548,3.227,549,2.612,569,1.46,586,2.612,603,2.309,604,1.31,605,1.31,609,1.712,613,1.46,627,2.612,630,2.543,642,1.662,645,1.662,646,1.968,647,2.666,648,4.332,649,1.968,650,3.093,651,1.968,652,1.662,653,1.968,654,1.968,655,1.968,656,1.968,657,1.968,658,1.968,659,1.968,660,3.093,661,1.968,662,1.968,663,1.968,664,1.968,665,1.968,666,1.968,667,1.968,668,3.093,669,1.968,670,1.968,671,3.093,672,1.968,673,3.093,674,1.968,675,1.662,676,1.968,677,3.214,678,2.835,679,1.662,680,1.968,681,1.968,682,3.093,683,1.968,684,3.093,685,3.093,686,1.968,687,3.093,688,1.968,689,3.093,690,1.968,691,3.093,692,1.968,693,3.093,694,1.968,695,3.093,696,1.968,697,3.093,698,1.968,699,3.093,700,1.968,701,2.612,702,1.968,703,1.968,704,1.968,705,1.968,706,1.662,707,1.662]],["title/entities/Tag.html",[129,1.204,351,1.603]],["body/entities/Tag.html",[3,0.255,4,0.227,5,0.227,7,0.313,10,1.675,11,0.027,12,1.088,15,1.92,16,0.369,20,0.255,21,0.032,26,0.015,27,0.015,80,3.437,100,1.119,106,1.055,119,1.52,123,2.617,129,1.41,151,1.658,152,1.43,154,1.43,157,1.351,158,1.073,206,1.41,223,3.114,227,3.114,228,3.114,262,1.777,270,3.78,280,2.953,351,1.877,408,3.952,409,3.952,410,3.952,412,3.114,414,3.625,415,4.133,419,3.361,422,3.952,424,2.038,425,3.78,428,2.953,493,3.361,495,4.215,496,4.215,497,3.361,506,2.953,507,3.808,510,2.319,514,3.361,516,2.319,517,3.361,545,3.114,701,3.361,708,2.319,709,4.68,710,2.747,711,4.68,712,2.747,713,2.747,714,2.747,715,2.747,716,2.747,717,2.747,718,2.747,719,2.747,720,2.747]],["title/controllers/TagsController.html",[0,1.05,51,2.053]],["body/controllers/TagsController.html",[0,0.979,2,1.047,3,0.294,4,0.261,5,0.261,7,0.361,8,1.456,10,1.365,11,0.027,12,0.887,14,1.793,16,0.507,17,0.693,20,0.294,21,0.037,22,1.752,24,1.793,26,0.017,27,0.017,51,2.66,75,1.29,106,0.82,128,2.077,143,1.913,150,2.062,151,1.793,152,1.274,153,1.913,154,1.108,157,1.798,158,1.605,230,1.913,326,1.494,348,3.306,351,2.808,439,1.494,451,3.597,458,2.66,462,2.66,546,3.267,551,4.274,603,3.762,607,3.755,608,2.107,611,4.059,620,3.755,622,2.674,647,2.581,721,2.674,722,4.403,723,4.403,724,3.166,725,3.166,726,3.166,727,4.274,728,3.166,729,3.166,730,3.166,731,3.166,732,3.718,733,3.166,734,3.166,735,2.674,736,2.674,737,3.166,738,3.718,739,3.166,740,3.166,741,3.166,742,3.166,743,3.166,744,3.166]],["title/modules/TagsModule.html",[28,1.05,43,1.88]],["body/modules/TagsModule.html",[2,1.734,3,0.382,4,0.34,5,0.34,11,0.026,16,0.582,17,0.9,20,0.382,21,0.048,26,0.02,27,0.02,28,1.783,30,1.801,31,1.676,32,2.097,33,2.097,34,1.801,35,2.942,36,2.942,43,3.608,45,2.673,46,2.097,47,2.097,51,3.487,52,2.277,58,2.486,59,1.676,351,1.941,647,3.465,736,3.474,745,3.474,746,3.474,747,3.474,748,4.114,749,4.114,750,3.474,751,4.114]],["title/injectables/TagsService.html",[135,1.124,647,1.732]],["body/injectables/TagsService.html",[3,0.215,4,0.191,5,0.191,7,0.264,8,1.161,11,0.027,12,0.972,14,1.891,16,0.471,17,0.507,20,0.215,21,0.027,24,1.891,26,0.018,27,0.013,59,0.944,75,2.067,100,0.944,106,1.033,135,1.161,136,1.181,150,2.175,151,1.965,152,1.344,157,1.773,158,1.274,173,3.577,175,2.12,182,3.299,188,1.4,191,1.719,229,1.942,230,2.854,291,1.942,348,2.12,351,2.694,439,1.093,451,3.906,453,2.614,458,3.226,459,1.542,462,3.451,531,1.789,569,2.603,603,2.559,604,1.542,605,1.542,630,2.334,647,1.789,652,1.956,677,1.719,678,1.719,706,2.962,707,2.962,727,3.575,732,1.956,735,1.956,738,2.962,750,1.956,752,1.956,753,4.234,754,4.723,755,4.234,756,4.234,757,2.317,758,2.317,759,3.508,760,2.317,761,2.317,762,2.317,763,2.317,764,2.317,765,2.317,766,2.317,767,2.317,768,2.317,769,2.317,770,2.317,771,2.317,772,3.508,773,2.317,774,2.317,775,3.508,776,1.956,777,1.956,778,2.317,779,2.317,780,3.508,781,2.317,782,2.317,783,2.317,784,2.317]],["title/entities/User.html",[129,1.204,190,1.29]],["body/entities/User.html",[3,0.292,4,0.26,5,0.26,7,0.36,10,1.603,11,0.026,12,1.042,15,1.922,16,0.407,20,0.292,21,0.037,26,0.017,27,0.017,80,3.022,100,1.284,106,1.036,115,3.051,119,1.744,123,3.03,129,1.555,130,2.338,152,1.105,154,1.375,157,1.458,158,1.184,190,1.666,206,1.555,297,2.338,372,3.746,373,4.263,374,4.263,387,2.338,412,3.36,414,3.633,415,4.138,424,2.338,425,3.82,432,3.256,495,4.614,496,4.614,506,3.256,507,3.256,545,3.82,785,2.661,786,3.151,787,5.46,788,3.151,789,3.151,790,3.151,791,3.706,792,3.151,793,3.151,794,4.388,795,3.151,796,4.388,797,4.388,798,3.151,799,3.151,800,3.151]],["title/controllers/UserController.html",[0,1.05,801,2.261]],["body/controllers/UserController.html",[0,0.688,2,0.736,3,0.206,4,0.184,5,0.184,7,0.254,8,1.125,10,1.114,11,0.027,12,0.724,14,1.639,16,0.487,17,0.487,20,0.206,21,0.026,22,1.231,23,1.651,24,1.998,26,0.018,27,0.013,75,1.386,95,2.873,106,0.936,123,2.358,130,2.524,143,1.344,150,1.682,151,1.766,152,1.323,153,1.344,154,1.04,157,0.982,158,1.679,173,3.199,177,1.948,190,1.292,217,1.883,229,1.231,234,2.358,236,3.488,237,3.906,262,2.141,265,3.925,326,1.605,328,3.078,342,3.488,369,3.121,387,1.651,396,2.795,398,3.991,439,1.049,484,3.753,487,2.524,531,1.734,566,1.651,593,1.879,597,3.906,603,1.344,606,2.873,607,3.064,608,2.748,611,2.524,612,2.873,613,1.651,620,1.651,801,2.264,802,1.879,803,3.402,804,4.13,805,3.402,806,2.225,807,2.225,808,2.225,809,5.065,810,2.225,811,2.225,812,3.402,813,2.225,814,3.402,815,2.225,816,3.402,817,2.873,818,2.225,819,4.13,820,2.225,821,2.225,822,2.225,823,2.225,824,2.225,825,2.225,826,2.225,827,1.879,828,1.879,829,1.879,830,4.13,831,3.402,832,2.225,833,2.225,834,1.879,835,2.225,836,2.225,837,2.873,838,2.225,839,2.225,840,2.225,841,4.13,842,2.225,843,4.13,844,2.225,845,2.225,846,2.225,847,2.225,848,2.225,849,2.225,850,2.225,851,2.225,852,2.225,853,2.225,854,2.225,855,2.225,856,2.873,857,2.225,858,1.879,859,2.225,860,2.873,861,2.225,862,2.225,863,2.225]],["title/modules/UserModule.html",[28,1.05,44,1.732]],["body/modules/UserModule.html",[2,1.639,3,0.349,4,0.311,5,0.311,11,0.027,16,0.601,17,0.825,20,0.349,21,0.044,26,0.019,27,0.019,28,1.71,30,1.65,31,1.535,32,1.921,33,1.921,34,1.65,35,2.821,36,2.821,40,2.741,44,3.256,45,2.525,46,1.921,47,1.921,52,2.086,58,2.277,59,1.535,66,3.182,68,2.508,129,1.335,166,3.296,169,2.741,170,3.343,171,2.508,177,3.166,190,1.431,453,2.086,801,3.682,829,3.182,864,3.182,865,3.182,866,3.182,867,3.769,868,3.769,869,3.769,870,3.182,871,3.182,872,3.182,873,3.769,874,3.769]],["title/injectables/UserService.html",[135,1.124,177,1.603]],["body/injectables/UserService.html",[3,0.175,4,0.155,5,0.155,7,0.215,8,0.988,11,0.027,12,0.808,14,1.497,16,0.509,17,0.412,20,0.175,21,0.022,24,1.058,26,0.011,27,0.011,28,0.582,31,0.767,59,0.767,67,4.341,68,1.253,75,1.998,77,1.397,85,3.569,86,1.988,100,1.217,104,1.397,106,0.961,117,1.397,128,1.409,129,1.058,135,0.988,136,0.96,150,1.877,151,1.633,152,1.16,155,2.621,157,1.072,158,1.001,166,1.253,169,2.055,170,1.138,171,1.253,173,3.233,175,1.805,177,1.409,182,2.951,185,3.067,186,1.805,187,1.59,188,2.785,189,1.59,190,2.218,191,1.397,262,1.134,265,1.988,281,3.569,307,1.253,347,1.397,369,2.055,372,1.397,396,1.805,398,3.067,400,1.253,439,0.888,451,3.319,453,2.551,458,1.138,459,1.253,462,3.4,487,1.397,531,2.35,553,1.59,566,1.397,588,2.522,604,1.988,605,1.253,608,1.988,630,3.067,677,1.397,678,1.397,679,2.522,776,1.59,777,1.59,809,2.522,817,3.135,827,1.59,828,1.59,837,3.135,856,3.135,858,2.522,860,3.135,870,1.59,871,1.59,872,1.59,875,1.59,876,3.713,877,3.713,878,1.883,879,3.713,880,3.713,881,4.226,882,5.492,883,1.883,884,1.883,885,1.883,886,1.883,887,1.883,888,1.883,889,1.883,890,1.883,891,1.883,892,1.883,893,1.883,894,1.883,895,1.883,896,1.883,897,1.883,898,1.883,899,3.713,900,2.987,901,1.883,902,1.883,903,2.987,904,1.883,905,2.987,906,1.883,907,1.883,908,1.883,909,3.713,910,1.883,911,1.883,912,1.883,913,1.883,914,1.883,915,1.883,916,1.883,917,2.987,918,1.883,919,1.883,920,1.883,921,1.883,922,1.883,923,2.987,924,1.883,925,1.883,926,1.883,927,1.883,928,1.883,929,1.59,930,3.713,931,1.883,932,1.883,933,1.883,934,1.883,935,1.883,936,1.883,937,1.883,938,1.883,939,1.883,940,1.883,941,1.883,942,1.883,943,1.883,944,1.883,945,1.883,946,1.883,947,1.883,948,1.883,949,1.883]],["title/coverage.html",[950,3.429]],["body/coverage.html",[0,1.833,1,2.082,5,0.258,6,2.643,11,0.026,18,1.732,21,0.071,26,0.017,27,0.017,34,1.37,48,2.322,49,1.891,50,1.891,51,1.891,60,1.476,61,2.639,76,2.322,106,0.707,129,1.928,134,2.322,135,1.962,137,2.643,141,2.082,142,3.24,147,2.322,154,0.788,155,1.595,172,2.643,177,1.476,190,1.188,201,1.732,203,2.383,204,2.322,205,2.643,218,1.732,219,2.643,220,3.24,330,2.322,348,1.891,349,2.643,350,2.643,351,1.476,369,1.732,370,2.643,371,3.24,396,1.891,397,2.643,398,2.082,399,2.643,405,1.476,406,1.891,407,2.643,433,2.643,437,1.732,450,2.643,465,1.891,466,2.643,484,2.082,485,2.643,488,2.643,526,2.643,531,1.595,544,2.643,609,1.732,645,2.643,647,1.595,675,5.796,708,2.643,721,2.643,752,2.643,785,2.643,791,2.643,801,2.082,802,2.643,875,2.643,950,2.322,951,3.129,952,3.129,953,6.086,954,3.129,955,6.208,956,3.129,957,5.03,958,2.643,959,3.129,960,3.129,961,3.129,962,5.03,963,3.129,964,3.129,965,3.129]],["title/dependencies.html",[31,1.663,966,2.403]],["body/dependencies.html",[11,0.027,17,0.984,21,0.065,26,0.021,27,0.021,31,1.833,59,1.833,68,2.993,100,1.833,212,2.294,324,3.338,326,2.122,475,3.338,476,3.338,967,4.499,968,4.499,969,6.01,970,4.499,971,4.499,972,4.499,973,4.499,974,4.499,975,4.499,976,4.499,977,4.499,978,4.499,979,4.499,980,4.499,981,4.499,982,4.499,983,4.499,984,4.499,985,4.499,986,4.499,987,4.499,988,4.499]],["title/miscellaneous/enumerations.html",[989,1.342,990,3.447]],["body/miscellaneous/enumerations.html",[7,0.529,11,0.026,26,0.022,27,0.022,154,1.422,217,3.737,260,4.191,265,3.759,266,4.77,267,4.77,271,4.77,299,4.191,300,4.77,301,4.77,302,4.77,989,2.188,990,3.917,991,5.649,992,4.638]],["title/miscellaneous/functions.html",[989,1.342,993,3.447]],["body/miscellaneous/functions.html",[7,0.599,11,0.023,26,0.023,27,0.023,34,2.811,958,4.436,989,2.478,993,4.436,994,5.253]],["title/index.html",[7,0.325,995,2.845,996,2.845]],["body/index.html",[4,0.324,11,0.026,26,0.019,27,0.019,98,3.312,124,3.312,233,2.37,234,2.876,262,1.489,360,3.312,453,2.171,524,3.312,525,3.312,929,3.312,950,2.91,997,3.922,998,3.922,999,5.084,1000,3.922,1001,3.922,1002,3.922,1003,3.922,1004,3.922,1005,5.641,1006,3.922,1007,3.922,1008,6.448,1009,3.922,1010,3.922,1011,3.922,1012,6.335,1013,3.922,1014,5.084,1015,3.922,1016,3.922,1017,3.922,1018,5.084,1019,5.084,1020,3.922,1021,3.922,1022,3.922,1023,5.084,1024,5.084,1025,3.922,1026,3.922,1027,3.922,1028,3.922,1029,3.922,1030,3.312,1031,3.922,1032,3.922,1033,3.922,1034,3.922,1035,3.922,1036,3.922,1037,3.922,1038,3.922,1039,3.922,1040,3.922,1041,3.922,1042,3.922,1043,3.922,1044,3.922,1045,3.312]],["title/modules.html",[30,2.024]],["body/modules.html",[11,0.022,26,0.022,27,0.022,29,3.208,30,2.111,40,2.668,41,2.913,42,2.913,43,2.668,44,2.458,1030,5.632,1046,6.669,1047,6.669,1048,6.669]],["title/overview.html",[1049,3.903]],["body/overview.html",[2,1.13,11,0.026,18,2.914,26,0.018,27,0.018,28,1.055,29,4.452,30,1.495,31,1.391,32,1.741,33,1.741,34,1.495,35,1.741,36,1.741,37,2.884,38,2.884,39,2.884,40,3.371,41,3.681,42,3.927,43,3.448,44,3.177,45,2.364,46,1.741,47,1.741,119,1.89,136,1.741,155,3.177,162,2.884,163,2.884,164,2.884,177,2.939,202,1.611,343,2.884,437,3.448,443,2.884,444,2.884,445,2.884,609,3.448,635,2.884,636,2.884,638,2.884,647,3.177,745,2.884,746,2.884,747,2.884,864,2.884,865,2.884,866,2.884,1049,2.884,1050,5.266,1051,3.415]],["title/properties.html",[206,1.446,966,2.403]],["body/properties.html",[11,0.026,26,0.023,27,0.023,206,1.839,233,3.138,262,1.971,834,4.385,1045,4.385,1052,5.192,1053,5.192]],["title/miscellaneous/typealiases.html",[989,1.342,1054,4.082]],["body/miscellaneous/typealiases.html",[7,0.595,11,0.023,26,0.023,27,0.023,106,0.981,142,3.867,147,4.493,182,2.885,989,2.459,1055,5.212,1056,5.212]],["title/miscellaneous/variables.html",[86,2.716,989,1.342]],["body/miscellaneous/variables.html",[7,0.593,11,0.024,26,0.023,27,0.023,48,3.852,76,4.483,77,3.852,86,3.455,217,2.874,328,3.455,989,2.449,1057,5.192]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":675,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1052,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":978,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":985,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":977,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":955,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":960,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":957,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":964,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":962,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":963,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":342,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["1.1.26",{"_index":968,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":841,"title":{},"body":{"controllers/UserController.html":{}}}],["10.0.0",{"_index":969,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":497,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":815,"title":{},"body":{"controllers/UserController.html":{}}}],["123",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["1234",{"_index":846,"title":{},"body":{"controllers/UserController.html":{}}}],["16t12:00:00+0000",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.13.3",{"_index":980,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":848,"title":{},"body":{"controllers/UserController.html":{}}}],["2.0.6",{"_index":972,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":812,"title":{},"body":{"controllers/UserController.html":{}}}],["2024",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["255",{"_index":506,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["3.3.0",{"_index":970,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":961,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":343,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["512",{"_index":514,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6",{"_index":1050,"title":{},"body":{"overview.html":{}}}],["60",{"_index":791,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["7",{"_index":1051,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":975,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":982,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":787,"title":{},"body":{"entities/User.html":{}}}],["actual",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["additional",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{}}}],["adds",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alias",{"_index":956,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1055,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["already",{"_index":776,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["amazing",{"_index":1031,"title":{},"body":{"index.html":{}}}],["another",{"_index":662,"title":{},"body":{"injectables/PostsService.html":{}}}],["api",{"_index":817,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["apioperation",{"_index":611,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":551,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["apiproperty",{"_index":213,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({})@isjson()@isoptional",{"_index":363,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiquery",{"_index":830,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":612,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["apiresponse({status",{"_index":573,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags",{"_index":831,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":833,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":1010,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1004,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":797,"title":{},"body":{"entities/User.html":{}}}],["array",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["associated",{"_index":579,"title":{},"body":{"controllers/PostsController.html":{}}}],["async",{"_index":451,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":141,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":155,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":462,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":1032,"title":{},"body":{"index.html":{}}}],["being",{"_index":581,"title":{},"body":{"controllers/PostsController.html":{}}}],["bi",{"_index":430,"title":{},"body":{"entities/MetaOption.html":{}}}],["blog",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["body",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1048,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1046,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1000,"title":{},"body":{"index.html":{}}}],["calls",{"_index":583,"title":{},"body":{"controllers/PostsController.html":{}}}],["cascade",{"_index":428,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":420,"title":{},"body":{"entities/MetaOption.html":{}}}],["cases",{"_index":842,"title":{},"body":{"controllers/UserController.html":{}}}],["catch",{"_index":903,"title":{},"body":{"injectables/UserService.html":{}}}],["cause",{"_index":679,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["character",{"_index":390,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["check",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["circular",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["class",{"_index":21,"title":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":202,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":443,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_exports",{"_index":444,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":445,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":635,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":636,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":637,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":638,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":745,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":746,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":747,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":864,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":866,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":865,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":425,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":414,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["commit",{"_index":933,"title":{},"body":{"injectables/UserService.html":{}}}],["compodoc/compodoc",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["composed",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["config/database.config",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["config/index.config",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":872,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["configmodule",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":874,"title":{},"body":{"modules/UserModule.html":{}}}],["configmodule.forroot",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["configservice.get('database.port",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_host",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_name",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_password",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_port",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_username",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":881,"title":{},"body":{"injectables/UserService.html":{}}}],["configuration",{"_index":896,"title":{},"body":{"injectables/UserService.html":{}}}],["confirmation",{"_index":561,"title":{},"body":{"controllers/PostsController.html":{}}}],["connect",{"_index":927,"title":{},"body":{"injectables/UserService.html":{}}}],["connection",{"_index":948,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('node_env",{"_index":914,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('profile",{"_index":915,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`environment",{"_index":913,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`limit",{"_index":855,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(`logging",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(getuserparamdto",{"_index":854,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log({updatepostdto",{"_index":626,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":878,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(metaoptionsrepository",{"_index":452,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["constructor(tagsrepository",{"_index":757,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userservice",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(userservices",{"_index":646,"title":{},"body":{"injectables/PostsService.html":{}}}],["containing",{"_index":563,"title":{},"body":{"controllers/PostsController.html":{}}}],["content",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{}}}],["context",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":440,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":614,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":737,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":832,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convert",{"_index":840,"title":{},"body":{"controllers/UserController.html":{}}}],["correct",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["coverage",{"_index":950,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/UserService.html":{}}}],["create(undefined",{"_index":456,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["created",{"_index":553,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["createdatecolumn",{"_index":410,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createddate",{"_index":408,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdmetaoption",{"_index":461,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createdpost",{"_index":623,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdtags",{"_index":738,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createmany",{"_index":876,"title":{},"body":{"injectables/UserService.html":{}}}],["createmany(undefined",{"_index":884,"title":{},"body":{"injectables/UserService.html":{}}}],["createmetaoptions",{"_index":434,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(@body",{"_index":441,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(createmetaoptionsdto",{"_index":435,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptionsdto",{"_index":201,"title":{"classes/CreateMetaOptionsDto.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createpost",{"_index":546,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["createpost(@body",{"_index":622,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["createpost(createpostdto",{"_index":550,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createtag",{"_index":724,"title":{},"body":{"controllers/TagsController.html":{}}}],["createpost.authorid",{"_index":667,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost.tags",{"_index":669,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":218,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdtowithmeta",{"_index":543,"title":{},"body":{"entities/Post.html":{}}}],["createpostdto})@patch",{"_index":594,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto})@post",{"_index":554,"title":{},"body":{"controllers/PostsController.html":{}}}],["creates",{"_index":530,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{}}}],["createtag",{"_index":727,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtag(undefined",{"_index":760,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtagdto",{"_index":348,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":860,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(undefined",{"_index":886,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":369,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto})@apiquery({name",{"_index":813,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers",{"_index":803,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(@body",{"_index":859,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(createuserdto",{"_index":806,"title":{},"body":{"controllers/UserController.html":{}}}],["creating",{"_index":429,"title":{},"body":{"entities/MetaOption.html":{}}}],["creation",{"_index":557,"title":{},"body":{"controllers/PostsController.html":{}}}],["custom",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["data",{"_index":537,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{}}}],["database",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["databaseconfig",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":882,"title":{},"body":{"injectables/UserService.html":{}}}],["date",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":825,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":853,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(10",{"_index":851,"title":{},"body":{"controllers/UserController.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":603,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["delete('/soft",{"_index":742,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(undefined",{"_index":652,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":569,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedatecolumn",{"_index":711,"title":{},"body":{"entities/Tag.html":{}}}],["deleteddate",{"_index":709,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":547,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":629,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":567,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleterequest",{"_index":633,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletes",{"_index":568,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletetag",{"_index":722,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(@query('id",{"_index":740,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(id",{"_index":728,"title":{},"body":{"controllers/TagsController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["deprecated",{"_index":920,"title":{},"body":{"injectables/UserService.html":{}}}],["description",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":564,"title":{},"body":{"controllers/PostsController.html":{}}}],["development",{"_index":1011,"title":{},"body":{"index.html":{}}}],["directional",{"_index":431,"title":{},"body":{"entities/MetaOption.html":{}}}],["dist/**/*.entity.js",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["draft",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":439,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/get",{"_index":827,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/patch",{"_index":613,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["e.g",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["e2e",{"_index":1020,"title":{},"body":{"index.html":{}}}],["each",{"_index":344,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":491,"title":{},"body":{"entities/Post.html":{}}}],["eagerly",{"_index":540,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1001,"title":{},"body":{"index.html":{}}}],["eight",{"_index":386,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":372,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["enables",{"_index":536,"title":{},"body":{"entities/Post.html":{}}}],["endpoint",{"_index":837,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":129,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entity/meta",{"_index":447,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["entity/post.entity",{"_index":642,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entity/tags.entity",{"_index":750,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["entity/user.entity",{"_index":870,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["enum",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":990,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posts.enums",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env}.local",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development.local",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["environmentvalidation",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UserService.html":{}}}],["example",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["exception",{"_index":907,"title":{},"body":{"injectables/UserService.html":{}}}],["excerpt",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["exist",{"_index":917,"title":{},"body":{"injectables/UserService.html":{}}}],["existing",{"_index":596,"title":{},"body":{"controllers/PostsController.html":{}}}],["existingtags",{"_index":772,"title":{},"body":{"injectables/TagsService.html":{}}}],["existinguser",{"_index":899,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["expected",{"_index":483,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exporting",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":974,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":467,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["failed",{"_index":943,"title":{},"body":{"injectables/UserService.html":{}}}],["false",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["false})@isoptional()@isarray()@isint({each",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featured",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["featuredimageurl",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["fetch",{"_index":578,"title":{},"body":{"controllers/PostsController.html":{}}}],["few",{"_index":535,"title":{},"body":{"entities/Post.html":{}}}],["fields",{"_index":602,"title":{},"body":{"controllers/PostsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["final",{"_index":836,"title":{},"body":{"controllers/UserController.html":{}}}],["finally",{"_index":946,"title":{},"body":{"injectables/UserService.html":{}}}],["find",{"_index":672,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":856,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(undefined",{"_index":888,"title":{},"body":{"injectables/UserService.html":{}}}],["findmultipletags",{"_index":753,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(undefined",{"_index":763,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":877,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(undefined",{"_index":891,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/User.html":{}}}],["firstname",{"_index":373,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["footerenabled",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["format",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["forwardref",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["found",{"_index":677,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":999,"title":{},"body":{"index.html":{}}}],["from.env",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["function",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["functions",{"_index":993,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":849,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":810,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':userid",{"_index":617,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts",{"_index":548,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallposts(@param('userid",{"_index":618,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts(undefined",{"_index":654,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(userid",{"_index":572,"title":{},"body":{"controllers/PostsController.html":{}}}],["getalltags",{"_index":754,"title":{},"body":{"injectables/TagsService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gettagbyid",{"_index":755,"title":{},"body":{"injectables/TagsService.html":{}}}],["gettagbyid(undefined",{"_index":766,"title":{},"body":{"injectables/TagsService.html":{}}}],["getting",{"_index":995,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":819,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers",{"_index":804,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":808,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersparamdto",{"_index":396,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["given",{"_index":580,"title":{},"body":{"controllers/PostsController.html":{}}}],["grow",{"_index":1027,"title":{},"body":{"index.html":{}}}],["handle",{"_index":906,"title":{},"body":{"injectables/UserService.html":{}}}],["handles",{"_index":556,"title":{},"body":{"controllers/PostsController.html":{}}}],["headers",{"_index":823,"title":{},"body":{"controllers/UserController.html":{}}}],["hello",{"_index":139,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["here",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["host",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["httpexception",{"_index":604,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpexception('email",{"_index":908,"title":{},"body":{"injectables/UserService.html":{}}}],["httpexception('no",{"_index":631,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpexception('post",{"_index":684,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('tag",{"_index":775,"title":{},"body":{"injectables/TagsService.html":{}}}],["httpexception('tags",{"_index":676,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('user",{"_index":922,"title":{},"body":{"injectables/UserService.html":{}}}],["https://example.com/image.jpg",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["https://nestjs.com",{"_index":1042,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org",{"_index":339,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":605,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":632,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.conflict",{"_index":777,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.created",{"_index":621,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.moved_permanently",{"_index":918,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":678,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.ok",{"_index":616,"title":{},"body":{"controllers/PostsController.html":{}}}],["hyphens",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["id",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id'})@delete",{"_index":729,"title":{},"body":{"controllers/TagsController.html":{}}}],["id'})@delete('/soft",{"_index":733,"title":{},"body":{"controllers/TagsController.html":{}}}],["identifier",{"_index":951,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["in(tags",{"_index":782,"title":{},"body":{"injectables/TagsService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":565,"title":{},"body":{"controllers/PostsController.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(profileconfig.key",{"_index":897,"title":{},"body":{"injectables/UserService.html":{}}}],["injectable",{"_index":135,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":136,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["injection",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injections",{"_index":660,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository",{"_index":459,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoptionrepository",{"_index":665,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(metaoptionsrepository",{"_index":460,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["injectrepository(postrepository",{"_index":664,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tagrepository",{"_index":771,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":895,"title":{},"body":{"injectables/UserService.html":{}}}],["installation",{"_index":1007,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1009,"title":{},"body":{"index.html":{}}}],["instance",{"_index":924,"title":{},"body":{"injectables/UserService.html":{}}}],["instead",{"_index":541,"title":{},"body":{"entities/Post.html":{}}}],["integer",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["invalid",{"_index":358,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["ip",{"_index":824,"title":{},"body":{"controllers/UserController.html":{}}}],["isarray",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauthenticated",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":375,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(['post",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypes",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isiso8601",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":210,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":211,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":208,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["isnumber",{"_index":474,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":214,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":377,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":381,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":379,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["item",{"_index":346,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["joi",{"_index":979,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":525,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["joincolumn",{"_index":426,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":516,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["json",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["kamil",{"_index":1039,"title":{},"body":{"index.html":{}}}],["keeping",{"_index":940,"title":{},"body":{"injectables/UserService.html":{}}}],["key",{"_index":216,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["language",{"_index":354,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["lastname",{"_index":374,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lazy",{"_index":542,"title":{},"body":{"entities/Post.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":496,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":388,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1045,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1024,"title":{},"body":{"index.html":{}}}],["likes",{"_index":482,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["limit",{"_index":809,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["literal",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["loading",{"_index":539,"title":{},"body":{"entities/Post.html":{}}}],["logic",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginbody",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginbody",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["logs",{"_index":559,"title":{},"body":{"controllers/PostsController.html":{}}}],["lowercase",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["m2m",{"_index":528,"title":{},"body":{"entities/Post.html":{}}}],["main",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["make",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["making",{"_index":661,"title":{},"body":{"injectables/PostsService.html":{}}}],["manytomany",{"_index":517,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":510,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":518,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":489,"title":{},"body":{"entities/Post.html":{}}}],["matches",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matches(/^https?:\\/\\/[^\\s",{"_index":368,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":341,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(255",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["meta",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":984,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":405,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":658,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptions",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["metaoptions.post",{"_index":500,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":50,"title":{"controllers/MetaOptionsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":41,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":455,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":437,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":207,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["migrations",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":385,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":367,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":215,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":989,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1023,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1014,"title":{},"body":{"index.html":{}}}],["modern",{"_index":352,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1036,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1040,"title":{},"body":{"index.html":{}}}],["name",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["need",{"_index":835,"title":{},"body":{"controllers/UserController.html":{}}}],["nest",{"_index":1005,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1044,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":971,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":475,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":973,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":531,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newuser",{"_index":909,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.push(savednewuserinstance",{"_index":939,"title":{},"body":{"injectables/UserService.html":{}}}],["newuserinstance",{"_index":934,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":998,"title":{},"body":{"index.html":{}}}],["null",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":415,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number'})@isnumber()@isnotempty",{"_index":470,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["number})@isoptional()@isint()@type(undefined",{"_index":401,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["object",{"_index":347,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["objects",{"_index":590,"title":{},"body":{"controllers/PostsController.html":{}}}],["occurred",{"_index":919,"title":{},"body":{"injectables/UserService.html":{}}}],["ondelete",{"_index":419,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":387,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["onetomany",{"_index":796,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":793,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":427,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":417,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1025,"title":{},"body":{"index.html":{}}}],["option.entity",{"_index":448,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":407,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":413,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":416,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":411,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":423,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:33",{"_index":421,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["options",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.controller",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":433,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:10",{"_index":436,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":205,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:16",{"_index":209,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["options.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":446,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":438,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":450,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:15",{"_index":457,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":454,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":204,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["options/entity/meta",{"_index":406,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/meta",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1049,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owning",{"_index":523,"title":{},"body":{"entities/Post.html":{}}}],["package",{"_index":966,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":843,"title":{},"body":{"controllers/UserController.html":{}}}],["pagination'})@apiresponse({status",{"_index":811,"title":{},"body":{"controllers/UserController.html":{}}}],["param",{"_index":606,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["param.dto",{"_index":828,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param.dto.ts",{"_index":399,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:16",{"_index":402,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parama",{"_index":839,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parseintpipe",{"_index":607,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["partial",{"_index":599,"title":{},"body":{"controllers/PostsController.html":{}}}],["partialtype",{"_index":472,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":468,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":486,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passing",{"_index":538,"title":{},"body":{"entities/Post.html":{}}}],["password",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":597,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["patchpostdto",{"_index":465,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchuser",{"_index":805,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(@body",{"_index":862,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(patchuserdto",{"_index":820,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuserdto",{"_index":484,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["path",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["person",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":340,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":981,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":1034,"title":{},"body":{"index.html":{}}}],["port",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":816,"title":{},"body":{"controllers/UserController.html":{}}}],["possible",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":154,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":552,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@delete",{"_index":570,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('login",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.content",{"_index":693,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":473,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:103",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:113",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:124",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:146",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:15",{"_index":471,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:156",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:34",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:46",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:60",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:71",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:80",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:92",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.featuredimageurl",{"_index":697,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":418,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.metaoptions.id",{"_index":705,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.posttype",{"_index":687,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishedon",{"_index":699,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.schema",{"_index":695,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":689,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":691,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":701,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":685,"title":{},"body":{"injectables/PostsService.html":{}}}],["postentity",{"_index":641,"title":{},"body":{"modules/PostsModule.html":{}}}],["postgres",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["postrepository",{"_index":648,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":545,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.author",{"_index":794,"title":{},"body":{"entities/User.html":{}}}],["posts.controller",{"_index":640,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":610,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.controller",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":49,"title":{"controllers/PostsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":615,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":42,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":609,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":522,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["posttypes",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttypes.post",{"_index":521,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":412,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["processes",{"_index":598,"title":{},"body":{"controllers/PostsController.html":{}}}],["processing",{"_index":558,"title":{},"body":{"controllers/PostsController.html":{}}}],["production",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["profileconfig",{"_index":871,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["profileconfiguration",{"_index":880,"title":{},"body":{"injectables/UserService.html":{}}}],["programming",{"_index":353,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["progressive",{"_index":997,"title":{},"body":{"index.html":{}}}],["project",{"_index":1026,"title":{},"body":{"index.html":{}}}],["promise",{"_index":588,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":206,"title":{"properties.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":680,"title":{},"body":{"injectables/PostsService.html":{}}}],["provided",{"_index":404,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["published",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["put",{"_index":822,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":608,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["query('limit",{"_index":850,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":852,"title":{},"body":{"controllers/UserController.html":{}}}],["queryrunner",{"_index":925,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.committransaction",{"_index":942,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.connect",{"_index":928,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.manager.create(user",{"_index":935,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.manager.save(newuserinstance",{"_index":937,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.release",{"_index":949,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":945,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.starttransaction",{"_index":931,"title":{},"body":{"injectables/UserService.html":{}}}],["r\\n",{"_index":338,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["range",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1035,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["received",{"_index":560,"title":{},"body":{"controllers/PostsController.html":{}}}],["references",{"_index":800,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":983,"title":{},"body":{"dependencies.html":{}}}],["relationship",{"_index":432,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["relationships",{"_index":529,"title":{},"body":{"entities/Post.html":{}}}],["release",{"_index":947,"title":{},"body":{"injectables/UserService.html":{}}}],["remove",{"_index":532,"title":{},"body":{"entities/Post.html":{}}}],["replace",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["repositories",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{}}}],["repository",{"_index":453,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["representing",{"_index":584,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":566,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["requests",{"_index":577,"title":{},"body":{"controllers/PostsController.html":{}}}],["requesttimeoutexception",{"_index":893,"title":{},"body":{"injectables/UserService.html":{}}}],["requesttimeoutexception('request",{"_index":904,"title":{},"body":{"injectables/UserService.html":{}}}],["require",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["required",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":589,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":582,"title":{},"body":{"controllers/PostsController.html":{}}}],["retrieves",{"_index":576,"title":{},"body":{"controllers/PostsController.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returned",{"_index":814,"title":{},"body":{"controllers/UserController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["review",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":944,"title":{},"body":{"injectables/UserService.html":{}}}],["run",{"_index":1012,"title":{},"body":{"index.html":{}}}],["runner",{"_index":923,"title":{},"body":{"injectables/UserService.html":{}}}],["rxjs",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":938,"title":{},"body":{"injectables/UserService.html":{}}}],["savednewuserinstance",{"_index":936,"title":{},"body":{"injectables/UserService.html":{}}}],["scalable",{"_index":1002,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["second",{"_index":799,"title":{},"body":{"entities/User.html":{}}}],["sent",{"_index":863,"title":{},"body":{"controllers/UserController.html":{}}}],["serialize",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":1003,"title":{},"body":{"index.html":{}}}],["service",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["set",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["setting",{"_index":533,"title":{},"body":{"entities/Post.html":{}}}],["setup",{"_index":798,"title":{},"body":{"entities/User.html":{}}}],["shows",{"_index":478,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["side",{"_index":524,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["sidebarenabled",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["single",{"_index":663,"title":{},"body":{"injectables/PostsService.html":{}}}],["slug",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["soft",{"_index":732,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":756,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdelete(undefined",{"_index":768,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdeletetag",{"_index":723,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(@query('id",{"_index":743,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(id",{"_index":731,"title":{},"body":{"controllers/TagsController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["special",{"_index":389,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":400,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["specified",{"_index":585,"title":{},"body":{"controllers/PostsController.html":{}}}],["specify",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["sponsors",{"_index":1029,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.controller.ts",{"_index":1056,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":994,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posts.enums.ts",{"_index":991,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":137,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":138,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":869,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":894,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:5",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":958,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":203,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":466,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity",{"_index":424,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/entity/post.entity.ts",{"_index":488,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity.ts:19",{"_index":499,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:26",{"_index":515,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:34",{"_index":502,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:42",{"_index":508,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:50",{"_index":509,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:56",{"_index":494,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:62",{"_index":505,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:69",{"_index":498,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:75",{"_index":504,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:81",{"_index":513,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:89",{"_index":501,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:96",{"_index":492,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/enums/posts.enums.ts",{"_index":992,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":544,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:100",{"_index":571,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:40",{"_index":575,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:62",{"_index":555,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:86",{"_index":595,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":639,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":645,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:12",{"_index":649,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:33",{"_index":651,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:53",{"_index":657,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:89",{"_index":655,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:95",{"_index":653,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":349,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity",{"_index":520,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/entity/tags.entity.ts",{"_index":708,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity.ts:16",{"_index":715,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:24",{"_index":716,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:32",{"_index":719,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:38",{"_index":713,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:44",{"_index":718,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:51",{"_index":714,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:56",{"_index":717,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:59",{"_index":710,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:62",{"_index":720,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:65",{"_index":712,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":721,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:19",{"_index":726,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:26",{"_index":730,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:32",{"_index":734,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":643,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":748,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/tags/tags.service",{"_index":659,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/tags.service.ts",{"_index":752,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/tags.service.ts:14",{"_index":761,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:30",{"_index":765,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:36",{"_index":767,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:46",{"_index":764,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:56",{"_index":762,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:62",{"_index":769,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:8",{"_index":758,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/user/dtos/create",{"_index":370,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/get",{"_index":397,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/user/dtos/patch",{"_index":485,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/user/entity/user.entity",{"_index":519,"title":{},"body":{"entities/Post.html":{}}}],["src/user/entity/user.entity.ts",{"_index":785,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entity/user.entity.ts:14",{"_index":788,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:21",{"_index":790,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:29",{"_index":786,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:36",{"_index":792,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:39",{"_index":795,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:7",{"_index":789,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":802,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:63",{"_index":818,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:81",{"_index":807,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:87",{"_index":821,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/user/user.module.ts",{"_index":867,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/user/user.service.ts",{"_index":875,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:107",{"_index":885,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:19",{"_index":883,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:40",{"_index":887,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:71",{"_index":889,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:97",{"_index":892,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":929,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["start:dev",{"_index":1015,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1016,"title":{},"body":{"index.html":{}}}],["started",{"_index":996,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1006,"title":{},"body":{"index.html":{}}}],["statements",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["stay",{"_index":1037,"title":{},"body":{"index.html":{}}}],["still",{"_index":480,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["story",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["string'})@isiso8601()@isnotempty",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isnotempty()@isstring()@minlength(3)@maxlength(255",{"_index":361,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isjson",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isstring",{"_index":355,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024)@matches(/^https?:\\/\\/[^\\s",{"_index":357,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isenum(posttypes)@isnotempty",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@isenum(poststatus",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(255)@matches(/^[a",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(512)@matches(/^[a",{"_index":365,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isoptional",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["success",{"_index":707,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["successful",{"_index":932,"title":{},"body":{"injectables/UserService.html":{}}}],["successfully",{"_index":706,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["summary",{"_index":620,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":1030,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["svg",{"_index":1047,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":477,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["synchronize",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":526,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":965,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":351,"title":{"entities/Tag.html":{}},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag'})@post",{"_index":725,"title":{},"body":{"controllers/TagsController.html":{}}}],["tag.dto",{"_index":735,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":350,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:23",{"_index":362,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:37",{"_index":366,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:46",{"_index":356,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:51",{"_index":364,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:65",{"_index":359,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.name",{"_index":774,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagrepository",{"_index":770,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":749,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":674,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags.posts",{"_index":511,"title":{},"body":{"entities/Post.html":{}}}],["tags.service",{"_index":736,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["tags/tags.controller",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":51,"title":{"controllers/TagsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":43,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":759,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":647,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":1019,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1022,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1021,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1018,"title":{},"body":{"index.html":{}}}],["text",{"_index":493,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1028,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(loginbody",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('s3_bucket",{"_index":912,"title":{},"body":{"injectables/UserService.html":{}}}],["this.datasource.createqueryrunner",{"_index":926,"title":{},"body":{"injectables/UserService.html":{}}}],["this.metaoptionsrepository.create(metaoptions",{"_index":463,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.delete",{"_index":704,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.save(createdmetaoption",{"_index":464,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create",{"_index":442,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postrepository.create",{"_index":670,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.delete",{"_index":703,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.find",{"_index":702,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findoneby",{"_index":682,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(post",{"_index":671,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postservice.create",{"_index":624,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.delete",{"_index":634,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.getallposts",{"_index":619,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.update",{"_index":628,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.profileconfiguration",{"_index":916,"title":{},"body":{"injectables/UserService.html":{}}}],["this.tagsrepository.create(tag",{"_index":778,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete",{"_index":783,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":780,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":773,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findoneby",{"_index":781,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(createdtags",{"_index":779,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete",{"_index":784,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtag",{"_index":739,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete",{"_index":741,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags",{"_index":668,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softdelete",{"_index":744,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userrepository.create(user",{"_index":910,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":901,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":921,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":911,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser",{"_index":861,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":857,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyid",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservices.findonebyid",{"_index":666,"title":{},"body":{"injectables/PostsService.html":{}}}],["through",{"_index":600,"title":{},"body":{"controllers/PostsController.html":{}}}],["throw",{"_index":630,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["time",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["timeout",{"_index":905,"title":{},"body":{"injectables/UserService.html":{}}}],["timestamp",{"_index":503,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":1038,"title":{},"body":{"index.html":{}}}],["track",{"_index":941,"title":{},"body":{"injectables/UserService.html":{}}}],["transaction",{"_index":930,"title":{},"body":{"injectables/UserService.html":{}}}],["transactions",{"_index":898,"title":{},"body":{"injectables/UserService.html":{}}}],["transfer",{"_index":562,"title":{},"body":{"controllers/PostsController.html":{}}}],["transform",{"_index":403,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["transformer",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@isint()@isnotempty",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@jointable",{"_index":512,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["try",{"_index":900,"title":{},"body":{"injectables/UserService.html":{}}}],["twitter",{"_index":1043,"title":{},"body":{"index.html":{}}}],["type",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1054,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm.forfeature",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":449,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([postentity",{"_index":644,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":751,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":873,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":476,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":360,"title":{},"body":{"classes/CreateTagDto.html":{},"index.html":{}}}],["undefined",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["undefined})@get(':userid",{"_index":574,"title":{},"body":{"controllers/PostsController.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":507,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1017,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":458,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1053,"title":{},"body":{"properties.html":{}}}],["up",{"_index":479,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["update",{"_index":469,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["update(undefined",{"_index":656,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":593,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["updatedatecolumn",{"_index":422,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updateddate",{"_index":409,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedpost",{"_index":627,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost",{"_index":549,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":625,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(updatepostdto",{"_index":591,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost.content",{"_index":694,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.featuredimageurl",{"_index":698,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.id",{"_index":683,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.posttype",{"_index":688,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.publishedon",{"_index":700,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.schema",{"_index":696,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.slug",{"_index":690,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.status",{"_index":692,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.tags",{"_index":673,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.title",{"_index":686,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":601,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":592,"title":{},"body":{"controllers/PostsController.html":{}}}],["url",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["use",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{}}}],["used",{"_index":527,"title":{},"body":{"entities/Post.html":{}}}],["usefactory",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":190,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":868,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":487,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":371,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":378,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":380,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":376,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":902,"title":{},"body":{"injectables/UserService.html":{}}}],["user.firstname",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.posts",{"_index":490,"title":{},"body":{"entities/Post.html":{}}}],["user.service",{"_index":829,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":801,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":586,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["usermodule",{"_index":44,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userparamsdto",{"_index":858,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":879,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":398,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["users/1223",{"_index":844,"title":{},"body":{"controllers/UserController.html":{}}}],["users/id?limit=10&page=1",{"_index":838,"title":{},"body":{"controllers/UserController.html":{}}}],["users?limit=10&page=2",{"_index":847,"title":{},"body":{"controllers/UserController.html":{}}}],["userservice",{"_index":177,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservices",{"_index":650,"title":{},"body":{"injectables/PostsService.html":{}}}],["using",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["valid",{"_index":681,"title":{},"body":{"injectables/PostsService.html":{}}}],["validate",{"_index":345,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":826,"title":{},"body":{"controllers/UserController.html":{}}}],["validationschema",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":212,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":217,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":495,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":954,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":86,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":834,"title":{},"body":{"controllers/UserController.html":{},"properties.html":{}}}],["void",{"_index":890,"title":{},"body":{"injectables/UserService.html":{}}}],["want",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["watch",{"_index":1013,"title":{},"body":{"index.html":{}}}],["website",{"_index":1041,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["whos",{"_index":845,"title":{},"body":{"controllers/UserController.html":{}}}],["whose",{"_index":587,"title":{},"body":{"controllers/PostsController.html":{}}}],["work",{"_index":534,"title":{},"body":{"entities/Post.html":{}}}],["works",{"_index":481,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["world",{"_index":140,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["yarn",{"_index":1008,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1033,"title":{},"body":{"index.html":{}}}],["your.env",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["z0",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":384,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":383,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":382,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            PostsController\n                        \n                        \n                            MetaOptionsController\n                        \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { PostsController } from './posts/posts.controller';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOptionsController } from './meta-options/meta-options.controller';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsController } from './tags/tags.controller';\nimport { TagsModule } from './tags/tags.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/index.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\n\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true, // make sure this is set to true to load environment variables from.env file\n      // envFilePath: ['.env.development.local'], // specify the path to your.env file\n      envFilePath: !ENV ? '.env' : `.env.${ENV}.local`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }), // to use environment variables\n    UserModule,\n    PostsModule,\n    AuthModule,\n    MetaOptionsModule,\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // specify any additional imports here, e.g., TypeORM migrations or custom repositories\n      inject: [ConfigService], // inject\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DATABASE_HOST'),\n        port: +configService.get('database.port'),\n        // port: +configService.get('DATABASE_PORT'),\n        username: configService.get('DATABASE_USERNAME'),\n        password: configService.get('DATABASE_PASSWORD'),\n        database: configService.get('DATABASE_NAME'),\n        entities: ['dist/**/*.entity.js'],\n        synchronize: configService.get('database.synchronize'), // set to false in production\n        // autoLoadEntities: true, // using this would require us to create a module (controller and module file) for every entity we want to add, exporting it and using the TypeORM.forFeature([]) function\n      }),\n    }),\n    TagsModule,\n  ],\n  controllers: [\n    AppController,\n    PostsController,\n    MetaOptionsController,\n    TagsController,\n  ],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginBody: LoginBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginBody\n                                            \n                                                            LoginBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\ntype LoginBody = {\n  id: number;\n  username: string;\n  password: string;\n};\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  login(@Body() loginBody: LoginBody) {\n    return this.authService.login(loginBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from 'src/user/user.module';\n\n@Module({\n  imports: [forwardRef(() => UserModule)], // for dependency injection (circular dependency injection)\n  exports: [AuthService],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n  ) {}\n\n  public login({\n    id,\n    username,\n    password,\n  }: {\n    id: number;\n    username: string;\n    password: string;\n  }) {\n    // check user exists in the database and if the password is correct\n    // login\n    // token\n\n    // const user = this.userService.findOneById({ id });\n    // console.log(`Logging in user ${user.firstName}`);\n\n    // return user;\n\n    return 'login';\n  }\n\n  public isAuthenticated() {\n    return true; // replace with actual authentication logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMetaOptionsDto.html":{"url":"classes/CreateMetaOptionsDto.html","title":"class - CreateMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-meta-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from \"class-validator\";\n\nexport class CreateMetaOptionsDto {\n    // @ApiProperty()\n    // @IsString()\n    // @MinLength(4)\n    // @IsNotEmpty()\n    // key: string;\n  \n    // @ApiProperty()\n    // @IsNotEmpty()\n    // value: any;\n  \n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the id of the author of the post', example: 123, type: 'integer', required: true})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the additional options for the post', example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}', type: 'string', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostTypes, description: 'Possible tags for a post, range: ['post', 'page', 'story', 'series']', type: 'string'})@IsString()@IsEnum(PostTypes)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the date when the post was published', example: '2024-03-16T12:00:00+0000', format: 'date-time', type: 'string'})@IsISO8601()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the excerpt of the post. Serialize your json content or else there will be an error', example: '{\n \"@context\": \"https://schema.org\", \n \"@type\": \"Person\"\n}', format: 'json', type: 'string'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(255)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']', type: 'string'})@IsString()@IsNotEmpty()@IsEnum(PostStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined, type: 'array', required: false})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is a title of the post', example: 'Hello World', type: 'string'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { CreateMetaOptionsDto } from 'src/meta-options/dtos/create-meta-options.dto';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is a title of the post',\n    example: 'Hello World',\n    type: 'string',\n\n    // default: \"Hello World\"\n  }) // this adds the value to the post documentation\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostTypes,\n    description:\n      \"Possible tags for a post, range: ['post', 'page', 'story', 'series']\",\n    type: 'string',\n  })\n  @IsString()\n  //   @IsEnum(['post', 'page', 'story', 'series'])\n  @IsEnum(PostTypes)\n  @IsNotEmpty()\n  postType: PostTypes;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description:\n      \"Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']\",\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'This is the excerpt of the post. Serialize your json content or else there will be an error',\n    example:\n      '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\", \\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}',\n    format: 'json',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'This is the date when the post was published',\n    example: '2024-03-16T12:00:00+0000',\n    format: 'date-time',\n    type: 'string',\n  })\n  @IsISO8601()\n  @IsNotEmpty()\n  publishedOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1, 4],\n    type: 'array',\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true }) // validate each item in the array as a string\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    description: 'This is the additional options for the post',\n    example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n    type: 'string',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'The meta value is a json object',\n          example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n        },\n      },\n      required: ['key', 'value'],\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreateMetaOptionsDto)\n  metaOptions?: CreateMetaOptionsDto | null;\n\n  @ApiProperty({\n    description: 'This is the id of the author of the post',\n    example: 123,\n    type: 'integer',\n    required: true,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Tag Description', example: 'A modern programming language', type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)@Matches(/^https?:\\/\\/[^\\s]+$/, {message: 'Invalid URL format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the tag', example: 'TypeScript', type: 'string'})@IsNotEmpty()@IsString()@MinLength(3)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(512)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty({\n    description: 'Name of the tag',\n    example: 'TypeScript',\n    type: 'string',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(255)\n  name: string;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(512)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiPropertyOptional({\n    description: 'Tag Description',\n    example: 'A modern programming language',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional({})\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  @Matches(/^https?:\\/\\/[^\\s]+$/, {\n    message: 'Invalid URL format',\n  })\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 123, type: Number})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/get-users-param.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 123,\n    type: Number,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number) // transform string to number if provided\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/entity/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  }) // creating bi-directional relationship\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOptions(createMetaOptionsDto: CreateMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionsDto\n                                            \n                                                            CreateMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private metaOptionsService: MetaOptionsService) {}\n\n  @Post()\n  createMetaOptions(@Body() createMetaOptionsDto: CreateMetaOptionsDto) {\n    const metaOptions = this.metaOptionsService.create({\n      metaOptions: createMetaOptionsDto,\n    });\n\n    return metaOptions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './entity/meta-option.entity';\nimport { MetaOptionsController } from './meta-options.controller';\n\n@Module({\n  providers: [MetaOptionsService],\n  controllers: [MetaOptionsController],\n  exports: [MetaOptionsService],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/meta-options.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\nimport { MetaOption as MetaOptionsRepository } from './entity/meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    // injecting meta options service repository dependency\n    @InjectRepository(MetaOptionsRepository)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create({ metaOptions }: { metaOptions: CreateMetaOptionsDto }) {\n    const createdMetaOption =\n      await this.metaOptionsRepository.create(metaOptions);\n    await this.metaOptionsRepository.save(createdMetaOption);\n\n    return createdMetaOption;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Update post with a specific id', example: 123, type: 'number'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n// import { PartialType } from '@nestjs/mapped-types'; \n// we are using the import from swagger so it shows up in our documentation, it still works likes expected as the import from @nestjs/mapped-types\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'Update post with a specific id',\n    example: 123,\n    type: 'number',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entity/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostTypes, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tags => tags.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { MetaOption } from '../../meta-options/entity/meta-option.entity';\nimport { User } from 'src/user/entity/user.entity';\nimport { Tag } from 'src/tags/entity/tags.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostTypes,\n    default: PostTypes.POST,\n  })\n  postType: PostTypes;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: false,\n  })\n  publishedOn: Date;\n\n  @ManyToMany(() => Tag, (tags) => tags.posts, {\n    eager: true,\n  })\n  @JoinTable() // this must be on the owning side of the relationship and join table is used for M2M relationships, it also creates a new table for the relationship\n  tags?: Tag[];\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    // cascade: ['remove'] // setting cascade to work for a few methods\n    cascade: true, // this enables us create data in the metaoption table by just passing the value\n    eager: true, // loading the metaOptions eagerly instead of lazy loading it\n  })\n  // @JoinColumn()\n  metaOptions?: MetaOption;\n\n  // metaOptions?: CreatePostDtoWithMeta[];\n\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                deletePost\n                            \n                            \n                                    \n                                    \n                                getAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post'})@ApiResponse({status: undefined, description: 'Created post', type: CreatePostDto})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:62\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\nThis function handles the creation of a new post by processing the provided CreatePostDto.\nIt logs the received data and returns a confirmation message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the details of the post to be created.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the post request was received.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post'})@ApiResponse({status: undefined, description: 'Deleted post'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: undefined, description: 'All posts', type: undefined})@Get(':userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\nThis function handles GET requests to fetch all posts associated with a given user ID.\nIt logs the user ID for which posts are being retrieved and then calls the post service\nto fetch the posts.\nExample :                                representing all posts for the specified user.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user whose posts are to be retrieved.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CreatePostDto objects,\nrepresenting all posts for the specified user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(updatePostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates a post'})@ApiResponse({status: undefined, description: 'Updated post', type: CreatePostDto})@Patch('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:86\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\nThis function handles PATCH requests to update an existing post using the provided data.\nIt logs the update data received and processes the partial post update through the\nPatchPostDto data transfer object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the fields to be updated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the patch request was received.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   *\n   * This function handles GET requests to fetch all posts associated with a given user ID.\n   * It logs the user ID for which posts are being retrieved and then calls the post service\n   * to fetch the posts.\n   *\n   * @param {number} userId - The ID of the user whose posts are to be retrieved.\n   * @returns {Promise} A promise that resolves to an array of CreatePostDto objects,\n   *                                     representing all posts for the specified user.\n   */\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'All posts',\n    type: [CreatePostDto],\n  })\n  @Get(':userId?')\n  getAllPosts(@Param('userId') userId: number) {\n    return this.postService.getAllPosts({ userId });\n  }\n\n  /**\n   * Creates a new post.\n   *\n   * This function handles the creation of a new post by processing the provided CreatePostDto.\n   * It logs the received data and returns a confirmation message.\n   *\n   * @param {CreatePostDto} createPostDto - The data transfer object containing the details of the post to be created.\n   * @returns {string} A confirmation message indicating that the post request was received.\n   */\n  @ApiOperation({\n    summary: 'Creates a new post',\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Created post',\n    type: CreatePostDto,\n  })\n  @Post('')\n  createPost(@Body() createPostDto: CreatePostDto) {\n    const createdPost = this.postService.create({ createPost: createPostDto });\n    return createdPost;\n  }\n\n  /**\n   * Updates an existing post.\n   *\n   * This function handles PATCH requests to update an existing post using the provided data.\n   * It logs the update data received and processes the partial post update through the\n   * PatchPostDto data transfer object.\n   *\n   * @param {PatchPostDto} updatePostDto - The data transfer object containing the fields to be updated.\n   * @returns {string} A confirmation message indicating that the patch request was received.\n   */\n  @ApiOperation({\n    summary: 'Updates a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Updated post',\n    type: CreatePostDto,\n  })\n  @Patch('')\n  updatePost(@Body() updatePostDto: PatchPostDto) {\n    // console.log({updatePostDto})\n    const updatedPost = this.postService.update({ updatePost: updatePostDto });\n    return updatedPost;\n  }\n\n  @ApiOperation({\n    summary: 'Deletes a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Deleted post',\n  })\n  @Delete('')\n  deletePost(@Query('id', ParseIntPipe) id: number) {\n    if (!id) {\n      throw new HttpException('No ID Provided', HttpStatus.BAD_REQUEST);\n    }\n\n    const deleteRequest = this.postService.delete({ id });\n\n    return deleteRequest;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { UserModule } from 'src/user/user.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post as PostEntity } from './entity/post.entity';\nimport { MetaOption } from 'src/meta-options/entity/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\n\n@Module({\n  imports: [\n    UserModule,\n    TagsModule,\n    TypeOrmModule.forFeature([PostEntity, MetaOption]),\n  ],\n  controllers: [PostsController],\n  providers: [PostsService],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userServices: UserService, tagsService: TagsService, postRepository: Repository, metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userServices\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption as MetaOptionRepository } from 'src/meta-options/entity/meta-option.entity';\nimport { Post as PostRepository } from './entity/post.entity';\nimport { TagsService } from 'src/tags/tags.service';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /**\n     * Repositories Injections\n     */\n\n    // injecting user service (making user of another service (a single dependency injection))\n    private userServices: UserService,\n\n    private tagsService: TagsService,\n\n    /**\n     * Repositories Injections\n     */\n    @InjectRepository(PostRepository)\n    private postRepository: Repository,\n\n    @InjectRepository(MetaOptionRepository)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create({ createPost }: { createPost: CreatePostDto }) {\n    const author = await this.userServices.findOneById({\n      id: createPost.authorId,\n    });\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: createPost.tags,\n    });\n\n    const post = await this.postRepository.create({\n      ...createPost,\n      author: author,\n      tags: tags,\n    });\n\n    await this.postRepository.save(post);\n\n    return post;\n  }\n\n  public async update({ updatePost }: { updatePost: PatchPostDto }) {\n    // find the tags\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: updatePost.tags,\n    });\n\n    if (!(tags.length > 0)) {\n      throw new HttpException('Tags not found', HttpStatus.NOT_FOUND, {\n        cause: 'Tags not found',\n        description: 'Provide a valid tags to update',\n      });\n    }\n\n    const post = await this.postRepository.findOneBy({ id: updatePost.id });\n\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    }\n\n    post.title = updatePost.title ?? post.title;\n    post.postType = updatePost.postType ?? post.postType;\n    post.slug = updatePost.slug ?? post.slug;\n    post.status = updatePost.status ?? post.status;\n    post.content = updatePost.content ?? post.content;\n    post.schema = updatePost.schema ?? post.schema;\n    post.featuredImageUrl =\n      updatePost.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishedOn = updatePost.publishedOn ?? post.publishedOn;\n    post.tags = updatePost.tags ? tags : post.tags;\n\n    const updatedPost = await this.postRepository.save(post);\n\n    return updatedPost;\n  }\n\n  public async getAllPosts({ userId }: { userId: number }) {\n    const posts = await this.postRepository.find({});\n\n    return posts;\n  }\n\n  public async delete({ id }: { id: number }) {\n    // const post = await this.postRepository.findOneBy({ id });\n\n    // if (!post) {\n    //   throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    // }\n\n    await this.postRepository.delete({ id });\n\n    // await this.metaOptionsRepository.delete({ id: post.metaOptions.id });\n\n    return { message: 'Post deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/entity/tags.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                deletedDate\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'json',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n    length: 1024,\n  })\n  featuredImageUrl?: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @DeleteDateColumn({})\n  deletedDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteTag\n                            \n                            \n                                    \n                                    \n                                    Async\n                                softDeleteTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createTag: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a tag'})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTag\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a tag by id'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        softDeleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDeleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Soft Delete a tag by id'})@Delete('/soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { ApiOperation } from '@nestjs/swagger';\nimport { TagsService } from './tags.service';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(private tagsService: TagsService) {}\n\n  @ApiOperation({ summary: 'Create a tag' })\n  @Post('')\n  createPost(@Body() createTag: CreateTagDto) {\n    const createdTags = this.tagsService.createTag({ tag: createTag });\n    return createdTags;\n  }\n\n  @ApiOperation({ summary: 'Delete a tag by id' })\n  @Delete('')\n  async deleteTag(@Query('id', ParseIntPipe) id: number) {\n    return await this.tagsService.delete({ id });\n  }\n\n  @ApiOperation({ summary: 'Soft Delete a tag by id' })\n  @Delete('/soft-delete')\n  async softDeleteTag(@Query('id', ParseIntPipe) id: number) {\n    return await this.tagsService.softDelete({ id });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsService } from './tags.service';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './entity/tags.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Tag])],\n  controllers: [TagsController],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTags\n                            \n                            \n                                    Public\n                                    Async\n                                getTagById\n                            \n                            \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTags()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getTagById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTagById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { In, Repository } from 'typeorm';\nimport { Tag as TagRepository } from './entity/tags.entity';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    @InjectRepository(TagRepository)\n    private tagsRepository: Repository,\n  ) {}\n\n  public async createTag({ tag }: { tag: CreateTagDto }) {\n    const existingTags = await this.tagsRepository.findOne({\n      where: { name: tag.name },\n    });\n\n    if (existingTags) {\n      throw new HttpException('Tag already exists', HttpStatus.CONFLICT);\n    }\n\n    const createdTags = await this.tagsRepository.create(tag);\n\n    await this.tagsRepository.save(createdTags);\n\n    return createdTags;\n  }\n\n  public async getAllTags() {\n    const tags = await this.tagsRepository.find({});\n\n    return tags;\n  }\n\n  public async getTagById({ id }: { id: number }) {\n    const tag = await this.tagsRepository.findOneBy({ id });\n\n    if (!tag) {\n      throw new HttpException('Tag not found', HttpStatus.NOT_FOUND);\n    }\n\n    return tag;\n  }\n\n  public async findMultipleTags({ tags }: { tags: number[] }) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags),\n      },\n    });\n\n    return results;\n  }\n\n  public async delete({ id }: { id: number }) {\n    await this.tagsRepository.delete({ id });\n\n    return { message: 'Tag deleted successfully', status: 'success', id };\n  }\n\n  public async softDelete({ id }: { id: number }) {\n    await this.tagsRepository.softDelete({ id });\n\n    return { message: 'Tag soft deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 60, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, posts => posts.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    unique: true,\n    nullable: false,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 60,\n    nullable: false,\n  })\n  password: string;\n\n  @OneToMany(() => Post, (posts) => posts.author) // first argument is the one we want to setup a relationship with, second argument is the what references the relationship\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Get all users', description: 'Get all users with optional pagination'})@ApiResponse({status: 200, description: 'All users', type: CreateUserDto})@ApiQuery({name: 'limit', type: Number, required: false, description: 'Limit the number of returned results', example: 10})@ApiQuery({name: 'page', type: Number, required: false, description: 'The position of the number that you want the api to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users') // with the updated version of @nestjs/swagger there is no need to use @ApiTags\nexport class UserController {\n  /**\n   * Final Endpoint - /users/id?limit=10&page=1\n   * Parama id - optional, convert to integer, cannot have a default value\n   * Query limit - integer, default 10\n   * Query page - integer, default value 1\n   * ==> USE CASES\n   * /users/ -> return all users with default pagination\n   * /users/1223 -> returns one user whos id is 1234\n   * /users?limit=10&page=2 -> return page 2 with limit of pagination 10\n   */\n\n  constructor(private readonly userService: UserService) {}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Get all users',\n    description: 'Get all users with optional pagination',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'All users',\n    type: CreateUserDto,\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: Number,\n    required: false,\n    description: 'Limit the number of returned results',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    required: false,\n    description: 'The position of the number that you want the api to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    // console.log(getUserParamDto);\n    // console.log(`Limit: ${limit}, Page: ${page}`);\n\n    const findAll = this.userService.findAll({\n      page,\n      limit,\n      userParamsDTO: getUserParamDto,\n    });\n\n    return findAll;\n  }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    const createUser = this.userService.createUser({ user: createUserDto });\n    return createUser;\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n    // return 'You sent a patch request to users endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entity/user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport profileConfig from './config/profile.config';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule), // for dependency injection (circular dependency injection)\n    TypeOrmModule.forFeature([User]), // for repository (entity) injection\n    ConfigModule.forFeature(profileConfig)\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository, configService: ConfigService, profileConfiguration: ConfigType<>, dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/auth.service';\nimport { DataSource, Repository } from 'typeorm';\nimport { User } from './entity/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from './config/profile.config';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => AuthService))\n    private authService: AuthService,\n\n    // injecting user service repository dependency\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    // injecting environment variables\n    private configService: ConfigService,\n\n    // injecting module specific configuration dependencies (environment variables)\n    @Inject(profileConfig.KEY)\n    private profileConfiguration: ConfigType,\n\n    // injecting datasource for typeorm transactions\n    private dataSource: DataSource,\n  ) {}\n\n  public async createUser({\n    user,\n  }: {\n    user: CreateUserDto;\n  }): Promise {\n    // check user\n    let existingUser = undefined;\n\n    try {\n      existingUser = await this.userRepository.findOne({\n        where: { email: user.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException('Request timeout', {\n        cause: error,\n        description: 'Request timeout',\n      });\n    }\n\n    // handle exception\n    if (existingUser) {\n      throw new HttpException('Email already exists', HttpStatus.CONFLICT);\n    }\n\n    // create a new user\n    const newUser = await this.userRepository.create(user);\n    await this.userRepository.save(newUser);\n\n    return newUser;\n  }\n\n  public findAll({\n    userParamsDTO,\n    limit,\n    page,\n  }: {\n    userParamsDTO: GetUsersParamDto;\n    limit: number;\n    page: number;\n  }) {\n    const environment = this.configService.get('S3_BUCKET');\n    console.log(`Environment: ${environment}`);\n\n    console.log('NODE_ENV: ', process.env.NODE_ENV);\n\n    console.log('Profile: ', this.profileConfiguration);\n\n    throw new HttpException(\n      'Api endpoint does not exist',\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        description: 'Occurred because the API endpoint was deprecated',\n        cause: 'Api endpoint does not exist',\n      },\n    );\n  }\n\n  public async findOneById({ id }: { id: number }) {\n    const user = await this.userRepository.findOneBy({ id });\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    return user;\n  }\n\n  public async createMany({ users }: { users: CreateUserDto[] }) {\n    // create query runner instance\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    // connect query runner to datasource\n    await queryRunner.connect();\n\n    // start transaction\n    await queryRunner.startTransaction();\n\n    let newUser: User[] = [];\n    try {\n      // if successful commit the transaction\n      for (let user of users) {\n        const newUserInstance = queryRunner.manager.create(User, user); // entity and object\n        const savedNewUserInstance =\n          await queryRunner.manager.save(newUserInstance); // save entity to the database\n\n        newUser.push(savedNewUserInstance); // keeping track of the users we have created\n      }\n\n      await queryRunner.commitTransaction();\n    } catch (error: any) {\n      // if failed rollback transaction\n      await queryRunner.rollbackTransaction();\n      throw error;\n    } finally {\n      // release connection\n      await queryRunner.release();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/auth.controller.ts\n            \n            type alias\n            LoginBody\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-meta-options.dto.ts\n            \n            class\n            CreateMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/entity/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/entity/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/entity/tags.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tags/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../posts.enums.ts)\n                        \n                        \n                            PostTypes   (src/.../posts.enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/posts.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PostTypes\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LoginBody   (src/.../auth.controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.controller.ts\n    \n    \n        \n            \n                \n                    \n                    LoginBody\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
