var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.396,1,2.25]],["body/guards/AccessTokenGuard.html",[1,2.744,2,2.574,3,0.146,4,0.131,5,0.131,6,3.505,7,2.693,8,2.356,9,0.241,10,1.039,11,1.609,12,5.56,13,2.191,14,5.55,15,1.555,16,2.574,17,4.757,18,3.208,19,2.693,20,0.585,21,3.309,22,1.371,23,0.016,24,1.265,25,0.592,26,0.946,27,4.111,28,4.317,29,3.309,30,3.13,31,1.082,32,2.325,33,3.309,34,1.555,35,3.309,36,0.325,37,1.542,38,1.341,39,1.229,40,0.676,41,0.494,42,1.283,43,1.804,44,3.838,45,2.356,46,2.574,47,2.356,48,1.913,49,2.037,50,0.244,51,1.788,52,2.574,53,0.999,54,2.588,55,2.356,56,1.818,57,1.542,58,1.546,59,3.309,60,3.309,61,3.309,62,3.309,63,0.052,64,2.182,65,2.012,66,2.866,67,2.866,68,1.913,69,2.037,70,1.621,71,2.356,72,3.309,73,3.838,74,3.309,75,1.082,76,1.913,77,2.866,78,3.309,79,2.866,80,3.309,81,3.309,82,3.309,83,2.866,84,2.012,85,1.62,86,2.866,87,2.866,88,2.922,89,1.621,90,3.692,91,1.13,92,3.309,93,2.037,94,2.574,95,2.037,96,2.574,97,2.037,98,2.574,99,3.309,100,2.212,101,2.866,102,1.621,103,2.108,104,2.866,105,1.621,106,1.708,107,0.886,108,0.009,109,0.009]],["title/controllers/AppController.html",[110,1.329,111,2.772]],["body/controllers/AppController.html",[3,0.239,4,0.214,5,0.214,9,0.395,10,1.443,20,0.572,23,0.016,31,1.237,36,0.32,41,0.809,50,0.239,58,1.836,63,0.086,75,1.237,108,0.013,109,0.013,110,2.25,111,4.693,112,1.931,113,4.7,114,6.394,115,1.396,116,5.427,117,4.369,118,4.7,119,3.137,120,3.578,121,5.427]],["title/modules/AppModule.html",[122,1.175,123,2.772]],["body/modules/AppModule.html",[0,2.314,1,3.002,3,0.107,4,0.096,5,0.222,7,1.076,11,0.703,18,1.4,19,1.67,23,0.016,25,0.215,36,0.374,39,1.711,41,0.361,42,0.939,43,1.321,48,1.4,50,0.165,51,0.675,63,0.038,68,1.4,69,2.314,93,1.491,95,1.491,97,1.491,100,2.147,108,0.007,109,0.007,110,0.827,111,3.28,112,1.338,117,3.662,118,2.098,122,1.697,123,5.418,124,1.076,125,1.027,126,1.187,127,1.187,128,1.076,129,2.257,130,1.187,131,2.098,132,2.098,133,2.098,134,3.662,135,3.922,136,3.922,137,3.922,138,3.662,139,3.922,140,3.662,141,3.439,142,3.439,143,1.842,144,1.187,145,1.187,146,1.885,147,3.038,148,3.038,149,3.038,150,3.065,151,2.423,152,2.423,153,2.423,154,2.423,155,2.423,156,1.491,157,1.027,158,1.842,159,2.479,160,2.098,161,2.423,162,2.423,163,2.423,164,2.479,165,4.039,166,2.423,167,2.423,168,3.256,169,2.423,170,3.76,171,2.423,172,3.76,173,2.423,174,3.256,175,3.76,176,1.597,177,2.423,178,1.321,179,2.423,180,1.885,181,2.677,182,2.423,183,2.677,184,2.423,185,1.885,186,2.423,187,1.597,188,2.423,189,2.423,190,2.677,191,2.423,192,4.373,193,1.885,194,5.193,195,2.423,196,2.423,197,2.098,198,2.423,199,3.76,200,3.76,201,3.038,202,2.677,203,2.423,204,3.76,205,2.423,206,3.76,207,1.597,208,2.423,209,2.423,210,2.423,211,1.885,212,3.584,213,2.423,214,2.098,215,2.423,216,0.939,217,2.423,218,2.423,219,2.098,220,2.677,221,2.423,222,2.098,223,2.423,224,3.038,225,2.423,226,2.423,227,1.885,228,2.423,229,2.098,230,3.256,231,2.423,232,2.423,233,2.423,234,2.423,235,1.25,236,2.423,237,2.423,238,1.4,239,2.423,240,2.423,241,2.423,242,1.25,243,2.098,244,2.423,245,2.423,246,0.939,247,0.939,248,1.885,249,2.423,250,2.423,251,2.423,252,1.885,253,2.925,254,2.925,255,1.885,256,1.885,257,1.885,258,1.885,259,1.885,260,1.725,261,1.885,262,1.885,263,1.885,264,1.129,265,1.321,266,2.479,267,3.584,268,2.423,269,1.885]],["title/injectables/AppService.html",[40,0.554,117,2.396]],["body/injectables/AppService.html",[3,0.247,4,0.222,5,0.222,9,0.409,10,1.473,20,0.592,23,0.015,31,1.28,36,0.273,40,0.958,41,0.838,50,0.247,58,1.874,63,0.089,75,1.28,108,0.013,109,0.013,114,6.468,117,4.142,270,1.839,271,4.864,272,5.616,273,4.864,274,4.864]],["title/controllers/AuthController.html",[110,1.329,275,2.772]],["body/controllers/AuthController.html",[3,0.192,4,0.172,5,0.172,9,0.318,10,1.258,20,0.605,22,1.42,23,0.016,24,1.31,25,0.509,26,0.979,31,1.31,36,0.344,38,1.771,41,0.652,50,0.192,63,0.069,73,3.719,75,1.31,108,0.011,109,0.011,110,1.492,112,1.555,115,1.478,119,2.526,275,4.092,276,3.785,277,2.526,278,2.678,279,4.977,280,3.789,281,4.37,282,4.498,283,4.37,284,4.37,285,6.421,286,4.37,287,4.199,288,4.37,289,4.37,290,4.37,291,3.133,292,3.399,293,2.881,294,1.431,295,3.712,296,3.785,297,3.785,298,2.526,299,3.785,300,3.399,301,2.881,302,4.37,303,3.399,304,4.37,305,4.977,306,4.37,307,4.37,308,2.526,309,3.399,310,4.37,311,2.526,312,4.37,313,3.785,314,4.37,315,4.37,316,3.785,317,4.37,318,4.37,319,4.37]],["title/modules/AuthModule.html",[122,1.175,134,2.396]],["body/modules/AuthModule.html",[3,0.161,4,0.144,5,0.144,11,1.061,18,2.114,19,2.262,23,0.016,36,0.373,39,1.358,41,0.546,42,1.418,43,1.994,48,2.114,49,2.251,50,0.161,63,0.058,93,2.251,95,2.251,97,2.251,108,0.01,109,0.01,112,1.813,122,1.77,124,1.624,125,1.551,126,1.792,127,1.792,128,1.624,129,2.871,130,2.871,134,4.728,141,2.945,143,2.495,144,1.792,145,1.792,150,2.778,164,2.412,180,2.845,220,2.604,254,3.963,255,2.845,256,2.845,257,2.845,258,2.845,259,2.845,260,2.604,261,2.845,262,2.845,264,2.374,265,2.778,266,2.412,267,2.845,275,4.174,295,4.378,296,3.168,320,3.168,321,3.168,322,3.168,323,3.938,324,3.763,325,4.249,326,4.249,327,3.658,328,4.174,329,2.945,330,3.658,331,3.168,332,3.168,333,3.627,334,3.658,335,2.845,336,3.627,337,3.168,338,5.095,339,3.658,340,3.168,341,3.168,342,3.168,343,2.251,344,3.658]],["title/injectables/AuthService.html",[40,0.554,295,2.25]],["body/injectables/AuthService.html",[3,0.124,4,0.111,5,0.111,7,1.248,9,0.205,10,0.922,11,1.828,13,1.914,15,1.379,17,4.654,18,2.919,19,2.49,20,0.664,22,1.248,23,0.016,24,1.151,25,0.609,26,0.861,31,1.151,34,1.837,36,0.345,37,1.31,38,1.139,39,1.044,40,0.6,41,0.419,42,1.09,43,1.533,44,1.533,48,2.434,49,1.73,50,0.124,51,1.562,53,0.849,54,1.533,57,1.962,63,0.044,65,2.377,69,1.73,70,2.063,71,2.001,73,2.753,75,1.151,84,1.785,85,1.437,88,1.73,89,1.377,91,1.914,100,1.31,102,1.377,103,1.87,105,1.377,107,0.752,108,0.008,109,0.008,178,1.533,201,1.853,235,2.173,263,2.186,264,2.613,265,1.533,270,0.921,279,4.373,280,3.697,282,2.777,287,2.592,291,2.753,295,2.434,297,2.434,300,2.186,301,1.853,323,3.665,324,3.275,326,4.309,329,1.625,332,2.434,335,2.186,336,2.998,337,2.434,343,2.592,345,2.434,346,1.173,347,2.751,348,6.006,349,5.608,350,5.05,351,2.811,352,3.202,353,2.811,354,2.811,355,2.998,356,2.811,357,2.811,358,1.87,359,2.811,360,2.811,361,2.811,362,2.811,363,2.186,364,2.001,365,2.186,366,2.777,367,2.186,368,2.186,369,2.434,370,2.186,371,3.647,372,2.811,373,5.05,374,2.811,375,2.001,376,2.811,377,2.811,378,2.434,379,2.186,380,2.434,381,2.811,382,2.811,383,4.362,384,2.811,385,2.811,386,2.434,387,2.434,388,2.811]],["title/guards/AuthenticationGuard.html",[0,2.396,181,2.772]],["body/guards/AuthenticationGuard.html",[0,2.045,1,3.982,2,5.203,3,0.146,4,0.131,5,0.131,7,1.475,9,0.242,10,1.042,11,1.613,12,6.447,13,2.283,15,1.559,20,0.501,22,1.176,23,0.016,24,1.085,25,0.538,26,0.811,27,4.122,28,4.324,30,2.19,31,1.085,32,2.331,36,0.312,37,1.548,38,1.346,40,0.678,41,0.495,46,2.584,47,2.365,50,0.146,51,1.692,63,0.052,64,2.19,65,2.018,66,2.877,67,2.877,68,1.92,75,1.085,84,2.575,85,1.898,87,2.877,88,3.424,91,1.134,100,2.218,103,1.475,104,2.877,105,1.627,106,1.714,107,0.889,108,0.009,109,0.009,176,2.19,178,1.811,181,3.389,227,3.702,278,2.83,298,2.751,346,0.925,355,2.365,389,2.877,390,4.759,391,4.759,392,4.759,393,3.322,394,7.047,395,3.322,396,3.322,397,2.877,398,3.702,399,2.584,400,4.759,401,3.322,402,3.322,403,3.322,404,2.19,405,2.877,406,5.562,407,4.122,408,3.322,409,3.322,410,3.322,411,3.322,412,3.322,413,3.322,414,3.322,415,2.751,416,4.759,417,3.322,418,3.322,419,3.322,420,3.322,421,2.584,422,2.584,423,2.365,424,4.759,425,2.877,426,3.322,427,4.122,428,3.322,429,3.322,430,3.322,431,3.322,432,4.759,433,2.584]],["title/injectables/BcryptProvider.html",[40,0.554,333,2.772]],["body/injectables/BcryptProvider.html",[3,0.158,4,0.141,5,0.141,9,0.261,10,1.1,11,1.681,20,0.529,22,1.241,23,0.016,24,1.145,25,0.608,26,0.856,31,1.433,32,3.52,34,2.058,36,0.282,40,0.715,41,0.535,50,0.158,51,1.615,58,2.002,63,0.057,64,2.363,75,1.145,76,2.903,91,1.223,107,0.959,108,0.01,109,0.01,224,3.311,235,4.058,270,1.174,293,4.143,323,2.738,333,3.576,347,2.153,355,3.576,367,2.788,375,4.474,379,4.888,434,3.104,435,5.022,436,5.022,437,3.104,438,3.584,439,4.35,440,5.442,441,6.477,442,4.51,443,4.888,444,3.907,445,4.35,446,3.576,447,3.104,448,3.584,449,5.022,450,5.442,451,5.73,452,3.584,453,3.092,454,3.104,455,5.022,456,3.584,457,3.584,458,3.104,459,3.584]],["title/classes/CreateManyUsersDto.html",[63,0.061,460,2.396]],["body/classes/CreateManyUsersDto.html",[3,0.193,4,0.173,5,0.173,9,0.32,20,0.463,23,0.016,25,0.646,36,0.345,50,0.193,53,1.741,57,2.687,63,0.102,100,3.307,107,1.175,108,0.011,109,0.011,115,1.129,235,2.975,246,1.703,346,1.606,423,4.105,460,3.549,461,1.703,462,4.485,463,3.549,464,3.127,465,4.369,466,3.87,467,3.127,468,4.485,469,3.333,470,3.802,471,5.919,472,4.485,473,2.975,474,4.392,475,3.804,476,4.392,477,2.975,478,4.993,479,1.779,480,2.703,481,2.703,482,3.802,483,1.862,484,2.896,485,3.802,486,4.392,487,3.802,488,5.766,489,4.392,490,5.766,491,4.392,492,4.392,493,3.804]],["title/classes/CreateMetaOptionsDto.html",[63,0.061,494,2.396]],["body/classes/CreateMetaOptionsDto.html",[3,0.23,4,0.207,5,0.207,9,0.381,20,0.551,23,0.016,25,0.464,36,0.254,50,0.23,58,1.946,63,0.102,108,0.012,109,0.012,115,1.346,158,3.158,346,1.796,461,2.029,477,3.763,479,2.121,482,4.251,494,3.969,495,3.327,496,5.015,497,4.534,498,5.435,499,5.235,500,5.235,501,5.015,502,3.222,503,4.534,504,4.072,505,3.026]],["title/classes/CreatePostDto.html",[63,0.061,506,2.396]],["body/classes/CreatePostDto.html",[3,0.09,4,0.081,5,0.081,9,0.149,20,0.674,23,0.016,25,0.686,26,1.091,30,2.167,36,0.251,50,0.09,56,1.35,58,2.036,63,0.065,76,1.899,83,1.769,100,2.983,103,1.459,107,1.838,108,0.006,109,0.006,115,1.646,158,1.61,214,2.846,242,2.127,273,3.57,274,3.57,294,2.408,308,1.181,311,2.991,346,1.148,421,2.556,423,3.684,446,1.455,453,2.023,461,0.792,467,2.935,469,1.181,470,3.645,471,2.846,472,2.556,473,3.748,475,1.769,477,2.999,478,2.846,479,0.828,481,1.258,482,3.832,483,0.866,493,3.57,494,2.907,495,1.054,496,1.589,498,1.589,501,2.556,502,3.403,503,1.769,504,1.589,505,2.383,506,2.023,507,5.667,508,1.589,509,4.441,510,2.935,511,2.935,512,3.57,513,3.57,514,2.935,515,3.412,516,3.832,517,4.482,518,3.684,519,3.362,520,4.09,521,2.043,522,2.043,523,2.846,524,2.167,525,3.673,526,2.846,527,4.788,528,2.043,529,2.043,530,4.122,531,4.122,532,2.043,533,2.043,534,4.025,535,3.286,536,4.723,537,4.723,538,2.383,539,3.57,540,3.57,541,2.043,542,2.043,543,3.195,544,4.09,545,3.286,546,3.286,547,3.286,548,3.286,549,2.043,550,2.043,551,3.286,552,3.286,553,4.3,554,2.043,555,2.043,556,2.043,557,2.043,558,2.846,559,2.043,560,4.09,561,3.673,562,2.023,563,2.846,564,2.846,565,2.846,566,2.556,567,2.846,568,2.167,569,2.043,570,4.025,571,2.846,572,2.846,573,2.846,574,2.043,575,2.043,576,3.286,577,2.043,578,2.043,579,2.043,580,2.043,581,2.556,582,2.043,583,3.57,584,2.043,585,3.195,586,2.846,587,1.589,588,1.589,589,1.769,590,3.936,591,1.589,592,2.043,593,1.347,594,1.769,595,2.556,596,2.043,597,2.043,598,1.769,599,1.769,600,2.043,601,3.286,602,2.043,603,2.043,604,1.769,605,1.347,606,2.043,607,2.043,608,0.759,609,1.347,610,1.589,611,1.769,612,1.589]],["title/classes/CreateTagDto.html",[63,0.061,613,2.567]],["body/classes/CreateTagDto.html",[3,0.151,4,0.135,5,0.135,9,0.25,20,0.686,23,0.015,24,1.484,25,0.669,26,1.152,36,0.237,50,0.151,58,2.119,63,0.077,107,1.935,108,0.009,109,0.009,115,1.674,294,2.019,346,1.357,446,2.443,461,1.33,467,3.468,473,3.783,477,2.922,479,1.39,482,3.734,483,1.455,501,3.789,502,3.794,509,3.468,510,4.031,514,4.031,515,4.292,518,3.468,519,3.468,520,4.218,523,4.218,524,3.211,525,5.26,526,4.218,527,5.338,558,4.218,560,5.338,561,4.794,562,3.794,563,4.218,564,4.218,565,4.218,566,3.789,567,4.218,568,3.211,585,3.563,586,4.218,587,2.669,588,2.669,590,4.388,594,2.972,598,2.972,599,2.972,604,2.972,613,3.211,614,5.856,615,2.972,616,3.36,617,4.871,618,4.871,619,4.218,620,3.431,621,3.431,622,3.431,623,4.218,624,3.431,625,4.218,626,3.431,627,3.431,628,3.431,629,3.431,630,3.431,631,3.431,632,2.972,633,3.431]],["title/classes/CreateUserDto.html",[63,0.061,466,2.123]],["body/classes/CreateUserDto.html",[3,0.181,4,0.162,5,0.162,9,0.3,20,0.732,23,0.015,25,0.616,26,1.219,36,0.2,50,0.181,56,1.809,57,2.904,58,2.118,63,0.087,108,0.011,109,0.011,115,1.787,235,3.217,346,1.539,446,2.931,461,1.596,462,5.564,464,2.931,466,3.011,477,3.438,479,1.668,485,4.11,487,4.11,502,4.277,562,3.4,566,4.296,585,3.851,587,3.202,588,3.202,632,4.783,634,4.11,635,4.116,636,4.116,637,4.116,638,4.116,639,4.116,640,4.116,641,4.116,642,4.116,643,4.116,644,6.662,645,5.523,646,5.523,647,4.783,648,5.523,649,5.564,650,5.523,651,5.523,652,5.523,653,4.116,654,4.783,655,6.662,656,4.116,657,4.116]],["title/injectables/CreateUserProvider.html",[40,0.554,658,2.396]],["body/injectables/CreateUserProvider.html",[3,0.133,4,0.119,5,0.119,9,0.22,10,0.972,11,1.683,13,1.797,15,1.453,20,0.468,22,1.096,23,0.016,24,1.012,25,0.514,26,0.756,31,0.688,32,2.174,34,1.453,36,0.325,37,2.453,38,1.222,39,1.12,40,0.632,41,0.45,44,1.645,50,0.133,51,0.84,53,2.15,57,2.068,63,0.048,65,2.232,70,2.174,75,0.688,84,2.461,85,2.111,88,1.857,89,2.174,91,2.111,102,2.174,103,2.578,105,2.579,106,2.29,107,1.409,108,0.009,109,0.009,122,1.34,157,1.279,216,1.17,235,2.996,246,1.72,264,2.453,266,1.989,269,2.346,270,0.988,323,3.742,329,1.744,343,1.857,347,1.955,363,2.346,366,1.989,367,2.346,368,2.346,369,3.843,371,4.559,375,3.159,378,3.843,415,1.744,433,2.346,466,2.42,469,1.744,470,1.989,480,1.857,484,1.989,519,2.148,634,3.471,658,2.732,659,4.559,660,2.613,661,4.095,662,3.017,663,3.339,664,4.117,665,3.017,666,3.843,667,2.613,668,3.017,669,1.478,670,1.857,671,3.017,672,3.017,673,2.613,674,3.017,675,3.017,676,2.346,677,3.017,678,3.017,679,3.017,680,5.805,681,5.805,682,3.452,683,2.613,684,3.017,685,2.613,686,3.017,687,3.017,688,3.017,689,2.346,690,2.148,691,2.346,692,3.017,693,4.812,694,3.017,695,2.346,696,3.017,697,3.017,698,2.613,699,3.017,700,3.017,701,3.017,702,3.017,703,2.613,704,2.346,705,1.989,706,2.613]],["title/injectables/DataResponseInterceptor.html",[40,0.554,183,2.772]],["body/injectables/DataResponseInterceptor.html",[3,0.183,4,0.164,5,0.164,9,0.303,10,1.219,13,1.421,15,1.823,19,2.972,20,0.586,22,1.375,23,0.016,24,1.269,25,0.493,26,0.949,28,4.765,30,3.67,31,0.95,36,0.325,39,1.546,40,0.793,41,0.621,42,1.615,44,2.271,46,4.877,47,2.965,50,0.183,63,0.066,64,2.746,65,1.765,68,2.407,75,1.269,77,5.797,108,0.011,109,0.011,168,3.607,183,3.963,185,4.877,270,1.364,415,3.218,707,5.43,708,3.607,709,5.567,710,4.165,711,4.165,712,5.567,713,5.567,714,4.877,715,6.693,716,4.165,717,5.567,718,4.165,719,4.165,720,4.165,721,3.607,722,4.165,723,6.693,724,5.567,725,6.693,726,4.165,727,4.165,728,4.165,729,4.165,730,3.859,731,4.165,732,4.165,733,4.165,734,4.165]],["title/controllers/FileUploadController.html",[110,1.329,735,2.772]],["body/controllers/FileUploadController.html",[3,0.171,4,0.154,5,0.297,9,0.284,10,1.166,13,1.331,15,1.277,20,0.411,22,0.963,23,0.016,24,1.643,25,0.537,26,0.664,31,0.889,36,0.331,39,1.448,41,0.582,45,4.316,50,0.171,63,0.062,68,2.254,73,2.126,75,0.889,100,3.28,107,1.963,108,0.01,109,0.01,110,1.331,112,1.388,115,1.003,120,2.571,187,3.51,277,2.254,294,1.744,470,4.641,483,1.653,509,3.791,619,3.377,730,3.277,735,3.791,736,3.077,737,3.377,738,4.069,739,4.611,740,3.899,741,4.716,742,3.899,743,3.899,744,3.899,745,3.899,746,3.899,747,3.377,748,3.899,749,3.377,750,5.324,751,5.324,752,3.791,753,4.01,754,3.377,755,3.899,756,5.324,757,3.899,758,3.377,759,3.899,760,3.899,761,3.899,762,5.324,763,3.899,764,3.899,765,3.899,766,2.776,767,3.033,768,3.899,769,3.899,770,3.899]],["title/modules/FileUploadModule.html",[122,1.175,135,2.567]],["body/modules/FileUploadModule.html",[3,0.206,4,0.185,5,0.262,23,0.016,36,0.371,41,0.7,42,1.82,50,0.206,63,0.074,108,0.012,109,0.012,112,2.142,122,2.006,124,2.085,125,1.99,126,2.299,127,2.299,128,2.085,129,3.255,130,2.299,135,5.037,143,2.949,144,2.299,145,2.299,150,2.559,156,2.889,157,1.99,164,3.095,187,3.095,190,3.342,735,4.732,736,2.713,738,2.713,753,4.566,754,4.065,771,4.065,772,4.065,773,4.566,774,4.694,775,4.694,776,4.065,777,4.065,778,3.651,779,4.065,780,4.694,781,4.694]],["title/injectables/FileUploadService.html",[40,0.554,753,2.396]],["body/injectables/FileUploadService.html",[3,0.222,4,0.143,5,0.279,9,0.264,10,1.108,11,1.691,13,1.99,15,1.657,19,2.803,20,0.533,22,1.25,23,0.016,24,1.153,25,0.61,26,0.862,31,0.825,34,1.657,36,0.343,39,1.344,40,0.72,41,0.54,42,1.404,50,0.159,51,1.624,63,0.057,75,0.825,84,2.144,85,1.99,89,1.773,91,1.726,102,1.773,103,1.608,108,0.01,109,0.01,157,1.535,187,3.844,190,2.578,207,2.387,212,3.935,216,1.404,265,1.974,270,1.186,347,2.165,358,1.608,368,2.816,663,3.427,670,2.228,695,2.816,736,3.37,738,3.839,739,5.049,741,2.816,753,3.114,767,2.816,773,4.235,776,3.135,777,3.135,778,2.816,779,3.135,782,3.135,783,3.62,784,5.83,785,5.049,786,3.62,787,3.62,788,3.62,789,5.058,790,3.62,791,2.816,792,3.62,793,3.135,794,3.62,795,3.62,796,3.62,797,3.62,798,3.62,799,3.62,800,3.62,801,3.62,802,3.62,803,3.62,804,3.935,805,3.62,806,5.83,807,3.62,808,3.62,809,3.135,810,3.62,811,2.816,812,3.62,813,3.135,814,3.135,815,3.135,816,3.135,817,3.62,818,2.578,819,3.62,820,3.62,821,3.62]],["title/injectables/GenerateTokenProvider.html",[40,0.554,324,2.123]],["body/injectables/GenerateTokenProvider.html",[3,0.153,4,0.138,5,0.138,7,1.548,9,0.254,10,1.078,11,1.971,13,2.235,15,1.613,16,2.711,17,4.839,18,3.301,19,2.756,20,0.602,22,1.534,23,0.016,24,1.302,25,0.632,26,0.973,31,1.123,34,2.033,36,0.33,39,1.294,40,0.701,41,0.52,42,1.351,43,1.9,48,2.847,49,2.145,50,0.153,51,1.372,53,2.052,54,1.9,55,2.481,56,1.613,57,1.624,63,0.055,65,2.088,69,2.145,70,1.707,71,2.481,73,1.9,75,1.123,90,4.828,91,2.118,93,2.145,94,2.711,95,2.145,96,2.711,97,2.145,98,2.711,108,0.01,109,0.01,178,1.9,201,2.298,260,4.839,264,1.624,270,1.141,280,3.247,324,2.685,347,2.121,358,2.187,365,2.711,370,2.711,383,3.831,685,3.018,818,2.481,822,5.375,823,2.711,824,5.711,825,6.548,826,3.485,827,3.485,828,3.485,829,3.831,830,3.485,831,3.485,832,2.711,833,5.093,834,3.485,835,3.485,836,4.925,837,3.485,838,3.485,839,3.485,840,4.925,841,3.485,842,4.925,843,3.485]],["title/classes/GetPostsBaseDto.html",[63,0.061,844,2.772]],["body/classes/GetPostsBaseDto.html",[3,0.216,4,0.194,5,0.194,9,0.358,20,0.653,23,0.016,25,0.549,26,1.215,36,0.33,50,0.216,63,0.107,108,0.012,109,0.012,115,1.594,346,1.727,461,1.906,479,1.992,483,2.084,543,4.122,581,5.282,585,3.925,593,3.241,676,3.823,844,4.834,845,5.282,846,3.823,847,5.282,848,5.282,849,6.199,850,4.915,851,4.915,852,5.369,853,3.823,854,4.257,855,3.816,856,3.5,857,3.823,858,3.026,859,3.5]],["title/classes/GetPostsQueryDto.html",[63,0.061,858,2.396]],["body/classes/GetPostsQueryDto.html",[3,0.232,4,0.208,5,0.208,23,0.016,36,0.34,50,0.232,63,0.111,108,0.013,109,0.013,461,2.041,479,2.134,483,2.232,543,3.74,581,5.449,585,4.049,593,3.472,676,4.096,844,4.987,845,4.096,846,4.096,847,4.096,848,4.096,852,6.067,853,4.096,854,4.561,855,4.312,856,3.749,857,4.096,858,3.983,859,4.607]],["title/classes/GetUsersParamDto.html",[63,0.061,860,2.567]],["body/classes/GetUsersParamDto.html",[3,0.218,4,0.196,5,0.196,9,0.361,20,0.522,23,0.016,25,0.653,26,1.062,36,0.331,50,0.218,53,1.881,56,2.414,58,1.381,63,0.108,107,1.327,108,0.012,109,0.012,115,1.275,346,1.736,461,1.922,465,3.836,473,3.216,479,2.008,481,3.051,483,2.101,518,3.529,583,5.397,585,3.602,590,4.437,608,2.736,610,4.847,682,3.855,860,4.109,861,5.397,862,4.293,863,4.437,864,4.957,865,4.957,866,4.957]],["title/controllers/GoogleAuthenticationController.html",[110,1.329,328,2.772]],["body/controllers/GoogleAuthenticationController.html",[3,0.213,4,0.191,5,0.191,9,0.353,10,1.346,13,1.655,15,1.588,20,0.511,22,1.198,23,0.016,24,1.105,25,0.43,26,0.826,31,1.105,36,0.345,38,1.964,41,0.723,50,0.213,63,0.077,73,2.643,75,1.105,108,0.012,109,0.012,110,1.655,112,1.725,115,1.247,263,4.78,277,2.802,278,2.259,291,3.868,292,3.771,294,2.013,298,2.802,299,4.199,301,3.197,303,3.771,305,4.199,325,4.153,328,4.375,340,4.199,867,4.78,868,4.199,869,4.375,870,6.145,871,4.848,872,4.678,873,4.848,874,4.848,875,4.199,876,4.848,877,4.848,878,4.848]],["title/injectables/GoogleAuthenticationService.html",[40,0.554,325,2.396]],["body/injectables/GoogleAuthenticationService.html",[3,0.138,4,0.124,5,0.124,9,0.228,10,0.999,11,1.561,13,2.238,15,1.495,19,2.625,20,0.623,22,1.128,23,0.016,24,1.04,25,0.557,26,0.778,31,1.04,34,1.495,36,0.329,39,1.164,40,0.65,41,0.467,42,1.215,50,0.138,51,1.886,53,2.094,55,2.231,57,2.508,63,0.049,64,2.066,65,1.329,69,1.929,73,3.575,75,1.227,79,2.714,84,1.329,85,1.837,89,1.535,90,4.186,91,1.837,102,1.535,103,2.027,105,1.535,106,1.617,107,0.839,108,0.009,109,0.009,246,1.215,253,2.438,264,1.46,265,1.709,270,1.026,278,1.46,301,2.066,324,3.223,325,2.809,329,1.811,335,2.438,336,2.231,341,2.714,342,2.714,343,1.929,346,1.271,347,1.998,352,3.398,358,1.392,364,2.231,366,2.066,485,2.066,487,2.066,634,4.143,690,2.231,693,3.55,721,2.714,818,2.231,867,4.887,869,3.249,872,3.009,875,2.714,879,2.714,880,5.382,881,5.382,882,6.558,883,3.134,884,5.382,885,3.134,886,4.563,887,3.134,888,3.134,889,3.134,890,2.438,891,5.912,892,3.134,893,3.134,894,2.714,895,3.134,896,3.134,897,4.563,898,3.134,899,4.563,900,3.134,901,3.134,902,3.134,903,3.134,904,2.714,905,3.134,906,3.134,907,3.134,908,3.134,909,3.134,910,4.563,911,4.563,912,2.714,913,3.134,914,3.134,915,2.714,916,3.134,917,4.563,918,3.134,919,2.714,920,2.714,921,3.134]],["title/classes/GoogleTokenDto.html",[63,0.061,872,2.567]],["body/classes/GoogleTokenDto.html",[3,0.247,4,0.222,5,0.222,9,0.409,20,0.592,23,0.015,25,0.498,36,0.273,50,0.247,58,1.874,63,0.106,108,0.013,109,0.013,115,1.444,346,1.874,461,2.177,477,3.718,479,2.276,872,4.436,922,5.827,923,4.368,924,7.204,925,5.616]],["title/injectables/HashingProvider.html",[40,0.554,323,2.123]],["body/injectables/HashingProvider.html",[3,0.182,4,0.164,5,0.164,9,0.302,10,1.215,20,0.585,22,1.371,23,0.016,24,1.265,25,0.635,26,0.946,31,1.426,32,3.511,34,2.188,36,0.201,40,0.79,41,0.618,50,0.182,58,1.94,63,0.065,76,3.208,107,1.109,108,0.011,109,0.011,235,3.99,270,1.358,293,4.124,323,3.025,355,3.951,375,3.951,379,4.866,380,4.806,435,5.417,436,5.417,437,3.59,439,4.806,441,5.417,443,4.316,444,4.316,445,4.806,447,3.59,451,5.786,453,3.416,454,3.59,458,3.59,926,3.59,927,7.32,928,4.145,929,6.68,930,5.196,931,5.549,932,4.145,933,4.145,934,4.145]],["title/modules/MailModule.html",[122,1.175,136,2.567]],["body/modules/MailModule.html",[3,0.171,4,0.153,5,0.153,11,1.128,23,0.016,36,0.356,39,1.445,41,0.58,42,1.508,50,0.171,53,1.175,63,0.061,68,2.249,70,1.906,75,0.887,85,1.328,100,1.813,108,0.01,109,0.01,112,1.892,122,2.057,124,2.361,125,1.649,126,1.906,127,1.906,128,1.728,129,2.966,130,2.966,136,4.748,143,2.604,144,1.906,145,1.906,150,2.898,164,2.565,165,5.301,197,3.369,207,2.565,211,4.135,220,2.77,222,4.604,230,3.369,242,2.008,269,4.135,278,1.813,415,2.249,453,2.395,664,4.711,935,3.369,936,3.369,937,3.369,938,3.891,939,3.891,940,3.891,941,3.891,942,3.891,943,4.135,944,3.026,945,3.026,946,5.316,947,3.891,948,3.891,949,3.891,950,3.891,951,3.891,952,3.891,953,3.891,954,3.891,955,3.891,956,3.891,957,3.891,958,3.891,959,3.891,960,3.891,961,3.891,962,3.891,963,3.891,964,3.891,965,3.891,966,3.891,967,3.891,968,3.369,969,3.369,970,3.891,971,3.891,972,3.891,973,3.891,974,3.369,975,3.891,976,3.891,977,3.891,978,3.891]],["title/injectables/MailService.html",[40,0.554,664,2.396]],["body/injectables/MailService.html",[3,0.201,4,0.18,5,0.18,9,0.333,10,1.296,11,1.903,15,1.498,20,0.624,22,1.463,23,0.016,24,1.35,25,0.615,26,1.009,30,3.015,31,1.043,32,2.9,34,1.939,36,0.319,40,0.843,41,0.682,50,0.201,51,1.274,53,2.171,57,3.059,63,0.072,91,1.561,108,0.011,109,0.011,119,2.643,270,1.498,347,2.437,485,3.903,487,3.903,519,4.215,664,3.644,832,3.557,943,3.557,944,3.557,968,3.961,969,3.961,979,3.961,980,6.564,981,4.573,982,7.366,983,4.573,984,4.573,985,4.573,986,4.573,987,4.573,988,4.573,989,4.573,990,4.573]],["title/entities/MetaOption.html",[247,1.509,991,2.123]],["body/entities/MetaOption.html",[3,0.187,4,0.168,5,0.168,9,0.31,20,0.74,23,0.016,25,0.64,36,0.274,50,0.187,56,1.849,58,1.573,63,0.067,108,0.011,109,0.011,115,1.807,216,1.649,238,2.459,242,2.914,247,2.189,294,2.48,346,1.573,495,3.726,498,4.929,543,3.902,553,4.392,608,2.353,991,3.078,992,4.761,993,3.685,994,5.489,995,5.489,996,4.929,997,4.255,998,4.178,999,4.255,1000,2.805,1001,3.723,1002,4.255,1003,3.685,1004,5.646,1005,4.89,1006,4.255,1007,4.255,1008,4.929,1009,4.255,1010,3.309,1011,3.723,1012,4.89,1013,4.89,1014,3.309,1015,3.309,1016,4.255,1017,4.255,1018,3.309]],["title/controllers/MetaOptionsController.html",[110,1.329,148,2.567]],["body/controllers/MetaOptionsController.html",[3,0.216,4,0.194,5,0.194,9,0.358,10,1.357,20,0.518,22,1.214,23,0.016,24,1.121,25,0.436,26,0.838,31,1.121,36,0.33,41,0.733,50,0.216,51,1.369,63,0.078,75,1.121,108,0.012,109,0.012,110,1.678,112,1.749,115,1.264,119,2.841,148,4.087,158,3.326,159,4.087,277,2.841,291,2.68,294,2.224,453,3.816,494,4.691,495,3.199,511,4.834,591,3.823,669,2.408,1019,4.257,1020,6.199,1021,4.915,1022,4.915,1023,4.18,1024,4.257,1025,4.915,1026,4.915,1027,4.915]],["title/modules/MetaOptionsModule.html",[122,1.175,137,2.567]],["body/modules/MetaOptionsModule.html",[3,0.214,4,0.192,5,0.192,23,0.016,36,0.356,41,0.725,50,0.214,63,0.077,108,0.012,109,0.012,112,2.191,122,2.04,124,2.159,125,2.061,126,2.381,127,2.381,128,2.159,129,3.309,130,3.309,137,5.013,143,3.015,144,2.381,145,2.381,148,4.454,150,2.65,156,2.992,157,2.061,158,3.015,159,3.205,160,4.21,495,2.509,991,2.65,1023,4.87,1024,4.21,1028,4.21,1029,4.21,1030,4.21,1031,4.861,1032,4.21,1033,3.205,1034,4.861]],["title/injectables/MetaOptionsService.html",[40,0.554,1023,2.396]],["body/injectables/MetaOptionsService.html",[3,0.196,4,0.176,5,0.176,9,0.325,10,1.275,11,1.88,13,1.522,15,1.907,20,0.613,22,1.439,23,0.016,24,1.328,25,0.609,26,0.992,31,1.016,34,1.907,36,0.346,40,0.829,41,0.665,50,0.196,51,1.242,63,0.07,65,1.89,70,2.184,75,1.016,91,1.987,108,0.011,109,0.011,157,1.89,158,2.852,159,4.275,216,1.728,246,2.514,264,2.077,270,1.46,347,2.408,358,1.98,453,2.744,494,3.584,495,3.346,511,4.145,591,3.468,663,3.681,669,2.184,670,2.744,991,2.431,1023,3.584,1032,3.861,1033,2.939,1035,3.861,1036,4.458,1037,4.458,1038,5.616,1039,3.861,1040,4.458,1041,4.458,1042,5.823,1043,4.458,1044,4.458]],["title/interfaces/Paginated.html",[1045,2.772,1046,2.567]],["body/interfaces/Paginated.html",[3,0.222,4,0.199,5,0.199,9,0.367,23,0.015,25,0.686,34,2.357,50,0.222,56,2.357,58,2.063,108,0.012,109,0.012,158,3.524,247,1.954,346,1.755,386,4.366,387,4.366,568,3.324,714,3.921,730,4.429,829,5.343,1045,3.589,1046,4.153,1047,5.041,1048,4.366,1049,6.232,1050,5.041,1051,4.366,1052,4.366,1053,4.366,1054,4.366,1055,4.366,1056,4.366,1057,4.366]],["title/modules/PaginationModule.html",[122,1.175,138,2.396]],["body/modules/PaginationModule.html",[3,0.23,4,0.207,5,0.207,23,0.015,36,0.313,41,0.781,50,0.23,63,0.083,108,0.012,109,0.012,122,2.109,124,2.325,125,2.219,126,2.564,127,2.564,128,2.325,129,3.422,130,3.422,138,4.755,142,4.618,143,3.158,144,2.564,145,2.564,1058,4.534,1059,4.534,1060,5.235,1061,5.235,1062,5.235]],["title/classes/PaginationQueryDto.html",[63,0.061,855,2.396]],["body/classes/PaginationQueryDto.html",[3,0.19,4,0.171,5,0.171,9,0.315,20,0.602,23,0.016,25,0.656,26,1.158,36,0.31,50,0.19,56,2.549,63,0.101,107,1.528,108,0.011,109,0.011,115,1.468,308,4.194,346,1.591,461,1.678,472,4.442,473,3.507,479,1.753,481,2.664,483,1.834,505,3.301,518,4.065,538,4.083,585,3.694,590,4.55,605,4.481,647,5.885,855,3.515,856,4.55,1063,3.748,1064,4.214,1065,6.643,1066,5.286,1067,5.71,1068,4.327,1069,4.327,1070,6.391]],["title/injectables/PaginationService.html",[40,0.554,142,2.25]],["body/injectables/PaginationService.html",[3,0.155,4,0.139,5,0.139,9,0.256,10,1.086,11,1.665,13,1.201,15,1.624,20,0.522,22,1.419,23,0.016,24,1.131,25,0.582,26,0.845,31,0.802,32,2.429,34,1.624,36,0.331,39,1.307,40,0.706,41,0.525,44,3.9,45,2.506,50,0.155,51,2.026,63,0.056,65,1.492,75,0.802,76,2.034,85,1.201,91,1.693,108,0.01,109,0.01,120,2.321,142,2.867,158,1.724,176,2.321,216,1.365,270,1.153,347,2.132,415,2.034,525,2.738,538,4.204,568,2.321,605,4.11,663,3.217,714,2.738,730,2.167,829,2.738,855,3.053,857,2.738,1015,2.738,1046,3.27,1049,3.048,1051,3.048,1052,4.295,1053,3.048,1054,4.973,1055,3.048,1056,3.048,1057,3.048,1064,4.333,1071,3.048,1072,5.742,1073,3.52,1074,3.52,1075,3.52,1076,3.52,1077,3.52,1078,3.52,1079,3.52,1080,3.52,1081,4.973,1082,3.27,1083,3.52,1084,3.52,1085,3.52,1086,5.742,1087,3.52,1088,3.52,1089,4.959,1090,3.52,1091,3.52,1092,3.52,1093,3.52,1094,3.52,1095,4.959,1096,3.52,1097,3.52,1098,3.52,1099,3.52,1100,3.52,1101,3.52,1102,3.52]],["title/classes/PatchPostDto.html",[63,0.061,1103,2.567]],["body/classes/PatchPostDto.html",[3,0.209,4,0.187,5,0.187,9,0.346,20,0.5,23,0.016,25,0.592,36,0.361,50,0.209,56,2.188,63,0.096,107,1.27,108,0.012,109,0.012,115,1.22,224,3.128,246,1.839,294,1.985,346,1.689,404,3.997,461,1.839,467,3.378,473,3.128,477,3.128,479,1.922,482,3.997,483,2.011,506,2.92,508,3.69,593,3.128,608,2.7,610,4.715,853,3.69,859,4.315,863,4.315,1103,3.997,1104,5.25,1105,6.061,1106,4.715,1107,4.744,1108,4.744,1109,5.25,1110,3.69,1111,6.061,1112,4.715,1113,4.744,1114,4.744,1115,4.744,1116,4.744,1117,4.744,1118,4.744]],["title/classes/PatchUserDto.html",[63,0.061,1119,2.772]],["body/classes/PatchUserDto.html",[3,0.253,4,0.227,5,0.227,23,0.015,36,0.332,50,0.253,63,0.091,108,0.013,109,0.013,246,2.234,404,3.799,461,2.234,464,4.102,466,3.142,480,3.547,859,4.864,1109,4.99,1112,4.482,1119,4.864,1120,4.99,1121,6.832]],["title/entities/Post.html",[247,1.509,294,1.275]],["body/entities/Post.html",[3,0.114,4,0.103,5,0.103,9,0.19,10,0.569,20,0.746,23,0.016,25,0.669,26,1.17,36,0.282,50,0.114,53,1.848,56,1.3,58,1.912,63,0.041,85,0.888,100,3.404,108,0.008,109,0.008,115,1.82,158,1.274,216,1.008,238,1.503,242,3.542,246,1.008,247,1.539,294,1.3,308,3.116,311,2.784,346,1.106,469,2.295,505,1.503,509,3.429,510,3.429,511,4.532,512,4.171,513,4.171,514,3.429,515,3.176,516,3.828,517,4.171,534,4.516,543,2.295,570,4.516,589,2.252,595,5.106,608,1.788,609,3.176,616,2.939,730,1.601,832,2.023,930,4.193,945,2.023,991,3.165,992,1.715,998,3.176,1000,4.328,1001,4.857,1003,2.252,1011,4.435,1012,3.439,1013,3.439,1014,4.193,1018,3.089,1033,1.715,1122,2.252,1123,2.601,1124,3.971,1125,6.12,1126,2.601,1127,2.601,1128,4.357,1129,4.357,1130,3.089,1131,2.601,1132,2.601,1133,3.971,1134,2.601,1135,2.601,1136,3.439,1137,2.601,1138,2.601,1139,2.827,1140,3.089,1141,2.601,1142,2.601,1143,2.252,1144,3.971,1145,2.601,1146,2.601,1147,3.439,1148,2.601,1149,3.439,1150,3.439,1151,3.971,1152,2.601,1153,2.601,1154,2.601,1155,2.601,1156,2.252,1157,4.171,1158,2.601,1159,2.601,1160,2.601,1161,2.252,1162,2.601,1163,2.252,1164,2.601,1165,2.601,1166,2.601,1167,2.601,1168,3.971,1169,2.601,1170,2.252,1171,2.601,1172,2.601]],["title/controllers/PostsController.html",[110,1.329,147,2.567]],["body/controllers/PostsController.html",[3,0.086,4,0.077,5,0.077,6,1.134,7,0.871,9,0.143,10,0.696,20,0.486,22,1.14,23,0.016,24,1.052,25,0.56,26,0.786,31,1.402,32,1.964,36,0.299,37,0.914,38,0.795,41,0.293,44,2.515,50,0.086,51,1.117,53,2.124,54,2.515,56,1.949,58,0.886,63,0.031,70,1.558,75,1.052,76,3.137,84,1.348,85,2.157,86,1.699,88,1.208,107,1.794,108,0.006,109,0.006,110,0.67,112,0.698,115,1.186,119,1.134,120,1.293,147,2.097,178,1.07,224,2.097,252,4.221,277,1.134,278,0.914,291,1.734,293,3.041,294,2.469,298,1.134,311,2.666,399,1.526,415,1.134,423,2.264,425,2.754,440,2.754,443,2.474,444,3.587,468,3.587,469,2.666,473,1.012,483,0.832,506,4.287,562,3.34,608,2.4,612,1.526,669,0.961,682,3.943,703,2.754,705,1.293,730,4.057,752,3.609,766,3.284,833,3.587,858,2.839,863,3.284,1066,3.587,1082,2.097,1103,3.768,1106,4.221,1110,2.474,1161,4.7,1173,1.699,1174,5.054,1175,3.587,1176,3.18,1177,3.473,1178,3.473,1179,1.962,1180,3.587,1181,3.18,1182,1.962,1183,1.962,1184,1.962,1185,5.427,1186,3.18,1187,5.427,1188,5.952,1189,5.427,1190,5.427,1191,4.612,1192,3.18,1193,1.962,1194,3.18,1195,3.18,1196,2.474,1197,1.962,1198,1.962,1199,1.962,1200,5.069,1201,4.612,1202,1.962,1203,1.962,1204,1.962,1205,4.612,1206,3.18,1207,3.18,1208,4.612,1209,3.18,1210,4.01,1211,4.01,1212,3.18,1213,3.18,1214,1.962,1215,4.612,1216,3.994,1217,1.962,1218,1.962,1219,4.612,1220,4.7,1221,3.18,1222,3.18,1223,4.612,1224,3.18,1225,2.097,1226,2.474,1227,1.962,1228,1.957,1229,1.699,1230,4.39,1231,1.526,1232,1.397,1233,1.699,1234,2.474,1235,1.526,1236,1.962,1237,1.962,1238,1.962,1239,4.01,1240,1.962,1241,1.962,1242,1.962,1243,1.699,1244,1.962,1245,1.699,1246,1.397,1247,3.18,1248,1.962,1249,1.962,1250,1.962,1251,1.962,1252,2.754,1253,1.962,1254,1.962,1255,3.18,1256,1.962]],["title/modules/PostsModule.html",[122,1.175,139,2.567]],["body/modules/PostsModule.html",[3,0.189,4,0.17,5,0.17,23,0.016,36,0.369,41,0.642,50,0.189,63,0.068,108,0.011,109,0.011,112,2.025,122,1.925,124,1.912,125,1.826,126,2.109,127,2.109,128,1.912,129,3.123,130,3.123,138,4.46,139,5.156,140,4.46,141,4.188,143,2.788,144,2.109,145,2.109,147,4.203,150,3.103,156,2.651,157,1.826,294,1.41,331,3.73,495,2.222,991,3.103,992,2.839,1033,2.839,1228,4.787,1229,3.73,1257,3.73,1258,3.73,1259,3.73,1260,4.306,1261,4.306,1262,4.306,1263,4.306,1264,3.73,1265,4.306,1266,4.306,1267,4.306]],["title/injectables/PostsService.html",[40,0.554,1228,2.396]],["body/injectables/PostsService.html",[3,0.092,4,0.083,5,0.083,9,0.153,10,0.735,11,1.947,13,1.79,15,1.1,20,0.553,22,1.296,23,0.016,24,1.196,25,0.604,26,0.894,31,1.094,32,1.645,34,1.999,36,0.326,37,1.564,38,0.85,40,0.478,41,0.313,50,0.092,51,1.837,53,1.014,56,1.374,63,0.033,65,1.423,70,2.056,75,1.094,84,2.49,85,2.005,89,1.028,91,2.291,102,1.028,103,1.491,105,2.056,106,1.083,107,1.123,108,0.006,109,0.006,142,3.396,157,0.89,216,0.814,219,2.908,246,1.859,264,0.978,265,1.144,266,2.214,270,0.687,294,2.114,309,1.632,311,1.213,347,2.493,352,2.349,358,1.864,364,1.494,495,1.083,506,2.067,515,2.214,516,4.427,538,1.941,562,1.292,608,2.266,609,3.162,612,3.264,663,3.15,669,1.028,670,1.292,689,1.632,690,1.494,691,1.632,705,1.384,833,2.612,847,1.632,848,1.632,858,2.067,912,1.818,991,1.144,992,1.384,1015,1.632,1033,1.384,1038,3.635,1039,1.818,1046,1.384,1064,2.214,1081,1.818,1103,2.214,1106,3.731,1110,2.612,1174,2.39,1175,3.264,1177,3.635,1178,2.908,1196,1.632,1225,2.767,1228,2.067,1231,1.632,1232,1.494,1233,1.818,1243,3.635,1246,4.183,1252,2.908,1264,1.818,1268,1.818,1269,2.099,1270,3.396,1271,4.796,1272,2.099,1273,3.358,1274,2.099,1275,1.818,1276,2.099,1277,2.099,1278,2.099,1279,2.099,1280,2.099,1281,2.099,1282,2.099,1283,2.099,1284,2.099,1285,3.358,1286,2.099,1287,2.099,1288,2.099,1289,2.099,1290,2.099,1291,1.818,1292,2.099,1293,2.099,1294,4.08,1295,3.358,1296,2.099,1297,4.197,1298,2.908,1299,3.358,1300,3.358,1301,4.197,1302,2.099,1303,3.358,1304,2.099,1305,2.099,1306,2.099,1307,3.358,1308,1.818,1309,3.358,1310,3.358,1311,2.099,1312,3.358,1313,3.358,1314,2.099,1315,3.358,1316,2.099,1317,3.358,1318,2.099,1319,3.358,1320,2.099,1321,3.358,1322,2.099,1323,3.358,1324,2.099,1325,3.358,1326,2.099,1327,3.358,1328,2.099,1329,2.908,1330,2.099,1331,2.099,1332,2.099,1333,2.099,1334,2.099,1335,1.818]],["title/classes/RefreshTokenDto.html",[63,0.061,287,2.396]],["body/classes/RefreshTokenDto.html",[3,0.245,4,0.22,5,0.22,9,0.407,20,0.588,23,0.015,25,0.494,36,0.271,50,0.245,58,1.867,63,0.106,108,0.013,109,0.013,115,1.435,280,4.737,287,4.126,346,1.867,461,2.164,477,3.459,479,2.261,502,4.126,923,4.341,1336,5.805,1337,5.581,1338,5.581]],["title/injectables/RefreshTokenProvider.html",[40,0.554,326,2.396]],["body/injectables/RefreshTokenProvider.html",[3,0.154,4,0.139,5,0.139,7,1.56,9,0.256,10,1.084,11,1.663,13,2.126,15,1.622,16,2.732,17,4.851,18,3.315,19,2.766,20,0.522,22,1.224,23,0.016,24,1.129,25,0.552,26,0.844,31,0.801,34,1.622,36,0.347,37,2.308,38,1.423,39,1.304,40,0.705,41,0.524,42,1.362,43,1.915,48,2.863,49,2.162,50,0.154,51,1.598,53,1.732,54,1.915,55,3.526,63,0.055,65,2.099,69,2.162,70,1.721,71,2.501,73,3.396,75,0.801,84,1.489,85,1.69,88,2.162,89,1.721,91,1.958,93,2.162,94,2.732,95,2.162,96,2.732,97,2.162,98,2.732,102,1.721,103,2.199,105,1.721,106,2.556,107,0.94,108,0.01,109,0.01,178,1.915,201,2.316,264,1.637,270,1.15,280,3.265,287,3.048,300,2.732,301,2.316,324,3.817,326,3.048,329,2.03,336,2.501,347,2.13,352,3.502,358,1.56,364,2.501,365,2.732,366,2.316,370,2.732,383,3.852,397,3.042,608,1.304,623,3.042,818,3.526,823,2.732,904,3.042,915,4.968,919,3.042,1066,2.732,1339,4.968,1340,5.736,1341,3.513,1342,3.513,1343,3.513,1344,3.042,1345,3.513,1346,3.513,1347,3.513,1348,3.513]],["title/classes/SignInDto.html",[63,0.061,282,2.567]],["body/classes/SignInDto.html",[3,0.236,4,0.212,5,0.212,9,0.391,20,0.689,23,0.015,25,0.58,36,0.26,50,0.236,57,3.29,58,2.048,63,0.103,108,0.013,109,0.013,115,1.682,235,3.644,282,4.314,346,1.823,461,2.079,477,3.644,479,2.172,502,4.027,654,5.666,1349,4.643,1350,5.361,1351,5.361,1352,5.361,1353,5.361]],["title/entities/Tag.html",[247,1.509,616,2.123]],["body/entities/Tag.html",[3,0.149,4,0.134,5,0.134,9,0.247,20,0.77,23,0.016,24,1.283,25,0.677,26,1.148,36,0.235,50,0.149,56,1.582,58,2.037,63,0.054,100,3.408,107,1.506,108,0.009,109,0.009,115,1.881,216,1.315,238,1.961,242,3.164,247,1.873,294,2.206,346,1.346,510,4.006,514,4.006,515,3.71,543,3.894,553,3.758,608,2.089,616,2.634,930,3.758,994,4.873,995,4.873,996,4.377,998,3.71,1000,4.273,1001,4.822,1005,4.184,1008,4.377,1010,2.638,1011,4.441,1014,3.758,1128,4.796,1129,4.796,1130,3.758,1139,3.439,1140,4.769,1143,2.937,1147,4.184,1149,2.937,1150,4.184,1174,4.006,1329,4.184,1354,2.937,1355,5.627,1356,3.392,1357,5.627,1358,3.392,1359,3.392,1360,3.392,1361,3.392,1362,3.392,1363,3.392,1364,3.392,1365,3.392,1366,3.392]],["title/controllers/TagsController.html",[110,1.329,149,2.567]],["body/controllers/TagsController.html",[3,0.17,4,0.153,5,0.153,9,0.282,10,1.161,11,2.037,20,0.637,22,1.493,23,0.016,24,1.378,25,0.535,26,1.03,31,1.378,36,0.316,41,0.578,50,0.17,51,1.079,56,2.301,63,0.061,75,1.378,91,1.809,108,0.01,109,0.01,110,1.322,112,1.378,115,1.554,119,2.239,149,3.495,246,2.055,277,2.239,291,2.112,294,1.736,358,2.354,483,1.642,516,2.554,608,2.719,613,4.284,616,3.83,669,1.897,752,4.625,766,4.302,1082,2.554,1175,4.123,1180,4.7,1225,4.829,1226,4.7,1270,3.492,1367,3.355,1368,5.3,1369,5.3,1370,3.874,1371,3.874,1372,3.874,1373,5.233,1374,3.874,1375,3.874,1376,3.874,1377,3.874,1378,4.59,1379,3.874,1380,3.874,1381,3.355,1382,3.355,1383,3.874,1384,3.874,1385,4.59,1386,3.874,1387,3.874,1388,3.874,1389,3.874,1390,3.874,1391,3.874]],["title/modules/TagsModule.html",[122,1.175,140,2.396]],["body/modules/TagsModule.html",[3,0.217,4,0.194,5,0.194,23,0.016,36,0.357,41,0.735,50,0.217,63,0.078,108,0.012,109,0.012,112,2.21,122,2.053,124,2.189,125,2.089,126,2.414,127,2.414,128,2.189,129,3.33,130,3.33,140,4.694,143,3.042,144,2.414,145,2.414,149,4.483,150,2.687,156,3.034,157,2.089,616,2.687,1270,4.582,1382,4.269,1392,4.269,1393,4.269,1394,4.269,1395,4.929,1396,4.929,1397,4.269,1398,4.929]],["title/injectables/TagsService.html",[40,0.554,1270,2.25]],["body/injectables/TagsService.html",[3,0.127,4,0.114,5,0.114,9,0.211,10,0.941,11,2.2,13,0.986,15,1.408,20,0.695,22,1.574,23,0.016,24,1.504,25,0.664,26,1.085,31,1.452,34,2.308,36,0.295,37,1.346,38,1.17,40,0.612,41,0.431,50,0.127,51,1.693,56,1.862,63,0.046,75,1.452,84,1.822,85,1.467,91,2.313,108,0.011,109,0.008,157,1.225,216,1.12,270,0.946,309,3.343,311,2.484,347,2.817,358,2.828,516,3.748,562,2.646,608,2.689,613,2.834,616,3.695,663,2.933,669,1.415,670,1.778,689,2.247,690,2.057,691,2.247,1196,3.343,1225,3.384,1246,2.057,1270,2.484,1275,2.502,1294,2.247,1335,3.722,1373,4.445,1378,2.502,1381,2.502,1385,3.722,1397,2.502,1399,2.502,1400,5.132,1401,5.684,1402,5.132,1403,5.132,1404,2.889,1405,2.889,1406,4.298,1407,2.889,1408,2.889,1409,2.889,1410,2.889,1411,2.889,1412,2.889,1413,2.889,1414,2.889,1415,2.889,1416,2.889,1417,2.889,1418,2.889,1419,4.298,1420,2.889,1421,2.889,1422,4.298,1423,2.889,1424,2.889,1425,4.298,1426,2.889,1427,2.889,1428,2.889,1429,2.889]],["title/entities/Upload.html",[247,1.509,738,2.25]],["body/entities/Upload.html",[3,0.154,4,0.138,5,0.138,9,0.255,20,0.753,23,0.016,25,0.684,36,0.17,50,0.217,56,2.038,58,1.897,63,0.055,108,0.01,109,0.01,115,1.838,207,3.778,216,1.359,238,2.026,242,3.8,247,1.917,308,2.859,346,1.378,404,2.312,469,2.026,524,3.261,543,3.597,595,5.104,608,2.127,736,4.2,738,2.859,791,5.104,809,3.036,811,4.457,813,3.036,814,4.962,816,4.962,996,4.457,998,3.778,1000,4.327,1001,4.856,1008,4.457,1011,4.49,1128,5.088,1129,5.088,1130,4.841,1139,3.521,1430,2.727,1431,5.73,1432,5.73,1433,3.506,1434,3.506,1435,3.506,1436,4.945,1437,3.506,1438,3.506,1439,3.506,1440,3.506,1441,3.506,1442,4.283,1443,4.283,1444,4.283,1445,3.506,1446,3.506,1447,3.506]],["title/injectables/UploadToAwsProvider.html",[40,0.554,773,2.396]],["body/injectables/UploadToAwsProvider.html",[3,0.153,4,0.138,5,0.268,9,0.254,10,1.078,11,1.656,13,2.118,15,1.613,19,2.756,20,0.602,22,1.411,23,0.016,24,1.302,25,0.619,26,0.973,31,1.123,34,2.033,36,0.33,37,2.295,38,1.412,39,1.294,40,0.701,41,0.52,42,1.351,50,0.153,51,1.988,58,0.971,63,0.055,75,1.123,84,1.477,85,1.949,89,1.707,91,1.189,102,1.707,103,1.548,105,1.707,106,2.541,107,0.933,108,0.01,109,0.01,190,2.481,207,3.247,270,1.141,291,1.9,347,2.121,358,1.548,415,2.014,504,2.711,524,2.298,608,1.829,704,2.711,705,2.298,706,3.018,736,3.588,738,2.014,741,3.831,773,3.031,778,2.711,785,4.265,793,3.018,804,2.711,811,3.831,815,3.018,1136,3.018,1448,5.375,1449,3.018,1450,5.711,1451,5.711,1452,3.485,1453,3.485,1454,3.485,1455,3.485,1456,3.485,1457,3.485,1458,5.711,1459,3.018,1460,3.485,1461,4.925,1462,3.018,1463,3.485,1464,3.485,1465,3.485,1466,4.925,1467,3.485,1468,3.485,1469,4.925,1470,3.485,1471,3.485,1472,3.485,1473,3.485,1474,3.485,1475,3.485,1476,3.485,1477,3.485,1478,3.485,1479,3.485,1480,3.485,1481,3.485,1482,3.485,1483,3.485,1484,3.485,1485,3.485,1486,4.925,1487,3.485,1488,3.485]],["title/entities/User.html",[53,1.175,247,1.509]],["body/entities/User.html",[3,0.157,4,0.141,5,0.141,9,0.26,20,0.741,23,0.016,25,0.668,26,1.166,36,0.281,50,0.157,53,1.51,56,1.638,57,2.693,58,2.058,63,0.079,100,3.189,108,0.01,109,0.01,115,1.808,216,1.381,224,2.349,235,2.982,238,2.059,242,3.234,247,1.939,248,2.771,278,1.66,294,2.052,346,1.393,481,2.193,485,3.811,487,3.811,568,2.349,608,2.146,634,3.811,649,2.771,869,2.536,998,3.811,1000,4.352,1001,4.872,1010,2.771,1011,4.513,1018,3.89,1128,5.261,1129,5.108,1139,3.561,1140,3.89,1174,4.7,1489,3.085,1490,3.562,1491,6.267,1492,3.562,1493,5.001,1494,3.562,1495,3.562,1496,3.562,1497,4.331,1498,3.562,1499,3.562,1500,5.001,1501,3.562,1502,5.779,1503,5.001,1504,3.562,1505,5.001,1506,3.562,1507,3.562,1508,3.562]],["title/controllers/UserController.html",[110,1.329,1509,2.772]],["body/controllers/UserController.html",[1,1.374,3,0.105,4,0.094,5,0.094,6,1.374,7,1.056,9,0.173,10,0.811,20,0.542,22,1.27,23,0.016,24,1.346,25,0.593,26,1.05,31,1.27,36,0.318,38,0.963,41,0.355,44,1.296,50,0.105,51,1.268,53,1.782,56,2.327,63,0.038,75,1.493,85,2.015,107,1.855,108,0.01,109,0.007,110,0.811,112,0.846,115,1.322,119,1.374,120,1.568,178,1.296,211,2.882,242,2.653,246,2.472,248,2.882,277,1.374,278,1.108,291,1.296,292,1.849,293,2.443,294,1.213,298,1.374,303,1.849,308,2.971,311,1.374,313,3.209,316,2.059,347,2.573,352,2.23,399,1.849,422,1.849,442,1.849,460,3.164,463,2.802,465,4.42,466,3.476,470,3.389,473,2.653,480,2.802,483,1.571,505,2.142,538,3.871,605,2.443,608,1.376,611,3.943,649,1.849,661,3.998,669,1.815,747,2.059,752,3.66,766,3.241,860,3.389,890,1.849,920,2.059,1064,4.498,1065,3.943,1082,3.002,1119,4.539,1180,3.541,1216,2.059,1220,4.452,1225,1.568,1226,3.541,1230,3.209,1231,1.849,1232,1.693,1291,3.943,1344,2.059,1509,2.638,1510,2.059,1511,3.705,1512,4.552,1513,3.705,1514,2.377,1515,3.705,1516,2.377,1517,2.377,1518,4.552,1519,2.377,1520,2.377,1521,2.377,1522,2.377,1523,2.377,1524,2.377,1525,3.705,1526,2.377,1527,3.705,1528,3.209,1529,2.377,1530,2.377,1531,4.552,1532,2.377,1533,2.377,1534,2.377,1535,2.377,1536,2.377,1537,2.377,1538,2.377,1539,2.377,1540,2.377,1541,2.377,1542,2.059,1543,2.059,1544,4.552,1545,3.705,1546,2.377,1547,2.377,1548,2.377,1549,2.377,1550,3.209,1551,2.377,1552,2.377,1553,2.377,1554,2.377,1555,2.377,1556,2.377,1557,2.377,1558,2.377,1559,2.377,1560,2.377,1561,2.377,1562,2.377,1563,2.377,1564,2.377,1565,2.377,1566,3.209,1567,2.377,1568,2.059,1569,2.059,1570,2.377,1571,2.377,1572,2.377,1573,2.377,1574,2.377,1575,2.377,1576,2.377,1577,3.705,1578,2.377,1579,2.377]],["title/injectables/UserCreateMany.html",[40,0.554,1580,2.396]],["body/injectables/UserCreateMany.html",[3,0.145,4,0.13,5,0.13,9,0.24,10,1.037,11,1.606,13,1.125,15,1.55,20,0.499,22,1.17,23,0.016,24,1.079,25,0.536,26,0.807,31,0.752,34,1.55,36,0.294,37,2.82,38,1.336,40,0.674,41,0.492,50,0.145,51,1.543,53,1.827,63,0.052,65,1.398,75,0.752,76,1.906,84,2.566,85,2.066,89,2.965,91,2.277,102,2.965,103,2.688,105,2.965,106,3.124,107,1.62,108,0.009,109,0.009,212,3.682,216,1.835,246,2.347,247,1.835,270,1.08,347,2.056,358,1.464,427,2.856,460,2.914,463,2.03,465,3.409,468,2.565,480,2.03,484,2.174,669,1.615,693,3.682,695,2.565,698,5.242,704,4.986,705,2.174,1082,3.121,1308,5.242,1580,2.914,1581,4.797,1582,2.856,1583,4.797,1584,3.297,1585,6.091,1586,3.297,1587,2.856,1588,3.297,1589,3.297,1590,4.734,1591,5.539,1592,3.297,1593,3.297,1594,3.297,1595,5.539,1596,3.297,1597,4.1,1598,3.297,1599,4.734,1600,3.297,1601,3.297,1602,3.297,1603,3.297,1604,3.297,1605,3.297,1606,3.297,1607,3.297,1608,3.297,1609,3.297,1610,3.297,1611,3.297,1612,3.297,1613,3.297,1614,3.297,1615,4.734,1616,3.297]],["title/modules/UserModule.html",[122,1.175,141,2.25]],["body/modules/UserModule.html",[0,2.184,1,2.883,3,0.156,4,0.14,5,0.14,6,2.051,7,1.576,11,1.029,18,2.051,19,2.215,23,0.016,36,0.371,39,1.317,41,0.529,42,1.375,43,1.934,48,2.051,49,2.184,50,0.156,53,1.506,63,0.056,93,2.184,95,2.184,97,2.184,108,0.01,109,0.01,112,1.775,122,1.741,124,1.576,125,1.504,126,1.738,127,1.738,128,1.576,129,2.825,130,2.825,134,3.07,141,4.355,143,2.443,144,1.738,145,1.738,150,2.719,156,2.184,157,1.504,164,2.339,174,4.319,176,2.339,178,1.934,180,2.76,220,2.526,246,1.375,247,1.375,254,3.879,255,2.76,256,2.76,257,2.76,258,2.76,259,2.76,260,2.526,261,2.76,262,2.76,264,2.324,265,3.144,266,2.339,267,2.76,329,2.883,343,2.184,352,3.69,463,2.184,484,2.339,658,4.208,663,1.831,1163,3.073,1509,4.106,1543,3.073,1569,3.073,1580,4.208,1617,3.073,1618,3.073,1619,3.073,1620,3.548,1621,3.548,1622,3.548,1623,3.073,1624,3.073,1625,3.073,1626,3.073,1627,3.548,1628,3.548,1629,3.548,1630,3.548,1631,3.548,1632,3.548,1633,3.548]],["title/injectables/UserService.html",[40,0.554,352,1.907]],["body/injectables/UserService.html",[3,0.101,4,0.09,5,0.09,9,0.167,10,0.787,11,2.066,13,1.983,15,1.178,19,2.236,20,0.64,22,1.501,23,0.016,24,1.385,25,0.652,26,1.035,31,1.324,32,1.761,34,2.248,36,0.333,37,1.676,38,0.927,39,0.85,40,0.512,41,0.341,42,0.887,50,0.101,51,1.402,53,2.171,56,1.455,57,2.07,58,1.002,63,0.036,65,2.134,70,1.761,75,1.385,84,2.463,85,1.983,89,1.761,91,1.868,102,1.761,103,1.597,105,1.121,106,1.856,107,0.612,108,0.007,109,0.007,122,0.691,125,0.97,157,0.97,165,4.726,193,1.78,201,3.319,202,2.56,216,0.887,246,0.887,253,1.78,264,2.07,265,1.248,270,0.749,295,3.512,329,1.323,343,1.409,347,2.714,352,1.761,358,2.236,363,1.78,366,1.509,421,2.797,433,1.78,460,2.214,463,2.214,465,3.099,466,1.961,480,2.214,484,1.509,538,2.079,608,1.649,634,2.929,658,3.74,661,3.455,663,2.824,666,3.847,667,1.982,669,1.761,670,1.409,673,1.982,860,2.371,863,1.629,890,1.78,1064,2.371,1170,1.982,1232,1.629,1245,3.847,1246,3.584,1294,3.455,1528,3.847,1542,1.982,1550,3.847,1566,3.847,1568,3.114,1580,3.099,1583,3.847,1585,1.982,1587,1.982,1623,1.982,1624,1.982,1625,1.982,1626,1.982,1634,1.982,1635,4.442,1636,4.442,1637,4.442,1638,2.288,1639,4.442,1640,4.442,1641,2.288,1642,2.288,1643,2.288,1644,2.288,1645,2.288,1646,2.288,1647,2.288,1648,2.288,1649,2.288,1650,2.288,1651,2.288,1652,2.288,1653,2.288,1654,2.288,1655,2.288,1656,2.288,1657,2.288,1658,2.288,1659,2.288,1660,3.596,1661,2.288,1662,4.442,1663,2.288,1664,4.442,1665,3.596,1666,2.288,1667,2.288]],["title/coverage.html",[1668,4.137]],["body/coverage.html",[0,2.486,1,1.537,5,0.105,6,2.822,7,2.168,8,3.476,23,0.016,25,0.358,40,1.067,52,2.068,53,0.803,54,1.45,63,0.115,85,0.908,108,0.008,109,0.008,110,2.256,111,1.893,113,2.303,117,1.637,128,1.181,142,1.537,146,2.068,147,1.753,148,1.753,149,1.753,158,1.302,159,2.663,181,1.893,183,1.893,185,2.068,187,2.663,192,2.068,229,5.078,246,1.031,247,2.273,252,2.068,271,2.303,275,1.893,276,2.303,278,1.239,282,1.753,287,1.637,294,0.871,295,1.537,323,1.45,324,1.45,325,1.637,326,1.637,328,1.893,333,1.893,345,2.303,352,1.302,389,2.303,398,2.068,434,2.303,460,1.637,462,3.141,463,1.637,464,3.476,465,1.637,466,1.45,494,1.637,495,2.814,496,2.068,497,2.303,506,1.637,507,2.303,508,3.141,593,1.753,613,1.753,614,2.303,615,2.303,616,1.45,658,1.637,659,2.303,660,2.303,664,1.637,707,2.303,708,2.303,735,1.893,736,3.152,737,2.303,738,1.537,753,1.637,773,1.637,782,2.303,822,2.303,823,3.141,844,1.893,845,3.141,846,3.141,855,1.637,856,1.893,858,1.637,860,1.753,861,2.303,862,2.303,867,3.141,868,2.303,872,1.753,879,2.303,922,2.303,923,3.141,926,2.303,979,2.303,991,1.45,992,1.753,993,2.303,1019,2.303,1023,1.637,1035,2.303,1045,1.893,1046,1.753,1048,2.303,1063,2.303,1071,2.303,1103,1.753,1104,2.303,1119,1.893,1120,2.303,1122,2.303,1157,2.303,1173,2.303,1228,1.637,1234,2.068,1235,2.068,1268,2.303,1270,1.537,1298,6.972,1336,2.303,1339,2.303,1349,2.303,1354,2.303,1367,2.303,1399,2.303,1430,2.068,1448,2.303,1449,2.303,1489,2.303,1497,2.303,1509,1.893,1510,2.303,1580,1.637,1581,2.303,1582,2.303,1634,2.303,1668,2.068,1669,2.659,1670,2.659,1671,7.016,1672,7.271,1673,7.113,1674,2.659,1675,2.303,1676,3.141,1677,5.453,1678,2.659,1679,4.883,1680,2.659,1681,2.659,1682,2.659,1683,2.659,1684,2.659,1685,2.659,1686,2.303,1687,2.659,1688,2.659,1689,4.883,1690,4.038,1691,2.659]],["title/dependencies.html",[125,1.985,1692,2.813]],["body/dependencies.html",[23,0.016,41,0.729,42,1.895,43,2.665,45,3.48,47,3.48,63,0.098,108,0.012,109,0.012,125,2.072,157,2.072,176,3.223,216,1.895,278,2.278,404,3.223,405,4.234,450,4.234,479,1.981,481,3.009,483,2.072,749,4.234,804,3.802,869,3.48,894,4.234,943,3.802,944,3.802,974,4.234,1112,3.802,1459,4.234,1462,4.234,1693,4.888,1694,4.888,1695,4.888,1696,6.178,1697,4.888,1698,4.888,1699,4.888,1700,4.888,1701,4.888,1702,4.888,1703,4.888,1704,4.888,1705,4.888,1706,4.888,1707,4.888,1708,4.888,1709,4.888,1710,4.888,1711,4.888,1712,4.888,1713,4.888,1714,4.888,1715,4.888,1716,4.888,1717,4.888,1718,4.888,1719,4.888,1720,4.888,1721,4.888]],["title/miscellaneous/enumerations.html",[1722,1.771,1723,4.056]],["body/miscellaneous/enumerations.html",[9,0.361,23,0.016,108,0.012,109,0.012,294,2.041,298,3.602,505,4.636,524,4.109,534,4.847,538,3.602,539,5.397,540,5.397,544,5.397,570,4.847,571,5.397,572,5.397,573,5.397,683,5.397,736,2.865,758,5.397,791,4.847,1430,3.855,1442,5.397,1443,5.397,1444,5.397,1676,3.855,1722,2.702,1723,4.293,1724,4.293,1725,4.957,1726,6.232,1727,4.957]],["title/miscellaneous/functions.html",[1722,1.771,1728,4.056]],["body/miscellaneous/functions.html",[9,0.448,23,0.014,108,0.014,109,0.014,128,3.321,1686,5.319,1722,3.348,1728,5.319,1729,6.141]],["title/index.html",[9,0.237,227,2.527,1730,3.249]],["body/index.html",[4,0.186,23,0.015,68,2.728,107,1.263,108,0.012,109,0.012,243,4.087,473,3.438,609,3.111,625,4.087,663,2.435,767,3.671,945,3.671,1156,4.087,1597,4.087,1668,3.671,1731,4.719,1732,4.719,1733,6.041,1734,4.719,1735,4.719,1736,4.719,1737,4.719,1738,6.663,1739,4.719,1740,4.719,1741,7.552,1742,4.719,1743,4.719,1744,4.719,1745,7.428,1746,4.719,1747,6.041,1748,4.719,1749,4.719,1750,4.719,1751,6.041,1752,6.041,1753,4.719,1754,4.719,1755,4.719,1756,6.041,1757,6.041,1758,4.719,1759,4.719,1760,4.719,1761,4.719,1762,4.719,1763,4.087,1764,4.719,1765,4.719,1766,4.719,1767,4.719,1768,4.719,1769,4.719,1770,4.719,1771,4.719,1772,4.719,1773,4.719,1774,4.719,1775,4.719,1776,4.719,1777,4.719,1778,4.087]],["title/modules.html",[124,2.362]],["body/modules.html",[23,0.013,108,0.013,109,0.013,123,3.864,124,2.41,134,3.341,135,3.578,136,3.578,137,3.578,138,3.341,139,3.578,140,3.341,141,3.137,1763,6.851,1779,7.911,1780,7.911,1781,7.911]],["title/overview.html",[1782,4.606]],["body/overview.html",[2,2.574,23,0.016,108,0.009,109,0.009,112,1.178,117,3.416,122,0.999,123,5.584,124,1.47,125,1.403,126,1.621,127,1.621,128,1.47,129,1.621,130,1.621,131,2.866,132,2.866,133,2.866,134,4.619,135,4.537,136,4.405,137,4.405,138,4.236,139,4.905,140,4.236,141,4.256,142,4.069,143,2.325,144,1.621,145,1.621,238,1.913,270,1.084,295,3.978,320,2.866,321,2.866,322,2.866,323,3.306,324,3.026,325,3.416,326,3.416,352,3.371,422,2.574,461,1.283,561,2.574,605,2.182,658,3.416,664,4.236,753,3.416,771,2.866,772,2.866,773,3.416,935,2.866,936,2.866,937,2.866,1023,4.236,1028,2.866,1029,2.866,1030,2.866,1045,2.356,1058,2.866,1059,2.866,1228,4.236,1257,2.866,1258,2.866,1259,2.866,1270,3.978,1392,2.866,1393,2.866,1394,2.866,1580,3.416,1617,2.866,1618,2.866,1619,2.866,1782,2.866,1783,3.309,1784,3.309,1785,3.309,1786,3.309]],["title/properties.html",[346,1.305,1692,2.813]],["body/properties.html",[23,0.015,107,1.627,108,0.014,109,0.014,346,1.693,442,4.728,609,4.008,1778,5.264,1787,6.078,1788,6.078]],["title/miscellaneous/typealiases.html",[1722,1.771,1789,4.684]],["body/miscellaneous/typealiases.html",[6,3.489,7,2.681,8,4.999,9,0.44,23,0.014,25,0.622,34,1.977,54,3.828,108,0.014,109,0.014,1722,3.291,1790,6.037,1791,5.228]],["title/miscellaneous/variables.html",[202,3.335,1722,1.771]],["body/miscellaneous/variables.html",[6,2.795,7,2.147,8,4.368,9,0.352,23,0.016,25,0.544,28,3.442,44,2.636,51,1.709,52,4.772,53,2.034,54,3.345,58,1.709,75,1.399,101,4.187,108,0.012,109,0.012,146,3.761,192,4.772,193,3.761,202,3.442,278,2.859,298,3.546,308,4.228,398,4.772,407,5.313,469,2.795,505,4.228,1234,4.772,1235,3.761,1675,5.313,1676,3.761,1722,2.636,1724,5.313,1791,4.187,1792,4.835,1793,4.835,1794,4.835,1795,6.135,1796,4.835,1797,4.835,1798,4.835,1799,4.835,1800,4.835]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1298,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1787,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1708,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1718,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1720,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1707,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1672,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1687,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1671,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1673,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1677,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1679,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1689,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1674,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1690,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":546,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":605,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["1.1.26",{"_index":1694,"title":{},"body":{"dependencies.html":{}}}],["1.4.12",{"_index":1704,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1685,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1683,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1065,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{}}}],["10.0.0",{"_index":1696,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1702,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1698,"title":{},"body":{"dependencies.html":{}}}],["10.4.15",{"_index":1700,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":1130,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["10})@apiquery({name",{"_index":1526,"title":{},"body":{"controllers/UserController.html":{}}}],["11.0.4",{"_index":1721,"title":{},"body":{"dependencies.html":{}}}],["123",{"_index":610,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["1234",{"_index":1557,"title":{},"body":{"controllers/UserController.html":{}}}],["128",{"_index":1436,"title":{},"body":{"entities/Upload.html":{}}}],["14",{"_index":1786,"title":{},"body":{"overview.html":{}}}],["16t12:00:00+0000",{"_index":547,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.13.3",{"_index":1712,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1785,"title":{},"body":{"overview.html":{}}}],["1})@get('/:id",{"_index":1529,"title":{},"body":{"controllers/UserController.html":{}}}],["1})@isoptional()@ispositive",{"_index":1067,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["2",{"_index":422,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["2.0.2",{"_index":1695,"title":{},"body":{"dependencies.html":{}}}],["2.0.6",{"_index":1699,"title":{},"body":{"dependencies.html":{}}}],["2.1643.0",{"_index":1705,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":1681,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["2024",{"_index":545,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["25",{"_index":1682,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":1139,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["3.1.10",{"_index":1709,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":1697,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":1688,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1684,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":606,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["5",{"_index":1784,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1706,"title":{},"body":{"dependencies.html":{}}}],["512",{"_index":1147,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6.9.16",{"_index":1714,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1497,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["66",{"_index":1680,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":1719,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1783,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":1701,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":1716,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":561,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"overview.html":{}}}],["9.15.0",{"_index":1710,"title":{},"body":{"dependencies.html":{}}}],["96",{"_index":1491,"title":{},"body":{"entities/User.html":{}}}],["_",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["aac",{"_index":1446,"title":{},"body":{"entities/Upload.html":{}}}],["abstract",{"_index":927,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["accept",{"_index":762,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["access",{"_index":397,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/RefreshTokenProvider.html":{}}}],["access_token",{"_index":924,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["accesskeyid",{"_index":1473,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["accesstoken",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["accesstokenprovider",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["activeuser",{"_index":1234,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["actual",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Paginated.html":{}}}],["adapter",{"_index":975,"title":{},"body":{"modules/MailModule.html":{}}}],["add",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["additional",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{}}}],["adds",{"_index":592,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["against",{"_index":458,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["alias",{"_index":1678,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1790,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowedmimetypes",{"_index":794,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["allowedmimetypes.includes(file.mimetype",{"_index":799,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["alphanumeric",{"_index":565,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["already",{"_index":689,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["amazing",{"_index":1764,"title":{},"body":{"index.html":{}}}],["another",{"_index":1287,"title":{},"body":{"injectables/PostsService.html":{}}}],["anywhere",{"_index":950,"title":{},"body":{"modules/MailModule.html":{}}}],["api",{"_index":1528,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["apiheader",{"_index":750,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["apiheaders",{"_index":751,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["apiheaders(['undefined",{"_index":742,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["apioperation",{"_index":752,"title":{},"body":{"controllers/FileUploadController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":1180,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":482,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":467,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":535,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":590,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({description",{"_index":518,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["apipropertyoptional({})@isjson()@isoptional",{"_index":628,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiquery",{"_index":1544,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":1230,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":1545,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":1547,"title":{},"body":{"controllers/UserController.html":{}}}],["apiversion",{"_index":733,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app",{"_index":1743,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["app_interceptor",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{}}}],["appconfiguration",{"_index":712,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["appcontroller",{"_index":111,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1569,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["application'})@httpcode(httpstatus.created)@auth(authtype.none)@useinterceptors(classserializerinterceptor)@post",{"_index":1520,"title":{},"body":{"controllers/UserController.html":{}}}],["application/json",{"_index":763,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["applications",{"_index":1737,"title":{},"body":{"index.html":{}}}],["applying",{"_index":268,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":123,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":117,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":1505,"title":{},"body":{"entities/User.html":{}}}],["array",{"_index":423,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["assess",{"_index":914,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["assign",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["associated",{"_index":1206,"title":{},"body":{"controllers/PostsController.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["aud",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["audience",{"_index":95,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["audio",{"_index":1443,"title":{},"body":{"entities/Upload.html":{},"miscellaneous/enumerations.html":{}}}],["auth",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/PostsController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.bearer",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["auth(authtype.bearer)@post('refresh",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth(authtype.none",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["auth(authtype.none)@httpcode(httpstatus.ok)@post",{"_index":873,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["auth(authtype.none)@post('login')@httpcode(httpstatus.ok",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":330,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/access",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":398,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":275,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":881,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(undefined",{"_index":887,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticated",{"_index":835,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["authentication",{"_index":263,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller",{"_index":339,"title":{},"body":{"modules/AuthModule.html":{}}}],["authentication.controller.ts",{"_index":868,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:15",{"_index":874,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":340,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":879,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:16",{"_index":885,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:29",{"_index":892,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:31",{"_index":889,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:42",{"_index":888,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticationguard",{"_index":181,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":414,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":134,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":609,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":612,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["authorization",{"_index":757,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["authservice",{"_index":295,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":400,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":403,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":390,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":407,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":417,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":854,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["available",{"_index":978,"title":{},"body":{"modules/MailModule.html":{}}}],["await",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":804,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["aws.provider",{"_index":777,"title":{},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{}}}],["aws.provider.ts",{"_index":1449,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["aws.provider.ts:15",{"_index":1457,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:28",{"_index":1455,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:9",{"_index":1453,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["awsconfig",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["awsconfiguration",{"_index":785,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["awsfileupload",{"_index":1450,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["awsfileupload(undefined",{"_index":1454,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["awskey",{"_index":806,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["backers",{"_index":1765,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":789,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["baseurl",{"_index":1086,"title":{},"body":{"injectables/PaginationService.html":{}}}],["bcrypt",{"_index":450,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":459,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":456,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(password",{"_index":457,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":333,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":758,"title":{},"body":{"controllers/FileUploadController.html":{},"miscellaneous/enumerations.html":{}}}],["before",{"_index":724,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["being",{"_index":1207,"title":{},"body":{"controllers/PostsController.html":{}}}],["bi",{"_index":1016,"title":{},"body":{"entities/MetaOption.html":{}}}],["blog",{"_index":520,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["body",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["bootstrap",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1781,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1779,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1481,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["buffer",{"_index":451,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1734,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":715,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["calls",{"_index":1209,"title":{},"body":{"controllers/PostsController.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["cascade",{"_index":1014,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":1006,"title":{},"body":{"entities/MetaOption.html":{}}}],["cases",{"_index":1554,"title":{},"body":{"controllers/UserController.html":{}}}],["catch",{"_index":102,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["catch((error",{"_index":431,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["cause",{"_index":105,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["character",{"_index":652,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":566,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["check",{"_index":679,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["checking",{"_index":410,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["choice",{"_index":805,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["circular",{"_index":343,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["class",{"_index":63,"title":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":461,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":1541,"title":{},"body":{"controllers/UserController.html":{}}}],["clientid",{"_index":897,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":899,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cluster_appmodule",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":322,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_fileuploadmodule",{"_index":771,"title":{},"body":{"modules/FileUploadModule.html":{},"overview.html":{}}}],["cluster_fileuploadmodule_providers",{"_index":772,"title":{},"body":{"modules/FileUploadModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":935,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":936,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":937,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":1028,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_exports",{"_index":1029,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":1030,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":1058,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":1059,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":1060,"title":{},"body":{"modules/PaginationModule.html":{}}}],["cluster_postsmodule",{"_index":1257,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":1259,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1260,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1258,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1392,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1393,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1394,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1617,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1618,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1619,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["column",{"_index":1011,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["column({type",{"_index":1000,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["commit",{"_index":1601,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["compare",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords",{"_index":435,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords(undefined",{"_index":437,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["compares",{"_index":439,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparison",{"_index":933,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["compodoc/compodoc",{"_index":1693,"title":{},"body":{"dependencies.html":{}}}],["composed",{"_index":563,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["config",{"_index":721,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["config/aws.config",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["config/index.config",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":1626,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["configmodule",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forfeature(awsconfig",{"_index":780,"title":{},"body":{"modules/FileUploadModule.html":{}}}],["configmodule.forfeature(emailconfig",{"_index":951,"title":{},"body":{"modules/MailModule.html":{}}}],["configmodule.forfeature(googleconfig",{"_index":344,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":254,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1628,"title":{},"body":{"modules/UserModule.html":{}}}],["configmodule.forroot",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"injectables/UserService.html":{}}}],["configservice.get('database.port",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_host",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_name",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_password",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_port",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_username",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('emailconfig.mailhost",{"_index":960,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('emailconfig.mailport",{"_index":961,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('emailconfig.mailsecure",{"_index":963,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('emailconfig.smtppassword",{"_index":966,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('emailconfig.smtpusername",{"_index":964,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('mail_host",{"_index":959,"title":{},"body":{"modules/MailModule.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["configuration",{"_index":253,"title":{},"body":{"modules/AppModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{}}}],["confirmation",{"_index":1189,"title":{},"body":{"controllers/PostsController.html":{}}}],["conflictexception",{"_index":790,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["conflictexception(error.message",{"_index":821,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["connect",{"_index":1593,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["connection",{"_index":1595,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["console.log",{"_index":415,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"modules/MailModule.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/UploadToAwsProvider.html":{}}}],["console.log('after",{"_index":729,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log('before",{"_index":726,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log('canactivate",{"_index":430,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["console.log('file",{"_index":808,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["console.log('guards",{"_index":419,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["console.log('hitting",{"_index":1576,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log('inside",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["console.log('node_env",{"_index":1657,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('profile",{"_index":1658,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`environment",{"_index":1656,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`limit",{"_index":1565,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(configservice.get('emailconfig.mailhost",{"_index":953,"title":{},"body":{"modules/MailModule.html":{}}}],["console.log(configservice.get('emailconfig.mailport",{"_index":954,"title":{},"body":{"modules/MailModule.html":{}}}],["console.log(configservice.get('emailconfig.mailsecure",{"_index":955,"title":{},"body":{"modules/MailModule.html":{}}}],["console.log(configservice.get('emailconfig.smtppassword",{"_index":957,"title":{},"body":{"modules/MailModule.html":{}}}],["console.log(configservice.get('emailconfig.smtpusername",{"_index":956,"title":{},"body":{"modules/MailModule.html":{}}}],["console.log(getuserparamdto",{"_index":1564,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log({updatepostdto",{"_index":1251,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["constructor(appconfiguration",{"_index":710,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["constructor(authservice",{"_index":1638,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(awsconfiguration",{"_index":1452,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["constructor(datasource",{"_index":1584,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["constructor(googleconfiguration",{"_index":883,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["constructor(mailerservice",{"_index":981,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(metaoptionsrepository",{"_index":1036,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":119,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":393,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(request",{"_index":1073,"title":{},"body":{"injectables/PaginationService.html":{}}}],["constructor(tagsrepository",{"_index":1404,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(uploadtoawsprovider",{"_index":783,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["constructor(userrepository",{"_index":662,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["constructor(userservice",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(userservices",{"_index":1269,"title":{},"body":{"injectables/PostsService.html":{}}}],["containing",{"_index":1191,"title":{},"body":{"controllers/PostsController.html":{}}}],["content",{"_index":509,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/FileUploadController.html":{},"entities/Post.html":{}}}],["contenttype",{"_index":1485,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailService.html":{}}}],["context.getclass",{"_index":412,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":411,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":110,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FileUploadController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/FileUploadController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('file",{"_index":755,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["controller('google",{"_index":876,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('meta",{"_index":1025,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":1237,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":1383,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":1546,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/MailModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convert",{"_index":1553,"title":{},"body":{"controllers/UserController.html":{}}}],["coverage",{"_index":1668,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":246,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["create(undefined",{"_index":1039,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["created",{"_index":468,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/PostsController.html":{},"injectables/UserCreateMany.html":{}}}],["createdat",{"_index":1431,"title":{},"body":{"entities/Upload.html":{}}}],["createdatecolumn",{"_index":996,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["createddate",{"_index":994,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdmetaoption",{"_index":1042,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createdpost",{"_index":1247,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdtags",{"_index":1385,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createmany",{"_index":1583,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["createmany(undefined",{"_index":1587,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["createmanyusers",{"_index":1511,"title":{},"body":{"controllers/UserController.html":{}}}],["createmanyusers(@body",{"_index":1575,"title":{},"body":{"controllers/UserController.html":{}}}],["createmanyusers(createusersdto",{"_index":1514,"title":{},"body":{"controllers/UserController.html":{}}}],["createmanyusersdto",{"_index":460,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createmetaoptions",{"_index":1020,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(@body",{"_index":1026,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptions(createmetaoptionsdto",{"_index":1021,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptionsdto",{"_index":494,"title":{"classes/CreateMetaOptionsDto.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1175,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["createpost(@body",{"_index":1384,"title":{},"body":{"controllers/TagsController.html":{}}}],["createpost(createpostdto",{"_index":1179,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createtag",{"_index":1370,"title":{},"body":{"controllers/TagsController.html":{}}}],["createpost.slug.tolowercase",{"_index":1302,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost.tags",{"_index":1296,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":506,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdtowithmeta",{"_index":1172,"title":{},"body":{"entities/Post.html":{}}}],["createpostdto})@patch",{"_index":1217,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto})@post",{"_index":1183,"title":{},"body":{"controllers/PostsController.html":{}}}],["creates",{"_index":1161,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{}}}],["createtag",{"_index":1373,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtag(undefined",{"_index":1407,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtagdto",{"_index":613,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createtoken",{"_index":824,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["createtoken(undefined",{"_index":827,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["createuser",{"_index":661,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(@body",{"_index":1572,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(createuserdto",{"_index":1519,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(undefined",{"_index":667,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":466,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto})@apiquery({name",{"_index":1524,"title":{},"body":{"controllers/UserController.html":{}}}],["createuserprovider",{"_index":658,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":1577,"title":{},"body":{"controllers/UserController.html":{}}}],["createusersdto",{"_index":1518,"title":{},"body":{"controllers/UserController.html":{}}}],["creating",{"_index":1015,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{}}}],["creation",{"_index":703,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{}}}],["credentials",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":1797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":1056,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["currentpage",{"_index":1053,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["custom",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["data",{"_index":730,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["database",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileUploadService.html":{},"injectables/UserCreateMany.html":{}}}],["databaseconfig",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":183,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["datasource",{"_index":1585,"title":{},"body":{"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["date",{"_index":543,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["date().toisostring().replace(/:/g",{"_index":1470,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["db",{"_index":913,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["declarations",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":406,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["decorators",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/FileUploadController.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/Upload.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["decorators/auth.decorator",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["default",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"entities/Upload.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":392,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaults",{"_index":967,"title":{},"body":{"modules/MailModule.html":{}}}],["defaultvaluepipe",{"_index":1537,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":1563,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(10",{"_index":1561,"title":{},"body":{"controllers/UserController.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":1225,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["delete('/soft",{"_index":1389,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(undefined",{"_index":1275,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":1196,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedatecolumn",{"_index":1357,"title":{},"body":{"entities/Tag.html":{}}}],["deleteddate",{"_index":1355,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":1176,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":1254,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1193,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleterequest",{"_index":1255,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletes",{"_index":1194,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletetag",{"_index":1368,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(@query('id",{"_index":1387,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(id",{"_index":1374,"title":{},"body":{"controllers/TagsController.html":{}}}],["dependencies",{"_index":125,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":264,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["deprecated",{"_index":1663,"title":{},"body":{"injectables/UserService.html":{}}}],["description",{"_index":107,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"controllers/FileUploadController.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"entities/Tag.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":1192,"title":{},"body":{"controllers/PostsController.html":{}}}],["development",{"_index":1744,"title":{},"body":{"index.html":{}}}],["dir",{"_index":970,"title":{},"body":{"modules/MailModule.html":{}}}],["directional",{"_index":1017,"title":{},"body":{"entities/MetaOption.html":{}}}],["directly",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["directly(via",{"_index":949,"title":{},"body":{"modules/MailModule.html":{}}}],["dist/**/*.entity.js",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["document",{"_index":1444,"title":{},"body":{"entities/Upload.html":{},"miscellaneous/enumerations.html":{}}}],["documentation",{"_index":593,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["doe",{"_index":488,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["doing",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["don't",{"_index":948,"title":{},"body":{"modules/MailModule.html":{}}}],["done",{"_index":1504,"title":{},"body":{"entities/User.html":{}}}],["draft",{"_index":571,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto/pagination",{"_index":1077,"title":{},"body":{"injectables/PaginationService.html":{}}}],["dtos/create",{"_index":669,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["dtos/get",{"_index":1232,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/google",{"_index":875,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/patch",{"_index":1231,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["dtos/refresh",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["dtos/signin.dto",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["e.g",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["e2e",{"_index":1753,"title":{},"body":{"index.html":{}}}],["each",{"_index":493,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":1125,"title":{},"body":{"entities/Post.html":{}}}],["eagerly",{"_index":1169,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1735,"title":{},"body":{"index.html":{}}}],["eight",{"_index":648,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ejs",{"_index":974,"title":{},"body":{"modules/MailModule.html":{},"dependencies.html":{}}}],["ejsadapter",{"_index":946,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["emailconfig",{"_index":940,"title":{},"body":{"modules/MailModule.html":{}}}],["en",{"_index":764,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["enables",{"_index":1166,"title":{},"body":{"entities/Post.html":{}}}],["enddate",{"_index":847,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PostsService.html":{}}}],["endpoint",{"_index":1550,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entire",{"_index":1631,"title":{},"body":{"modules/UserModule.html":{}}}],["entities",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":247,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["entity/meta",{"_index":1032,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["entity/post.entity",{"_index":1264,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entity/tags.entity",{"_index":1397,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["entity/upload.entity",{"_index":779,"title":{},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{}}}],["entity/user.entity",{"_index":484,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entry",{"_index":819,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["enum",{"_index":595,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Upload.html":{}}}],["enumerations",{"_index":1723,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posts.enums",{"_index":589,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env}.local",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development.local",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserService.html":{}}}],["environmentvalidation",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":103,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["error.message",{"_index":106,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["error.stack",{"_index":706,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{}}}],["everywhere",{"_index":1632,"title":{},"body":{"modules/UserModule.html":{}}}],["example",{"_index":473,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["exception",{"_index":433,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["excerpt",{"_index":551,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["exclude",{"_index":1502,"title":{},"body":{"entities/User.html":{}}}],["executed",{"_index":723,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["execution",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1660,"title":{},"body":{"injectables/UserService.html":{}}}],["existing",{"_index":1219,"title":{},"body":{"controllers/PostsController.html":{}}}],["existingslug",{"_index":1303,"title":{},"body":{"injectables/PostsService.html":{}}}],["existingtags",{"_index":1419,"title":{},"body":{"injectables/TagsService.html":{}}}],["existinguser",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["existinguser.password",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":690,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["exp",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["expected",{"_index":1118,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["expiresin",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{},"modules/UserModule.html":{}}}],["export",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exporting",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["exports",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/FileUploadController.html":{},"injectables/PaginationService.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":741,"title":{},"body":{"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["ext",{"_index":973,"title":{},"body":{"modules/MailModule.html":{}}}],["extends",{"_index":859,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["extension",{"_index":1464,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["extract",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["extractrequestfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(undefined",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["failed",{"_index":704,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{}}}],["false",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["false})@isoptional()@isarray()@isint({each",{"_index":577,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["family_name",{"_index":911,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["featured",{"_index":523,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["featuredimageurl",{"_index":510,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["fetch",{"_index":1066,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{}}}],["few",{"_index":1165,"title":{},"body":{"entities/Post.html":{}}}],["field",{"_index":1795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fields",{"_index":1224,"title":{},"body":{"controllers/PostsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1484,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.mimetype",{"_index":815,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["file.originalname",{"_index":1463,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.size",{"_index":817,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["fileinterceptor",{"_index":748,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["filename",{"_index":811,"title":{},"body":{"injectables/FileUploadService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{}}}],["filenamewithoutspace",{"_index":1466,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["filetypes",{"_index":791,"title":{},"body":{"injectables/FileUploadService.html":{},"entities/Upload.html":{},"miscellaneous/enumerations.html":{}}}],["filetypes.image",{"_index":813,"title":{},"body":{"injectables/FileUploadService.html":{},"entities/Upload.html":{}}}],["fileuploadcontroller",{"_index":735,"title":{"controllers/FileUploadController.html":{}},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"coverage.html":{}}}],["fileuploadmodule",{"_index":135,"title":{"modules/FileUploadModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FileUploadModule.html":{},"modules.html":{},"overview.html":{}}}],["fileuploadservice",{"_index":753,"title":{"injectables/FileUploadService.html":{}},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"coverage.html":{},"overview.html":{}}}],["final",{"_index":1549,"title":{},"body":{"controllers/UserController.html":{}}}],["finally",{"_index":1614,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["finalresponse",{"_index":1095,"title":{},"body":{"injectables/PaginationService.html":{}}}],["find",{"_index":912,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{}}}],["findall",{"_index":1566,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(undefined",{"_index":1644,"title":{},"body":{"injectables/UserService.html":{}}}],["findmultipletags",{"_index":1400,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(undefined",{"_index":1410,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":1635,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(undefined",{"_index":1646,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyemail",{"_index":1636,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyemail(undefined",{"_index":1648,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbygoogleid",{"_index":1637,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbygoogleid(undefined",{"_index":1650,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":426,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["first",{"_index":568,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"entities/User.html":{}}}],["firstname",{"_index":485,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"entities/User.html":{}}}],["footerenabled",{"_index":531,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["force",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["format",{"_index":527,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["forwardref",{"_index":329,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["found",{"_index":1246,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":1733,"title":{},"body":{"index.html":{}}}],["from.env",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["function",{"_index":252,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["functions",{"_index":1728,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":818,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["generatefilename",{"_index":1451,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatefilename(undefined",{"_index":1456,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatetoken",{"_index":884,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["generatetokenprovider",{"_index":324,"title":{"injectables/GenerateTokenProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{},"overview.html":{}}}],["generatetokens",{"_index":825,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["generatetokens(undefined",{"_index":830,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["generic",{"_index":1050,"title":{},"body":{"interfaces/Paginated.html":{}}}],["get('/:id",{"_index":1559,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':userid",{"_index":1240,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts",{"_index":1177,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallposts(undefined",{"_index":1277,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(userid",{"_index":1199,"title":{},"body":{"controllers/PostsController.html":{}}}],["getalltags",{"_index":1401,"title":{},"body":{"injectables/TagsService.html":{}}}],["gethello",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpostsbasedto",{"_index":844,"title":{"classes/GetPostsBaseDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["getpostsquerydto",{"_index":858,"title":{"classes/GetPostsQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["getrefreshtoken",{"_index":1340,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["getrefreshtoken(undefined",{"_index":1342,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["gettagbyid",{"_index":1402,"title":{},"body":{"injectables/TagsService.html":{}}}],["gettagbyid(undefined",{"_index":1413,"title":{},"body":{"injectables/TagsService.html":{}}}],["getting",{"_index":227,"title":{"index.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{}}}],["getuserparamdto",{"_index":1531,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers",{"_index":1512,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":1522,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersparamdto",{"_index":860,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["gif",{"_index":802,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["given",{"_index":440,"title":{},"body":{"injectables/BcryptProvider.html":{},"controllers/PostsController.html":{}}}],["given_name",{"_index":910,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["global",{"_index":269,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{}}}],["global/interceptors/data",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["global/pagination/pagination.module",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["global/pagination/pagination.service",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["globally",{"_index":1629,"title":{},"body":{"modules/UserModule.html":{}}}],["google",{"_index":869,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["googleauthentication",{"_index":870,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["googleauthentication(@body",{"_index":877,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["googleauthentication(body",{"_index":871,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["googleauthenticationcontroller",{"_index":328,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":325,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["googleconfig",{"_index":341,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["googleconfiguration",{"_index":886,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleid",{"_index":634,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["googletokendto",{"_index":872,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["grow",{"_index":1760,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["guards/access",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["handle",{"_index":687,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["handled",{"_index":732,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["handles",{"_index":1185,"title":{},"body":{"controllers/PostsController.html":{}}}],["hashed",{"_index":441,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashedpassword",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashes",{"_index":449,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashing",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{}}}],["hashing.provider",{"_index":452,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashingprovider",{"_index":323,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":436,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(undefined",{"_index":447,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["headers",{"_index":1535,"title":{},"body":{"controllers/UserController.html":{}}}],["hello",{"_index":273,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["here",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/MailModule.html":{},"index.html":{}}}],["host",{"_index":222,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["http://localhost:7321/auth/login",{"_index":990,"title":{},"body":{"injectables/MailService.html":{}}}],["httpcode",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.created",{"_index":1570,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["httpexception",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["httpexception('author",{"_index":1293,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('email",{"_index":688,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["httpexception('invalid",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('no",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/PostsController.html":{}}}],["httpexception('post",{"_index":1312,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('slug",{"_index":1305,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('tag",{"_index":1422,"title":{},"body":{"injectables/TagsService.html":{}}}],["httpexception('tags",{"_index":1299,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('transaction",{"_index":1613,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["httpexception('unauthorized",{"_index":432,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["httpexception('user",{"_index":1245,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["httpexception(`${error.message",{"_index":104,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["https://example.com/image.jpg",{"_index":526,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["https://nestjs.com",{"_index":1775,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":554,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org",{"_index":602,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":705,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{}}}],["httpstatus.conflict",{"_index":691,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["httpstatus.created",{"_index":1244,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.internal_server_error",{"_index":1599,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["httpstatus.moved_permanently",{"_index":1661,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":1294,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["httpstatus.ok",{"_index":1239,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpstatus.request_timeout",{"_index":1596,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["httpstatus.unauthorized",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{}}}],["hyphens",{"_index":567,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["iat",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["id",{"_index":608,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id'})@delete",{"_index":1375,"title":{},"body":{"controllers/TagsController.html":{}}}],["id'})@delete('/soft",{"_index":1379,"title":{},"body":{"controllers/TagsController.html":{}}}],["identifier",{"_index":1669,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":576,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["idtoken",{"_index":907,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["ignoreexpiration",{"_index":99,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["image",{"_index":524,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"miscellaneous/enumerations.html":{}}}],["image/gif",{"_index":796,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["image/jpeg",{"_index":795,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["image/jpg",{"_index":798,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["image/png",{"_index":797,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["implements",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["import",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imported",{"_index":1633,"title":{},"body":{"modules/UserModule.html":{}}}],["importing",{"_index":676,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["imports",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["in(tags",{"_index":1427,"title":{},"body":{"injectables/TagsService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":444,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/PostsController.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/PaginationService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject(appconfig.key",{"_index":722,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["inject(awsconfig.key",{"_index":793,"title":{},"body":{"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["inject(forwardref",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserService.html":{}}}],["inject(googleconfig.key",{"_index":896,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["inject(jwtconfig.key",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["inject(profileconfig.key",{"_index":1653,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(request",{"_index":1080,"title":{},"body":{"injectables/PaginationService.html":{}}}],["injectable",{"_index":40,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":270,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["injection",{"_index":265,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injections",{"_index":1285,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository",{"_index":670,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoptionrepository",{"_index":1290,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(metaoptionsrepository",{"_index":1041,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["injectrepository(postrepository",{"_index":1289,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tagrepository",{"_index":1418,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(upload",{"_index":792,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["injectrepository(user",{"_index":673,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["inlinecssenabled",{"_index":976,"title":{},"body":{"modules/MailModule.html":{}}}],["installation",{"_index":1740,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1742,"title":{},"body":{"index.html":{}}}],["instance",{"_index":427,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/UserCreateMany.html":{}}}],["instead",{"_index":1170,"title":{},"body":{"entities/Post.html":{},"injectables/UserService.html":{}}}],["integer",{"_index":611,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UserController.html":{}}}],["intercept",{"_index":709,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":713,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":1045,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"coverage.html":{},"overview.html":{}}}],["interface/paginated.interface",{"_index":1079,"title":{},"body":{"injectables/PaginationService.html":{}}}],["interfaces",{"_index":1047,"title":{},"body":{"interfaces/Paginated.html":{}}}],["intersectiontype",{"_index":852,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["invalid",{"_index":623,"title":{},"body":{"classes/CreateTagDto.html":{},"injectables/RefreshTokenProvider.html":{}}}],["ip",{"_index":1536,"title":{},"body":{"controllers/UserController.html":{}}}],["isarray",{"_index":471,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isauthenticated",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":581,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{}}}],["isdate()@isoptional",{"_index":849,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["isemail",{"_index":654,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":635,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":582,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(['post",{"_index":596,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":600,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypes",{"_index":597,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":583,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isiso8601",{"_index":584,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":501,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":477,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isemail",{"_index":1350,"title":{},"body":{"classes/SignInDto.html":{}}}],["isnotempty()@isjson",{"_index":499,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["isnotempty()@isstring",{"_index":1352,"title":{},"body":{"classes/SignInDto.html":{}}}],["isnumber",{"_index":1111,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":585,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["ispasswordcorrect",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispositive",{"_index":1070,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["iss",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["isstring",{"_index":502,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":1337,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":637,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional",{"_index":639,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":641,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":643,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issuer",{"_index":97,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["isurl",{"_index":586,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["item",{"_index":607,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":472,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{}}}],["itemsperpage",{"_index":1051,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["jane",{"_index":491,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["jane@doe.com",{"_index":492,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["john",{"_index":486,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["john@doe.com",{"_index":489,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["joi",{"_index":1711,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":945,"title":{},"body":{"modules/MailModule.html":{},"entities/Post.html":{},"index.html":{}}}],["join(__dirname",{"_index":971,"title":{},"body":{"modules/MailModule.html":{}}}],["joincolumn",{"_index":1012,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":1149,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["jpeg",{"_index":801,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["jpg",{"_index":800,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["json",{"_index":553,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["json.stringify(guards",{"_index":420,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["jwt",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["jwt(refresh",{"_index":834,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["jwtconfig",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["jwtconfig.key",{"_index":262,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwtsecret",{"_index":256,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwttokenaudience",{"_index":258,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwttokenexpiration",{"_index":261,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtconfiguration.jwttokenissuer",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtmodule",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtmodule.registerasync",{"_index":255,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["kamil",{"_index":1772,"title":{},"body":{"index.html":{}}}],["keeping",{"_index":1608,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["key",{"_index":504,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"injectables/UploadToAwsProvider.html":{}}}],["keyof",{"_index":1796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keys",{"_index":413,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["language",{"_index":619,"title":{},"body":{"classes/CreateTagDto.html":{},"controllers/FileUploadController.html":{}}}],["last",{"_index":1055,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["lastname",{"_index":487,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"entities/User.html":{}}}],["lazy",{"_index":1171,"title":{},"body":{"entities/Post.html":{}}}],["legend",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1129,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["letter",{"_index":650,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["library",{"_index":894,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1778,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1757,"title":{},"body":{"index.html":{}}}],["likes",{"_index":1117,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["limit",{"_index":1064,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["links",{"_index":1049,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["literal",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["loading",{"_index":1168,"title":{},"body":{"entities/Post.html":{}}}],["logic",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginbody",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginbody",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginticket",{"_index":905,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":909,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginurl",{"_index":989,"title":{},"body":{"injectables/MailService.html":{}}}],["logs",{"_index":1187,"title":{},"body":{"controllers/PostsController.html":{}}}],["loop",{"_index":424,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["lowercase",{"_index":564,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["m2m",{"_index":1159,"title":{},"body":{"entities/Post.html":{}}}],["mail",{"_index":674,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["mail.module.ts",{"_index":678,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["mail.service",{"_index":939,"title":{},"body":{"modules/MailModule.html":{}}}],["mail/mail.module",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule",{"_index":942,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":952,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":982,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":136,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":664,"title":{"injectables/MailService.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["main",{"_index":558,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["make",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["making",{"_index":1286,"title":{},"body":{"injectables/PostsService.html":{}}}],["many",{"_index":463,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["many.ts",{"_index":1582,"title":{},"body":{"injectables/UserCreateMany.html":{},"coverage.html":{}}}],["many.ts:13",{"_index":1588,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["many.ts:7",{"_index":1586,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["manytomany",{"_index":1150,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":1143,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":1151,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":1123,"title":{},"body":{"entities/Post.html":{}}}],["map",{"_index":719,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((data",{"_index":728,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["match",{"_index":931,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["matches",{"_index":446,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":657,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":599,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matches(/^https?:\\/\\/[^\\s",{"_index":633,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["matching",{"_index":109,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":1092,"title":{},"body":{"injectables/PaginationService.html":{}}}],["maxlength",{"_index":587,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":604,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(255",{"_index":598,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":594,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":655,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["means",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["media",{"_index":1445,"title":{},"body":{"entities/Upload.html":{}}}],["message",{"_index":562,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["meta",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":405,"title":{},"body":{"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["metaoption",{"_index":991,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":1281,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptions",{"_index":511,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["metaoptions.post",{"_index":1133,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":148,"title":{"controllers/MetaOptionsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":137,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":1038,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":1023,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":498,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":725,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["migrations",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["mime",{"_index":814,"title":{},"body":{"injectables/FileUploadService.html":{},"entities/Upload.html":{}}}],["minimum",{"_index":647,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginationQueryDto.html":{}}}],["minlength",{"_index":588,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":632,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":503,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":656,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1722,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1756,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1747,"title":{},"body":{"index.html":{}}}],["modern",{"_index":617,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["module",{"_index":122,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CreateUserProvider.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["modules",{"_index":124,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":944,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":947,"title":{},"body":{"modules/MailModule.html":{}}}],["more",{"_index":1769,"title":{},"body":{"index.html":{}}}],["mp4",{"_index":1447,"title":{},"body":{"entities/Upload.html":{}}}],["multipart/form",{"_index":756,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["multiple",{"_index":1515,"title":{},"body":{"controllers/UserController.html":{}}}],["myśliwiec",{"_index":1773,"title":{},"body":{"index.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["necessary",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["need",{"_index":1548,"title":{},"body":{"controllers/UserController.html":{}}}],["needs",{"_index":409,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["nest",{"_index":1738,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1777,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":717,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":943,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DataResponseInterceptor.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1112,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":749,"title":{},"body":{"controllers/FileUploadController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":483,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/FileUploadController.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjsis6@awesome",{"_index":490,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["new",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newurl",{"_index":1089,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.origin}${newurl.pathname}?page=1&limit=${limit",{"_index":1096,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${nextpage}&limit=${limit",{"_index":1099,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${page}&limit=${limit",{"_index":1098,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${prevpage}&limit=${limit",{"_index":1100,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.pathname}?page=${totalpages}&limit=${limit",{"_index":1097,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newuser",{"_index":693,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserCreateMany.html":{}}}],["newuser.push(savednewuserinstance",{"_index":1607,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["newuserinstance",{"_index":1603,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["next",{"_index":714,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["next.handle().pipe",{"_index":727,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nextpage",{"_index":1093,"title":{},"body":{"injectables/PaginationService.html":{}}}],["node.js",{"_index":1732,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1713,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":683,"title":{},"body":{"injectables/CreateUserProvider.html":{},"miscellaneous/enumerations.html":{}}}],["noreply",{"_index":968,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["normalizedslug",{"_index":1301,"title":{},"body":{"injectables/PostsService.html":{}}}],["null",{"_index":421,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/UserService.html":{}}}],["nullable",{"_index":1001,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["number",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number'})@isnumber()@isnotempty",{"_index":1107,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["number})@isoptional()@isint()@type(undefined",{"_index":864,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["oauth2client",{"_index":891,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":880,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/UserCreateMany.html":{}}}],["objectliteral",{"_index":1078,"title":{},"body":{"injectables/PaginationService.html":{}}}],["objects",{"_index":1213,"title":{},"body":{"controllers/PostsController.html":{}}}],["observable",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["occurred",{"_index":1662,"title":{},"body":{"injectables/UserService.html":{}}}],["omit",{"_index":838,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["ondelete",{"_index":1005,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":649,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["onetomany",{"_index":1503,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1499,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":1013,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":1003,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onmoduleinit",{"_index":882,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1758,"title":{},"body":{"index.html":{}}}],["option.entity",{"_index":1033,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":993,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":999,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":1002,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":997,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":1009,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:33",{"_index":1007,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["options",{"_index":453,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.controller",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":1019,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:10",{"_index":1022,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":591,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":497,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:16",{"_index":500,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["options.hashedpassword",{"_index":934,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["options.module",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":1031,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.password",{"_index":454,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["options.service",{"_index":1024,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":1035,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:15",{"_index":1040,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":1037,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":496,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["options/entity/meta",{"_index":992,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/meta",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["otherwise",{"_index":918,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["out",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1782,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owning",{"_index":1155,"title":{},"body":{"entities/Post.html":{}}}],["package",{"_index":1692,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":538,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":1046,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":1072,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginatequery(undefined",{"_index":1075,"title":{},"body":{"injectables/PaginationService.html":{}}}],["pagination",{"_index":1291,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UserController.html":{}}}],["pagination'})@apiresponse({status",{"_index":1523,"title":{},"body":{"controllers/UserController.html":{}}}],["pagination.service",{"_index":1062,"title":{},"body":{"modules/PaginationModule.html":{}}}],["paginationmodule",{"_index":138,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationquery",{"_index":1081,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/PostsService.html":{}}}],["paginationquerydto",{"_index":855,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginationservice",{"_index":142,"title":{"injectables/PaginationService.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["param",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["param('userid",{"_index":1241,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":1542,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param.dto.ts",{"_index":862,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:16",{"_index":865,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parama",{"_index":1552,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["params",{"_index":1479,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["parseintpipe",{"_index":1226,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["partial",{"_index":1222,"title":{},"body":{"controllers/PostsController.html":{}}}],["partialtype",{"_index":1109,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":1105,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":1121,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["pass",{"_index":965,"title":{},"body":{"modules/MailModule.html":{}}}],["passed",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["passing",{"_index":1167,"title":{},"body":{"entities/Post.html":{}}}],["password",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"classes/SignInDto.html":{},"entities/User.html":{}}}],["passwords",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashingProvider.html":{}}}],["patch",{"_index":1220,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["patchpostdto",{"_index":1103,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchuser",{"_index":1513,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(@body",{"_index":1579,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuser(patchuserdto",{"_index":1532,"title":{},"body":{"controllers/UserController.html":{}}}],["patchuserdto",{"_index":1119,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["path",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileUploadService.html":{},"modules/MailModule.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{}}}],["path.extname(filename",{"_index":1465,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["payload",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["person",{"_index":555,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":603,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1715,"title":{},"body":{"dependencies.html":{}}}],["plain",{"_index":929,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["platform",{"_index":988,"title":{},"body":{"injectables/MailService.html":{}}}],["please",{"_index":1767,"title":{},"body":{"index.html":{}}}],["png",{"_index":803,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["port",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["position",{"_index":1527,"title":{},"body":{"controllers/UserController.html":{}}}],["possible",{"_index":536,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":294,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/FileUploadController.html":{},"controllers/GoogleAuthenticationController.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":1195,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@delete",{"_index":1197,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('/create",{"_index":1574,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.content",{"_index":1321,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":1110,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":508,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:103",{"_index":529,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:113",{"_index":550,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:124",{"_index":578,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:146",{"_index":533,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:15",{"_index":1108,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:34",{"_index":580,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:46",{"_index":542,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:60",{"_index":569,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:71",{"_index":575,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:80",{"_index":522,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:92",{"_index":557,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.featuredimageurl",{"_index":1325,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":1004,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.metaoptions.id",{"_index":1334,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.posttype",{"_index":1315,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishedon",{"_index":1327,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.schema",{"_index":1323,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":1317,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":1319,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":1329,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":1313,"title":{},"body":{"injectables/PostsService.html":{}}}],["postentity",{"_index":1263,"title":{},"body":{"modules/PostsModule.html":{}}}],["postgres",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["postquery",{"_index":1200,"title":{},"body":{"controllers/PostsController.html":{}}}],["postrepository",{"_index":1271,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":1174,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.author",{"_index":1500,"title":{},"body":{"entities/User.html":{}}}],["posts.controller",{"_index":1262,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.dto",{"_index":1233,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.dto.ts",{"_index":846,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["posts.dto.ts:12",{"_index":850,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.dto.ts:8",{"_index":851,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.service",{"_index":1229,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.controller",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":147,"title":{"controllers/PostsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":1238,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":139,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":1228,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":570,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":1154,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":512,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["posttypes",{"_index":534,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttypes.post",{"_index":1153,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FileUploadController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["prev",{"_index":1057,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["prevpage",{"_index":1094,"title":{},"body":{"injectables/PaginationService.html":{}}}],["primarygeneratedcolumn",{"_index":998,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["processes",{"_index":1221,"title":{},"body":{"controllers/PostsController.html":{}}}],["processing",{"_index":1186,"title":{},"body":{"controllers/PostsController.html":{}}}],["production",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["profileconfig",{"_index":1625,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["profileconfiguration",{"_index":1639,"title":{},"body":{"injectables/UserService.html":{}}}],["programming",{"_index":618,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["progressive",{"_index":1731,"title":{},"body":{"index.html":{}}}],["project",{"_index":1759,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["promise.all",{"_index":839,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["promise.resolve(instance.canactivate(context",{"_index":428,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["properties",{"_index":346,"title":{"properties.html":{}},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"properties.html":{}}}],["protect",{"_index":1630,"title":{},"body":{"modules/UserModule.html":{}}}],["provide",{"_index":266,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{}}}],["provided",{"_index":682,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{}}}],["provider",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{}}}],["provider/create",{"_index":1623,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["providers",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/bcrypt.provider",{"_index":334,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/generate",{"_index":335,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["providers/hashing.provider",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/refresh",{"_index":337,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/upload",{"_index":776,"title":{},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{}}}],["public",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["published",{"_index":544,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":513,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["put",{"_index":1534,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":1082,"title":{},"body":{"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{}}}],["query('limit",{"_index":1560,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":1562,"title":{},"body":{"controllers/UserController.html":{}}}],["query.dto",{"_index":857,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PaginationService.html":{}}}],["query.dto.ts",{"_index":1063,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:15",{"_index":1068,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:26",{"_index":1069,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryparams",{"_index":1243,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["queryrunner",{"_index":1591,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.committransaction",{"_index":1610,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.connect",{"_index":1594,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.manager.create(user",{"_index":1604,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.manager.save(newuserinstance",{"_index":1606,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.release",{"_index":1616,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1612,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["queryrunner.starttransaction",{"_index":1598,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["r\\n",{"_index":601,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["range",{"_index":537,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1768,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":120,"title":{},"body":{"controllers/AppController.html":{},"controllers/FileUploadController.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["received",{"_index":1188,"title":{},"body":{"controllers/PostsController.html":{}}}],["record",{"_index":401,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["redirecturi",{"_index":902,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["references",{"_index":1508,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":1717,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":394,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refresh",{"_index":915,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["refreshtoken",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{}}}],["refreshtoken(@body",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(token",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokendto",{"_index":287,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["refreshtokenprovider",{"_index":326,"title":{"injectables/RefreshTokenProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtokens",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens(undefined",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["region",{"_index":1477,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["relationship",{"_index":1018,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["relationships",{"_index":1160,"title":{},"body":{"entities/Post.html":{}}}],["release",{"_index":1615,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["remove",{"_index":1162,"title":{},"body":{"entities/Post.html":{}}}],["replace",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Paginated.html":{}}}],["replace(/\\s/g",{"_index":1468,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["repositories",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{}}}],["repository",{"_index":663,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":1091,"title":{},"body":{"injectables/PaginationService.html":{}}}],["repository.find",{"_index":1083,"title":{},"body":{"injectables/PaginationService.html":{}}}],["representing",{"_index":1210,"title":{},"body":{"controllers/PostsController.html":{}}}],["req",{"_index":1227,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":101,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requested",{"_index":760,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["requests",{"_index":1205,"title":{},"body":{"controllers/PostsController.html":{}}}],["requesttimeoutexception",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception('request",{"_index":686,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["requesttimeoutexception(`timeout",{"_index":1665,"title":{},"body":{"injectables/UserService.html":{}}}],["requesttimeoutexception(error.message",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["requesturl",{"_index":1101,"title":{},"body":{"injectables/PaginationService.html":{}}}],["require",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["required",{"_index":470,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"controllers/FileUploadController.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":443,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/PostsController.html":{}}}],["response",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.interceptor",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":708,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:13",{"_index":711,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:21",{"_index":716,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["results",{"_index":108,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1208,"title":{},"body":{"controllers/PostsController.html":{}}}],["retrieves",{"_index":1201,"title":{},"body":{"controllers/PostsController.html":{}}}],["return",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1525,"title":{},"body":{"controllers/UserController.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["review",{"_index":573,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["right",{"_index":416,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["rollback",{"_index":1611,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["run",{"_index":1745,"title":{},"body":{"index.html":{}}}],["runner",{"_index":1590,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["rxjs",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["s3",{"_index":1458,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["s3.types.putobjectrequest",{"_index":1480,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["s3.upload(params).promise",{"_index":1487,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["salt",{"_index":455,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["same",{"_index":697,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["save",{"_index":695,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/UserCreateMany.html":{}}}],["savednewuserinstance",{"_index":1605,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["scalable",{"_index":1736,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":572,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":514,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["sdk",{"_index":1459,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["second",{"_index":1507,"title":{},"body":{"entities/User.html":{}}}],["secret",{"_index":93,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["secretaccesskey",{"_index":1475,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["secure",{"_index":962,"title":{},"body":{"modules/MailModule.html":{}}}],["send",{"_index":696,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["sendwelcomemail",{"_index":980,"title":{},"body":{"injectables/MailService.html":{}}}],["sendwelcomemail(undefined",{"_index":984,"title":{},"body":{"injectables/MailService.html":{}}}],["sent",{"_index":1344,"title":{},"body":{"injectables/RefreshTokenProvider.html":{},"controllers/UserController.html":{}}}],["serialize",{"_index":552,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":540,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":767,"title":{},"body":{"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"index.html":{}}}],["server'})@useinterceptors(undefined)@post",{"_index":744,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["service",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"modules/MailModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UserService.html":{}}}],["services",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["set",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["setmetadata",{"_index":1540,"title":{},"body":{"controllers/UserController.html":{}}}],["setmetadata(auth_type_key",{"_index":1800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":1163,"title":{},"body":{"entities/Post.html":{},"modules/UserModule.html":{}}}],["setup",{"_index":1506,"title":{},"body":{"entities/User.html":{}}}],["shows",{"_index":1113,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["side",{"_index":1156,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["sidebarenabled",{"_index":530,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["signed",{"_index":1181,"title":{},"body":{"controllers/PostsController.html":{}}}],["signindto",{"_index":282,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signoptions",{"_index":257,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["signtoken",{"_index":836,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["single",{"_index":1288,"title":{},"body":{"injectables/PostsService.html":{}}}],["size",{"_index":816,"title":{},"body":{"injectables/FileUploadService.html":{},"entities/Upload.html":{}}}],["skip",{"_index":1084,"title":{},"body":{"injectables/PaginationService.html":{}}}],["slug",{"_index":515,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["social/google",{"_index":338,"title":{},"body":{"modules/AuthModule.html":{}}}],["soft",{"_index":1378,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":1403,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdelete(undefined",{"_index":1415,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdeletetag",{"_index":1369,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(@query('id",{"_index":1390,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(id",{"_index":1377,"title":{},"body":{"controllers/TagsController.html":{}}}],["something",{"_index":731,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["special",{"_index":651,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":863,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["specified",{"_index":1211,"title":{},"body":{"controllers/PostsController.html":{}}}],["specify",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["split('.')[0",{"_index":1467,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["sponsors",{"_index":1762,"title":{},"body":{"index.html":{}}}],["src/.../access",{"_index":1791,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../active",{"_index":1792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1724,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1729,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posts.enums.ts",{"_index":1726,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../upload.entity.ts",{"_index":1725,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":113,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":116,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":271,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":272,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:28",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1622,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":1652,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:21",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:38",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:43",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:77",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:87",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/active",{"_index":1235,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":399,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1676,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refresh",{"_index":1336,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts",{"_index":1349,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts:10",{"_index":1353,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/signin.dto.ts:6",{"_index":1351,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/PostsController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":389,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:14",{"_index":395,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:33",{"_index":396,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":434,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:15",{"_index":448,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:34",{"_index":438,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":822,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":671,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":926,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:19",{"_index":928,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:5",{"_index":932,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1339,"title":{},"body":{"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["src/auth/social/dtos/google",{"_index":922,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":867,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/config/aws.config",{"_index":778,"title":{},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["src/config/email.config",{"_index":941,"title":{},"body":{"modules/MailModule.html":{}}}],["src/config/google.config",{"_index":342,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["src/config/index.config",{"_index":720,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["src/config/jwt.config",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"modules/UserModule.html":{}}}],["src/file",{"_index":736,"title":{},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/global/interceptors/data",{"_index":707,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/global/pagination/dto/pagination",{"_index":856,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/global/pagination/interface/paginated.interface",{"_index":1284,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/global/pagination/interface/paginated.interface.ts",{"_index":1048,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/global/pagination/pagination.module",{"_index":1266,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/global/pagination/pagination.module.ts",{"_index":1061,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/global/pagination/pagination.service",{"_index":1283,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/global/pagination/pagination.service.ts",{"_index":1071,"title":{},"body":{"injectables/PaginationService.html":{},"coverage.html":{}}}],["src/global/pagination/pagination.service.ts:16",{"_index":1076,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/global/pagination/pagination.service.ts:9",{"_index":1074,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/mail/mail.module.ts",{"_index":938,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/mail.service",{"_index":672,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/mail/mail.service.ts",{"_index":979,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/mail.service.ts:6",{"_index":983,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:9",{"_index":985,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":1686,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":495,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":507,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/get",{"_index":845,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":1104,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity",{"_index":1010,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/entity/post.entity.ts",{"_index":1122,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity.ts:19",{"_index":1132,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:26",{"_index":1148,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:34",{"_index":1135,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:42",{"_index":1141,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:50",{"_index":1142,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:56",{"_index":1127,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:62",{"_index":1138,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:69",{"_index":1131,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:75",{"_index":1137,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:81",{"_index":1146,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:89",{"_index":1134,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:96",{"_index":1126,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/enums/posts.enums.ts",{"_index":1727,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":1173,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:111",{"_index":1218,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:125",{"_index":1198,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:49",{"_index":1204,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:77",{"_index":1184,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":1261,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":1268,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:135",{"_index":1278,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:15",{"_index":1272,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:155",{"_index":1276,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:39",{"_index":1274,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:99",{"_index":1280,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":614,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity",{"_index":1152,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/entity/tags.entity.ts",{"_index":1354,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/entity/tags.entity.ts:16",{"_index":1361,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:24",{"_index":1362,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:32",{"_index":1365,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:38",{"_index":1359,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:44",{"_index":1364,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:51",{"_index":1360,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:56",{"_index":1363,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:59",{"_index":1356,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:62",{"_index":1366,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entity/tags.entity.ts:65",{"_index":1358,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":1367,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:19",{"_index":1372,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:26",{"_index":1376,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:32",{"_index":1380,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":1265,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":1395,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/tags/tags.service",{"_index":1282,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/tags.service.ts",{"_index":1399,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/tags.service.ts:14",{"_index":1408,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:30",{"_index":1412,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:36",{"_index":1414,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:46",{"_index":1411,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:56",{"_index":1409,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:62",{"_index":1416,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:8",{"_index":1405,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/user/dtos/create",{"_index":462,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/get",{"_index":861,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/user/dtos/patch",{"_index":1120,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/user/entity/user.entity",{"_index":832,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"injectables/MailService.html":{},"entities/Post.html":{}}}],["src/user/entity/user.entity.ts",{"_index":1489,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entity/user.entity.ts:15",{"_index":1492,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:22",{"_index":1496,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:30",{"_index":1490,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:38",{"_index":1498,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:45",{"_index":1494,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:48",{"_index":1501,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:8",{"_index":1495,"title":{},"body":{"entities/User.html":{}}}],["src/user/provider/create",{"_index":659,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/user/user",{"_index":1581,"title":{},"body":{"injectables/UserCreateMany.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":1510,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:109",{"_index":1517,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:116",{"_index":1533,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:72",{"_index":1530,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:97",{"_index":1521,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":331,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/user/user.module.ts",{"_index":1620,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["src/user/user.service.ts",{"_index":1634,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:113",{"_index":1642,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:22",{"_index":1641,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:44",{"_index":1643,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:48",{"_index":1645,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:74",{"_index":1647,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:84",{"_index":1649,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:98",{"_index":1651,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":1597,"title":{},"body":{"injectables/UserCreateMany.html":{},"index.html":{}}}],["start:dev",{"_index":1748,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1749,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":848,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"injectables/PostsService.html":{}}}],["started",{"_index":1730,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1739,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1670,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":391,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UserController.html":{}}}],["stay",{"_index":1770,"title":{},"body":{"index.html":{}}}],["still",{"_index":1115,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["story",{"_index":539,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["strict",{"_index":977,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string'})@isdate()@isnotempty",{"_index":549,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isnotempty()@isstring()@minlength(3)@maxlength(255",{"_index":626,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isjson",{"_index":556,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isstring",{"_index":620,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024",{"_index":528,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isurl()@maxlength(1024)@matches(/^https?:\\/\\/[^\\s",{"_index":622,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isenum(posttypes)@isnotempty",{"_index":541,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@isenum(poststatus",{"_index":574,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(255)@matches(/^[a",{"_index":559,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@isnotempty()@maxlength(512)@matches(/^[a",{"_index":630,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@isstring()@isoptional",{"_index":521,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":579,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string(error",{"_index":1308,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserCreateMany.html":{}}}],["sub",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["subject",{"_index":987,"title":{},"body":{"injectables/MailService.html":{}}}],["success",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["successful",{"_index":1600,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["successfully",{"_index":1335,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["summary",{"_index":766,"title":{},"body":{"controllers/FileUploadController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":1763,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["svg",{"_index":1780,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":853,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/PatchPostDto.html":{}}}],["synchronize",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["syntax",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":829,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["table",{"_index":1157,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1691,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":616,"title":{"entities/Tag.html":{}},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag'})@post",{"_index":1371,"title":{},"body":{"controllers/TagsController.html":{}}}],["tag.dto",{"_index":1381,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":615,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:23",{"_index":627,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:37",{"_index":631,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:46",{"_index":621,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:51",{"_index":629,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:65",{"_index":624,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.name",{"_index":1421,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagrepository",{"_index":1417,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags",{"_index":516,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":1396,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":1297,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags.posts",{"_index":1144,"title":{},"body":{"entities/Post.html":{}}}],["tags.service",{"_index":1382,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["tags/tags.controller",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":149,"title":{"controllers/TagsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":140,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":1406,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":1270,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":1085,"title":{},"body":{"injectables/PaginationService.html":{}}}],["tap",{"_index":718,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["template",{"_index":969,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["templates",{"_index":972,"title":{},"body":{"modules/MailModule.html":{}}}],["test",{"_index":1752,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1755,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1754,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1751,"title":{},"body":{"index.html":{}}}],["text",{"_index":930,"title":{},"body":{"injectables/HashingProvider.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1761,"title":{},"body":{"index.html":{}}}],["then((canactivate",{"_index":429,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.accesstokenguard",{"_index":402,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.accesstokenprovider.generatetokens",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appconfiguration.apiversion",{"_index":734,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.appservice.gethello",{"_index":121,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":418,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.awsconfiguration.awsaccesskey",{"_index":1474,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.awsconfiguration.awsbucketname",{"_index":1482,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.awsconfiguration.awscloudfronturl}/${awskey",{"_index":812,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["this.awsconfiguration.awsregion",{"_index":1478,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.awsconfiguration.awssecretaccesskey",{"_index":1476,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.configservice.get('appconfig.awsbucketname",{"_index":1472,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.configservice.get('s3_bucket",{"_index":1655,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createtoken",{"_index":840,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.createuserprovider.createuser",{"_index":1654,"title":{},"body":{"injectables/UserService.html":{}}}],["this.datasource.createqueryrunner",{"_index":1592,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["this.extractrequestfromheader",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.fileuploadservice.uploadfile",{"_index":770,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["this.generatefilename",{"_index":1483,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.generatetoken.generatetokens",{"_index":917,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokenprovider.generatetokens",{"_index":1348,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.googleauthenticationservice.authenticate",{"_index":878,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.googleconfiguration.googleclientid",{"_index":898,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleconfiguration.googleclientsecret",{"_index":900,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleconfiguration.googleredirecturi",{"_index":903,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.hashingprovider.comparepasswords",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashingprovider.hashpassword",{"_index":692,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration.jwtrefreshtokenexpiration",{"_index":843,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.jwtconfiguration.jwtsecret",{"_index":94,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtconfiguration.jwttokenaudience",{"_index":96,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtconfiguration.jwttokenexpiration",{"_index":841,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.jwtconfiguration.jwttokenissuer",{"_index":98,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtservice.signasync",{"_index":837,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":1345,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.mailerservice.sendmail",{"_index":986,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.sendwelcomemail",{"_index":702,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.metaoptionsrepository.create(metaoptions",{"_index":1043,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.delete",{"_index":1333,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.save(createdmetaoption",{"_index":1044,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create",{"_index":1027,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.oauthclient",{"_index":901,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":906,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.paginationservice.paginatequery",{"_index":1330,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository",{"_index":1331,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.create",{"_index":1306,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.delete",{"_index":1332,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findone",{"_index":1304,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findoneby",{"_index":1310,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(post",{"_index":1307,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postservice.create",{"_index":1248,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.delete",{"_index":1256,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.getallposts",{"_index":1242,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.update",{"_index":1253,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.profileconfiguration",{"_index":1659,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflector.getallandoverride",{"_index":408,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.refreshtokenprovider.getrefreshtoken",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":1088,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.request.protocol",{"_index":1087,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.request.url",{"_index":1102,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.tagsrepository.create(tag",{"_index":1423,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete",{"_index":1428,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":1425,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":1420,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findoneby",{"_index":1426,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(createdtags",{"_index":1424,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete",{"_index":1429,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtag",{"_index":1386,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete",{"_index":1388,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags",{"_index":1295,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softdelete",{"_index":1391,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.uploadrepository.create",{"_index":810,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["this.uploadrepository.save(upload",{"_index":820,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["this.uploadtoawsprovider.awsfileupload",{"_index":807,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["this.userrepository.create(user",{"_index":694,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findone",{"_index":684,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":1664,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.manager.transaction",{"_index":699,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userscreatemany.createmany",{"_index":1667,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createmany",{"_index":1578,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.createuser",{"_index":920,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":1567,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyid",{"_index":1347,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.userservice.finduserbyemail",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.finduserbygoogleid",{"_index":916,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservices.findonebyid",{"_index":1292,"title":{},"body":{"injectables/PostsService.html":{}}}],["through",{"_index":425,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/PostsController.html":{}}}],["throw",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["throwing",{"_index":1666,"title":{},"body":{"injectables/UserService.html":{}}}],["time",{"_index":548,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["timeout",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{}}}],["timestamp",{"_index":1136,"title":{},"body":{"entities/Post.html":{},"injectables/UploadToAwsProvider.html":{}}}],["timestamp}${extension",{"_index":1471,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["title",{"_index":517,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FileUploadController.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["token')@httpcode(httpstatus.ok",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.access_token",{"_index":908,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["token.dto",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["token.dto.ts",{"_index":923,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:5",{"_index":925,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["token.dto.ts:6",{"_index":1338,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["token.guard.ts:27",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:38",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:43",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.provider",{"_index":336,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts",{"_index":823,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["token.provider.ts:17",{"_index":1341,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts:19",{"_index":828,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["token.provider.ts:32",{"_index":1343,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts:48",{"_index":831,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["token.provider.ts:9",{"_index":826,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["token.refreshtoken",{"_index":1346,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":919,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["totalitems",{"_index":1052,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["totalpages",{"_index":1054,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["touch",{"_index":1771,"title":{},"body":{"index.html":{}}}],["track",{"_index":1609,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["transaction",{"_index":698,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserCreateMany.html":{}}}],["transactionalentitymanager",{"_index":700,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["transactionalentitymanager.save(user",{"_index":701,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["transactions",{"_index":1589,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["transfer",{"_index":1190,"title":{},"body":{"controllers/PostsController.html":{}}}],["transform",{"_index":866,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["transformer",{"_index":481,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transport",{"_index":958,"title":{},"body":{"modules/MailModule.html":{}}}],["trim",{"_index":1469,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["true",{"_index":100,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/FileUploadController.html":{},"modules/MailModule.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@exclude",{"_index":1493,"title":{},"body":{"entities/User.html":{}}}],["true})@jointable",{"_index":1145,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":475,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":1776,"title":{},"body":{"index.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1789,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/FileUploadService.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"entities/User.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm.forfeature",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"modules/FileUploadModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":1034,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([postentity",{"_index":1267,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":1398,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([upload",{"_index":781,"title":{},"body":{"modules/FileUploadModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1627,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":404,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Upload.html":{},"dependencies.html":{}}}],["types/multer",{"_index":1703,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":625,"title":{},"body":{"classes/CreateTagDto.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":893,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception(`${error.message",{"_index":921,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["undefined",{"_index":469,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Upload.html":{},"miscellaneous/variables.html":{}}}],["undefined'])@apioperation({summary",{"_index":743,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["undefined})@get(':userid",{"_index":1203,"title":{},"body":{"controllers/PostsController.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":474,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":532,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":1140,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1750,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileUploadService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1788,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1114,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["update",{"_index":1106,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["update(undefined",{"_index":1279,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":1216,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UserController.html":{}}}],["updatedat",{"_index":1432,"title":{},"body":{"entities/Upload.html":{}}}],["updatedatecolumn",{"_index":1008,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["updateddate",{"_index":995,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedpost",{"_index":1252,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost",{"_index":1178,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":1250,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(updatepostdto",{"_index":1214,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost.content",{"_index":1322,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.featuredimageurl",{"_index":1326,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.id",{"_index":1311,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.posttype",{"_index":1316,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.publishedon",{"_index":1328,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.schema",{"_index":1324,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.slug",{"_index":1318,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.status",{"_index":1320,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.tags",{"_index":1309,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost.title",{"_index":1314,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1223,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":1215,"title":{},"body":{"controllers/PostsController.html":{}}}],["upload",{"_index":738,"title":{"entities/Upload.html":{}},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["upload.controller",{"_index":775,"title":{},"body":{"modules/FileUploadModule.html":{}}}],["upload.controller.ts",{"_index":737,"title":{},"body":{"controllers/FileUploadController.html":{},"coverage.html":{}}}],["upload.controller.ts:36",{"_index":745,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["upload.module",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["upload.module.ts",{"_index":774,"title":{},"body":{"modules/FileUploadModule.html":{}}}],["upload.service",{"_index":754,"title":{},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{}}}],["upload.service.ts",{"_index":782,"title":{},"body":{"injectables/FileUploadService.html":{},"coverage.html":{}}}],["upload.service.ts:15",{"_index":786,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["upload.service.ts:28",{"_index":788,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["upload/entity/upload.entity.ts",{"_index":1430,"title":{},"body":{"entities/Upload.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["upload/entity/upload.entity.ts:20",{"_index":1435,"title":{},"body":{"entities/Upload.html":{}}}],["upload/entity/upload.entity.ts:27",{"_index":1434,"title":{},"body":{"entities/Upload.html":{}}}],["upload/entity/upload.entity.ts:34",{"_index":1438,"title":{},"body":{"entities/Upload.html":{}}}],["upload/entity/upload.entity.ts:42",{"_index":1440,"title":{},"body":{"entities/Upload.html":{}}}],["upload/entity/upload.entity.ts:49",{"_index":1437,"title":{},"body":{"entities/Upload.html":{}}}],["upload/entity/upload.entity.ts:56",{"_index":1439,"title":{},"body":{"entities/Upload.html":{}}}],["upload/entity/upload.entity.ts:59",{"_index":1433,"title":{},"body":{"entities/Upload.html":{}}}],["upload/entity/upload.entity.ts:62",{"_index":1441,"title":{},"body":{"entities/Upload.html":{}}}],["upload/file",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"coverage.html":{}}}],["upload/providers/upload",{"_index":1448,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["uploaded",{"_index":809,"title":{},"body":{"injectables/FileUploadService.html":{},"entities/Upload.html":{}}}],["uploadedfile",{"_index":746,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["uploadfile",{"_index":739,"title":{},"body":{"controllers/FileUploadController.html":{},"injectables/FileUploadService.html":{}}}],["uploadfile(@uploadedfile",{"_index":769,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["uploadfile(file",{"_index":740,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["uploadfile(undefined",{"_index":787,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["uploadrepository",{"_index":784,"title":{},"body":{"injectables/FileUploadService.html":{}}}],["uploadresult",{"_index":1486,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploadresult.key",{"_index":1488,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploadtoawsprovider",{"_index":773,"title":{"injectables/UploadToAwsProvider.html":{}},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/UploadToAwsProvider.html":{},"coverage.html":{},"overview.html":{}}}],["url",{"_index":525,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PaginationService.html":{}}}],["url(this.request.url",{"_index":1090,"title":{},"body":{"injectables/PaginationService.html":{}}}],["us,en;q=0.8",{"_index":765,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["use",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"controllers/UserController.html":{}}}],["useclass",{"_index":267,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["used",{"_index":1158,"title":{},"body":{"entities/Post.html":{}}}],["usefactory",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{}}}],["useguards",{"_index":1539,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(accesstokenguard",{"_index":1573,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors",{"_index":747,"title":{},"body":{"controllers/FileUploadController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":1571,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":768,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["user",{"_index":53,"title":{"entities/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiresponse({status",{"_index":1202,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.'})@apiresponse({status",{"_index":1182,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.controller",{"_index":1621,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator",{"_index":1236,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.decorator.ts",{"_index":1675,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":480,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":464,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":638,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":642,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":636,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":476,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["user.dto.ts:38",{"_index":653,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:42",{"_index":640,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":685,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GenerateTokenProvider.html":{}}}],["user.googleid",{"_index":680,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.id",{"_index":842,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["user.password",{"_index":681,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.posts",{"_index":1124,"title":{},"body":{"entities/Post.html":{}}}],["user.provider",{"_index":1624,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.provider.ts",{"_index":660,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:17",{"_index":665,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:30",{"_index":668,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.service",{"_index":1543,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.sub",{"_index":1249,"title":{},"body":{"controllers/PostsController.html":{}}}],["user/user.module",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["user[field",{"_index":1799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usercontroller",{"_index":1509,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercreatemany",{"_index":1580,"title":{"injectables/UserCreateMany.html":{}},"body":{"injectables/UserCreateMany.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":833,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["usermodule",{"_index":141,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["userparamsdto",{"_index":1568,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userpayload",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":666,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["users",{"_index":465,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UserController.html":{},"injectables/UserCreateMany.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["users'})@auth(authtype.bearer)@post('/create",{"_index":1516,"title":{},"body":{"controllers/UserController.html":{}}}],["users.users",{"_index":1602,"title":{},"body":{"injectables/UserCreateMany.html":{}}}],["users/1223",{"_index":1555,"title":{},"body":{"controllers/UserController.html":{}}}],["users/id?limit=10&page=1",{"_index":1551,"title":{},"body":{"controllers/UserController.html":{}}}],["users?limit=10&page=2",{"_index":1558,"title":{},"body":{"controllers/UserController.html":{}}}],["userscreatemany",{"_index":1640,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":352,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservices",{"_index":1273,"title":{},"body":{"injectables/PostsService.html":{}}}],["using",{"_index":224,"title":{},"body":{"modules/AppModule.html":{},"injectables/BcryptProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"entities/User.html":{}}}],["uuid",{"_index":1462,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["uuid4",{"_index":1461,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["v4",{"_index":1460,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["valid",{"_index":1300,"title":{},"body":{"injectables/PostsService.html":{}}}],["validate",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":478,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":1538,"title":{},"body":{"controllers/UserController.html":{}}}],["validationschema",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":479,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsQueryDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{}}}],["value",{"_index":505,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["varchar",{"_index":1128,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["variable",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["variables",{"_index":202,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["verify",{"_index":904,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["version",{"_index":442,"title":{},"body":{"injectables/BcryptProvider.html":{},"controllers/UserController.html":{},"properties.html":{}}}],["via",{"_index":677,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["video",{"_index":1442,"title":{},"body":{"entities/Upload.html":{},"miscellaneous/enumerations.html":{}}}],["void",{"_index":890,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["want",{"_index":248,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["watch",{"_index":1746,"title":{},"body":{"index.html":{}}}],["website",{"_index":1774,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":519,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/MailService.html":{}}}],["well",{"_index":895,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["whether",{"_index":445,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["whos",{"_index":1556,"title":{},"body":{"controllers/UserController.html":{}}}],["whose",{"_index":1212,"title":{},"body":{"controllers/PostsController.html":{}}}],["without",{"_index":675,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["work",{"_index":1164,"title":{},"body":{"entities/Post.html":{}}}],["works",{"_index":1116,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["world",{"_index":274,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["x",{"_index":759,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["xmlhttprequest",{"_index":761,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["yarn",{"_index":1741,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1766,"title":{},"body":{"index.html":{}}}],["your.env",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["z0",{"_index":560,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":646,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":645,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":644,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FileUploadModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport { Observable } from 'rxjs';\nimport jwtConfig from 'src/config/jwt.config';\n\nexport const REQUEST_USER_KEY = 'user';\n\nexport type UserPayload = {\n  sub: number;\n  email: string;\n  iat: number;\n  exp: number;\n  aud: string;\n  iss: string;\n};\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    // injecting necessary services here\n\n    // injecting jwt service\n    private jwtService: JwtService,\n\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n  ) {}\n\n  private extractRequestFromHeader({ request }: { request: Request }) {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n\n  async canActivate(context: ExecutionContext): Promise {\n    // get the request object from the execution context\n    const request = context.switchToHttp().getRequest();\n\n    // extract the token from the request (header)\n    const token = this.extractRequestFromHeader({ request });\n    // console.log('inside canActivate', token);\n\n    // validate the token\n    if (!token) {\n      throw new HttpException('No token passed', HttpStatus.UNAUTHORIZED);\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: this.jwtConfiguration.jwtSecret,\n        // audience: this.jwtConfiguration.jwtTokenAudience,\n        // issuer: this.jwtConfiguration.jwtTokenIssuer,\n        // ignoreExpiration: true\n      });\n      request[REQUEST_USER_KEY] = payload as UserPayload;\n    } catch (error: any) {\n      throw new HttpException(`${error.message}`, HttpStatus.UNAUTHORIZED, {\n        cause: error.message,\n        description: error,\n      });\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nFileUploadModule\n\nFileUploadModule\n\nAppModule -->\n\nFileUploadModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nAppModule -->\n\nPaginationService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PaginationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            PostsController\n                        \n                        \n                            MetaOptionsController\n                        \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            FileUploadModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { PostsController } from './posts/posts.controller';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOptionsController } from './meta-options/meta-options.controller';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsController } from './tags/tags.controller';\nimport { TagsModule } from './tags/tags.module';\nimport { ConfigModule, ConfigService, ConfigType } from '@nestjs/config';\nimport { PaginationService } from './global/pagination/pagination.service';\nimport { PaginationModule } from './global/pagination/pagination.module';\nimport appConfig from './config/index.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport { DataResponseInterceptor } from './global/interceptors/data-response/data-response.interceptor';\nimport { FileUploadModule } from './file-upload/file-upload.module';\nimport { MailModule } from './mail/mail.module';\nimport awsConfig from './config/aws.config';\n\nexport const ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    // env configs\n    ConfigModule.forRoot({\n      isGlobal: true, // make sure this is set to true to load environment variables from.env file\n      // envFilePath: ['.env.development.local'], // specify the path to your.env file\n      envFilePath: !ENV ? '.env' : `.env.${ENV}.local`,\n      load: [appConfig, databaseConfig, awsConfig],\n      validationSchema: environmentValidation,\n    }), // to use environment variables\n    // env configs\n\n    UserModule,\n    PostsModule,\n    AuthModule,\n    MetaOptionsModule,\n\n    // database configs\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // specify any additional imports here, e.g., TypeORM migrations or custom repositories\n      inject: [ConfigService], // inject\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DATABASE_HOST'), // using this syntax means getting directly from the environment variable\n        port: +configService.get('database.port'),\n        // port: +configService.get('DATABASE_PORT'),\n        username: configService.get('DATABASE_USERNAME'),\n        password: configService.get('DATABASE_PASSWORD'),\n        database: configService.get('DATABASE_NAME'),\n        entities: ['dist/**/*.entity.js'],\n        synchronize: configService.get('database.synchronize'), // set to false in production\n        // autoLoadEntities: true, // using this would require us to create a module (controller and module file) for every entity we want to add, exporting it and using the TypeORM.forFeature([]) function\n      }),\n    }),\n    // database configs\n\n    // jwt configuration\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync({\n      imports: [ConfigModule.forFeature(jwtConfig)],\n      useFactory: async (jwtConfiguration: ConfigType) => ({\n        secret: jwtConfiguration.jwtSecret,\n        signOptions: {\n          audience: jwtConfiguration.jwtTokenAudience,\n          issuer: jwtConfiguration.jwtTokenIssuer,\n          expiresIn: jwtConfiguration.jwtTokenExpiration,\n        },\n      }),\n      inject: [jwtConfig.KEY],\n    }),\n    // jwt configuration\n\n    TagsModule,\n    PaginationModule,\n    FileUploadModule,\n    MailModule,\n  ],\n  controllers: [\n    AppController,\n    PostsController,\n    MetaOptionsController,\n    TagsController,\n  ],\n  providers: [\n    AppService,\n    PaginationService,\n    AccessTokenGuard, // because authentication guard has a dependency injection of AccessTokenGuard\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n      // useClass: AccessTokenGuard,\n    }, // applying global guard\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: DataResponseInterceptor,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginBody: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.NONE)@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginBody\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(token: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.BEARER)@Post('refresh-token')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Post,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { Auth, AuthType } from './decorators/auth.decorator';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Auth(AuthType.NONE)\n  @Post('login')\n  @HttpCode(HttpStatus.OK) // this force and assign the default success response with status code 200\n  login(@Body() loginBody: SignInDto) {\n    return this.authService.login({ body: loginBody });\n  }\n\n  @Auth(AuthType.BEARER)\n  @Post('refresh-token')\n  @HttpCode(HttpStatus.OK)\n  refreshToken(@Body() token: RefreshTokenDto) {\n    return this.authService.refreshTokens({ token });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokenProvider\n\nGenerateTokenProvider\n\nAuthModule -->\n\nGenerateTokenProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokenProvider\n\nRefreshTokenProvider\n\nAuthModule -->\n\nRefreshTokenProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokenProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokenProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from 'src/user/user.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { ConfigModule, ConfigType } from '@nestjs/config';\nimport jwtConfig from 'src/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { GenerateTokenProvider } from './providers/generate-token.provider';\nimport { RefreshTokenProvider } from './providers/refresh-token.provider';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\nimport { GoogleAuthenticationService } from './social/google-authentication.service';\nimport googleConfig from 'src/config/google.config';\n\n@Module({\n  imports: [\n    forwardRef(() => UserModule), // for dependency injection (circular dependency injection)\n    ConfigModule.forFeature(googleConfig),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync({\n      imports: [ConfigModule.forFeature(jwtConfig)],\n      useFactory: async (jwtConfiguration: ConfigType) => ({\n        secret: jwtConfiguration.jwtSecret,\n        signOptions: {\n          audience: jwtConfiguration.jwtTokenAudience,\n          issuer: jwtConfiguration.jwtTokenIssuer,\n          expiresIn: jwtConfiguration.jwtTokenExpiration,\n        },\n      }),\n      inject: [jwtConfig.KEY],\n    }),\n  ],\n  exports: [AuthService, HashingProvider],\n  controllers: [AuthController, GoogleAuthenticationController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider,\n      useClass: BcryptProvider,\n    },\n    GenerateTokenProvider,\n    RefreshTokenProvider,\n    GoogleAuthenticationService,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accessTokenProvider\n                            \n                            \n                                    Public\n                                refreshTokenProvider\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, hashingProvider: HashingProvider, jwtService: JwtService, jwtConfiguration: ConfigType<>, accessTokenProvider: GenerateTokenProvider, refreshTokenProvider: RefreshTokenProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenProvider\n                                                  \n                                                        \n                                                                        RefreshTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        accessTokenProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GenerateTokenProvider\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        refreshTokenProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RefreshTokenProvider\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:40\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Inject,\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from 'src/config/jwt.config';\nimport { UserPayload } from './guards/access-token/access-token.guard';\nimport { GenerateTokenProvider } from './providers/generate-token.provider';\nimport { RefreshTokenProvider } from './providers/refresh-token.provider';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n\n    // injecting hashing provider\n    @Inject(forwardRef(() => HashingProvider)) // doing this because this is a circular dependency\n    private hashingProvider: HashingProvider,\n\n    // injecting jwt service dependency\n    private jwtService: JwtService,\n\n    // injecting jwtConfig (environment values)\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n\n    public accessTokenProvider: GenerateTokenProvider,\n\n    public refreshTokenProvider: RefreshTokenProvider,\n  ) {}\n\n  public async login({ body }: { body: SignInDto }) {\n    const { email, password } = body;\n\n    const existingUser = await this.userService.findUserByEmail({ email });\n\n    let isPasswordCorrect: boolean;\n\n    try {\n      isPasswordCorrect = await this.hashingProvider.comparePasswords({\n        hashedPassword: existingUser.password,\n        password,\n      });\n    } catch (error: any) {\n      throw new RequestTimeoutException(error.message, {\n        cause: error,\n        description: 'Request timeout. Could not compare passwords',\n      });\n    }\n\n    if (!isPasswordCorrect) {\n      throw new HttpException('Invalid credentials', HttpStatus.UNAUTHORIZED);\n    }\n\n    const { accessToken, refreshToken } =\n      await this.accessTokenProvider.generateTokens({\n        user: existingUser,\n      });\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  public async refreshTokens({ token }: { token: RefreshTokenDto }) {\n    const { accessToken, refreshToken } =\n      await this.refreshTokenProvider.getRefreshToken({ token });\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  public isAuthenticated() {\n    return true; // replace with actual authentication logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AUTH_TYPE_KEY, AuthType } from 'src/auth/decorators/auth.decorator';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  constructor(\n    // injecting necessary services here\n\n    // injecting reflector\n    private reflector: Reflector,\n\n    private accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  private static defaultAuthType: AuthType = AuthType.BEARER;\n\n  private authTypeGuardMap: Record = {\n    [AuthType.BEARER]: this.accessTokenGuard,\n    [AuthType.NONE]: {\n      canActivate: () => true,\n    },\n  };\n\n  async canActivate(context: ExecutionContext): Promise {\n    // get all auth types from the reflector (metadata)\n    // getting the auth decorator passed\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY, // decorator that needs checking\n      [context.getHandler(), context.getClass()], // get keys for all type auth\n    ) ?? [AuthenticationGuard.defaultAuthType];\n\n    // console.log({ authTypes });\n\n    // getting the right guard for the right auth type decorator\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n\n    // console.log('Guards:', JSON.stringify(guards, null, 2));\n\n    // array of guards\n    // loop guards canActivate\n    // loop through all the guards and fire the canActivate (returns a boolean)\n    for (const instance of guards) {\n      // console.log({ instance });\n      const canActivate = await Promise.resolve(instance.canActivate(context))\n        .then((canActivate) => {\n          // console.log('canActivate', canActivate);\n          return canActivate;\n        })\n        .catch((error: any) => {\n          throw new HttpException(`${error.message}`, HttpStatus.UNAUTHORIZED, {\n            cause: error.message,\n            description: error,\n          });\n        });\n\n      if (!canActivate) {\n        throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\n      }\n      return true;\n    }\n\n    // throw exception if no canActivate\n    throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                comparePasswords\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \ncomparePasswords(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:34\n                        \n                    \n\n\n            \n                \n                        Compares a given password with its hashed version.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to a boolean indicating whether the password matches the hashed password.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:15\n                        \n                    \n\n\n            \n                \n                        Hashes a given password using bcrypt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                [object Object]\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe password to be hashed. Can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to the hashed password as a string.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  /**\n   * Hashes a given password using bcrypt.\n   *\n   * @param options - The options for hashing the password.\n   * @param options.password - The password to be hashed. Can be a string or a Buffer.\n   *\n   * @returns A Promise that resolves to the hashed password as a string.\n   */\n  public async hashPassword({\n    password,\n  }: {\n    password: string | Buffer;\n  }): Promise {\n    const salt = await bcrypt.genSalt();\n    const hashed = bcrypt.hash(password, salt);\n\n    return hashed;\n  }\n\n  /**\n   * Compares a given password with its hashed version.\n   *\n   * @param password - The password to compare. It can be a string or a Buffer.\n   * @param hashedPassword - The hashed version of the password to compare against.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the password matches the hashed password.\n   */\n  comparePasswords({\n    password,\n    hashedPassword,\n  }: {\n    password: string | Buffer;\n    hashedPassword: string;\n  }): Promise {\n    const compare = bcrypt.compare(password, hashedPassword);\n    return compare;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-many-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Array of users to be created', type: undefined, required: true, isArray: true, items: undefined, example: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-many-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { User } from '../entity/user.entity';\n\nexport class CreateManyUsersDto {\n  @ApiProperty({\n    description: 'Array of users to be created',\n    type: [CreateUserDto],\n    required: true,\n    isArray: true,\n    items: {\n      type: 'User',\n    },\n    example: [\n      {\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john@doe.com',\n        password: 'nestjsIS6@awesome',\n      },\n      {\n        firstName: 'Jane',\n        lastName: 'Doe',\n        email: 'jane@doe.com',\n        password: 'nestjsIS6@awesome',\n      },\n    ],\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMetaOptionsDto.html":{"url":"classes/CreateMetaOptionsDto.html","title":"class - CreateMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-meta-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from \"class-validator\";\n\nexport class CreateMetaOptionsDto {\n    // @ApiProperty()\n    // @IsString()\n    // @MinLength(4)\n    // @IsNotEmpty()\n    // key: string;\n  \n    // @ApiProperty()\n    // @IsNotEmpty()\n    // value: any;\n  \n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the additional options for the post', example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}', type: 'string', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostTypes, description: 'Possible tags for a post, range: ['post', 'page', 'story', 'series']', type: 'string'})@IsString()@IsEnum(PostTypes)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the date when the post was published', example: '2024-03-16T12:00:00+0000', format: 'date-time', type: 'string'})@IsDate()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the excerpt of the post. Serialize your json content or else there will be an error', example: '{\n \"@context\": \"https://schema.org\", \n \"@type\": \"Person\"\n}', format: 'json', type: 'string'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(255)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']', type: 'string'})@IsString()@IsNotEmpty()@IsEnum(PostStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined, type: 'array', required: false})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is a title of the post', example: 'Hello World', type: 'string'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { CreateMetaOptionsDto } from 'src/meta-options/dtos/create-meta-options.dto';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is a title of the post',\n    example: 'Hello World',\n    type: 'string',\n\n    // default: \"Hello World\"\n  }) // this adds the value to the post documentation\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostTypes,\n    description:\n      \"Possible tags for a post, range: ['post', 'page', 'story', 'series']\",\n    type: 'string',\n  })\n  @IsString()\n  //   @IsEnum(['post', 'page', 'story', 'series'])\n  @IsEnum(PostTypes)\n  @IsNotEmpty()\n  postType: PostTypes;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description:\n      \"Possible status for a post, range: ['draft', 'scheduled', 'review', 'published']\",\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'This is the excerpt of the post. Serialize your json content or else there will be an error',\n    example:\n      '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\", \\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}',\n    format: 'json',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'This is the date when the post was published',\n    example: '2024-03-16T12:00:00+0000',\n    format: 'date-time',\n    type: 'string',\n  })\n  @IsDate()\n  @IsNotEmpty()\n  publishedOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1, 4],\n    type: 'array',\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true }) // validate each item in the array as a string\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    description: 'This is the additional options for the post',\n    example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n    type: 'string',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'The meta value is a json object',\n          example: '{\"sidebarEnabled\": true, \"footerEnabled\": true}',\n        },\n      },\n      required: ['key', 'value'],\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreateMetaOptionsDto)\n  metaOptions?: CreateMetaOptionsDto | null;\n\n  // @ApiProperty({\n  //   description: 'This is the id of the author of the post',\n  //   example: 123,\n  //   type: 'integer',\n  //   required: true,\n  // })\n  // @IsInt()\n  // @IsNotEmpty()\n  // authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Tag Description', example: 'A modern programming language', type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image URL', example: 'https://example.com/image.jpg', format: 'url', type: 'string'})@IsOptional()@IsUrl()@MaxLength(1024)@Matches(/^https?:\\/\\/[^\\s]+$/, {message: 'Invalid URL format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the tag', example: 'TypeScript', type: 'string'})@IsNotEmpty()@IsString()@MinLength(3)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the main content of the post', example: 'Welcome to my blog', type: 'string'})@IsString()@IsNotEmpty()@MaxLength(512)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty({\n    description: 'Name of the tag',\n    example: 'TypeScript',\n    type: 'string',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(255)\n  name: string;\n\n  @ApiProperty({\n    description: 'This is the main content of the post',\n    example: 'Welcome to my blog',\n    type: 'string',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(512)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should be composed only of lowercase alphanumeric characters and hyphens. For example: my-first-post',\n  })\n  slug: string;\n\n  @ApiPropertyOptional({\n    description: 'Tag Description',\n    example: 'A modern programming language',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional({})\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the featured image URL',\n    example: 'https://example.com/image.jpg',\n    format: 'url',\n    type: 'string',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  @Matches(/^https?:\\/\\/[^\\s]+$/, {\n    message: 'Invalid URL format',\n  })\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  // @IsNotEmpty()\n  @IsOptional()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password?: string;\n\n  @IsString()\n  @IsOptional()\n  googleId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/provider/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingProvider: HashingProvider, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/user/provider/create-user.provider.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/provider/create-user.provider.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../entity/user.entity';\nimport { Repository } from 'typeorm';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { MailService } from 'src/mail/mail.service';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    // injecting user service repository dependency\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    // injecting hashing provider\n    @Inject(forwardRef(() => HashingProvider)) // doing this because this is a circular dependency\n    private hashingProvider: HashingProvider,\n\n    private mailService: MailService, // injecting mail service repository dependency... doing this without importing via module because mail.module.ts is a global module\n  ) {}\n\n  public async createUser({ user }: { user: CreateUserDto }): Promise {\n    // check user\n    let existingUser = undefined;\n\n    if (!user.googleId && !user.password) {\n      throw new HttpException(\n        'Provide a googleId or a password',\n        HttpStatus.UNAUTHORIZED,\n        {\n          cause: 'either googleId or password was provided',\n          description:\n            'in other to create a user either googleId or password is required and none was provided',\n        },\n      );\n    }\n\n    try {\n      existingUser = await this.userRepository.findOne({\n        where: { email: user.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException('Request timeout', {\n        cause: error,\n        description: 'Request timeout',\n      });\n    }\n\n    // handle exception\n    if (existingUser) {\n      throw new HttpException('Email already exists', HttpStatus.CONFLICT);\n    }\n\n    if (user.password) {\n      const hashedPassword = await this.hashingProvider.hashPassword({\n        password: user.password,\n      });\n\n      user.password = hashedPassword;\n    }\n\n    if (user.googleId) {\n      user.googleId = user.googleId;\n    }\n\n    let newUser: User;\n\n    try {\n      // create a new user\n      newUser = this.userRepository.create(user);\n      // Save and send welcome email should be in the same transaction\n      await this.userRepository.manager.transaction(\n        async (transactionalEntityManager) => {\n          await transactionalEntityManager.save(User, newUser);\n          await this.mailService.sendWelcomeMail({ user: newUser });\n        },\n      );\n    } catch (error: any) {\n      console.log({ error });\n      throw new HttpException(\n        `User creation failed: ${error.message}`,\n        HttpStatus.BAD_REQUEST,\n        {\n          cause: error.message,\n          description: error.stack,\n        },\n      );\n    }\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/global/interceptors/data-response/data-response.interceptor.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/global/interceptors/data-response/data-response.interceptor.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { Observable, tap, map } from 'rxjs';\nimport appConfig from 'src/config/index.config';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  constructor(\n    // injecting config\n\n    @Inject(appConfig.KEY)\n    private appConfiguration: ConfigType,\n  ) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    // executed before method execution\n    console.log('before ...', {});\n    console.log({ context });\n\n    // executed before method execution\n\n    return next.handle().pipe(\n      map((data) => {\n        // executed after method execution\n\n        console.log('after ...', {});\n        console.log({ data });\n        // do something here after the request is handled\n\n        return {\n          apiVersion: this.appConfiguration.apiVersion,\n          data: data,\n        };\n      }),\n\n      // executed after method execution\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileUploadController.html":{"url":"controllers/FileUploadController.html","title":"controller - FileUploadController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileUploadController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file-upload/file-upload.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                file-upload\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiHeaders(['undefined', 'undefined'])@ApiOperation({summary: 'Upload a file', description: 'Upload a file to the server'})@UseInterceptors(undefined)@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/file-upload/file-upload.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiHeader, ApiHeaders, ApiOperation } from '@nestjs/swagger';\nimport { Express } from 'express';\nimport { FileUploadService } from './file-upload.service';\n\n@Controller('file-upload')\nexport class FileUploadController {\n  constructor(\n    private readonly fileUploadService: FileUploadService, // inject your FileUploadService here\n  ) {}\n\n  // @ApiHeader({ name: 'Content-Type', description: 'multipart/form-data', required: true })\n  @ApiHeaders([\n    { name: 'Authorization', description: 'Bearer token', required: true },\n    {\n      name: 'Content-Type',\n      description: 'multipart/form-data',\n      required: true,\n    },\n    // { name: 'X-Requested-With', description: 'XMLHttpRequest', required: true },\n    // { name: 'Accept', description: 'application/json', required: true },\n    // { name: 'Accept-Language', description: 'en-US,en;q=0.8', required: true },\n  ])\n  @ApiOperation({\n    summary: 'Upload a file',\n    description: 'Upload a file to the server',\n  })\n  @UseInterceptors(FileInterceptor('file', {}))\n  @Post('')\n  uploadFile(@UploadedFile() file: Express.Multer.File) {\n    return this.fileUploadService.uploadFile({ file });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FileUploadModule.html":{"url":"modules/FileUploadModule.html","title":"module - FileUploadModule","body":"\n                   \n\n\n\n\n    Modules\n    FileUploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FileUploadModule\n\n\n\ncluster_FileUploadModule_providers\n\n\n\n\nFileUploadService\n\nFileUploadService\n\n\n\nFileUploadModule\n\nFileUploadModule\n\nFileUploadModule -->\n\nFileUploadService->FileUploadModule\n\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\nFileUploadModule -->\n\nUploadToAwsProvider->FileUploadModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/file-upload/file-upload.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FileUploadService\n                        \n                        \n                            UploadToAwsProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FileUploadController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileUploadService } from './file-upload.service';\nimport { FileUploadController } from './file-upload.controller';\nimport { UploadToAwsProvider } from './providers/upload-to-aws.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport awsConfig from 'src/config/aws.config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Upload } from './entity/upload.entity';\n\n@Module({\n  imports: [\n    ConfigModule.forFeature(awsConfig),\n    TypeOrmModule.forFeature([Upload]),\n  ],\n  providers: [FileUploadService, UploadToAwsProvider],\n  controllers: [FileUploadController],\n})\nexport class FileUploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileUploadService.html":{"url":"injectables/FileUploadService.html","title":"injectable - FileUploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileUploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file-upload/file-upload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadToAwsProvider: UploadToAwsProvider, uploadRepository: Repository, awsConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/file-upload/file-upload.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadToAwsProvider\n                                                  \n                                                        \n                                                                        UploadToAwsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        awsConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file-upload/file-upload.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { UploadToAwsProvider } from './providers/upload-to-aws.provider';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FileTypes, Upload } from './entity/upload.entity';\nimport { Repository } from 'typeorm';\nimport awsConfig from 'src/config/aws.config';\nimport { ConfigType } from '@nestjs/config';\n\n@Injectable()\nexport class FileUploadService {\n  constructor(\n    // provider\n    private uploadToAwsProvider: UploadToAwsProvider,\n\n    // upload repository injection\n    @InjectRepository(Upload)\n    private uploadRepository: Repository,\n\n    @Inject(awsConfig.KEY)\n    private awsConfiguration: ConfigType,\n  ) {}\n\n  public async uploadFile({ file }: { file: Express.Multer.File }) {\n    try {\n      const allowedMimeTypes = [\n        'image/jpeg',\n        'image/gif',\n        'image/png',\n        'image/jpg',\n      ];\n      if (!allowedMimeTypes.includes(file.mimetype)) {\n        throw new BadRequestException(\n          'Upload a file of type jpg, jpeg, gif, or png',\n        );\n      }\n\n      // upload the file to aws (any server of our choice)\n      const awsKey = await this.uploadToAwsProvider.awsFileUpload({ file });\n      console.log('File uploaded to AWS:', awsKey);\n\n      // save the file info to database\n      const upload = this.uploadRepository.create({\n        filename: awsKey,\n        path: `${this.awsConfiguration.awsCloudfrontUrl}/${awsKey}`,\n        type: FileTypes.IMAGE,\n        mime: file.mimetype,\n        size: file.size,\n      });\n\n      // generate to a new entry in database\n      return await this.uploadRepository.save(upload);\n    } catch (error: any) {\n      throw new ConflictException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokenProvider.html":{"url":"injectables/GenerateTokenProvider.html","title":"injectable - GenerateTokenProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokenProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-token.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createToken\n                            \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-token.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    createToken(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-token.provider.ts:19\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-token.provider.ts:48\n                        \n                    \n\n\n            \n                \n                        generateTokens\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from 'src/config/jwt.config';\nimport { UserPayload } from '../guards/access-token/access-token.guard';\nimport { User } from 'src/user/entity/user.entity';\n\n@Injectable()\nexport class GenerateTokenProvider {\n  constructor(\n    // injecting jwt service dependency\n    private jwtService: JwtService,\n\n    // injecting jwtConfig (environment values)\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n  ) {}\n\n  private async createToken({\n    userId,\n    expiresIn,\n    payload,\n  }: {\n    userId: number;\n    expiresIn: number;\n    payload?: T;\n  }) {\n    // generate jwt(refresh) token for authenticated user\n    const signToken = await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        expiresIn: expiresIn,\n        secret: this.jwtConfiguration.jwtSecret,\n        audience: this.jwtConfiguration.jwtTokenAudience,\n        issuer: this.jwtConfiguration.jwtTokenIssuer,\n      },\n    );\n\n    return signToken;\n  }\n\n  /**\n   * generateTokens\n   */\n  public async generateTokens({\n    user,\n  }: {\n    // user: Omit;\n    user: User;\n  }) {\n    const [accessToken, refreshToken] = await Promise.all([\n      await this.createToken({\n        expiresIn: this.jwtConfiguration.jwtTokenExpiration,\n        userId: user.id,\n        payload: {\n          email: user.email,\n        },\n      }),\n\n      await this.createToken({\n        expiresIn: this.jwtConfiguration.jwtRefreshTokenExpiration,\n        userId: user.id,\n      }),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto.html":{"url":"classes/GetPostsBaseDto.html","title":"class - GetPostsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger'; // importing from swagger so i get automatic documentation\nimport { PaginationQueryDto } from 'src/global/pagination/dto/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsQueryDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsQueryDto.html":{"url":"classes/GetPostsQueryDto.html","title":"class - GetPostsQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger'; // importing from swagger so i get automatic documentation\nimport { PaginationQueryDto } from 'src/global/pagination/dto/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsQueryDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 123, type: Number})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/get-users-param.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 123,\n    type: Number,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number) // transform string to number if provided\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                googleAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        googleAuthentication\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleAuthentication(body: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.NONE)@HttpCode(HttpStatus.OK)@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\nimport { Auth, AuthType } from '../decorators/auth.decorator';\nimport { GoogleAuthenticationService } from './google-authentication.service';\n\n@Controller('google-authentication')\nexport class GoogleAuthenticationController {\n  constructor(\n    private googleAuthenticationService: GoogleAuthenticationService,\n  ) {}\n\n  @Auth(AuthType.NONE)\n  @HttpCode(HttpStatus.OK)\n  @Post('')\n  googleAuthentication(@Body() body: GoogleTokenDto) {\n    return this.googleAuthenticationService.authenticate({ token: body });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(googleConfiguration: ConfigType<>, userService: UserService, generateToken: GenerateTokenProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/google-authentication.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        googleConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateToken\n                                                  \n                                                        \n                                                                        GenerateTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/google-authentication.service.ts:29\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  OnModuleInit,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { OAuth2Client } from 'google-auth-library';\nimport googleConfig from 'src/config/google.config';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\nimport { UserService } from 'src/user/user.service';\nimport { GenerateTokenProvider } from '../providers/generate-token.provider';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n  constructor(\n    // injecting google-config as well as jwt configuration\n\n    @Inject(googleConfig.KEY)\n    private googleConfiguration: ConfigType,\n\n    @Inject(forwardRef(() => UserService)) // circular dependency injection\n    private userService: UserService,\n\n    private generateToken: GenerateTokenProvider,\n  ) {}\n\n  private oauthClient: OAuth2Client;\n\n  onModuleInit() {\n    const clientId = this.googleConfiguration.googleClientId;\n    const clientSecret = this.googleConfiguration.googleClientSecret;\n\n    this.oauthClient = new OAuth2Client({\n      clientId,\n      clientSecret,\n      redirectUri: this.googleConfiguration.googleRedirectUri,\n    });\n  }\n\n  public async authenticate({ token }: { token: GoogleTokenDto }) {\n    try {\n      // verify token\n      const loginTicket = await this.oauthClient.verifyIdToken({\n        idToken: token.access_token,\n      });\n\n      // extract payload from token\n      const payload = loginTicket.getPayload();\n      const { sub: googleId, email, given_name, family_name } = payload;\n\n      // find the user in the db (if user exists just return assess token and refresh token)\n      const user = await this.userService.findUserByGoogleId({\n        googleId: googleId,\n      });\n\n      if (user) {\n        return this.generateToken.generateTokens({ user });\n      }\n\n      // ... otherwise create a new user and then generate tokens\n      const newUser = await this.userService.createUser({\n        user: {\n          email: email,\n          firstName: given_name,\n          lastName: family_name,\n          googleId: googleId,\n        },\n      });\n\n      return this.generateToken.generateTokens({ user: newUser });\n    } catch (error: any) {\n      throw new UnauthorizedException(`${error.message}`, {\n        cause: error.message,\n        description: error,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                access_token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class GoogleTokenDto {\n  @IsNotEmpty()\n  access_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePasswords\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:19\n                        \n                    \n\n\n            \n                \n                        Compares a plain text password with a hashed password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                [object Object]\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text password to compare. Can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to a boolean indicating whether the passwords match.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n  abstract hashPassword({\n    password,\n  }: {\n    password: string | Buffer;\n  }): Promise;\n\n  /**\n   * Compares a plain text password with a hashed password.\n   * \n   * @param options - The options for password comparison.\n   * @param options.password - The plain text password to compare. Can be a string or a Buffer.\n   * @param options.hashedPassword - The hashed password to compare against.\n   * @returns A promise that resolves to a boolean indicating whether the passwords match.\n   */\n  abstract comparePasswords({\n    password,\n    hashedPassword,\n  }: {\n    password: string | Buffer;\n    hashedPassword: string;\n  }): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport emailConfig from 'src/config/email.config';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { join } from 'path';\nimport { EjsAdapter } from '@nestjs-modules/mailer/dist/adapters/ejs.adapter';\n\n@Global() // i don't have to import directly(via module imports) i can use it anywhere\n@Module({\n  imports: [\n    ConfigModule.forFeature(emailConfig),\n    MailerModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => {\n        console.log({ configService });\n        console.log(configService.get('emailConfig.mailHost'));\n        console.log(configService.get('emailConfig.mailPort'));\n        console.log(configService.get('emailConfig.mailSecure'));\n        console.log(configService.get('emailConfig.smtpUsername'));\n        console.log(configService.get('emailConfig.smtpPassword'));\n        return {\n          transport: {\n            // host: configService.get('MAIL_HOST'),\n            host: configService.get('emailConfig.mailHost'),\n            port: configService.get('emailConfig.mailPort'),\n            secure: configService.get('emailConfig.mailSecure'),\n            auth: {\n              user: configService.get('emailConfig.smtpUsername'),\n              pass: configService.get('emailConfig.smtpPassword'),\n            },\n          },\n          defaults: {\n            from: '\"NoReply\" ',\n          },\n          template: {\n            dir: join(__dirname, 'templates'),\n            ext: '.ejs',\n            adapter: new EjsAdapter({\n              inlineCssEnabled: true,\n            }),\n            options: {\n              strict: false,\n            },\n          },\n        };\n      },\n    }),\n  ],\n  providers: [MailService],\n  exports: [MailService], // make it available for other modules to use it\n  controllers: [], // no controllers here as this is just a service module\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                sendWelcomeMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/mail.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        sendWelcomeMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWelcomeMail(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport { User } from 'src/user/entity/user.entity';\n\n@Injectable()\nexport class MailService {\n  constructor(private mailerService: MailerService) {}\n\n  public async sendWelcomeMail({ user }: { user: User }): Promise {\n    const { email, firstName, lastName } = user;\n\n    await this.mailerService.sendMail({\n      to: email,\n      from: '\"NoReply\" ',\n      subject: 'Welcome to our platform!',\n      template: 'welcome',\n      context: {\n        firstName,\n        lastName,\n        email,\n        loginUrl: 'http://localhost:7321/auth/login',\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/entity/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/entity/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  }) // creating bi-directional relationship\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOptions(createMetaOptionsDto: CreateMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionsDto\n                                            \n                                                            CreateMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private metaOptionsService: MetaOptionsService) {}\n\n  @Post()\n  createMetaOptions(@Body() createMetaOptionsDto: CreateMetaOptionsDto) {\n    const metaOptions = this.metaOptionsService.create({\n      metaOptions: createMetaOptionsDto,\n    });\n\n    return metaOptions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsService } from './meta-options.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './entity/meta-option.entity';\nimport { MetaOptionsController } from './meta-options.controller';\n\n@Module({\n  providers: [MetaOptionsService],\n  controllers: [MetaOptionsController],\n  exports: [MetaOptionsService],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/meta-options.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMetaOptionsDto } from './dtos/create-meta-options.dto';\nimport { MetaOption as MetaOptionsRepository } from './entity/meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    // injecting meta options service repository dependency\n    @InjectRepository(MetaOptionsRepository)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create({ metaOptions }: { metaOptions: CreateMetaOptionsDto }) {\n    const createdMetaOption =\n      await this.metaOptionsRepository.create(metaOptions);\n    await this.metaOptionsRepository.save(createdMetaOption);\n\n    return createdMetaOption;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/interface/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[]; // replace with your actual entity type... it would be generic\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    prev: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationService \n\nPaginationService \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationService  -->\n\nPaginationModule->PaginationService \n\n\n\n\n\nPaginationService\n\nPaginationService\n\nPaginationModule -->\n\nPaginationService->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/global/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationService } from './pagination.service';\n\n@Module({\n  providers: [PaginationService],\n  exports: [PaginationService],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/dto/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of items to fetch', example: 10, type: Number, default: 10, minimum: 1})@IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/global/pagination/dto/pagination-query.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of page to fetch', example: 10, type: Number, default: 10, minimum: 1})@IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/global/pagination/dto/pagination-query.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsOptional, IsPositive } from 'class-validator';\n\nexport class PaginationQueryDto {\n  @ApiPropertyOptional({\n    description: 'Number of items to fetch',\n    example: 10,\n    type: Number,\n    default: 10,\n    minimum: 1,\n  })\n  @IsOptional()\n  @IsPositive()\n  limit?: number = 10;\n\n  @ApiPropertyOptional({\n    description: 'Number of page to fetch',\n    example: 10,\n    type: Number,\n    default: 10,\n    minimum: 1,\n  })\n  @IsOptional()\n  @IsPositive()\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationService.html":{"url":"injectables/PaginationService.html","title":"injectable - PaginationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/global/pagination/pagination.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/global/pagination/pagination.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/global/pagination/pagination.service.ts:16\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PaginationQueryDto } from './dto/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport { Paginated } from './interface/paginated.interface';\n\n@Injectable()\nexport class PaginationService {\n  constructor(\n    // injecting the request object\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  public async paginateQuery({\n    paginationQuery,\n    repository,\n  }: {\n    paginationQuery: PaginationQueryDto;\n    repository: Repository;\n  }): Promise> {\n    const { limit, page } = paginationQuery;\n\n    const query = await repository.find({\n      skip: (page - 1) * limit,\n      take: limit,\n    });\n\n    // creating url\n\n    const baseUrl =\n      this.request.protocol + '://' + this.request.headers.host + '/';\n\n    const newUrl = new URL(this.request.url, baseUrl);\n\n    const totalItems = await repository.count({});\n    const totalPages = Math.ceil(totalItems / limit);\n    const nextPage = totalPages === page ? page : page + 1;\n    const prevPage = page === 1 ? page : page - 1;\n\n    const finalResponse: Paginated = {\n      data: query,\n      meta: {\n        itemsPerPage: limit,\n        totalItems,\n        currentPage: page,\n        totalPages,\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?page=1&limit=${limit}}`,\n        last: `${newUrl.pathname}?page=${totalPages}&limit=${limit}`,\n        current: `${newUrl.pathname}?page=${page}&limit=${limit}`,\n        next: `${newUrl.pathname}?page=${nextPage}&limit=${limit}`,\n        prev: `${newUrl.pathname}?page=${prevPage}&limit=${limit}`,\n      },\n    };\n\n    console.log({ baseUrl, requestUrl: this.request.url, newUrl });\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Update post with a specific id', example: 123, type: 'number'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\n// import { PartialType } from '@nestjs/mapped-types'; \n// we are using the import from swagger so it shows up in our documentation, it still works likes expected as the import from @nestjs/mapped-types\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'Update post with a specific id',\n    example: 123,\n    type: 'number',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entity/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostTypes, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: PostStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tags => tags.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostStatus, PostTypes } from '../enums/posts.enums';\nimport { MetaOption } from '../../meta-options/entity/meta-option.entity';\nimport { User } from 'src/user/entity/user.entity';\nimport { Tag } from 'src/tags/entity/tags.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostTypes,\n    default: PostTypes.POST,\n  })\n  postType: PostTypes;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: false,\n  })\n  publishedOn: Date;\n\n  @ManyToMany(() => Tag, (tags) => tags.posts, {\n    eager: true,\n  })\n  @JoinTable() // this must be on the owning side of the relationship and join table is used for M2M relationships, it also creates a new table for the relationship\n  tags?: Tag[];\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    // cascade: ['remove'] // setting cascade to work for a few methods\n    cascade: true, // this enables us create data in the metaoption table by just passing the value\n    eager: true, // loading the metaOptions eagerly instead of lazy loading it\n  })\n  // @JoinColumn()\n  metaOptions?: MetaOption;\n\n  // metaOptions?: CreatePostDtoWithMeta[];\n\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                deletePost\n                            \n                            \n                                    \n                                    \n                                    \n                                getAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: UserPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post', description: 'Creates a new post for a signed in user.'})@ApiResponse({status: undefined, description: 'Created post', type: CreatePostDto})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\nThis function handles the creation of a new post by processing the provided CreatePostDto.\nIt logs the received data and returns a confirmation message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the details of the post to be created.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            UserPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the post request was received.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post'})@ApiResponse({status: undefined, description: 'Deleted post'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(userId: number, postQuery: GetPostsQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Retrieves all posts for a specific user'})@ApiResponse({status: undefined, description: 'All posts', type: undefined})@Get(':userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\nThis function handles GET requests to fetch all posts associated with a given user ID.\nIt logs the user ID for which posts are being retrieved and then calls the post service\nto fetch the posts.\nExample :                                representing all posts for the specified user.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user whose posts are to be retrieved.\n\n\n                                            \n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CreatePostDto objects,\nrepresenting all posts for the specified user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(updatePostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates a post'})@ApiResponse({status: undefined, description: 'Updated post', type: CreatePostDto})@Patch('')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\nThis function handles PATCH requests to update an existing post using the provided data.\nIt logs the update data received and processes the partial post update through the\nPatchPostDto data transfer object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the fields to be updated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message indicating that the patch request was received.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  Req,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsQueryDto } from './dtos/get-posts.dto';\nimport { Auth, AuthType } from 'src/auth/decorators/auth.decorator';\nimport { ActiveUser } from 'src/auth/decorators/active-user.decorator';\nimport { UserPayload } from 'src/auth/guards/access-token/access-token.guard';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   *\n   * This function handles GET requests to fetch all posts associated with a given user ID.\n   * It logs the user ID for which posts are being retrieved and then calls the post service\n   * to fetch the posts.\n   *\n   * @param {number} userId - The ID of the user whose posts are to be retrieved.\n   * @returns {Promise} A promise that resolves to an array of CreatePostDto objects,\n   *                                     representing all posts for the specified user.\n   */\n\n  @ApiOperation({\n    summary: 'Retrieves all posts for a specific user',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'All posts',\n    type: [CreatePostDto],\n  })\n  @Get(':userId?')\n  getAllPosts(\n    @Param('userId') userId: number,\n    @Query() postQuery: GetPostsQueryDto,\n  ) {\n    console.log({ postQuery });\n\n    return this.postService.getAllPosts({ userId, queryParams: postQuery });\n  }\n\n  /**\n   * Creates a new post.\n   *\n   * This function handles the creation of a new post by processing the provided CreatePostDto.\n   * It logs the received data and returns a confirmation message.\n   *\n   * @param {CreatePostDto} createPostDto - The data transfer object containing the details of the post to be created.\n   * @returns {string} A confirmation message indicating that the post request was received.\n   */\n  @ApiOperation({\n    summary: 'Creates a new post',\n    description: 'Creates a new post for a signed in user.',\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Created post',\n    type: CreatePostDto,\n  })\n  @Post('')\n  createPost(\n    @Body() createPostDto: CreatePostDto,\n    @ActiveUser() user: UserPayload,\n  ) {\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.UNAUTHORIZED);\n    }\n\n    const createdPost = this.postService.create({\n      createPost: createPostDto,\n      authorId: user.sub as number,\n    });\n    return createdPost;\n  }\n\n  /**\n   * Updates an existing post.\n   *\n   * This function handles PATCH requests to update an existing post using the provided data.\n   * It logs the update data received and processes the partial post update through the\n   * PatchPostDto data transfer object.\n   *\n   * @param {PatchPostDto} updatePostDto - The data transfer object containing the fields to be updated.\n   * @returns {string} A confirmation message indicating that the patch request was received.\n   */\n  @ApiOperation({\n    summary: 'Updates a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Updated post',\n    type: CreatePostDto,\n  })\n  @Patch('')\n  updatePost(@Body() updatePostDto: PatchPostDto) {\n    // console.log({updatePostDto})\n    const updatedPost = this.postService.update({ updatePost: updatePostDto });\n    return updatedPost;\n  }\n\n  @ApiOperation({\n    summary: 'Deletes a post',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Deleted post',\n  })\n  @Delete('')\n  deletePost(@Query('id', ParseIntPipe) id: number) {\n    if (!id) {\n      throw new HttpException('No ID Provided', HttpStatus.BAD_REQUEST);\n    }\n\n    const deleteRequest = this.postService.delete({ id });\n\n    return deleteRequest;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { UserModule } from 'src/user/user.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post as PostEntity } from './entity/post.entity';\nimport { MetaOption } from 'src/meta-options/entity/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/global/pagination/pagination.module';\n\n@Module({\n  imports: [\n    UserModule,\n    TagsModule,\n    PaginationModule,\n    TypeOrmModule.forFeature([PostEntity, MetaOption]),\n  ],\n  controllers: [PostsController],\n  providers: [PostsService],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userServices: UserService, tagsService: TagsService, postRepository: Repository, metaOptionsRepository: Repository, paginationService: PaginationService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userServices\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationService\n                                                  \n                                                        \n                                                                        PaginationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:155\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption as MetaOptionRepository } from 'src/meta-options/entity/meta-option.entity';\nimport { Post, Post as PostRepository } from './entity/post.entity';\nimport { TagsService } from 'src/tags/tags.service';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsQueryDto } from './dtos/get-posts.dto';\nimport { PaginationService } from 'src/global/pagination/pagination.service';\nimport { Paginated } from 'src/global/pagination/interface/paginated.interface';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /**\n     * Repositories Injections\n     */\n\n    // injecting user service (making user of another service (a single dependency injection))\n    private userServices: UserService,\n\n    private tagsService: TagsService,\n\n    /**\n     * Repositories Injections\n     */\n    @InjectRepository(PostRepository)\n    private postRepository: Repository,\n\n    @InjectRepository(MetaOptionRepository)\n    private metaOptionsRepository: Repository,\n\n    // injecting pagination service\n    private paginationService: PaginationService,\n  ) {}\n\n  public async create({\n    createPost,\n    authorId,\n  }: {\n    createPost: CreatePostDto;\n    authorId: number;\n  }) {\n    const author = await this.userServices.findOneById({\n      id: authorId,\n    });\n\n    if (!author) {\n      throw new HttpException('Author not found', HttpStatus.NOT_FOUND);\n    }\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: createPost.tags,\n    });\n\n    if (!tags.length || tags.length === 0) {\n      throw new HttpException('Tags not found', HttpStatus.NOT_FOUND, {\n        cause: 'Tags not found',\n        description: 'Provide a valid tags to create',\n      });\n    }\n\n    const normalizedSlug = createPost.slug.toLowerCase();\n    const existingSlug = await this.postRepository.findOne({\n      where: {\n        slug: normalizedSlug,\n      },\n    });\n\n    if (existingSlug) {\n      throw new HttpException('Slug already exists', HttpStatus.CONFLICT);\n    }\n\n    try {\n      const post = await this.postRepository.create({\n        ...createPost,\n        author: author,\n        tags: tags,\n        slug: normalizedSlug,\n      });\n\n      await this.postRepository.save(post);\n\n      return post;\n    } catch (error: any) {\n      throw new HttpException(\n        `Error while creating post`,\n        HttpStatus.BAD_REQUEST,\n        {\n          cause: error.message,\n          description: String(error),\n        },\n      );\n    }\n  }\n\n  public async update({ updatePost }: { updatePost: PatchPostDto }) {\n    // find the tags\n\n    const tags = await this.tagsService.findMultipleTags({\n      tags: updatePost.tags,\n    });\n\n    if (!(tags.length > 0)) {\n      throw new HttpException('Tags not found', HttpStatus.NOT_FOUND, {\n        cause: 'Tags not found',\n        description: 'Provide a valid tags to update',\n      });\n    }\n\n    const post = await this.postRepository.findOneBy({ id: updatePost.id });\n\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    }\n\n    post.title = updatePost.title ?? post.title;\n    post.postType = updatePost.postType ?? post.postType;\n    post.slug = updatePost.slug ?? post.slug;\n    post.status = updatePost.status ?? post.status;\n    post.content = updatePost.content ?? post.content;\n    post.schema = updatePost.schema ?? post.schema;\n    post.featuredImageUrl =\n      updatePost.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishedOn = updatePost.publishedOn ?? post.publishedOn;\n    post.tags = updatePost.tags ? tags : post.tags;\n\n    const updatedPost = await this.postRepository.save(post);\n\n    return updatedPost;\n  }\n\n  public async getAllPosts({\n    userId,\n    queryParams,\n  }: {\n    userId: number;\n    queryParams: GetPostsQueryDto;\n  }): Promise> {\n    const { endDate, limit, page, startDate } = queryParams;\n\n    const posts = await this.paginationService.paginateQuery({\n      paginationQuery: {\n        limit,\n        page,\n      },\n      repository: this.postRepository,\n    });\n\n    return posts;\n  }\n\n  public async delete({ id }: { id: number }) {\n    // const post = await this.postRepository.findOneBy({ id });\n\n    // if (!post) {\n    //   throw new HttpException('Post not found', HttpStatus.NOT_FOUND);\n    // }\n\n    await this.postRepository.delete({ id });\n\n    // await this.metaOptionsRepository.delete({ id: post.metaOptions.id });\n\n    return { message: 'Post deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @IsString()\n  @IsNotEmpty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenProvider.html":{"url":"injectables/RefreshTokenProvider.html","title":"injectable - RefreshTokenProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-token.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokenProvider, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-token.provider.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRefreshToken(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-token.provider.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from 'src/config/jwt.config';\nimport { GenerateTokenProvider } from './generate-token.provider';\nimport { UserService } from 'src/user/user.service';\nimport { UserPayload } from '../guards/access-token/access-token.guard';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\n\n@Injectable()\nexport class RefreshTokenProvider {\n  constructor(\n    // injecting jwt service dependency\n    private jwtService: JwtService,\n\n    // injecting jwtConfig (environment values)\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n\n    private generateTokenProvider: GenerateTokenProvider,\n\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n  ) {}\n\n  public async getRefreshToken({ token }: { token: RefreshTokenDto }) {\n    try {\n      // verify the refresh token sent\n      const { sub } = await this.jwtService.verifyAsync\n      >(token.refreshToken, {\n        secret: this.jwtConfiguration.jwtSecret,\n        audience: this.jwtConfiguration.jwtTokenAudience,\n        issuer: this.jwtConfiguration.jwtTokenIssuer,\n      });\n      // fetch the user\n      const user = await this.userService.findOneById({ id: sub });\n\n      // generate new access and refresh tokens\n      const { accessToken, refreshToken } =\n        await this.generateTokenProvider.generateTokens({\n          user,\n        });\n\n      return { accessToken, refreshToken };\n    } catch (error: any) {\n      throw new HttpException(\n        `Invalid refresh token ${error.message}`,\n        HttpStatus.UNAUTHORIZED,\n        {\n          cause: error.message,\n          description: error,\n        },\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\"\n\nexport class SignInDto {\n    @IsNotEmpty()\n    @IsEmail()\n    email: string\n\n    @IsNotEmpty()\n    @IsString()\n    password: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/entity/tags.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                deletedDate\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entity/tags.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/entity/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'json',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n    length: 1024,\n  })\n  featuredImageUrl?: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  @CreateDateColumn({})\n  createdDate: Date;\n\n  @UpdateDateColumn({})\n  updatedDate: Date;\n\n  @DeleteDateColumn({})\n  deletedDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteTag\n                            \n                            \n                                    \n                                    \n                                    Async\n                                softDeleteTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createTag: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a tag'})@Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTag\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a tag by id'})@Delete('')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        softDeleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDeleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Soft Delete a tag by id'})@Delete('/soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { ApiOperation } from '@nestjs/swagger';\nimport { TagsService } from './tags.service';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(private tagsService: TagsService) {}\n\n  @ApiOperation({ summary: 'Create a tag' })\n  @Post('')\n  createPost(@Body() createTag: CreateTagDto) {\n    const createdTags = this.tagsService.createTag({ tag: createTag });\n    return createdTags;\n  }\n\n  @ApiOperation({ summary: 'Delete a tag by id' })\n  @Delete('')\n  async deleteTag(@Query('id', ParseIntPipe) id: number) {\n    return await this.tagsService.delete({ id });\n  }\n\n  @ApiOperation({ summary: 'Soft Delete a tag by id' })\n  @Delete('/soft-delete')\n  async softDeleteTag(@Query('id', ParseIntPipe) id: number) {\n    return await this.tagsService.softDelete({ id });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsService } from './tags.service';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './entity/tags.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Tag])],\n  controllers: [TagsController],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTags\n                            \n                            \n                                    Public\n                                    Async\n                                getTagById\n                            \n                            \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTags()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getTagById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTagById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/tags.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { In, Repository } from 'typeorm';\nimport { Tag as TagRepository } from './entity/tags.entity';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    @InjectRepository(TagRepository)\n    private tagsRepository: Repository,\n  ) {}\n\n  public async createTag({ tag }: { tag: CreateTagDto }) {\n    const existingTags = await this.tagsRepository.findOne({\n      where: { name: tag.name },\n    });\n\n    if (existingTags) {\n      throw new HttpException('Tag already exists', HttpStatus.CONFLICT);\n    }\n\n    const createdTags = await this.tagsRepository.create(tag);\n\n    await this.tagsRepository.save(createdTags);\n\n    return createdTags;\n  }\n\n  public async getAllTags() {\n    const tags = await this.tagsRepository.find({});\n\n    return tags;\n  }\n\n  public async getTagById({ id }: { id: number }) {\n    const tag = await this.tagsRepository.findOneBy({ id });\n\n    if (!tag) {\n      throw new HttpException('Tag not found', HttpStatus.NOT_FOUND);\n    }\n\n    return tag;\n  }\n\n  public async findMultipleTags({ tags }: { tags: number[] }) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags),\n      },\n    });\n\n    return results;\n  }\n\n  public async delete({ id }: { id: number }) {\n    await this.tagsRepository.delete({ id });\n\n    return { message: 'Tag deleted successfully', status: 'success', id };\n  }\n\n  public async softDelete({ id }: { id: number }) {\n    await this.tagsRepository.softDelete({ id });\n\n    return { message: 'Tag soft deleted successfully', status: 'success', id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Upload.html":{"url":"entities/Upload.html","title":"entity - Upload","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file-upload/entity/upload.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                filename\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                mime\n                            \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                size\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        mime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 128, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: FileTypes, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file-upload/entity/upload.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport enum FileTypes {\n  IMAGE = 'image',\n  VIDEO = 'video',\n  AUDIO = 'audio',\n  DOCUMENT = 'document',\n  OTHER = 'other',\n}\n\n@Entity()\nexport class Upload {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n  })\n  filename: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  path: string;\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: FileTypes,\n    default: FileTypes.IMAGE,\n  })\n  type: FileTypes;\n\n  @Column({\n    type: 'varchar',\n    length: 128,\n    nullable: false,\n  })\n  mime: string; // media types that can be uploaded (.aac or .mp4)\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  size: number;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadToAwsProvider.html":{"url":"injectables/UploadToAwsProvider.html","title":"injectable - UploadToAwsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadToAwsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file-upload/providers/upload-to-aws.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                awsFileUpload\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(awsConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/file-upload/providers/upload-to-aws.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        awsConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        awsFileUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    awsFileUpload(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file-upload/providers/upload-to-aws.provider.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/file-upload/providers/upload-to-aws.provider.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { S3 } from 'aws-sdk';\nimport awsConfig from 'src/config/aws.config';\nimport * as path from 'path';\nimport { v4 as uuid4 } from 'uuid';\n\n@Injectable()\nexport class UploadToAwsProvider {\n  constructor(\n    @Inject(awsConfig.KEY)\n    private awsConfiguration: ConfigType,\n  ) {}\n\n  private generateFileName({ file }: { file: Express.Multer.File }) {\n    const id = uuid4();\n    const filename = file.originalname;\n    const extension = path.extname(filename);\n    const fileNameWithoutSpace = filename\n      .split('.')[0]\n      .replace(/\\s/g, '')\n      .trim();\n    const timestamp = new Date().toISOString().replace(/:/g, '-').trim();\n\n    return `${id}-${fileNameWithoutSpace}-${timestamp}${extension}`;\n  }\n\n  public async awsFileUpload({ file }: { file: Express.Multer.File }) {\n    // this.configService.get('appConfig.awsBucketName')\n\n    const s3 = new S3({\n      accessKeyId: this.awsConfiguration.awsAccessKey,\n      secretAccessKey: this.awsConfiguration.awsSecretAccessKey,\n      region: this.awsConfiguration.awsRegion,\n    });\n\n    const params: S3.Types.PutObjectRequest = {\n      Bucket: this.awsConfiguration.awsBucketName,\n      Key: this.generateFileName({ file }),\n      Body: file.buffer,\n      ContentType: file.mimetype,\n    };\n\n    try {\n      const uploadResult = await s3.upload(params).promise();\n      console.log({ uploadResult });\n\n      return uploadResult.Key;\n    } catch (error: any) {\n      throw new HttpException(\n        `Failed to upload image: ${error.message}`,\n        HttpStatus.BAD_REQUEST,\n        {\n          cause: error.message,\n          description: error.stack,\n        },\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 60, nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, posts => posts.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Post } from 'src/posts/entity/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn({})\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    unique: true,\n    nullable: false,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 60,\n    nullable: true, // this is done because we are using google auth\n  })\n  @Exclude()\n  password?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n  })\n@Exclude()\n  googleId?: string;\n\n  @OneToMany(() => Post, (posts) => posts.author) // first argument is the one we want to setup a relationship with, second argument is the what references the relationship\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create users', description: 'Create multiple users'})@Auth(AuthType.BEARER)@Post('/create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new user', description: 'Create a new user for the application'})@HttpCode(HttpStatus.CREATED)@Auth(AuthType.NONE)@UseInterceptors(ClassSerializerInterceptor)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all users', description: 'Get all users with optional pagination'})@ApiResponse({status: 200, description: 'All users', type: CreateUserDto})@ApiQuery({name: 'limit', type: Number, required: false, description: 'Limit the number of returned results', example: 10})@ApiQuery({name: 'page', type: Number, required: false, description: 'The position of the number that you want the api to return', example: 1})@Get('/:id?')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n  UseGuards,\n  SetMetadata,\n  HttpCode,\n  HttpStatus,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-user.dto';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { Auth, AuthType } from 'src/auth/decorators/auth.decorator';\n\n@Controller('users')\n@ApiTags('Users') // with the updated version of @nestjs/swagger there is no need to use @ApiTags\nexport class UserController {\n  /**\n   * Final Endpoint - /users/id?limit=10&page=1\n   * Parama id - optional, convert to integer, cannot have a default value\n   * Query limit - integer, default 10\n   * Query page - integer, default value 1\n   * ==> USE CASES\n   * /users/ -> return all users with default pagination\n   * /users/1223 -> returns one user whos id is 1234\n   * /users?limit=10&page=2 -> return page 2 with limit of pagination 10\n   */\n\n  constructor(private readonly userService: UserService) {}\n\n  @ApiOperation({\n    summary: 'Get all users',\n    description: 'Get all users with optional pagination',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'All users',\n    type: CreateUserDto,\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: Number,\n    required: false,\n    description: 'Limit the number of returned results',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    required: false,\n    description: 'The position of the number that you want the api to return',\n    example: 1,\n  })\n  @Get('/:id?')\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    // console.log(getUserParamDto);\n    // console.log(`Limit: ${limit}, Page: ${page}`);\n\n    const findAll = this.userService.findAll({\n      page,\n      limit,\n      userParamsDTO: getUserParamDto,\n    });\n\n    return findAll;\n  }\n\n  @ApiOperation({\n    summary: 'Create a new user',\n    description: 'Create a new user for the application',\n  })\n  @HttpCode(HttpStatus.CREATED)\n  @Auth(AuthType.NONE)\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    const createUser = this.userService.createUser({ user: createUserDto });\n    return createUser;\n  }\n\n  @ApiOperation({\n    summary: 'Create users',\n    description: 'Create multiple users',\n  })\n  // @UseGuards(AccessTokenGuard)\n  @Auth(AuthType.BEARER)\n  @Post('/create-many')\n  public createManyUsers(@Body() createUsersDto: CreateManyUsersDto) {\n    console.log('hitting it');\n    // const createUsers = this.userService.createMany({ users: createUsersDto });\n    // return createUsers;\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n    // return 'You sent a patch request to users endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCreateMany.html":{"url":"injectables/UserCreateMany.html","title":"injectable - UserCreateMany","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCreateMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-create-many.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-create-many.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user-create-many.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { DataSource } from 'typeorm';\nimport { User } from './entity/user.entity';\nimport { CreateManyUsersDto } from './dtos/create-many-user.dto';\n\n@Injectable()\nexport class UserCreateMany {\n  constructor(\n    // injecting datasource for typeorm transactions\n    private dataSource: DataSource,\n  ) {}\n\n  public async createMany({ users }: { users: CreateManyUsersDto }) {\n    // create query runner instance\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    // connect query runner to datasource\n    try {\n      await queryRunner.connect();\n    } catch (error: any) {\n      throw new HttpException(\n        'Database connection failed',\n        HttpStatus.REQUEST_TIMEOUT,\n        {\n          cause: error.message,\n          description: String(error),\n        },\n      );\n    }\n\n    // start transaction\n    try {\n      await queryRunner.startTransaction();\n    } catch (error: any) {\n      throw new HttpException(\n        'Failed to start QueryRunner Transaction',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n        {\n          cause: error.message,\n          description: String(error),\n        },\n      );\n    }\n\n    let newUser: User[] = [];\n    try {\n      // if successful commit the transaction\n      for (let user of users.users) {\n        const newUserInstance = queryRunner.manager.create(User, user); // entity and object\n        const savedNewUserInstance =\n          await queryRunner.manager.save(newUserInstance); // save entity to the database\n\n        newUser.push(savedNewUserInstance); // keeping track of the users we have created\n      }\n\n      await queryRunner.commitTransaction();\n    } catch (error: any) {\n      // if failed rollback transaction\n      await queryRunner.rollbackTransaction();\n\n      throw new HttpException('Transaction Failed', HttpStatus.BAD_REQUEST, {\n        cause: error.message,\n        description: String(error),\n      });\n    } finally {\n      // release connection\n      try {\n        await queryRunner.release();\n      } catch (error: any) {\n        throw new HttpException(\n          'Failed to release QueryRunner connection',\n          HttpStatus.INTERNAL_SERVER_ERROR,\n          {\n            cause: error.message,\n            description: String(error),\n          },\n        );\n      }\n    }\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nUserCreateMany\n\nUserCreateMany\n\nUserModule -->\n\nUserCreateMany->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            UserCreateMany\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entity/user.entity';\nimport { ConfigModule, ConfigType } from '@nestjs/config';\nimport { UserCreateMany } from './user-create-many';\nimport { CreateUserProvider } from './provider/create-user.provider';\nimport profileConfig from './config/profile.config';\nimport jwtConfig from 'src/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { APP_GUARD } from '@nestjs/core';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule), // for dependency injection (circular dependency injection)\n    TypeOrmModule.forFeature([User]), // for repository (entity) injection\n    ConfigModule.forFeature(profileConfig),\n    // ConfigModule.forFeature(jwtConfig),\n    // JwtModule.registerAsync({\n    //   imports: [ConfigModule.forFeature(jwtConfig)],\n    //   useFactory: async (jwtConfiguration: ConfigType) => ({\n    //     secret: jwtConfiguration.jwtSecret,\n    //     signOptions: {\n    //       audience: jwtConfiguration.jwtTokenAudience,\n    //       issuer: jwtConfiguration.jwtTokenIssuer,\n    //       expiresIn: jwtConfiguration.jwtTokenExpiration,\n    //     },\n    //   }),\n    //   inject: [jwtConfig.KEY],\n    // }),\n  ],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    UserCreateMany,\n    CreateUserProvider,\n    // {\n    //   provide: APP_GUARD,\n    //   useClass: AccessTokenGuard\n    // }, // setting a guard globally (this protect the entire application, everywhere the userModule is been imported)\n  ],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    Public\n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findUserByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository, configService: ConfigService, profileConfiguration: ConfigType<>, usersCreateMany: UserCreateMany, createUserProvider: CreateUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateMany\n                                                  \n                                                        \n                                                                        UserCreateMany\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByGoogleId(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/auth.service';\nimport { DataSource, Repository } from 'typeorm';\nimport { User } from './entity/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from './config/profile.config';\nimport { UserCreateMany } from './user-create-many';\nimport { CreateManyUsersDto } from './dtos/create-many-user.dto';\nimport { CreateUserProvider } from './provider/create-user.provider';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    // injecting a service dependency (circular dependency injection)\n    @Inject(forwardRef(() => AuthService))\n    private authService: AuthService,\n\n    // injecting user service repository dependency\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    // injecting environment variables\n    private configService: ConfigService,\n\n    // injecting module specific configuration dependencies (environment variables)\n    @Inject(profileConfig.KEY)\n    private profileConfiguration: ConfigType,\n\n    private usersCreateMany: UserCreateMany,\n\n    private createUserProvider: CreateUserProvider,\n  ) {}\n\n  public async createUser({ user }: { user: CreateUserDto }): Promise {\n    return await this.createUserProvider.createUser({ user });\n  }\n\n  public findAll({\n    userParamsDTO,\n    limit,\n    page,\n  }: {\n    userParamsDTO: GetUsersParamDto;\n    limit: number;\n    page: number;\n  }) {\n    const environment = this.configService.get('S3_BUCKET');\n    console.log(`Environment: ${environment}`);\n\n    console.log('NODE_ENV: ', process.env.NODE_ENV);\n\n    console.log('Profile: ', this.profileConfiguration);\n\n    throw new HttpException(\n      'Api endpoint does not exist',\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        description: 'Occurred because the API endpoint was deprecated',\n        cause: 'Api endpoint does not exist',\n      },\n    );\n  }\n\n  public async findOneById({ id }: { id: number }) {\n    const user = await this.userRepository.findOneBy({ id });\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    return user;\n  }\n\n  public async findUserByEmail({ email }: { email: string }) {\n    try {\n      const user = await this.userRepository.findOneBy({ email });\n\n      if (!user) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n\n      return user;\n    } catch (error: any) {\n      throw new RequestTimeoutException(`Timeout occurred: ${error.message}`);\n    }\n  }\n\n  public async findUserByGoogleId({ googleId }: { googleId: string }) {\n    try {\n      const user = await this.userRepository.findOneBy({ googleId });\n\n      if (!user) {\n        // throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n        return null; // return null if user not found, instead of throwing an exception\n      }\n\n      return user;\n    } catch (error: any) {\n      throw new RequestTimeoutException(`Timeout occurred: ${error.message}`);\n    }\n  }\n\n  public async createMany({ users }: { users: CreateManyUsersDto }) {\n    return await this.usersCreateMany.createMany({ users });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/auth/decorators/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/guards/access-token/access-token.guard.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/guards/access-token/access-token.guard.ts\n            \n            type alias\n            UserPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-token.provider.ts\n            \n            injectable\n            GenerateTokenProvider\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-token.provider.ts\n            \n            injectable\n            RefreshTokenProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/file-upload/entity/upload.entity.ts\n            \n            entity\n            Upload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/file-upload/file-upload.controller.ts\n            \n            controller\n            FileUploadController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/file-upload/file-upload.service.ts\n            \n            injectable\n            FileUploadService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/file-upload/providers/upload-to-aws.provider.ts\n            \n            injectable\n            UploadToAwsProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/global/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/global/pagination/dto/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/global/pagination/interface/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/global/pagination/pagination.service.ts\n            \n            injectable\n            PaginationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-meta-options.dto.ts\n            \n            class\n            CreateMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/entity/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsQueryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/entity/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/entity/tags.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tags/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/dtos/create-many-user.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/provider/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user-create-many.ts\n            \n            injectable\n            UserCreateMany\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.4.15\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/multer : ^1.4.12\n        \n            aws-sdk : 2.1643.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ejs : ^3.1.10\n        \n            google-auth-library : ^9.15.0\n        \n            joi : ^17.13.3\n        \n            nodemailer : ^6.9.16\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^11.0.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth.decorator.ts)\n                        \n                        \n                            FileTypes   (src/.../upload.entity.ts)\n                        \n                        \n                            PostStatus   (src/.../posts.enums.ts)\n                        \n                        \n                            PostTypes   (src/.../posts.enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 BEARER\n                            \n                        \n                        \n                            \n                                Value : bearer\n                            \n                        \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n            \n        \n\n    src/file-upload/entity/upload.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        FileTypes\n                    \n                \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : image\n                            \n                        \n                        \n                            \n                                 VIDEO\n                            \n                        \n                        \n                            \n                                Value : video\n                            \n                        \n                        \n                            \n                                 AUDIO\n                            \n                        \n                        \n                            \n                                Value : audio\n                            \n                        \n                        \n                            \n                                 DOCUMENT\n                            \n                        \n                        \n                            \n                                Value : document\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n            \n        \n\n    src/posts/enums/posts.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PostTypes\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FileUploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_FileUploadModule\n\n\n\ncluster_FileUploadModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nFileUploadModule\n\nFileUploadModule\n\nAppModule -->\n\nFileUploadModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationService \n\nPaginationService \n\nPaginationService  -->\n\nPaginationModule->PaginationService \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUserModule\n\nUserModule\n\nPostsModule -->\n\nUserModule->PostsModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nPaginationModule -->\n\nPaginationService->PaginationModule\n\n\n\nAppModule -->\n\nPaginationService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokenProvider\n\nGenerateTokenProvider\n\nAuthModule -->\n\nGenerateTokenProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokenProvider\n\nRefreshTokenProvider\n\nAuthModule -->\n\nRefreshTokenProvider->AuthModule\n\n\n\n\n\nFileUploadService\n\nFileUploadService\n\nFileUploadModule -->\n\nFileUploadService->FileUploadModule\n\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\nFileUploadModule -->\n\nUploadToAwsProvider->FileUploadModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nUserCreateMany\n\nUserCreateMany\n\nUserModule -->\n\nUserCreateMany->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    18 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserPayload   (src/.../access-token.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/guards/access-token/access-token.guard.ts\n    \n    \n        \n            \n                \n                    \n                    UserPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.decorator.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../access-token.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof UserPayload | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: UserPayload = request[REQUEST_USER_KEY];\n\n    if (field) {\n      return user[field];\n    } else {\n      return user;\n    }\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) => SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/auth/guards/access-token/access-token.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
